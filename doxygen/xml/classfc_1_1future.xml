<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classfc_1_1future" kind="class" language="C++" prot="public">
    <compoundname>fc::future</compoundname>
    <includes refid="future_8hpp" local="no">future.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classfc_1_1future_1adb314a48b19f4325e5e69e8a60091fce" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class thread</definition>
        <argsstring></argsstring>
        <name>thread</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/future.hpp" line="278" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="278" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classfc_1_1future_1ae6df8d3d859c2675867bffbae2caa488" prot="private" static="no" mutable="no">
        <type><ref refid="classfc_1_1promise" kindref="compound">promise</ref>&lt; T &gt;::ptr</type>
        <definition>promise&lt;T&gt;::ptr fc::future&lt; T &gt;::m_prom</definition>
        <argsstring></argsstring>
        <name>m_prom</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/future.hpp" line="279" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="279" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classfc_1_1future_1a834f94da051b28dd75301d35b193bbdd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>fc::future&lt; T &gt;::future</definition>
        <argsstring>(const typename promise&lt; T &gt;::ptr &amp;p)</argsstring>
        <name>future</name>
        <param>
          <type>const typename <ref refid="classfc_1_1promise" kindref="compound">promise</ref>&lt; T &gt;::ptr &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/future.hpp" line="213" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="213" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1future_1ae5f1cc4e808f6117652b9c8adddf36dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>fc::future&lt; T &gt;::future</definition>
        <argsstring>(typename promise&lt; T &gt;::ptr &amp;&amp;p)</argsstring>
        <name>future</name>
        <param>
          <type>typename <ref refid="classfc_1_1promise" kindref="compound">promise</ref>&lt; T &gt;::ptr &amp;&amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/future.hpp" line="214" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="214" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1future_1a0240dba87fd1b298791a54a6d8e5c38d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>fc::future&lt; T &gt;::future</definition>
        <argsstring>(const future&lt; T &gt; &amp;f)</argsstring>
        <name>future</name>
        <param>
          <type>const <ref refid="classfc_1_1future" kindref="compound">future</ref>&lt; T &gt; &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/future.hpp" line="215" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="215" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1future_1a488499dd0be28e4f8140da6d0f341f97" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>fc::future&lt; T &gt;::future</definition>
        <argsstring>()</argsstring>
        <name>future</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/future.hpp" line="216" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="216" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1future_1acdd34f7904a663e8771bdc5edd4022d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfc_1_1future" kindref="compound">future</ref> &amp;</type>
        <definition>future&amp; fc::future&lt; T &gt;::operator=</definition>
        <argsstring>(future&lt; T &gt; &amp;&amp;f)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classfc_1_1future" kindref="compound">future</ref>&lt; T &gt; &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/future.hpp" line="218" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="218" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1future_1aee82545083a56b226df4fc8d3a0031b8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>fc::future&lt; T &gt;::operator const T &amp;</definition>
        <argsstring>() const</argsstring>
        <name>operator const T &amp;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/future.hpp" line="223" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="223" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1future_1aec87f683bc6cbb40e23e2963e9bb25e3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; fc::future&lt; T &gt;::wait</definition>
        <argsstring>(const microseconds &amp;timeout=microseconds::maximum()) const</argsstring>
        <name>wait</name>
        <param>
          <type>const <ref refid="classfc_1_1microseconds" kindref="compound">microseconds</ref> &amp;</type>
          <declname>timeout</declname>
          <defval><ref refid="classfc_1_1microseconds_1a83490e326e43e94a2b9f2d23b5645455" kindref="member">microseconds::maximum</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="classfc_1_1future_1ad57a5ed8dccac8b2b978de9e48037596" kindref="member">valid()</ref> </para></simplesect>
<simplesect kind="post"><para><ref refid="classfc_1_1future_1a4f2218e001fc131ec65b4028ba67142e" kindref="member">ready()</ref> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/future.hpp" line="228" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="228" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1future_1aa0e3c8ee12dcec5a76e2f2f21bbf5581" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; fc::future&lt; T &gt;::wait_until</definition>
        <argsstring>(const time_point &amp;tp) const</argsstring>
        <name>wait_until</name>
        <param>
          <type>const <ref refid="classfc_1_1time__point" kindref="compound">time_point</ref> &amp;</type>
          <declname>tp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="classfc_1_1future_1ad57a5ed8dccac8b2b978de9e48037596" kindref="member">valid()</ref> </para></simplesect>
<simplesect kind="post"><para><ref refid="classfc_1_1future_1a4f2218e001fc131ec65b4028ba67142e" kindref="member">ready()</ref> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/future.hpp" line="235" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="235" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1future_1ad57a5ed8dccac8b2b978de9e48037596" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::future&lt; T &gt;::valid</definition>
        <argsstring>() const</argsstring>
        <name>valid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/future.hpp" line="240" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="240" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1future_1a4f2218e001fc131ec65b4028ba67142e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::future&lt; T &gt;::ready</definition>
        <argsstring>() const</argsstring>
        <name>ready</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="classfc_1_1future_1ad57a5ed8dccac8b2b978de9e48037596" kindref="member">valid()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/future.hpp" line="243" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="243" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1future_1a7e7485649f8ea6782b45f9fe98cfd8eb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::future&lt; T &gt;::error</definition>
        <argsstring>() const</argsstring>
        <name>error</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="classfc_1_1future_1ad57a5ed8dccac8b2b978de9e48037596" kindref="member">valid()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/future.hpp" line="246" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="246" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1future_1afd752ebb8d584d14c9136ffad5a25580" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void fc::future&lt; T &gt;::cancel</definition>
        <argsstring>(const char *reason FC_CANCELATION_REASON_DEFAULT_ARG) const</argsstring>
        <name>cancel</name>
        <param>
          <type>const char *reason</type>
          <declname>FC_CANCELATION_REASON_DEFAULT_ARG</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/future.hpp" line="248" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="248" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1future_1aee6ff5af6337372bab82237934756743" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::future&lt; T &gt;::canceled</definition>
        <argsstring>() const</argsstring>
        <name>canceled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/future.hpp" line="249" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="249" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1future_1a866b7e95d66dca5d521d04171f99b92f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void fc::future&lt; T &gt;::cancel_and_wait</definition>
        <argsstring>(const char *reason FC_CANCELATION_REASON_DEFAULT_ARG)</argsstring>
        <name>cancel_and_wait</name>
        <param>
          <type>const char *reason</type>
          <declname>FC_CANCELATION_REASON_DEFAULT_ARG</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/future.hpp" line="251" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="251" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1future_1a793d3473173308dc560b3eba7cf65c19" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CompletionHandler</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::future&lt; T &gt;::on_complete</definition>
        <argsstring>(CompletionHandler &amp;&amp;c)</argsstring>
        <name>on_complete</name>
        <param>
          <type>CompletionHandler &amp;&amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="classfc_1_1future_1ad57a5ed8dccac8b2b978de9e48037596" kindref="member">valid()</ref></para></simplesect>
The given completion handler will be called from some arbitrary thread and should not &apos;block&apos;. Generally it should post an event or start a new async operation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/future.hpp" line="274" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="274" bodyend="276"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>a placeholder for the result of an asynchronous operation. </para>    </briefdescription>
    <detaileddescription>
<para>By calling <ref refid="classfc_1_1future_1aec87f683bc6cbb40e23e2963e9bb25e3" kindref="member">future&lt;T&gt;::wait()</ref> you will block the current fiber until the asynchronous operation completes.</para><para>If you would like to use an asynchronous interface instead of the synchronous &apos;wait&apos; method you could specify a CompletionHandler which is a method that takes two parameters, a const reference to the value and an exception_ptr. If the exception_ptr is set, the value reference is invalid and accessing it is &apos;undefined&apos;.</para><para>Promises have pointer semantics, futures have reference semantics that contain a shared pointer to a promise. </para>    </detaileddescription>
    <location file="libraries/fc/include/fc/thread/future.hpp" line="211" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="211" bodyend="280"/>
    <listofallmembers>
      <member refid="classfc_1_1future_1afd752ebb8d584d14c9136ffad5a25580" prot="public" virt="non-virtual"><scope>fc::future</scope><name>cancel</name></member>
      <member refid="classfc_1_1future_1a866b7e95d66dca5d521d04171f99b92f" prot="public" virt="non-virtual"><scope>fc::future</scope><name>cancel_and_wait</name></member>
      <member refid="classfc_1_1future_1aee6ff5af6337372bab82237934756743" prot="public" virt="non-virtual"><scope>fc::future</scope><name>canceled</name></member>
      <member refid="classfc_1_1future_1a7e7485649f8ea6782b45f9fe98cfd8eb" prot="public" virt="non-virtual"><scope>fc::future</scope><name>error</name></member>
      <member refid="classfc_1_1future_1a834f94da051b28dd75301d35b193bbdd" prot="public" virt="non-virtual"><scope>fc::future</scope><name>future</name></member>
      <member refid="classfc_1_1future_1ae5f1cc4e808f6117652b9c8adddf36dc" prot="public" virt="non-virtual"><scope>fc::future</scope><name>future</name></member>
      <member refid="classfc_1_1future_1a0240dba87fd1b298791a54a6d8e5c38d" prot="public" virt="non-virtual"><scope>fc::future</scope><name>future</name></member>
      <member refid="classfc_1_1future_1a488499dd0be28e4f8140da6d0f341f97" prot="public" virt="non-virtual"><scope>fc::future</scope><name>future</name></member>
      <member refid="classfc_1_1future_1ae6df8d3d859c2675867bffbae2caa488" prot="private" virt="non-virtual"><scope>fc::future</scope><name>m_prom</name></member>
      <member refid="classfc_1_1future_1a793d3473173308dc560b3eba7cf65c19" prot="public" virt="non-virtual"><scope>fc::future</scope><name>on_complete</name></member>
      <member refid="classfc_1_1future_1aee82545083a56b226df4fc8d3a0031b8" prot="public" virt="non-virtual"><scope>fc::future</scope><name>operator const T &amp;</name></member>
      <member refid="classfc_1_1future_1acdd34f7904a663e8771bdc5edd4022d7" prot="public" virt="non-virtual"><scope>fc::future</scope><name>operator=</name></member>
      <member refid="classfc_1_1future_1a4f2218e001fc131ec65b4028ba67142e" prot="public" virt="non-virtual"><scope>fc::future</scope><name>ready</name></member>
      <member refid="classfc_1_1future_1adb314a48b19f4325e5e69e8a60091fce" prot="private" virt="non-virtual"><scope>fc::future</scope><name>thread</name></member>
      <member refid="classfc_1_1future_1ad57a5ed8dccac8b2b978de9e48037596" prot="public" virt="non-virtual"><scope>fc::future</scope><name>valid</name></member>
      <member refid="classfc_1_1future_1aec87f683bc6cbb40e23e2963e9bb25e3" prot="public" virt="non-virtual"><scope>fc::future</scope><name>wait</name></member>
      <member refid="classfc_1_1future_1aa0e3c8ee12dcec5a76e2f2f21bbf5581" prot="public" virt="non-virtual"><scope>fc::future</scope><name>wait_until</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
