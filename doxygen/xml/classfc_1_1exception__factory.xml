<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classfc_1_1exception__factory" kind="class" language="C++" prot="public">
    <compoundname>fc::exception_factory</compoundname>
    <includes refid="exception_8hpp" local="no">exception.hpp</includes>
    <innerclass refid="structfc_1_1exception__factory_1_1base__exception__builder" prot="public">fc::exception_factory::base_exception_builder</innerclass>
    <innerclass refid="structfc_1_1exception__factory_1_1exception__builder" prot="public">fc::exception_factory::exception_builder</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classfc_1_1exception__factory_1a2d026c2f88a4b66533e606cdb7d4225c" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; int64_t, <ref refid="structfc_1_1exception__factory_1_1base__exception__builder" kindref="compound">base_exception_builder</ref> * &gt;</type>
        <definition>std::unordered_map&lt;int64_t,base_exception_builder*&gt; fc::exception_factory::_registered_exceptions</definition>
        <argsstring></argsstring>
        <name>_registered_exceptions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="213" column="1" bodyfile="libraries/fc/include/fc/exception/exception.hpp" bodystart="213" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classfc_1_1exception__factory_1a59581ba21d7c93104a43a0f5fed3cc9d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::exception_factory::register_exception</definition>
        <argsstring>()</argsstring>
        <name>register_exception</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="195" column="1" bodyfile="libraries/fc/include/fc/exception/exception.hpp" bodystart="195" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1exception__factory_1a669edd5fb3e5d274a8ddf1419b49a6c1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::exception_factory::rethrow</definition>
        <argsstring>(const exception &amp;e) const</argsstring>
        <name>rethrow</name>
        <param>
          <type>const <ref refid="classfc_1_1exception" kindref="compound">exception</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="204" column="1" bodyfile="libraries/fc/src/exception.cpp" bodystart="250" bodyend="256"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classfc_1_1exception__factory_1a98c69539dde9e427e2b68c3a77c6e03c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfc_1_1exception__factory" kindref="compound">exception_factory</ref> &amp;</type>
        <definition>static exception_factory&amp; fc::exception_factory::instance</definition>
        <argsstring>()</argsstring>
        <name>instance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="206" column="1" bodyfile="libraries/fc/include/fc/exception/exception.hpp" bodystart="206" bodyend="210"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/fc/include/fc/exception/exception.hpp" line="178" column="1" bodyfile="libraries/fc/include/fc/exception/exception.hpp" bodystart="177" bodyend="214"/>
    <listofallmembers>
      <member refid="classfc_1_1exception__factory_1a2d026c2f88a4b66533e606cdb7d4225c" prot="private" virt="non-virtual"><scope>fc::exception_factory</scope><name>_registered_exceptions</name></member>
      <member refid="classfc_1_1exception__factory_1a98c69539dde9e427e2b68c3a77c6e03c" prot="public" virt="non-virtual"><scope>fc::exception_factory</scope><name>instance</name></member>
      <member refid="classfc_1_1exception__factory_1a59581ba21d7c93104a43a0f5fed3cc9d" prot="public" virt="non-virtual"><scope>fc::exception_factory</scope><name>register_exception</name></member>
      <member refid="classfc_1_1exception__factory_1a669edd5fb3e5d274a8ddf1419b49a6c1" prot="public" virt="non-virtual"><scope>fc::exception_factory</scope><name>rethrow</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
