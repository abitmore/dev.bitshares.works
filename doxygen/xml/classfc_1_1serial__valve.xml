<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classfc_1_1serial__valve" kind="class" language="C++" prot="public">
    <compoundname>fc::serial_valve</compoundname>
    <includes refid="parallel_8hpp" local="no">parallel.hpp</includes>
    <innerclass refid="classfc_1_1serial__valve_1_1ticket__guard" prot="private">fc::serial_valve::ticket_guard</innerclass>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classfc_1_1serial__valve_1a26b305e8b316cb61af44d9e3cd802e99" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class ticket_guard</definition>
        <argsstring></argsstring>
        <name>ticket_guard</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/parallel.hpp" line="62" column="1" bodyfile="libraries/fc/include/fc/thread/parallel.hpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classfc_1_1serial__valve_1aa4c0cb2e88601fe2fd66e9168828abab" prot="private" static="no" mutable="no">
        <type>boost::atomic&lt; <ref refid="classfc_1_1future" kindref="compound">future</ref>&lt; void &gt; * &gt;</type>
        <definition>boost::atomic&lt;future&lt;void&gt;*&gt; fc::serial_valve::latch</definition>
        <argsstring></argsstring>
        <name>latch</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/parallel.hpp" line="63" column="1" bodyfile="libraries/fc/include/fc/thread/parallel.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classfc_1_1serial__valve_1ac04951f485b67146acba8e33c4cc3c34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::serial_valve::serial_valve</definition>
        <argsstring>()</argsstring>
        <name>serial_valve</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/parallel.hpp" line="66" column="1" bodyfile="libraries/fc/src/thread/parallel.cpp" bodystart="191" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1serial__valve_1a29c777e129d94852a4f2ca7f9f2ea797" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::serial_valve::~serial_valve</definition>
        <argsstring>()</argsstring>
        <name>~serial_valve</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/parallel.hpp" line="67" column="1" bodyfile="libraries/fc/src/thread/parallel.cpp" bodystart="196" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1serial__valve_1ac38a48067e64a2c769a38e4219a70961" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Functor1</type>
          </param>
          <param>
            <type>typename Functor2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto fc::serial_valve::do_serial</definition>
        <argsstring>(const Functor1 &amp;f1, const Functor2 &amp;f2) -&gt; decltype(f2())</argsstring>
        <name>do_serial</name>
        <param>
          <type>const Functor1 &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>const Functor2 &amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Executes f1() then f2(). For any two calls do_serial(f1,f2) and do_serial(f1&apos;,f2&apos;) where do_serial(f1,f2) is invoked before do_serial(f1&apos;,f2&apos;), it is guaranteed that f2&apos; will be executed after f2 has completed. Failure of either function counts as completion of both. If f1 throws then f2 will not be invoked.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f1</parametername>
</parameternamelist>
<parameterdescription>
<para>a functor to invoke </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f2</parametername>
</parameternamelist>
<parameterdescription>
<para>a functor to invoke </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the return value of f2() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/parallel.hpp" line="81" column="1" bodyfile="libraries/fc/include/fc/thread/parallel.hpp" bodystart="81" bodyend="87"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/fc/include/fc/thread/parallel.hpp" line="50" column="1" bodyfile="libraries/fc/include/fc/thread/parallel.hpp" bodystart="50" bodyend="88"/>
    <listofallmembers>
      <member refid="classfc_1_1serial__valve_1ac38a48067e64a2c769a38e4219a70961" prot="public" virt="non-virtual"><scope>fc::serial_valve</scope><name>do_serial</name></member>
      <member refid="classfc_1_1serial__valve_1aa4c0cb2e88601fe2fd66e9168828abab" prot="private" virt="non-virtual"><scope>fc::serial_valve</scope><name>latch</name></member>
      <member refid="classfc_1_1serial__valve_1ac04951f485b67146acba8e33c4cc3c34" prot="public" virt="non-virtual"><scope>fc::serial_valve</scope><name>serial_valve</name></member>
      <member refid="classfc_1_1serial__valve_1a26b305e8b316cb61af44d9e3cd802e99" prot="private" virt="non-virtual"><scope>fc::serial_valve</scope><name>ticket_guard</name></member>
      <member refid="classfc_1_1serial__valve_1a29c777e129d94852a4f2ca7f9f2ea797" prot="public" virt="non-virtual"><scope>fc::serial_valve</scope><name>~serial_valve</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
