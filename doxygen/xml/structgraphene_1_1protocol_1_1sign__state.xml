<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structgraphene_1_1protocol_1_1sign__state" kind="struct" language="C++" prot="public">
    <compoundname>graphene::protocol::sign_state</compoundname>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1sign__state_1ac4be7c9b749f88e9fa64a812265395f7" prot="public" static="no" mutable="no">
        <type><ref refid="classfc_1_1optional" kindref="compound">optional</ref>&lt; map&lt; <ref refid="classgraphene_1_1protocol_1_1address" kindref="compound">address</ref>, <ref refid="structgraphene_1_1protocol_1_1public__key__type" kindref="compound">public_key_type</ref> &gt; &gt;</type>
        <definition>optional&lt;map&lt;address,public_key_type&gt; &gt; graphene::protocol::sign_state::available_address_sigs</definition>
        <argsstring></argsstring>
        <name>available_address_sigs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/transaction.cpp" line="135" column="1" bodyfile="libraries/protocol/transaction.cpp" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1sign__state_1a922858d9706ef0416d1e06d7d1992134" prot="public" static="no" mutable="no">
        <type><ref refid="classfc_1_1optional" kindref="compound">optional</ref>&lt; map&lt; <ref refid="classgraphene_1_1protocol_1_1address" kindref="compound">address</ref>, <ref refid="structgraphene_1_1protocol_1_1public__key__type" kindref="compound">public_key_type</ref> &gt; &gt;</type>
        <definition>optional&lt;map&lt;address,public_key_type&gt; &gt; graphene::protocol::sign_state::provided_address_sigs</definition>
        <argsstring></argsstring>
        <name>provided_address_sigs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/transaction.cpp" line="136" column="1" bodyfile="libraries/protocol/transaction.cpp" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1sign__state_1a98e3fa0cb91c14c351cb9f18235e5148" prot="public" static="no" mutable="no">
        <type>const std::function&lt; const <ref refid="structgraphene_1_1protocol_1_1authority" kindref="compound">authority</ref> *(account_id_type)&gt; &amp;</type>
        <definition>const std::function&lt;const authority*(account_id_type)&gt;&amp; graphene::protocol::sign_state::get_active</definition>
        <argsstring></argsstring>
        <name>get_active</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/transaction.cpp" line="257" column="1" bodyfile="libraries/protocol/transaction.cpp" bodystart="257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1sign__state_1a0f11a00f8cae91d18e60b66f3adca50d" prot="public" static="no" mutable="no">
        <type>const std::function&lt; const <ref refid="structgraphene_1_1protocol_1_1authority" kindref="compound">authority</ref> *(account_id_type)&gt; &amp;</type>
        <definition>const std::function&lt;const authority*(account_id_type)&gt;&amp; graphene::protocol::sign_state::get_owner</definition>
        <argsstring></argsstring>
        <name>get_owner</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/transaction.cpp" line="258" column="1" bodyfile="libraries/protocol/transaction.cpp" bodystart="258" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1sign__state_1aba0af5fb0b27df5dd0d6b93039f4cc25" prot="public" static="no" mutable="no">
        <type>const bool</type>
        <definition>const bool graphene::protocol::sign_state::allow_non_immediate_owner</definition>
        <argsstring></argsstring>
        <name>allow_non_immediate_owner</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/transaction.cpp" line="260" column="1" bodyfile="libraries/protocol/transaction.cpp" bodystart="260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1sign__state_1a910ec34c59eb7a6c7ed72955a35086f9" prot="public" static="no" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t graphene::protocol::sign_state::max_recursion</definition>
        <argsstring></argsstring>
        <name>max_recursion</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/transaction.cpp" line="261" column="1" bodyfile="libraries/protocol/transaction.cpp" bodystart="261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1sign__state_1a98ebead64a7a47ca4c9bb1196c4ecf62" prot="public" static="no" mutable="no">
        <type>const flat_set&lt; <ref refid="structgraphene_1_1protocol_1_1public__key__type" kindref="compound">public_key_type</ref> &gt; &amp;</type>
        <definition>const flat_set&lt;public_key_type&gt;&amp; graphene::protocol::sign_state::available_keys</definition>
        <argsstring></argsstring>
        <name>available_keys</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/transaction.cpp" line="262" column="1" bodyfile="libraries/protocol/transaction.cpp" bodystart="262" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1sign__state_1a8c05c7e0aef447cac1c5c7f1f1e2eb8e" prot="public" static="no" mutable="no">
        <type>flat_map&lt; <ref refid="structgraphene_1_1protocol_1_1public__key__type" kindref="compound">public_key_type</ref>, bool &gt;</type>
        <definition>flat_map&lt;public_key_type,bool&gt; graphene::protocol::sign_state::provided_signatures</definition>
        <argsstring></argsstring>
        <name>provided_signatures</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/transaction.cpp" line="264" column="1" bodyfile="libraries/protocol/transaction.cpp" bodystart="264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1sign__state_1a8363fe3367ae7f4d0b05d1a0cfbe5758" prot="public" static="no" mutable="no">
        <type>flat_set&lt; account_id_type &gt;</type>
        <definition>flat_set&lt;account_id_type&gt; graphene::protocol::sign_state::approved_by</definition>
        <argsstring></argsstring>
        <name>approved_by</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/transaction.cpp" line="265" column="1" bodyfile="libraries/protocol/transaction.cpp" bodystart="265" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1sign__state_1a023fc16c56bebaf298f99d0c15557921" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::sign_state::signed_by</definition>
        <argsstring>(const public_key_type &amp;k)</argsstring>
        <name>signed_by</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1public__key__type" kindref="compound">public_key_type</ref> &amp;</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns true if we have a signature for this key or can produce a signature for this key, else returns false. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/transaction.cpp" line="122" column="1" bodyfile="libraries/protocol/transaction.cpp" bodystart="122" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1sign__state_1a02e6621849c617db7d92c13e4bc0547d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::sign_state::signed_by</definition>
        <argsstring>(const address &amp;a)</argsstring>
        <name>signed_by</name>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1address" kindref="compound">address</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/transaction.cpp" line="138" column="1" bodyfile="libraries/protocol/transaction.cpp" bodystart="138" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1sign__state_1ab59383610e2112d72f3f2582657f24f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::sign_state::check_authority</definition>
        <argsstring>(account_id_type id)</argsstring>
        <name>check_authority</name>
        <param>
          <type>account_id_type</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/transaction.cpp" line="171" column="1" bodyfile="libraries/protocol/transaction.cpp" bodystart="171" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1sign__state_1a703b402a54868eb8848e5a88525255b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::sign_state::check_authority</definition>
        <argsstring>(const authority *au, uint32_t depth=0)</argsstring>
        <name>check_authority</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1authority" kindref="compound">authority</ref> *</type>
          <declname>au</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>depth</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks to see if we have signatures of the active authorites of the accounts specified in authority or the keys specified. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/transaction.cpp" line="181" column="1" bodyfile="libraries/protocol/transaction.cpp" bodystart="181" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1sign__state_1a7c74c200def55508d8cfed0568e9f816" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::sign_state::remove_unused_signatures</definition>
        <argsstring>()</argsstring>
        <name>remove_unused_signatures</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/transaction.cpp" line="228" column="1" bodyfile="libraries/protocol/transaction.cpp" bodystart="228" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1sign__state_1a6a571e50ae4362fa2f9f788ef4498b54" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>graphene::protocol::sign_state::sign_state</definition>
        <argsstring>(const flat_set&lt; public_key_type &gt; &amp;sigs, const std::function&lt; const authority *(account_id_type)&gt; &amp;active, const std::function&lt; const authority *(account_id_type)&gt; &amp;owner, bool allow_owner, uint32_t max_recursion_depth=GRAPHENE_MAX_SIG_CHECK_DEPTH, const flat_set&lt; public_key_type &gt; &amp;keys=empty_keyset)</argsstring>
        <name>sign_state</name>
        <param>
          <type>const flat_set&lt; <ref refid="structgraphene_1_1protocol_1_1public__key__type" kindref="compound">public_key_type</ref> &gt; &amp;</type>
          <declname>sigs</declname>
        </param>
        <param>
          <type>const std::function&lt; const <ref refid="structgraphene_1_1protocol_1_1authority" kindref="compound">authority</ref> *(account_id_type)&gt; &amp;</type>
          <declname>active</declname>
        </param>
        <param>
          <type>const std::function&lt; const <ref refid="structgraphene_1_1protocol_1_1authority" kindref="compound">authority</ref> *(account_id_type)&gt; &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allow_owner</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_recursion_depth</declname>
          <defval><ref refid="protocol_2include_2graphene_2protocol_2config_8hpp_1aea0bc2216bc54371f7f54d6f6d6e4d9d" kindref="member">GRAPHENE_MAX_SIG_CHECK_DEPTH</ref></defval>
        </param>
        <param>
          <type>const flat_set&lt; <ref refid="structgraphene_1_1protocol_1_1public__key__type" kindref="compound">public_key_type</ref> &gt; &amp;</type>
          <declname>keys</declname>
          <defval><ref refid="namespacegraphene_1_1protocol_1a03369f3ca9f5b7877e32928d1bace3c5" kindref="member">empty_keyset</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/transaction.cpp" line="240" column="1" bodyfile="libraries/protocol/transaction.cpp" bodystart="240" bodyend="255"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="7282">
        <label>fc::optional&lt; map&lt; graphene::protocol::address, graphene::protocol::public_key_type &gt; &gt;</label>
        <link refid="classfc_1_1optional"/>
      </node>
      <node id="7284">
        <label>flat_set&lt; account_id_type &gt;</label>
      </node>
      <node id="7283">
        <label>flat_set&lt; graphene::protocol::public_key_type &gt;</label>
      </node>
      <node id="7281">
        <label>flat_map&lt; graphene::protocol::public_key_type, bool &gt;</label>
      </node>
      <node id="7280">
        <label>graphene::protocol::sign_state</label>
        <link refid="structgraphene_1_1protocol_1_1sign__state"/>
        <childnode refid="7281" relation="usage">
          <edgelabel>provided_signatures</edgelabel>
        </childnode>
        <childnode refid="7282" relation="usage">
          <edgelabel>provided_address_sigs</edgelabel>
          <edgelabel>available_address_sigs</edgelabel>
        </childnode>
        <childnode refid="7283" relation="usage">
          <edgelabel>available_keys</edgelabel>
        </childnode>
        <childnode refid="7284" relation="usage">
          <edgelabel>approved_by</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="libraries/protocol/transaction.cpp" line="118" column="1" bodyfile="libraries/protocol/transaction.cpp" bodystart="117" bodyend="266"/>
    <listofallmembers>
      <member refid="structgraphene_1_1protocol_1_1sign__state_1aba0af5fb0b27df5dd0d6b93039f4cc25" prot="public" virt="non-virtual"><scope>graphene::protocol::sign_state</scope><name>allow_non_immediate_owner</name></member>
      <member refid="structgraphene_1_1protocol_1_1sign__state_1a8363fe3367ae7f4d0b05d1a0cfbe5758" prot="public" virt="non-virtual"><scope>graphene::protocol::sign_state</scope><name>approved_by</name></member>
      <member refid="structgraphene_1_1protocol_1_1sign__state_1ac4be7c9b749f88e9fa64a812265395f7" prot="public" virt="non-virtual"><scope>graphene::protocol::sign_state</scope><name>available_address_sigs</name></member>
      <member refid="structgraphene_1_1protocol_1_1sign__state_1a98ebead64a7a47ca4c9bb1196c4ecf62" prot="public" virt="non-virtual"><scope>graphene::protocol::sign_state</scope><name>available_keys</name></member>
      <member refid="structgraphene_1_1protocol_1_1sign__state_1ab59383610e2112d72f3f2582657f24f8" prot="public" virt="non-virtual"><scope>graphene::protocol::sign_state</scope><name>check_authority</name></member>
      <member refid="structgraphene_1_1protocol_1_1sign__state_1a703b402a54868eb8848e5a88525255b1" prot="public" virt="non-virtual"><scope>graphene::protocol::sign_state</scope><name>check_authority</name></member>
      <member refid="structgraphene_1_1protocol_1_1sign__state_1a98e3fa0cb91c14c351cb9f18235e5148" prot="public" virt="non-virtual"><scope>graphene::protocol::sign_state</scope><name>get_active</name></member>
      <member refid="structgraphene_1_1protocol_1_1sign__state_1a0f11a00f8cae91d18e60b66f3adca50d" prot="public" virt="non-virtual"><scope>graphene::protocol::sign_state</scope><name>get_owner</name></member>
      <member refid="structgraphene_1_1protocol_1_1sign__state_1a910ec34c59eb7a6c7ed72955a35086f9" prot="public" virt="non-virtual"><scope>graphene::protocol::sign_state</scope><name>max_recursion</name></member>
      <member refid="structgraphene_1_1protocol_1_1sign__state_1a922858d9706ef0416d1e06d7d1992134" prot="public" virt="non-virtual"><scope>graphene::protocol::sign_state</scope><name>provided_address_sigs</name></member>
      <member refid="structgraphene_1_1protocol_1_1sign__state_1a8c05c7e0aef447cac1c5c7f1f1e2eb8e" prot="public" virt="non-virtual"><scope>graphene::protocol::sign_state</scope><name>provided_signatures</name></member>
      <member refid="structgraphene_1_1protocol_1_1sign__state_1a7c74c200def55508d8cfed0568e9f816" prot="public" virt="non-virtual"><scope>graphene::protocol::sign_state</scope><name>remove_unused_signatures</name></member>
      <member refid="structgraphene_1_1protocol_1_1sign__state_1a6a571e50ae4362fa2f9f788ef4498b54" prot="public" virt="non-virtual"><scope>graphene::protocol::sign_state</scope><name>sign_state</name></member>
      <member refid="structgraphene_1_1protocol_1_1sign__state_1a023fc16c56bebaf298f99d0c15557921" prot="public" virt="non-virtual"><scope>graphene::protocol::sign_state</scope><name>signed_by</name></member>
      <member refid="structgraphene_1_1protocol_1_1sign__state_1a02e6621849c617db7d92c13e4bc0547d" prot="public" virt="non-virtual"><scope>graphene::protocol::sign_state</scope><name>signed_by</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
