<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classfc_1_1fwd" kind="class" language="C++" prot="public">
    <compoundname>fc::fwd</compoundname>
    <includes refid="fwd_8hpp" local="no">fwd.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type>unsigned int</type>
        <declname>S</declname>
        <defname>S</defname>
      </param>
      <param>
        <type>typename</type>
        <declname>Align</declname>
        <defname>Align</defname>
        <defval>double</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classfc_1_1fwd_1a193fd1a22aa9d3808e1aeb1f4b0ce347" prot="private" static="no" mutable="no">
        <type>char</type>
        <definition>char fc::fwd&lt; T, S, Align &gt;::_store[S]</definition>
        <argsstring>[S]</argsstring>
        <name>_store</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/fwd.hpp" line="39" column="1" bodyfile="libraries/fc/include/fc/fwd.hpp" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classfc_1_1fwd_1ab9d81fb9b9effc4085c706922cb6b478" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>fc::fwd&lt; T, S, A &gt;::fwd</definition>
        <argsstring>(U &amp;&amp;u)</argsstring>
        <name>fwd</name>
        <param>
          <type>U &amp;&amp;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/fwd.hpp" line="12" column="1" bodyfile="libraries/fc/include/fc/fwd_impl.hpp" bodystart="64" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1fwd_1a580dd3c3e504801fbe069aee1c2fb4ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>fc::fwd&lt; T, S, A &gt;::fwd</definition>
        <argsstring>(U &amp;&amp;u, V &amp;&amp;v)</argsstring>
        <name>fwd</name>
        <param>
          <type>U &amp;&amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>V &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/fwd.hpp" line="13" column="1" bodyfile="libraries/fc/include/fc/fwd_impl.hpp" bodystart="71" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1fwd_1a6a0734e9ecd814f901dbbef049646b5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
          <param>
            <type>typename X</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>fc::fwd&lt; T, S, A &gt;::fwd</definition>
        <argsstring>(U &amp;&amp;u, V &amp;&amp;v, X &amp;&amp;, Y &amp;&amp;)</argsstring>
        <name>fwd</name>
        <param>
          <type>U &amp;&amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>V &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>X &amp;&amp;</type>
          <defname>x</defname>
        </param>
        <param>
          <type>Y &amp;&amp;</type>
          <defname>y</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/fwd.hpp" line="14" column="1" bodyfile="libraries/fc/include/fc/fwd_impl.hpp" bodystart="77" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1fwd_1a4025798bb2f71af0e37fc844b66d11a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::fwd&lt; T, S, A &gt;::fwd</definition>
        <argsstring>()</argsstring>
        <name>fwd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/fwd.hpp" line="15" column="1" bodyfile="libraries/fc/include/fc/fwd_impl.hpp" bodystart="84" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1fwd_1a485a231bb037d6567c0aadc6f1261b6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::fwd&lt; T, S, Align &gt;::fwd</definition>
        <argsstring>(const fwd &amp;f)</argsstring>
        <name>fwd</name>
        <param>
          <type>const <ref refid="classfc_1_1fwd" kindref="compound">fwd</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/fwd.hpp" line="17" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1fwd_1ab5e2dbf6b924958ed42369ebcdff9418" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::fwd&lt; T, S, Align &gt;::fwd</definition>
        <argsstring>(fwd &amp;&amp;f)</argsstring>
        <name>fwd</name>
        <param>
          <type><ref refid="classfc_1_1fwd" kindref="compound">fwd</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/fwd.hpp" line="18" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1fwd_1a1ed02450b92795421332c41207b291ce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::fwd&lt; T, S, A &gt;::operator const T &amp;</definition>
        <argsstring>() const</argsstring>
        <name>operator const T &amp;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/fwd.hpp" line="20" column="1" bodyfile="libraries/fc/include/fc/fwd_impl.hpp" bodystart="104" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1fwd_1acdf78bbd392b5abdfbb0cf7163244c49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::fwd&lt; T, S, Align &gt;::operator T&amp;</definition>
        <argsstring>()</argsstring>
        <name>operator T &amp;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/fwd.hpp" line="21" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1fwd_1aeeac438894ec4a1946d70c473d01eb97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; fc::fwd&lt; T, S, A &gt;::operator*</definition>
        <argsstring>()</argsstring>
        <name>operator*</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/fwd.hpp" line="23" column="1" bodyfile="libraries/fc/include/fc/fwd_impl.hpp" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1fwd_1a040f352d6aae45bc718b41d08c231778" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; fc::fwd&lt; T, S, A &gt;::operator*</definition>
        <argsstring>() const</argsstring>
        <name>operator*</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/fwd.hpp" line="24" column="1" bodyfile="libraries/fc/include/fc/fwd_impl.hpp" bodystart="109" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1fwd_1a2e26988316119316ef358fa5f5d1f855" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const T *</type>
        <definition>const T * fc::fwd&lt; T, S, A &gt;::operator-&gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/fwd.hpp" line="25" column="1" bodyfile="libraries/fc/include/fc/fwd_impl.hpp" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1fwd_1a2bb1f30ddad9626fed754779cfca65f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T *</type>
        <definition>T * fc::fwd&lt; T, S, A &gt;::operator-&gt;</definition>
        <argsstring>()</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/fwd.hpp" line="27" column="1" bodyfile="libraries/fc/include/fc/fwd_impl.hpp" bodystart="114" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1fwd_1a159397b4c41de004ccbcd32ca574c84d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::fwd&lt; T, S, A &gt;::operator!</definition>
        <argsstring>() const</argsstring>
        <name>operator!</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/fwd.hpp" line="28" column="1" bodyfile="libraries/fc/include/fc/fwd_impl.hpp" bodystart="56" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1fwd_1a3c7d9ecc22d77ad7dbe66d4f4b5ff5ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>T &amp;</type>
        <definition>T &amp; fc::fwd&lt; T, S, A &gt;::operator=</definition>
        <argsstring>(U &amp;&amp;u)</argsstring>
        <name>operator=</name>
        <param>
          <type>U &amp;&amp;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/fwd.hpp" line="31" column="1" bodyfile="libraries/fc/include/fc/fwd_impl.hpp" bodystart="123" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1fwd_1a0f1d678a573b3d69a6411f5acfa286ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; fc::fwd&lt; T, S, Align &gt;::operator=</definition>
        <argsstring>(fwd &amp;&amp;u)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classfc_1_1fwd" kindref="compound">fwd</ref> &amp;&amp;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/fwd.hpp" line="33" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1fwd_1a22ff13dfb7422dcb8e83c40a6c1dc05d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; fc::fwd&lt; T, S, Align &gt;::operator=</definition>
        <argsstring>(const fwd &amp;u)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classfc_1_1fwd" kindref="compound">fwd</ref> &amp;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/fwd.hpp" line="34" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1fwd_1a465d587e7682d45b26bb4b6ffa13aa1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::fwd&lt; T, S, A &gt;::~fwd</definition>
        <argsstring>()</argsstring>
        <name>~fwd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/fwd.hpp" line="36" column="1" bodyfile="libraries/fc/include/fc/fwd_impl.hpp" bodystart="118" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1fwd_1a7c5c5c4449cfaedcf200a2305eeac83b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>unsigned int</type>
            <declname>S</declname>
            <defname>S</defname>
          </param>
          <param>
            <type>typename A</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>fc::fwd&lt; T, S, Align &gt;::fwd</definition>
        <argsstring>(const fwd&lt; T, S, A &gt; &amp;f)</argsstring>
        <name>fwd</name>
        <param>
          <type>const <ref refid="classfc_1_1fwd" kindref="compound">fwd</ref>&lt; T, S, A &gt; &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/fwd_impl.hpp" line="89" column="1" bodyfile="libraries/fc/include/fc/fwd_impl.hpp" bodystart="89" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1fwd_1a25e5227132296c3266b127f5357f975c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>unsigned int</type>
            <declname>S</declname>
            <defname>S</defname>
          </param>
          <param>
            <type>typename A</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>fc::fwd&lt; T, S, Align &gt;::fwd</definition>
        <argsstring>(fwd&lt; T, S, A &gt; &amp;&amp;f)</argsstring>
        <name>fwd</name>
        <param>
          <type><ref refid="classfc_1_1fwd" kindref="compound">fwd</ref>&lt; T, S, A &gt; &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/fwd_impl.hpp" line="94" column="1" bodyfile="libraries/fc/include/fc/fwd_impl.hpp" bodystart="94" bodyend="97"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Used to forward declare value types. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/fc/include/fc/fwd.hpp" line="10" column="1" bodyfile="libraries/fc/include/fc/fwd.hpp" bodystart="10" bodyend="40"/>
    <listofallmembers>
      <member refid="classfc_1_1fwd_1a193fd1a22aa9d3808e1aeb1f4b0ce347" prot="private" virt="non-virtual"><scope>fc::fwd</scope><name>_store</name></member>
      <member refid="classfc_1_1fwd_1ab9d81fb9b9effc4085c706922cb6b478" prot="public" virt="non-virtual"><scope>fc::fwd</scope><name>fwd</name></member>
      <member refid="classfc_1_1fwd_1a580dd3c3e504801fbe069aee1c2fb4ad" prot="public" virt="non-virtual"><scope>fc::fwd</scope><name>fwd</name></member>
      <member refid="classfc_1_1fwd_1a6a0734e9ecd814f901dbbef049646b5a" prot="public" virt="non-virtual"><scope>fc::fwd</scope><name>fwd</name></member>
      <member refid="classfc_1_1fwd_1a4025798bb2f71af0e37fc844b66d11a7" prot="public" virt="non-virtual"><scope>fc::fwd</scope><name>fwd</name></member>
      <member refid="classfc_1_1fwd_1a485a231bb037d6567c0aadc6f1261b6a" prot="public" virt="non-virtual"><scope>fc::fwd</scope><name>fwd</name></member>
      <member refid="classfc_1_1fwd_1ab5e2dbf6b924958ed42369ebcdff9418" prot="public" virt="non-virtual"><scope>fc::fwd</scope><name>fwd</name></member>
      <member refid="classfc_1_1fwd_1a7c5c5c4449cfaedcf200a2305eeac83b" prot="public" virt="non-virtual"><scope>fc::fwd</scope><name>fwd</name></member>
      <member refid="classfc_1_1fwd_1a25e5227132296c3266b127f5357f975c" prot="public" virt="non-virtual"><scope>fc::fwd</scope><name>fwd</name></member>
      <member refid="classfc_1_1fwd_1a1ed02450b92795421332c41207b291ce" prot="public" virt="non-virtual"><scope>fc::fwd</scope><name>operator const T &amp;</name></member>
      <member refid="classfc_1_1fwd_1acdf78bbd392b5abdfbb0cf7163244c49" prot="public" virt="non-virtual"><scope>fc::fwd</scope><name>operator T &amp;</name></member>
      <member refid="classfc_1_1fwd_1a159397b4c41de004ccbcd32ca574c84d" prot="public" virt="non-virtual"><scope>fc::fwd</scope><name>operator!</name></member>
      <member refid="classfc_1_1fwd_1aeeac438894ec4a1946d70c473d01eb97" prot="public" virt="non-virtual"><scope>fc::fwd</scope><name>operator*</name></member>
      <member refid="classfc_1_1fwd_1a040f352d6aae45bc718b41d08c231778" prot="public" virt="non-virtual"><scope>fc::fwd</scope><name>operator*</name></member>
      <member refid="classfc_1_1fwd_1a2e26988316119316ef358fa5f5d1f855" prot="public" virt="non-virtual"><scope>fc::fwd</scope><name>operator-&gt;</name></member>
      <member refid="classfc_1_1fwd_1a2bb1f30ddad9626fed754779cfca65f7" prot="public" virt="non-virtual"><scope>fc::fwd</scope><name>operator-&gt;</name></member>
      <member refid="classfc_1_1fwd_1a3c7d9ecc22d77ad7dbe66d4f4b5ff5ae" prot="public" virt="non-virtual"><scope>fc::fwd</scope><name>operator=</name></member>
      <member refid="classfc_1_1fwd_1a0f1d678a573b3d69a6411f5acfa286ee" prot="public" virt="non-virtual"><scope>fc::fwd</scope><name>operator=</name></member>
      <member refid="classfc_1_1fwd_1a22ff13dfb7422dcb8e83c40a6c1dc05d" prot="public" virt="non-virtual"><scope>fc::fwd</scope><name>operator=</name></member>
      <member refid="classfc_1_1fwd_1a465d587e7682d45b26bb4b6ffa13aa1a" prot="public" virt="non-virtual"><scope>fc::fwd</scope><name>~fwd</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
