<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structgraphene_1_1protocol_1_1asset__global__settle__operation" kind="struct" language="C++" prot="public">
    <compoundname>graphene::protocol::asset_global_settle_operation</compoundname>
    <basecompoundref refid="structgraphene_1_1protocol_1_1base__operation" prot="public" virt="non-virtual">graphene::protocol::base_operation</basecompoundref>
    <includes refid="asset__ops_8hpp" local="no">asset_ops.hpp</includes>
    <innerclass refid="structgraphene_1_1protocol_1_1asset__global__settle__operation_1_1fee__params__t" prot="public">graphene::protocol::asset_global_settle_operation::fee_params_t</innerclass>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1asset__global__settle__operation_1abdf02c3fa818cdae60e13c8bc9aa06d0" prot="public" static="no" mutable="no">
        <type><ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref></type>
        <definition>asset graphene::protocol::asset_global_settle_operation::fee</definition>
        <argsstring></argsstring>
        <name>fee</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="242" column="23" bodyfile="libraries/protocol/include/graphene/protocol/asset_ops.hpp" bodystart="242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1asset__global__settle__operation_1a493d747b58167f44b271be3722b0fb25" prot="public" static="no" mutable="no">
        <type>account_id_type</type>
        <definition>account_id_type graphene::protocol::asset_global_settle_operation::issuer</definition>
        <argsstring></argsstring>
        <name>issuer</name>
        <briefdescription>
<para>must equal issuer of <ref refid="structgraphene_1_1protocol_1_1asset__global__settle__operation_1aaa2d370cf8cf9c539f78c20b686380b6" kindref="member">asset_to_settle</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="243" column="23" bodyfile="libraries/protocol/include/graphene/protocol/asset_ops.hpp" bodystart="243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1asset__global__settle__operation_1aaa2d370cf8cf9c539f78c20b686380b6" prot="public" static="no" mutable="no">
        <type>asset_id_type</type>
        <definition>asset_id_type graphene::protocol::asset_global_settle_operation::asset_to_settle</definition>
        <argsstring></argsstring>
        <name>asset_to_settle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="244" column="23" bodyfile="libraries/protocol/include/graphene/protocol/asset_ops.hpp" bodystart="244" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1asset__global__settle__operation_1aea5bcbb5a7ae968a89bd00c052548195" prot="public" static="no" mutable="no">
        <type><ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref></type>
        <definition>price graphene::protocol::asset_global_settle_operation::settle_price</definition>
        <argsstring></argsstring>
        <name>settle_price</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="245" column="23" bodyfile="libraries/protocol/include/graphene/protocol/asset_ops.hpp" bodystart="245" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1asset__global__settle__operation_1af64930e77e05b3c4809ba6cec43bc48b" prot="public" static="no" mutable="no">
        <type><ref refid="group__operations_1gabaddcaf5bde76414891b4c29031d9288" kindref="member">extensions_type</ref></type>
        <definition>extensions_type graphene::protocol::asset_global_settle_operation::extensions</definition>
        <argsstring></argsstring>
        <name>extensions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="246" column="23" bodyfile="libraries/protocol/include/graphene/protocol/asset_ops.hpp" bodystart="246" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1asset__global__settle__operation_1ad692910e752fd6d90b1576868889947d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>account_id_type</type>
        <definition>account_id_type graphene::protocol::asset_global_settle_operation::fee_payer</definition>
        <argsstring>() const</argsstring>
        <name>fee_payer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="248" column="23" bodyfile="libraries/protocol/include/graphene/protocol/asset_ops.hpp" bodystart="248" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1asset__global__settle__operation_1aabea0d0152b19dc30545eb39e9fa7e0e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void graphene::protocol::asset_global_settle_operation::validate</definition>
        <argsstring>() const</argsstring>
        <name>validate</name>
        <reimplements refid="structgraphene_1_1protocol_1_1base__operation_1a23d617a6fa0921d3f5b51dd5167e7a29">validate</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="249" column="23" bodyfile="libraries/protocol/asset_ops.cpp" bodystart="231" bodyend="235"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>allows global settling of bitassets (black swan or prediction markets) </para>
    </briefdescription>
    <detaileddescription>
<para>In order to use this operation, <ref refid="structgraphene_1_1protocol_1_1asset__global__settle__operation_1aaa2d370cf8cf9c539f78c20b686380b6" kindref="member">asset_to_settle</ref> must have the global_settle flag set</para>
<para>When this operation is executed all balances are converted into the backing asset at the settle_price and all open margin positions are called at the settle price. If this asset is used as backing for other bitassets, those bitassets will be force settled at their current feed price. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>graphene::protocol::base_operation</label>
        <link refid="structgraphene_1_1protocol_1_1base__operation"/>
      </node>
      <node id="1">
        <label>graphene::protocol::asset_global_settle_operation</label>
        <link refid="structgraphene_1_1protocol_1_1asset__global__settle__operation"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5">
        <label>fc::safe_base&lt; int64_t &gt;</label>
        <link refid="structfc_1_1safe__base"/>
      </node>
      <node id="7">
        <label>graphene::protocol::price</label>
        <link refid="structgraphene_1_1protocol_1_1price"/>
        <childnode refid="3" relation="usage">
          <edgelabel>base</edgelabel>
          <edgelabel>quote</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>account_id_type</label>
      </node>
      <node id="4">
        <label>fc::safe&lt; int64_t &gt;</label>
        <link refid="structfc_1_1safe"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>graphene::protocol::base_operation</label>
        <link refid="structgraphene_1_1protocol_1_1base__operation"/>
      </node>
      <node id="3">
        <label>graphene::protocol::asset</label>
        <link refid="structgraphene_1_1protocol_1_1asset"/>
        <childnode refid="4" relation="usage">
          <edgelabel>amount</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>graphene::protocol::asset_global_settle_operation</label>
        <link refid="structgraphene_1_1protocol_1_1asset__global__settle__operation"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>fee</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>issuer</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>settle_price</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="239" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset_ops.hpp" bodystart="238" bodyend="250"/>
    <listofallmembers>
      <member refid="structgraphene_1_1protocol_1_1asset__global__settle__operation_1aaa2d370cf8cf9c539f78c20b686380b6" prot="public" virt="non-virtual"><scope>graphene::protocol::asset_global_settle_operation</scope><name>asset_to_settle</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1aaccb0fa71ee529cf62324baaa99988fe" prot="public" virt="non-virtual"><scope>graphene::protocol::asset_global_settle_operation</scope><name>calculate_data_fee</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1a0be44badcee9a648413eb906dac1d3b3" prot="public" virt="non-virtual"><scope>graphene::protocol::asset_global_settle_operation</scope><name>calculate_fee</name></member>
      <member refid="structgraphene_1_1protocol_1_1asset__global__settle__operation_1af64930e77e05b3c4809ba6cec43bc48b" prot="public" virt="non-virtual"><scope>graphene::protocol::asset_global_settle_operation</scope><name>extensions</name></member>
      <member refid="structgraphene_1_1protocol_1_1asset__global__settle__operation_1abdf02c3fa818cdae60e13c8bc9aa06d0" prot="public" virt="non-virtual"><scope>graphene::protocol::asset_global_settle_operation</scope><name>fee</name></member>
      <member refid="structgraphene_1_1protocol_1_1asset__global__settle__operation_1ad692910e752fd6d90b1576868889947d" prot="public" virt="non-virtual"><scope>graphene::protocol::asset_global_settle_operation</scope><name>fee_payer</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1a89ed7c6e7da93cd99bb41bc8d7e2627b" prot="public" virt="virtual"><scope>graphene::protocol::asset_global_settle_operation</scope><name>get_required_active_authorities</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1aabc48ce97877c67ff560b94284a7c0bb" prot="public" virt="virtual"><scope>graphene::protocol::asset_global_settle_operation</scope><name>get_required_authorities</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1a3251978e7bd0bb2f2fa23bcea5dee95c" prot="public" virt="virtual"><scope>graphene::protocol::asset_global_settle_operation</scope><name>get_required_owner_authorities</name></member>
      <member refid="structgraphene_1_1protocol_1_1asset__global__settle__operation_1a493d747b58167f44b271be3722b0fb25" prot="public" virt="non-virtual"><scope>graphene::protocol::asset_global_settle_operation</scope><name>issuer</name></member>
      <member refid="structgraphene_1_1protocol_1_1asset__global__settle__operation_1aea5bcbb5a7ae968a89bd00c052548195" prot="public" virt="non-virtual"><scope>graphene::protocol::asset_global_settle_operation</scope><name>settle_price</name></member>
      <member refid="structgraphene_1_1protocol_1_1asset__global__settle__operation_1aabea0d0152b19dc30545eb39e9fa7e0e" prot="public" virt="virtual"><scope>graphene::protocol::asset_global_settle_operation</scope><name>validate</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1a485f3d3b963ff4c081af85945cf27774" prot="public" virt="non-virtual"><scope>graphene::protocol::asset_global_settle_operation</scope><name>validate_parallel</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1a04ac6688e2df1d511514e4fc1983b828" prot="public" virt="virtual"><scope>graphene::protocol::asset_global_settle_operation</scope><name>~base_operation</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
