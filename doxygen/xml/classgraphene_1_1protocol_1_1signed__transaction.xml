<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classgraphene_1_1protocol_1_1signed__transaction" kind="class" language="C++" prot="public">
    <compoundname>graphene::protocol::signed_transaction</compoundname>
    <basecompoundref refid="classgraphene_1_1protocol_1_1transaction" prot="public" virt="non-virtual">graphene::protocol::transaction</basecompoundref>
    <derivedcompoundref refid="classgraphene_1_1protocol_1_1precomputable__transaction" prot="public" virt="non-virtual">graphene::protocol::precomputable_transaction</derivedcompoundref>
    <includes refid="transaction_8hpp" local="no">transaction.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classgraphene_1_1protocol_1_1signed__transaction_1a0ead94f9c1deaef5710d072f9da8f75b" prot="public" static="no" mutable="no">
        <type>vector&lt; <ref refid="namespacegraphene_1_1protocol_1ade0535fb9b29fcc7de372c0f1ff5d218" kindref="member">signature_type</ref> &gt;</type>
        <definition>vector&lt;signature_type&gt; graphene::protocol::signed_transaction::signatures</definition>
        <argsstring></argsstring>
        <name>signatures</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signatures </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/transaction.hpp" line="217" column="1" bodyfile="libraries/protocol/include/graphene/protocol/transaction.hpp" bodystart="217" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classgraphene_1_1protocol_1_1signed__transaction_1aadfd54dd910b56c969cfbae3a09f4da9" prot="protected" static="no" mutable="yes">
        <type>flat_set&lt; <ref refid="structgraphene_1_1protocol_1_1public__key__type" kindref="compound">public_key_type</ref> &gt;</type>
        <definition>flat_set&lt;public_key_type&gt; graphene::protocol::signed_transaction::_signees</definition>
        <argsstring></argsstring>
        <name>_signees</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Public keys extracted from signatures </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/transaction.hpp" line="226" column="1" bodyfile="libraries/protocol/include/graphene/protocol/transaction.hpp" bodystart="226" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgraphene_1_1protocol_1_1signed__transaction_1a4f868c01c731aed8174809f502de5d9f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>graphene::protocol::signed_transaction::signed_transaction</definition>
        <argsstring>(const transaction &amp;trx=transaction())</argsstring>
        <name>signed_transaction</name>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1transaction" kindref="compound">transaction</ref> &amp;</type>
          <declname>trx</declname>
          <defval><ref refid="classgraphene_1_1protocol_1_1transaction" kindref="compound">transaction</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/transaction.hpp" line="137" column="1" bodyfile="libraries/protocol/include/graphene/protocol/transaction.hpp" bodystart="137" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1protocol_1_1signed__transaction_1ab5bd7fee46143f039152df1ce313786a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual graphene::protocol::signed_transaction::~signed_transaction</definition>
        <argsstring>()=default</argsstring>
        <name>~signed_transaction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/transaction.hpp" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1protocol_1_1signed__transaction_1abf07d5eb67a82bf0c3d19e2a5d59262e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="namespacegraphene_1_1protocol_1ade0535fb9b29fcc7de372c0f1ff5d218" kindref="member">signature_type</ref> &amp;</type>
        <definition>const signature_type &amp; graphene::protocol::signed_transaction::sign</definition>
        <argsstring>(const private_key_type &amp;key, const chain_id_type &amp;chain_id)</argsstring>
        <name>sign</name>
        <param>
          <type>const <ref refid="namespacegraphene_1_1protocol_1a73d07cdf7c96887580ecfab2909ae548" kindref="member">private_key_type</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegraphene_1_1protocol_1a56354f39ed89f6a0a13fe90ba8228809" kindref="member">chain_id_type</ref> &amp;</type>
          <declname>chain_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>signs and appends to signatures </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/transaction.hpp" line="142" column="1" bodyfile="libraries/protocol/transaction.cpp" bodystart="77" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1protocol_1_1signed__transaction_1ad3704a171d765acbded80a9b8dc87f81" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegraphene_1_1protocol_1ade0535fb9b29fcc7de372c0f1ff5d218" kindref="member">signature_type</ref></type>
        <definition>signature_type graphene::protocol::signed_transaction::sign</definition>
        <argsstring>(const private_key_type &amp;key, const chain_id_type &amp;chain_id) const</argsstring>
        <name>sign</name>
        <param>
          <type>const <ref refid="namespacegraphene_1_1protocol_1a73d07cdf7c96887580ecfab2909ae548" kindref="member">private_key_type</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegraphene_1_1protocol_1a56354f39ed89f6a0a13fe90ba8228809" kindref="member">chain_id_type</ref> &amp;</type>
          <declname>chain_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns signature but does not append </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/transaction.hpp" line="145" column="1" bodyfile="libraries/protocol/transaction.cpp" bodystart="84" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1protocol_1_1signed__transaction_1a4853c99a58a0bff2e2d45256c680be92" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>set&lt; <ref refid="structgraphene_1_1protocol_1_1public__key__type" kindref="compound">public_key_type</ref> &gt;</type>
        <definition>set&lt; public_key_type &gt; graphene::protocol::signed_transaction::get_required_signatures</definition>
        <argsstring>(const chain_id_type &amp;chain_id, const flat_set&lt; public_key_type &gt; &amp;available_keys, const std::function&lt; const authority *(account_id_type)&gt; &amp;get_active, const std::function&lt; const authority *(account_id_type)&gt; &amp;get_owner, bool allow_non_immediate_owner, bool ignore_custom_operation_required_authorities, uint32_t max_recursion=GRAPHENE_MAX_SIG_CHECK_DEPTH) const</argsstring>
        <name>get_required_signatures</name>
        <param>
          <type>const <ref refid="namespacegraphene_1_1protocol_1a56354f39ed89f6a0a13fe90ba8228809" kindref="member">chain_id_type</ref> &amp;</type>
          <declname>chain_id</declname>
        </param>
        <param>
          <type>const flat_set&lt; <ref refid="structgraphene_1_1protocol_1_1public__key__type" kindref="compound">public_key_type</ref> &gt; &amp;</type>
          <declname>available_keys</declname>
        </param>
        <param>
          <type>const std::function&lt; const <ref refid="structgraphene_1_1protocol_1_1authority" kindref="compound">authority</ref> *(account_id_type)&gt; &amp;</type>
          <declname>get_active</declname>
        </param>
        <param>
          <type>const std::function&lt; const <ref refid="structgraphene_1_1protocol_1_1authority" kindref="compound">authority</ref> *(account_id_type)&gt; &amp;</type>
          <declname>get_owner</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allow_non_immediate_owner</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ignore_custom_operation_required_authorities</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_recursion</declname>
          <defval><ref refid="protocol_2include_2graphene_2protocol_2config_8hpp_1aea0bc2216bc54371f7f54d6f6d6e4d9d" kindref="member">GRAPHENE_MAX_SIG_CHECK_DEPTH</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The purpose of this method is to identify some subset of <computeroutput>available_keys</computeroutput> that will produce sufficient signatures for a transaction. The result is not always a minimal set of signatures, but any non-minimal result will still pass validation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/transaction.hpp" line="154" column="1" bodyfile="libraries/protocol/transaction.cpp" bodystart="366" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1protocol_1_1signed__transaction_1a00e34f26eb30033c2d1afdfb9c573a94" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::protocol::signed_transaction::verify_authority</definition>
        <argsstring>(const chain_id_type &amp;chain_id, const std::function&lt; const authority *(account_id_type)&gt; &amp;get_active, const std::function&lt; const authority *(account_id_type)&gt; &amp;get_owner, const custom_authority_lookup &amp;get_custom, bool allow_non_immediate_owner, bool ignore_custom_operation_required_auths, uint32_t max_recursion=GRAPHENE_MAX_SIG_CHECK_DEPTH) const</argsstring>
        <name>verify_authority</name>
        <param>
          <type>const <ref refid="namespacegraphene_1_1protocol_1a56354f39ed89f6a0a13fe90ba8228809" kindref="member">chain_id_type</ref> &amp;</type>
          <declname>chain_id</declname>
        </param>
        <param>
          <type>const std::function&lt; const <ref refid="structgraphene_1_1protocol_1_1authority" kindref="compound">authority</ref> *(account_id_type)&gt; &amp;</type>
          <declname>get_active</declname>
        </param>
        <param>
          <type>const std::function&lt; const <ref refid="structgraphene_1_1protocol_1_1authority" kindref="compound">authority</ref> *(account_id_type)&gt; &amp;</type>
          <declname>get_owner</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegraphene_1_1protocol_1a7af627fb15181383dae4695633a3a7d6" kindref="member">custom_authority_lookup</ref> &amp;</type>
          <declname>get_custom</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allow_non_immediate_owner</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ignore_custom_operation_required_auths</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_recursion</declname>
          <defval><ref refid="protocol_2include_2graphene_2protocol_2config_8hpp_1aea0bc2216bc54371f7f54d6f6d6e4d9d" kindref="member">GRAPHENE_MAX_SIG_CHECK_DEPTH</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks whether signatures in this signed transaction are sufficient to authorize the transaction. Throws an exception when failed.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chain_id</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID of a block chain </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>get_active</parametername>
</parameternamelist>
<parameterdescription>
<para>callback function to retrieve active authorities of a given account </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>get_owner</parametername>
</parameternamelist>
<parameterdescription>
<para>callback function to retrieve owner authorities of a given account </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>get_custom</parametername>
</parameternamelist>
<parameterdescription>
<para>callback function to retrieve viable custom authorities for a given account and operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allow_non_immediate_owner</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to allow owner authority of non-immediately required accounts to authorize operations in the transaction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ignore_custom_operation_required_auths</parametername>
</parameternamelist>
<parameterdescription>
<para>See issue #210; whether to ignore the required_auths field of <ref refid="structgraphene_1_1protocol_1_1custom__operation" kindref="compound">custom_operation</ref> or not </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_recursion</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum level of recursion when verifying, since an account can have another account in active authorities and/or owner authorities </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/transaction.hpp" line="178" column="1" bodyfile="libraries/protocol/transaction.cpp" bodystart="464" bodyend="475"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1protocol_1_1signed__transaction_1a70d7d5de93386618b443ee9f57370a63" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>set&lt; <ref refid="structgraphene_1_1protocol_1_1public__key__type" kindref="compound">public_key_type</ref> &gt;</type>
        <definition>set&lt; public_key_type &gt; graphene::protocol::signed_transaction::minimize_required_signatures</definition>
        <argsstring>(const chain_id_type &amp;chain_id, const flat_set&lt; public_key_type &gt; &amp;available_keys, const std::function&lt; const authority *(account_id_type)&gt; &amp;get_active, const std::function&lt; const authority *(account_id_type)&gt; &amp;get_owner, const custom_authority_lookup &amp;get_custom, bool allow_non_immediate_owner, bool ignore_custom_operation_required_auths, uint32_t max_recursion=GRAPHENE_MAX_SIG_CHECK_DEPTH) const</argsstring>
        <name>minimize_required_signatures</name>
        <param>
          <type>const <ref refid="namespacegraphene_1_1protocol_1a56354f39ed89f6a0a13fe90ba8228809" kindref="member">chain_id_type</ref> &amp;</type>
          <declname>chain_id</declname>
        </param>
        <param>
          <type>const flat_set&lt; <ref refid="structgraphene_1_1protocol_1_1public__key__type" kindref="compound">public_key_type</ref> &gt; &amp;</type>
          <declname>available_keys</declname>
        </param>
        <param>
          <type>const std::function&lt; const <ref refid="structgraphene_1_1protocol_1_1authority" kindref="compound">authority</ref> *(account_id_type)&gt; &amp;</type>
          <declname>get_active</declname>
        </param>
        <param>
          <type>const std::function&lt; const <ref refid="structgraphene_1_1protocol_1_1authority" kindref="compound">authority</ref> *(account_id_type)&gt; &amp;</type>
          <declname>get_owner</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegraphene_1_1protocol_1a7af627fb15181383dae4695633a3a7d6" kindref="member">custom_authority_lookup</ref> &amp;</type>
          <declname>get_custom</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allow_non_immediate_owner</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ignore_custom_operation_required_auths</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_recursion</declname>
          <defval><ref refid="protocol_2include_2graphene_2protocol_2config_8hpp_1aea0bc2216bc54371f7f54d6f6d6e4d9d" kindref="member">GRAPHENE_MAX_SIG_CHECK_DEPTH</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is a slower replacement for <ref refid="classgraphene_1_1protocol_1_1signed__transaction_1a4853c99a58a0bff2e2d45256c680be92" kindref="member">get_required_signatures()</ref> which returns a minimal set in all cases, including some cases where <ref refid="classgraphene_1_1protocol_1_1signed__transaction_1a4853c99a58a0bff2e2d45256c680be92" kindref="member">get_required_signatures()</ref> returns a non-minimal set. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/transaction.hpp" line="193" column="1" bodyfile="libraries/protocol/transaction.cpp" bodystart="401" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1protocol_1_1signed__transaction_1a399bd56dd3f093b1ac3f3b92862214dc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const flat_set&lt; <ref refid="structgraphene_1_1protocol_1_1public__key__type" kindref="compound">public_key_type</ref> &gt; &amp;</type>
        <definition>const flat_set&lt; public_key_type &gt; &amp; graphene::protocol::signed_transaction::get_signature_keys</definition>
        <argsstring>(const chain_id_type &amp;chain_id) const</argsstring>
        <name>get_signature_keys</name>
        <reimplementedby refid="classgraphene_1_1protocol_1_1precomputable__transaction_1adb185966f6f81112f7ad707931617d85">get_signature_keys</reimplementedby>
        <param>
          <type>const <ref refid="namespacegraphene_1_1protocol_1a56354f39ed89f6a0a13fe90ba8228809" kindref="member">chain_id_type</ref> &amp;</type>
          <declname>chain_id</declname>
        </param>
        <briefdescription>
<para>Extract public keys from signatures with given chain ID. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chain_id</parametername>
</parameternamelist>
<parameterdescription>
<para>A chain ID </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Public keys </para></simplesect>
<simplesect kind="note"><para>If <ref refid="classgraphene_1_1protocol_1_1signed__transaction_1aadfd54dd910b56c969cfbae3a09f4da9" kindref="member">_signees</ref> is empty, E.G. when it&apos;s the first time calling this function for the signed transaction, public keys will be extracted with given chain ID, and be stored into the mutable <ref refid="classgraphene_1_1protocol_1_1signed__transaction_1aadfd54dd910b56c969cfbae3a09f4da9" kindref="member">_signees</ref> field, then <ref refid="classgraphene_1_1protocol_1_1signed__transaction_1aadfd54dd910b56c969cfbae3a09f4da9" kindref="member">_signees</ref> will be returned; otherwise, the <computeroutput>chain_id</computeroutput> parameter will be ignored, and <ref refid="classgraphene_1_1protocol_1_1signed__transaction_1aadfd54dd910b56c969cfbae3a09f4da9" kindref="member">_signees</ref> will be returned directly. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/transaction.hpp" line="214" column="1" bodyfile="libraries/protocol/transaction.cpp" bodystart="350" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1protocol_1_1signed__transaction_1a8b2d6eb25d606f2fee9472885d7c6f88" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::protocol::signed_transaction::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes all operations and signatures </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/transaction.hpp" line="220" column="1" bodyfile="libraries/protocol/include/graphene/protocol/transaction.hpp" bodystart="220" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1protocol_1_1signed__transaction_1a8fdd77aab962bde6cea772b25e16aa52" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::protocol::signed_transaction::clear_signatures</definition>
        <argsstring>()</argsstring>
        <name>clear_signatures</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes all signatures </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/transaction.hpp" line="223" column="1" bodyfile="libraries/protocol/include/graphene/protocol/transaction.hpp" bodystart="223" bodyend="223"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>adds a signature to a transaction </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="6880">
        <label>graphene::protocol::precomputable_transaction</label>
        <link refid="classgraphene_1_1protocol_1_1precomputable__transaction"/>
        <childnode refid="6878" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6881">
        <label>graphene::protocol::processed_transaction</label>
        <link refid="structgraphene_1_1protocol_1_1processed__transaction"/>
        <childnode refid="6880" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6878">
        <label>graphene::protocol::signed_transaction</label>
        <link refid="classgraphene_1_1protocol_1_1signed__transaction"/>
        <childnode refid="6879" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6879">
        <label>graphene::protocol::transaction</label>
        <link refid="classgraphene_1_1protocol_1_1transaction"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6884">
        <label>fc::ripemd160</label>
        <link refid="classfc_1_1ripemd160"/>
      </node>
      <node id="6888">
        <label>flat_set&lt; graphene::protocol::public_key_type &gt;</label>
      </node>
      <node id="6885">
        <label>fc::time_point_sec</label>
        <link refid="classfc_1_1time__point__sec"/>
      </node>
      <node id="6886">
        <label>vector&lt; fc::static_variant &gt;</label>
      </node>
      <node id="6887">
        <label>vector&lt; fc::zero_initialized_array &gt;</label>
      </node>
      <node id="6882">
        <label>graphene::protocol::signed_transaction</label>
        <link refid="classgraphene_1_1protocol_1_1signed__transaction"/>
        <childnode refid="6883" relation="public-inheritance">
        </childnode>
        <childnode refid="6887" relation="usage">
          <edgelabel>signatures</edgelabel>
        </childnode>
        <childnode refid="6888" relation="usage">
          <edgelabel>_signees</edgelabel>
        </childnode>
      </node>
      <node id="6883">
        <label>graphene::protocol::transaction</label>
        <link refid="classgraphene_1_1protocol_1_1transaction"/>
        <childnode refid="6884" relation="usage">
          <edgelabel>_tx_id_buffer</edgelabel>
        </childnode>
        <childnode refid="6885" relation="usage">
          <edgelabel>expiration</edgelabel>
        </childnode>
        <childnode refid="6886" relation="usage">
          <edgelabel>operations</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="libraries/protocol/include/graphene/protocol/transaction.hpp" line="135" column="1" bodyfile="libraries/protocol/include/graphene/protocol/transaction.hpp" bodystart="134" bodyend="227"/>
    <listofallmembers>
      <member refid="classgraphene_1_1protocol_1_1signed__transaction_1aadfd54dd910b56c969cfbae3a09f4da9" prot="protected" virt="non-virtual"><scope>graphene::protocol::signed_transaction</scope><name>_signees</name></member>
      <member refid="classgraphene_1_1protocol_1_1transaction_1ab8a7d50e9abe892ac8d8c9edfa407743" prot="protected" virt="non-virtual"><scope>graphene::protocol::signed_transaction</scope><name>_tx_id_buffer</name></member>
      <member refid="classgraphene_1_1protocol_1_1signed__transaction_1a8b2d6eb25d606f2fee9472885d7c6f88" prot="public" virt="non-virtual"><scope>graphene::protocol::signed_transaction</scope><name>clear</name></member>
      <member refid="classgraphene_1_1protocol_1_1signed__transaction_1a8fdd77aab962bde6cea772b25e16aa52" prot="public" virt="non-virtual"><scope>graphene::protocol::signed_transaction</scope><name>clear_signatures</name></member>
      <member refid="classgraphene_1_1protocol_1_1transaction_1a04ffe009d27aec9e221041ba22125532" prot="public" virt="non-virtual"><scope>graphene::protocol::signed_transaction</scope><name>digest</name></member>
      <member refid="classgraphene_1_1protocol_1_1transaction_1a303447df940705d8ab860d2d52317e80" prot="public" virt="non-virtual"><scope>graphene::protocol::signed_transaction</scope><name>expiration</name></member>
      <member refid="classgraphene_1_1protocol_1_1transaction_1ac4922d0bbee524ba5eacc8a665888be2" prot="public" virt="non-virtual"><scope>graphene::protocol::signed_transaction</scope><name>extensions</name></member>
      <member refid="classgraphene_1_1protocol_1_1transaction_1a05a5400509cd28ec52ae3952918d803f" prot="public" virt="virtual"><scope>graphene::protocol::signed_transaction</scope><name>get_packed_size</name></member>
      <member refid="classgraphene_1_1protocol_1_1transaction_1aa2b9c07185c7f05118dca8aa9ba69b08" prot="public" virt="non-virtual"><scope>graphene::protocol::signed_transaction</scope><name>get_required_authorities</name></member>
      <member refid="classgraphene_1_1protocol_1_1signed__transaction_1a4853c99a58a0bff2e2d45256c680be92" prot="public" virt="non-virtual"><scope>graphene::protocol::signed_transaction</scope><name>get_required_signatures</name></member>
      <member refid="classgraphene_1_1protocol_1_1signed__transaction_1a399bd56dd3f093b1ac3f3b92862214dc" prot="public" virt="virtual"><scope>graphene::protocol::signed_transaction</scope><name>get_signature_keys</name></member>
      <member refid="classgraphene_1_1protocol_1_1transaction_1ab837a9c225d37d0fe9eb952ee6bf5cc1" prot="public" virt="virtual"><scope>graphene::protocol::signed_transaction</scope><name>id</name></member>
      <member refid="classgraphene_1_1protocol_1_1signed__transaction_1a70d7d5de93386618b443ee9f57370a63" prot="public" virt="non-virtual"><scope>graphene::protocol::signed_transaction</scope><name>minimize_required_signatures</name></member>
      <member refid="classgraphene_1_1protocol_1_1transaction_1a00bfb1cd13936871cd987b74dca0417a" prot="public" virt="non-virtual"><scope>graphene::protocol::signed_transaction</scope><name>operations</name></member>
      <member refid="classgraphene_1_1protocol_1_1transaction_1a409ead8644ff5fcb2dc3527910afa0f8" prot="public" virt="non-virtual"><scope>graphene::protocol::signed_transaction</scope><name>ref_block_num</name></member>
      <member refid="classgraphene_1_1protocol_1_1transaction_1a8b2ed9c30bc7d04c96e6ed1e4652dcbe" prot="public" virt="non-virtual"><scope>graphene::protocol::signed_transaction</scope><name>ref_block_prefix</name></member>
      <member refid="classgraphene_1_1protocol_1_1transaction_1a083a44dddfc1c36adb8806262aee25d5" prot="public" virt="non-virtual"><scope>graphene::protocol::signed_transaction</scope><name>set_expiration</name></member>
      <member refid="classgraphene_1_1protocol_1_1transaction_1aee3b70d4b548901a0d3a811bad926098" prot="public" virt="non-virtual"><scope>graphene::protocol::signed_transaction</scope><name>set_reference_block</name></member>
      <member refid="classgraphene_1_1protocol_1_1transaction_1aa3f69556ccaf5552871c344c3150182d" prot="protected" virt="non-virtual"><scope>graphene::protocol::signed_transaction</scope><name>sig_digest</name></member>
      <member refid="classgraphene_1_1protocol_1_1signed__transaction_1abf07d5eb67a82bf0c3d19e2a5d59262e" prot="public" virt="non-virtual"><scope>graphene::protocol::signed_transaction</scope><name>sign</name></member>
      <member refid="classgraphene_1_1protocol_1_1signed__transaction_1ad3704a171d765acbded80a9b8dc87f81" prot="public" virt="non-virtual"><scope>graphene::protocol::signed_transaction</scope><name>sign</name></member>
      <member refid="classgraphene_1_1protocol_1_1signed__transaction_1a0ead94f9c1deaef5710d072f9da8f75b" prot="public" virt="non-virtual"><scope>graphene::protocol::signed_transaction</scope><name>signatures</name></member>
      <member refid="classgraphene_1_1protocol_1_1signed__transaction_1a4f868c01c731aed8174809f502de5d9f" prot="public" virt="non-virtual"><scope>graphene::protocol::signed_transaction</scope><name>signed_transaction</name></member>
      <member refid="classgraphene_1_1protocol_1_1transaction_1ae691d92c2a4cbc1264ea5b698fd4df60" prot="public" virt="virtual"><scope>graphene::protocol::signed_transaction</scope><name>validate</name></member>
      <member refid="classgraphene_1_1protocol_1_1signed__transaction_1a00e34f26eb30033c2d1afdfb9c573a94" prot="public" virt="non-virtual"><scope>graphene::protocol::signed_transaction</scope><name>verify_authority</name></member>
      <member refid="classgraphene_1_1protocol_1_1transaction_1a00813917deaf56177dc010944765f8c4" prot="public" virt="non-virtual"><scope>graphene::protocol::signed_transaction</scope><name>visit</name></member>
      <member refid="classgraphene_1_1protocol_1_1transaction_1add3323f0daeb3d5ccf3e222e5a2de9ce" prot="public" virt="non-virtual"><scope>graphene::protocol::signed_transaction</scope><name>visit</name></member>
      <member refid="classgraphene_1_1protocol_1_1signed__transaction_1ab5bd7fee46143f039152df1ce313786a" prot="public" virt="virtual"><scope>graphene::protocol::signed_transaction</scope><name>~signed_transaction</name></member>
      <member refid="classgraphene_1_1protocol_1_1transaction_1a03d9df4aeb611d900a8d18787056e682" prot="public" virt="virtual"><scope>graphene::protocol::signed_transaction</scope><name>~transaction</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
