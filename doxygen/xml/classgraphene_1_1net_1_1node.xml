<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classgraphene_1_1net_1_1node" kind="class" language="C++" prot="public">
    <compoundname>graphene::net::node</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::enable_shared_from_this&lt; node &gt;</basecompoundref>
    <includes refid="node_8hpp" local="no">node.hpp</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classgraphene_1_1net_1_1node_1ad3a44f1cc1137524d1614a679556dc4b" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacegraphene_1_1net_1a7b290bc6b0c3a9980345c3782507fbe5" kindref="member">node_impl_ptr</ref></type>
        <definition>node_impl_ptr graphene::net::node::my</definition>
        <argsstring></argsstring>
        <name>my</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="323" column="23" bodyfile="libraries/net/include/graphene/net/node.hpp" bodystart="323" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a2c669ad34653238449e0dc0f33319281" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::net::node::node</definition>
        <argsstring>(const std::string &amp;user_agent)</argsstring>
        <name>node</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>user_agent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="193" column="18" bodyfile="libraries/net/node.cpp" bodystart="5070" bodyend="5074"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a4123cfc1660d19fe6c48a468d8daced0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>graphene::net::node::~node</definition>
        <argsstring>()</argsstring>
        <name>~node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="194" column="17" bodyfile="libraries/net/node.cpp" bodystart="5076" bodyend="5079"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a418707491103c7198854fc7bf5794e0a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::node::close</definition>
        <argsstring>() const</argsstring>
        <name>close</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="196" column="14" bodyfile="libraries/net/node.cpp" bodystart="5224" bodyend="5227"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a318f4bac4372181fea67aebfc5e85eae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::node::set_node_delegate</definition>
        <argsstring>(std::shared_ptr&lt; node_delegate &gt; del) const</argsstring>
        <name>set_node_delegate</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classgraphene_1_1net_1_1node__delegate" kindref="compound">node_delegate</ref> &gt;</type>
          <declname>del</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="198" column="19" bodyfile="libraries/net/node.cpp" bodystart="5081" bodyend="5085"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a8e5d06dfb3e60cde6dffdae26e88ee8b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::node::load_configuration</definition>
        <argsstring>(const fc::path &amp;configuration_directory) const</argsstring>
        <name>load_configuration</name>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">fc::path</ref> &amp;</type>
          <declname>configuration_directory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="200" column="19" bodyfile="libraries/net/node.cpp" bodystart="5087" bodyend="5090"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a57153507060ee2f6d2a84455d3bb67de" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void graphene::net::node::listen_to_p2p_network</definition>
        <argsstring>() const</argsstring>
        <name>listen_to_p2p_network</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="202" column="27" bodyfile="libraries/net/node.cpp" bodystart="5092" bodyend="5095"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a9af7cf0a283b9e043ed64cad5afa8936" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void graphene::net::node::connect_to_p2p_network</definition>
        <argsstring>() const</argsstring>
        <name>connect_to_p2p_network</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="203" column="27" bodyfile="libraries/net/node.cpp" bodystart="5097" bodyend="5100"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a4ded2b0e5a1a0fa896665e5786479cc1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::node::add_node</definition>
        <argsstring>(const fc::ip::endpoint &amp;ep) const</argsstring>
        <name>add_node</name>
        <param>
          <type>const <ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">fc::ip::endpoint</ref> &amp;</type>
          <declname>ep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add endpoint to internal level_map database of potential nodes to attempt to connect to. This database is consulted any time the number connected peers falls below the target. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="210" column="19" bodyfile="libraries/net/node.cpp" bodystart="5102" bodyend="5105"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1ae0faae1eee35ad141e77cb60cc04515c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::node::add_seed_nodes</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;seeds) const</argsstring>
        <name>add_seed_nodes</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>seeds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="216" column="14" bodyfile="libraries/net/node.cpp" bodystart="5421" bodyend="5432"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1aa9b21bbbc17423862eae33ecf636db4a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::node::add_seed_node</definition>
        <argsstring>(const std::string &amp;in) const</argsstring>
        <name>add_seed_node</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="222" column="14" bodyfile="libraries/net/node.cpp" bodystart="5434" bodyend="5437"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a0990bd2f15136931d2b6f0e728dca723" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void graphene::net::node::connect_to_endpoint</definition>
        <argsstring>(const fc::ip::endpoint &amp;ep) const</argsstring>
        <name>connect_to_endpoint</name>
        <param>
          <type>const <ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">fc::ip::endpoint</ref> &amp;</type>
          <declname>ep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Attempt to connect to the specified endpoint immediately. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="227" column="22" bodyfile="libraries/net/node.cpp" bodystart="5107" bodyend="5110"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a3dae3a7f2e2201711c71d658e415a147" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::node::set_listen_endpoint</definition>
        <argsstring>(const fc::ip::endpoint &amp;ep, bool wait_if_not_available) const</argsstring>
        <name>set_listen_endpoint</name>
        <param>
          <type>const <ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">fc::ip::endpoint</ref> &amp;</type>
          <declname>ep</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>wait_if_not_available</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specifies the IP address and port on the &quot;local machine&quot; that should accept incoming connections. <simplesect kind="note"><para>To listen on all IPv4 addresses on the local machine, specify 0.0.0.0 as the address. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ep</parametername>
</parameternamelist>
<parameterdescription>
<para>the endpoint (IP address and port) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wait_if_not_available</parametername>
</parameternamelist>
<parameterdescription>
<para>keep retrying if port is not available </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="235" column="15" bodyfile="libraries/net/node.cpp" bodystart="5112" bodyend="5115"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a6ce06e5a644755a996e4b204770dfb61" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::node::set_inbound_endpoint</definition>
        <argsstring>(const fc::ip::endpoint &amp;ep) const</argsstring>
        <name>set_inbound_endpoint</name>
        <param>
          <type>const <ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">fc::ip::endpoint</ref> &amp;</type>
          <declname>ep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specifies the IP address and port on the &quot;external network&quot; which other peers should connect to. <simplesect kind="note"><para>If the address is unknown (E.G. dynamically allocated), specify 0.0.0.0 as the address. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ep</parametername>
</parameternamelist>
<parameterdescription>
<para>the endpoint (IP address and port) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="242" column="15" bodyfile="libraries/net/node.cpp" bodystart="5117" bodyend="5120"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1aac92b5b6e09941518381014cd8d72e3b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::node::set_accept_incoming_connections</definition>
        <argsstring>(bool accept) const</argsstring>
        <name>set_accept_incoming_connections</name>
        <param>
          <type>bool</type>
          <declname>accept</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enable or disable listening for incoming connections <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>accept</parametername>
</parameternamelist>
<parameterdescription>
<para>set to true to listen for incoming connections, false otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="248" column="15" bodyfile="libraries/net/node.cpp" bodystart="5122" bodyend="5125"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a67087014c8c39c711aa93dd878c0eaf4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::node::set_connect_to_new_peers</definition>
        <argsstring>(bool connect) const</argsstring>
        <name>set_connect_to_new_peers</name>
        <param>
          <type>bool</type>
          <declname>connect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="254" column="15" bodyfile="libraries/net/node.cpp" bodystart="5127" bodyend="5130"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a9fef22cd953664b4056cd1f71b6e6d61" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">fc::ip::endpoint</ref></type>
        <definition>fc::ip::endpoint graphene::net::node::get_actual_listening_endpoint</definition>
        <argsstring>() const</argsstring>
        <name>get_actual_listening_endpoint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the endpoint the node is listening on. This is usually the same as the value previously passed in to set_listen_endpoint, unless we were unable to bind to that port. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="261" column="34" bodyfile="libraries/net/node.cpp" bodystart="5132" bodyend="5135"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1aaf36284d44306b9fdc63b2ff90b83cc6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::node::set_advertise_algorithm</definition>
        <argsstring>(const std::string &amp;algo, const std::vector&lt; std::string &gt; &amp;advertise_or_exclude_list=std::vector&lt; std::string &gt;()) const</argsstring>
        <name>set_advertise_algorithm</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>algo</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>advertise_or_exclude_list</declname>
          <defval>std::vector&lt; std::string &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="269" column="14" bodyfile="libraries/net/node.cpp" bodystart="5439" bodyend="5443"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1ab072cf9c0ca8c36b6b6daaa511f9a5c6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structgraphene_1_1net_1_1peer__status" kindref="compound">peer_status</ref> &gt;</type>
        <definition>std::vector&lt; peer_status &gt; graphene::net::node::get_connected_peers</definition>
        <argsstring>() const</argsstring>
        <name>get_connected_peers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a list of peers that are currently connected. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="275" column="21" bodyfile="libraries/net/node.cpp" bodystart="5137" bodyend="5140"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1ad1f05e77435c78faf711695e50c54480" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>uint32_t</type>
        <definition>uint32_t graphene::net::node::get_connection_count</definition>
        <argsstring>() const</argsstring>
        <name>get_connection_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return the number of peers we&apos;re actively connected to </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="278" column="26" bodyfile="libraries/net/node.cpp" bodystart="5142" bodyend="5145"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a932698be6c2b2744b4437694e9382c8f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void graphene::net::node::broadcast</definition>
        <argsstring>(const message &amp;item_to_broadcast) const</argsstring>
        <name>broadcast</name>
        <param>
          <type>const <ref refid="structgraphene_1_1net_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>item_to_broadcast</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add message to outgoing inventory list, notify peers that I have a message ready. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="284" column="23" bodyfile="libraries/net/node.cpp" bodystart="5147" bodyend="5150"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a55f8e00890eed3cb6714a13ab00f7c5a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void graphene::net::node::broadcast_transaction</definition>
        <argsstring>(const signed_transaction &amp;trx) const</argsstring>
        <name>broadcast_transaction</name>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1signed__transaction" kindref="compound">signed_transaction</ref> &amp;</type>
          <declname>trx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="285" column="23" bodyfile="libraries/net/include/graphene/net/node.hpp" bodystart="285" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a0c95309d3a64468a5547289eafe054d0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void graphene::net::node::sync_from</definition>
        <argsstring>(const item_id &amp;current_head_block, const std::vector&lt; uint32_t &gt; &amp;hard_fork_block_numbers) const</argsstring>
        <name>sync_from</name>
        <param>
          <type>const <ref refid="structgraphene_1_1net_1_1item__id" kindref="compound">item_id</ref> &amp;</type>
          <declname>current_head_block</declname>
        </param>
        <param>
          <type>const std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>hard_fork_block_numbers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Node starts the process of fetching all items after <ref refid="structgraphene_1_1net_1_1item__id" kindref="compound">item_id</ref> of the given item_type. During this process messages are not broadcast. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="294" column="22" bodyfile="libraries/net/node.cpp" bodystart="5152" bodyend="5155"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a46a987337a98edfa76dc3b2a4ad88dbf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::net::node::is_connected</definition>
        <argsstring>() const</argsstring>
        <name>is_connected</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="297" column="19" bodyfile="libraries/net/node.cpp" bodystart="5157" bodyend="5160"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1affa997cb387c5768074c0fbd6a1b8a44" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::node::set_advanced_node_parameters</definition>
        <argsstring>(const fc::variant_object &amp;params) const</argsstring>
        <name>set_advanced_node_parameters</name>
        <param>
          <type>const <ref refid="classfc_1_1variant__object" kindref="compound">fc::variant_object</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="299" column="14" bodyfile="libraries/net/node.cpp" bodystart="5167" bodyend="5170"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a95762ec255543304d178e3408e7cc5fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1variant__object" kindref="compound">fc::variant_object</ref></type>
        <definition>fc::variant_object graphene::net::node::get_advanced_node_parameters</definition>
        <argsstring>() const</argsstring>
        <name>get_advanced_node_parameters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="300" column="28" bodyfile="libraries/net/node.cpp" bodystart="5172" bodyend="5175"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a280c060181b30f309c02d7e08fe01208" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1net_1_1message__propagation__data" kindref="compound">message_propagation_data</ref></type>
        <definition>message_propagation_data graphene::net::node::get_tx_propagation_data</definition>
        <argsstring>(const graphene::protocol::transaction_id_type &amp;transaction_id) const</argsstring>
        <name>get_tx_propagation_data</name>
        <param>
          <type>const <ref refid="namespacegraphene_1_1protocol_1a040f9f71bff896e89dc9ee3ff92bb076" kindref="member">graphene::protocol::transaction_id_type</ref> &amp;</type>
          <declname>transaction_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="301" column="34" bodyfile="libraries/net/node.cpp" bodystart="5177" bodyend="5181"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a54f8f9522584d25cd2d317180a6f263a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1net_1_1message__propagation__data" kindref="compound">message_propagation_data</ref></type>
        <definition>message_propagation_data graphene::net::node::get_block_propagation_data</definition>
        <argsstring>(const graphene::protocol::block_id_type &amp;block_id) const</argsstring>
        <name>get_block_propagation_data</name>
        <param>
          <type>const <ref refid="namespacegraphene_1_1protocol_1a32e784a8edceba5506db2c130ed9cb9c" kindref="member">graphene::protocol::block_id_type</ref> &amp;</type>
          <declname>block_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="303" column="34" bodyfile="libraries/net/node.cpp" bodystart="5183" bodyend="5186"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a066ce24a4560d5ec31baf11c1abdcf16" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegraphene_1_1net_1a557da170930e273d5a42e3541bd768e0" kindref="member">node_id_t</ref></type>
        <definition>node_id_t graphene::net::node::get_node_id</definition>
        <argsstring>() const</argsstring>
        <name>get_node_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="305" column="19" bodyfile="libraries/net/node.cpp" bodystart="5188" bodyend="5191"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a25802795dc4273965239bb1c28de0df1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::node::set_allowed_peers</definition>
        <argsstring>(const std::vector&lt; node_id_t &gt; &amp;allowed_peers) const</argsstring>
        <name>set_allowed_peers</name>
        <param>
          <type>const std::vector&lt; <ref refid="namespacegraphene_1_1net_1a557da170930e273d5a42e3541bd768e0" kindref="member">node_id_t</ref> &gt; &amp;</type>
          <declname>allowed_peers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="306" column="14" bodyfile="libraries/net/node.cpp" bodystart="5193" bodyend="5196"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a9722af2ddfd9b22d21bf2922cf28701d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::node::clear_peer_database</definition>
        <argsstring>() const</argsstring>
        <name>clear_peer_database</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Instructs the node to forget everything in its peer database, mostly for debugging problems where nodes are failing to connect to the network </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="312" column="14" bodyfile="libraries/net/node.cpp" bodystart="5198" bodyend="5201"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1ab7f3c4d6f83095d892e0f2f308d89d37" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::node::set_total_bandwidth_limit</definition>
        <argsstring>(uint32_t upload_bytes_per_second, uint32_t download_bytes_per_second) const</argsstring>
        <name>set_total_bandwidth_limit</name>
        <param>
          <type>uint32_t</type>
          <declname>upload_bytes_per_second</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>download_bytes_per_second</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="314" column="14" bodyfile="libraries/net/node.cpp" bodystart="5203" bodyend="5207"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a747c1dd9ddd21e12d19ba85eb1f2099c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1variant__object" kindref="compound">fc::variant_object</ref></type>
        <definition>fc::variant_object graphene::net::node::network_get_info</definition>
        <argsstring>() const</argsstring>
        <name>network_get_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="316" column="28" bodyfile="libraries/net/node.cpp" bodystart="5214" bodyend="5217"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a38dfa87ec1909786a9d25d4a8fee9065" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1variant__object" kindref="compound">fc::variant_object</ref></type>
        <definition>fc::variant_object graphene::net::node::network_get_usage_stats</definition>
        <argsstring>() const</argsstring>
        <name>network_get_usage_stats</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="317" column="28" bodyfile="libraries/net/node.cpp" bodystart="5219" bodyend="5222"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a9701b6bae930a30e3b1a7c2c34211062" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structgraphene_1_1net_1_1potential__peer__record" kindref="compound">potential_peer_record</ref> &gt;</type>
        <definition>std::vector&lt; potential_peer_record &gt; graphene::net::node::get_potential_peers</definition>
        <argsstring>() const</argsstring>
        <name>get_potential_peers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="319" column="21" bodyfile="libraries/net/node.cpp" bodystart="5162" bodyend="5165"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a2f3de66f56468d3f446b91ad65b4de94" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1variant__object" kindref="compound">fc::variant_object</ref></type>
        <definition>fc::variant_object graphene::net::node::get_call_statistics</definition>
        <argsstring>() const</argsstring>
        <name>get_call_statistics</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="321" column="28" bodyfile="libraries/net/node.cpp" bodystart="5209" bodyend="5212"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>provides application independent P2P broadcast and data synchronization </para>
    </briefdescription>
    <detaileddescription>
<para>Unanswered questions: when does the node start establishing network connections and accepting peers? we don&apos;t have enough info to start synchronizing until <ref refid="classgraphene_1_1net_1_1node_1a0c95309d3a64468a5547289eafe054d0" kindref="member">sync_from()</ref> is called, would we have any reason to connect before that? </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>graphene::net::node</label>
        <link refid="classgraphene_1_1net_1_1node"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>std::enable_shared_from_this&lt; node &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>graphene::net::node</label>
        <link refid="classgraphene_1_1net_1_1node"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>std::enable_shared_from_this&lt; node &gt;</label>
      </node>
    </collaborationgraph>
    <location file="libraries/net/include/graphene/net/node.hpp" line="191" column="1" bodyfile="libraries/net/include/graphene/net/node.hpp" bodystart="190" bodyend="324"/>
    <listofallmembers>
      <member refid="classgraphene_1_1net_1_1node_1a4ded2b0e5a1a0fa896665e5786479cc1" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>add_node</name></member>
      <member refid="classgraphene_1_1net_1_1node_1aa9b21bbbc17423862eae33ecf636db4a" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>add_seed_node</name></member>
      <member refid="classgraphene_1_1net_1_1node_1ae0faae1eee35ad141e77cb60cc04515c" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>add_seed_nodes</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a932698be6c2b2744b4437694e9382c8f" prot="public" virt="virtual"><scope>graphene::net::node</scope><name>broadcast</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a55f8e00890eed3cb6714a13ab00f7c5a" prot="public" virt="virtual"><scope>graphene::net::node</scope><name>broadcast_transaction</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a9722af2ddfd9b22d21bf2922cf28701d" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>clear_peer_database</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a418707491103c7198854fc7bf5794e0a" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>close</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a0990bd2f15136931d2b6f0e728dca723" prot="public" virt="virtual"><scope>graphene::net::node</scope><name>connect_to_endpoint</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a9af7cf0a283b9e043ed64cad5afa8936" prot="public" virt="virtual"><scope>graphene::net::node</scope><name>connect_to_p2p_network</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a9fef22cd953664b4056cd1f71b6e6d61" prot="public" virt="virtual"><scope>graphene::net::node</scope><name>get_actual_listening_endpoint</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a95762ec255543304d178e3408e7cc5fe" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>get_advanced_node_parameters</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a54f8f9522584d25cd2d317180a6f263a" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>get_block_propagation_data</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a2f3de66f56468d3f446b91ad65b4de94" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>get_call_statistics</name></member>
      <member refid="classgraphene_1_1net_1_1node_1ab072cf9c0ca8c36b6b6daaa511f9a5c6" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>get_connected_peers</name></member>
      <member refid="classgraphene_1_1net_1_1node_1ad1f05e77435c78faf711695e50c54480" prot="public" virt="virtual"><scope>graphene::net::node</scope><name>get_connection_count</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a066ce24a4560d5ec31baf11c1abdcf16" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>get_node_id</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a9701b6bae930a30e3b1a7c2c34211062" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>get_potential_peers</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a280c060181b30f309c02d7e08fe01208" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>get_tx_propagation_data</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a46a987337a98edfa76dc3b2a4ad88dbf" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>is_connected</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a57153507060ee2f6d2a84455d3bb67de" prot="public" virt="virtual"><scope>graphene::net::node</scope><name>listen_to_p2p_network</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a8e5d06dfb3e60cde6dffdae26e88ee8b" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>load_configuration</name></member>
      <member refid="classgraphene_1_1net_1_1node_1ad3a44f1cc1137524d1614a679556dc4b" prot="protected" virt="non-virtual"><scope>graphene::net::node</scope><name>my</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a747c1dd9ddd21e12d19ba85eb1f2099c" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>network_get_info</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a38dfa87ec1909786a9d25d4a8fee9065" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>network_get_usage_stats</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a2c669ad34653238449e0dc0f33319281" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>node</name></member>
      <member refid="classgraphene_1_1net_1_1node_1aac92b5b6e09941518381014cd8d72e3b" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>set_accept_incoming_connections</name></member>
      <member refid="classgraphene_1_1net_1_1node_1affa997cb387c5768074c0fbd6a1b8a44" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>set_advanced_node_parameters</name></member>
      <member refid="classgraphene_1_1net_1_1node_1aaf36284d44306b9fdc63b2ff90b83cc6" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>set_advertise_algorithm</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a25802795dc4273965239bb1c28de0df1" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>set_allowed_peers</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a67087014c8c39c711aa93dd878c0eaf4" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>set_connect_to_new_peers</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a6ce06e5a644755a996e4b204770dfb61" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>set_inbound_endpoint</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a3dae3a7f2e2201711c71d658e415a147" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>set_listen_endpoint</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a318f4bac4372181fea67aebfc5e85eae" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>set_node_delegate</name></member>
      <member refid="classgraphene_1_1net_1_1node_1ab7f3c4d6f83095d892e0f2f308d89d37" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>set_total_bandwidth_limit</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a0c95309d3a64468a5547289eafe054d0" prot="public" virt="virtual"><scope>graphene::net::node</scope><name>sync_from</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a4123cfc1660d19fe6c48a468d8daced0" prot="public" virt="virtual"><scope>graphene::net::node</scope><name>~node</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
