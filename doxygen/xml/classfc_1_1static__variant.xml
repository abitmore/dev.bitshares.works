<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classfc_1_1static__variant" kind="class" language="C++" prot="public">
    <compoundname>fc::static_variant</compoundname>
    <includes refid="raw__fwd_8hpp" local="no">raw_fwd.hpp</includes>
    <innerclass refid="structfc_1_1static__variant_1_1import__helper" prot="protected">fc::static_variant::import_helper</innerclass>
    <innerclass refid="structfc_1_1static__variant_1_1import__helper_3_01_t_00_01type__in__typelist_3_01_t_01_4_01_4" prot="protected">fc::static_variant::import_helper&lt; T, type_in_typelist&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structfc_1_1static__variant_1_1tag" prot="public">fc::static_variant::tag</innerclass>
    <innerclass refid="structfc_1_1static__variant_1_1type__eq" prot="public">fc::static_variant::type_eq</innerclass>
    <innerclass refid="structfc_1_1static__variant_1_1type__lt" prot="public">fc::static_variant::type_lt</innerclass>
    <templateparamlist>
      <param>
        <type>typename...</type>
        <declname>Types</declname>
        <defname>Types</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classfc_1_1static__variant_1aba87b38cb3bcf33da8b38323211fdcb7" prot="public" static="no">
        <type>int64_t</type>
        <definition>using fc::static_variant&lt; Types &gt;::tag_type =  int64_t</definition>
        <argsstring></argsstring>
        <name>tag_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/static_variant.hpp" line="46" column="5" bodyfile="libraries/fc/include/fc/static_variant.hpp" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classfc_1_1static__variant_1a03ad0667ee25a15d94667b7d3c7604ed" prot="public" static="no">
        <type><ref refid="structfc_1_1typelist_1_1list" kindref="compound">typelist::list</ref>&lt; Types... &gt;</type>
        <definition>using fc::static_variant&lt; Types &gt;::list =  typelist::list&lt;Types...&gt;</definition>
        <argsstring></argsstring>
        <name>list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/static_variant.hpp" line="47" column="5" bodyfile="libraries/fc/include/fc/static_variant.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classfc_1_1static__variant_1af88f7f04dd15f07ade8335a911542561" prot="public" static="no">
        <type>flat_set&lt; <ref refid="classfc_1_1static__variant" kindref="compound">static_variant</ref>, <ref refid="structfc_1_1static__variant_1_1type__lt" kindref="compound">type_lt</ref> &gt;</type>
        <definition>using fc::static_variant&lt; Types &gt;::flat_set_type =  flat_set&lt;static_variant, type_lt&gt;</definition>
        <argsstring></argsstring>
        <name>flat_set_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/static_variant.hpp" line="132" column="5" bodyfile="libraries/fc/include/fc/static_variant.hpp" bodystart="132" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-type">
      <memberdef kind="typedef" id="classfc_1_1static__variant_1a38b3a37de693251654e02a796402c37c" prot="protected" static="no">
        <templateparamlist>
          <param>
            <type>typename X</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; typelist::index_of&lt; <ref refid="classfc_1_1static__variant_1a03ad0667ee25a15d94667b7d3c7604ed" kindref="member">list</ref>, X &gt;() !=-1 &gt;</type>
        <definition>using fc::static_variant&lt; Types &gt;::type_in_typelist =  std::enable_if_t&lt;typelist::index_of&lt;list, X&gt;() != -1&gt;</definition>
        <argsstring></argsstring>
        <name>type_in_typelist</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/static_variant.hpp" line="56" column="5" bodyfile="libraries/fc/include/fc/static_variant.hpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classfc_1_1static__variant_1af7bccf217a452e1673051f613c6f844a" prot="protected" static="no" mutable="no">
        <type><ref refid="classfc_1_1static__variant_1aba87b38cb3bcf33da8b38323211fdcb7" kindref="member">tag_type</ref></type>
        <definition>tag_type fc::static_variant&lt; Types &gt;::_tag</definition>
        <argsstring></argsstring>
        <name>_tag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/static_variant.hpp" line="58" column="14" bodyfile="libraries/fc/include/fc/static_variant.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classfc_1_1static__variant_1a48520140372c08b994d3ca27a683f9c9" prot="protected" static="no" mutable="no">
        <type><ref refid="classfc_1_1impl_1_1dynamic__storage" kindref="compound">impl::dynamic_storage</ref></type>
        <definition>impl::dynamic_storage fc::static_variant&lt; Types &gt;::storage</definition>
        <argsstring></argsstring>
        <name>storage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/static_variant.hpp" line="59" column="27" bodyfile="libraries/fc/include/fc/static_variant.hpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classfc_1_1static__variant_1abd3a3e46a8f4558e5b0893a662415bf7" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename X</type>
          </param>
          <param>
            <type>typename</type>
            <defval><ref refid="classfc_1_1static__variant_1a38b3a37de693251654e02a796402c37c" kindref="member">type_in_typelist</ref>&lt;X&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::static_variant&lt; Types &gt;::init</definition>
        <argsstring>(const X &amp;x)</argsstring>
        <name>init</name>
        <param>
          <type>const X &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/static_variant.hpp" line="62" column="10" bodyfile="libraries/fc/include/fc/static_variant.hpp" bodystart="62" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1static__variant_1a92f1fb0160ff6e8649a3da77ff4774a8" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename X</type>
          </param>
          <param>
            <type>typename</type>
            <defval><ref refid="classfc_1_1static__variant_1a38b3a37de693251654e02a796402c37c" kindref="member">type_in_typelist</ref>&lt;X&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::static_variant&lt; Types &gt;::init</definition>
        <argsstring>(X &amp;&amp;x)</argsstring>
        <name>init</name>
        <param>
          <type>X &amp;&amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/static_variant.hpp" line="69" column="10" bodyfile="libraries/fc/include/fc/static_variant.hpp" bodystart="69" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1static__variant_1a7e3fa4109db2099c03f2ab3b954b8660" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void fc::static_variant&lt; Types &gt;::init_from_tag</definition>
        <argsstring>(tag_type tag)</argsstring>
        <name>init_from_tag</name>
        <param>
          <type><ref refid="classfc_1_1static__variant_1aba87b38cb3bcf33da8b38323211fdcb7" kindref="member">tag_type</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/static_variant.hpp" line="75" column="10" bodyfile="libraries/fc/include/fc/static_variant.hpp" bodystart="75" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1static__variant_1a53f125b737e8ea2c32e11b9614baebc5" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void fc::static_variant&lt; Types &gt;::clean</definition>
        <argsstring>()</argsstring>
        <name>clean</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/static_variant.hpp" line="89" column="10" bodyfile="libraries/fc/include/fc/static_variant.hpp" bodystart="89" bodyend="96"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classfc_1_1static__variant_1a2f48c6f1af1627152cda7373180c8680" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Other</declname>
            <defname>Other</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classfc_1_1static__variant" kindref="compound">static_variant</ref></type>
        <definition>static static_variant fc::static_variant&lt; Types &gt;::import_from</definition>
        <argsstring>(const static_variant&lt; Other... &gt; &amp;other)</argsstring>
        <name>import_from</name>
        <param>
          <type>const <ref refid="classfc_1_1static__variant" kindref="compound">static_variant</ref>&lt; Other... &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Import the value from a foreign <ref refid="classfc_1_1static__variant" kindref="compound">static_variant</ref> with types not in this one, and throw if the value is an incompatible type </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/static_variant.hpp" line="137" column="27" bodyfile="libraries/fc/include/fc/static_variant.hpp" bodystart="137" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1static__variant_1ac3c523426f6d203b8da7f64802f58275" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Other</declname>
            <defname>Other</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classfc_1_1static__variant" kindref="compound">static_variant</ref></type>
        <definition>static static_variant fc::static_variant&lt; Types &gt;::import_from</definition>
        <argsstring>(static_variant&lt; Other... &gt; &amp;&amp;other)</argsstring>
        <name>import_from</name>
        <param>
          <type><ref refid="classfc_1_1static__variant" kindref="compound">static_variant</ref>&lt; Other... &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Import the value from a foreign <ref refid="classfc_1_1static__variant" kindref="compound">static_variant</ref> with types not in this one, and throw if the value is an incompatible type </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/static_variant.hpp" line="146" column="27" bodyfile="libraries/fc/include/fc/static_variant.hpp" bodystart="146" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1static__variant_1aea20045d8096843fb3680349e07ac93d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename visitor</type>
          </param>
        </templateparamlist>
        <type>visitor::result_type</type>
        <definition>static visitor::result_type fc::static_variant&lt; Types &gt;::visit</definition>
        <argsstring>(tag_type tag, visitor &amp;v, void *data)</argsstring>
        <name>visit</name>
        <param>
          <type><ref refid="classfc_1_1static__variant_1aba87b38cb3bcf33da8b38323211fdcb7" kindref="member">tag_type</ref></type>
          <declname>tag</declname>
        </param>
        <param>
          <type>visitor &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/static_variant.hpp" line="276" column="42" bodyfile="libraries/fc/include/fc/static_variant.hpp" bodystart="276" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1static__variant_1adc071b36a163f5b7ac22e084d7724681" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename visitor</type>
          </param>
        </templateparamlist>
        <type>visitor::result_type</type>
        <definition>static visitor::result_type fc::static_variant&lt; Types &gt;::visit</definition>
        <argsstring>(tag_type tag, const visitor &amp;v, void *data)</argsstring>
        <name>visit</name>
        <param>
          <type><ref refid="classfc_1_1static__variant_1aba87b38cb3bcf33da8b38323211fdcb7" kindref="member">tag_type</ref></type>
          <declname>tag</declname>
        </param>
        <param>
          <type>const visitor &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/static_variant.hpp" line="287" column="42" bodyfile="libraries/fc/include/fc/static_variant.hpp" bodystart="287" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1static__variant_1a95ba0f5aed51c46206170e64eba38ec7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename visitor</type>
          </param>
        </templateparamlist>
        <type>visitor::result_type</type>
        <definition>static visitor::result_type fc::static_variant&lt; Types &gt;::visit</definition>
        <argsstring>(tag_type tag, visitor &amp;v, const void *data)</argsstring>
        <name>visit</name>
        <param>
          <type><ref refid="classfc_1_1static__variant_1aba87b38cb3bcf33da8b38323211fdcb7" kindref="member">tag_type</ref></type>
          <declname>tag</declname>
        </param>
        <param>
          <type>visitor &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/static_variant.hpp" line="298" column="42" bodyfile="libraries/fc/include/fc/static_variant.hpp" bodystart="298" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1static__variant_1a9c41da3c7d5aa4c09b46eaa7ead9a8c5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename visitor</type>
          </param>
        </templateparamlist>
        <type>visitor::result_type</type>
        <definition>static visitor::result_type fc::static_variant&lt; Types &gt;::visit</definition>
        <argsstring>(tag_type tag, const visitor &amp;v, const void *data)</argsstring>
        <name>visit</name>
        <param>
          <type><ref refid="classfc_1_1static__variant_1aba87b38cb3bcf33da8b38323211fdcb7" kindref="member">tag_type</ref></type>
          <declname>tag</declname>
        </param>
        <param>
          <type>const visitor &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/static_variant.hpp" line="309" column="42" bodyfile="libraries/fc/include/fc/static_variant.hpp" bodystart="309" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1static__variant_1a4619c2fb92a1ee1b5ba992a2175e868b" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr size_t</type>
        <definition>static constexpr size_t fc::static_variant&lt; Types &gt;::count</definition>
        <argsstring>()</argsstring>
        <name>count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/static_variant.hpp" line="319" column="29" bodyfile="libraries/fc/include/fc/static_variant.hpp" bodystart="319" bodyend="319"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classfc_1_1static__variant_1af150f40b5b3860e28be1ef0710dc9718" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>fc::static_variant&lt; Types &gt;::static_variant</definition>
        <argsstring>()</argsstring>
        <name>static_variant</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/static_variant.hpp" line="153" column="5" bodyfile="libraries/fc/include/fc/static_variant.hpp" bodystart="153" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1static__variant_1a2b4e0ec9f3fa4383f9030e92281388ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Other</declname>
            <defname>Other</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>fc::static_variant&lt; Types &gt;::static_variant</definition>
        <argsstring>(const static_variant&lt; Other... &gt; &amp;cpy)</argsstring>
        <name>static_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1static__variant" kindref="compound">static_variant</ref>&lt; Other... &gt; &amp;</type>
          <declname>cpy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/static_variant.hpp" line="159" column="5" bodyfile="libraries/fc/include/fc/static_variant.hpp" bodystart="159" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1static__variant_1ad8841f15bfeead64a55d4cb01a6d93bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>fc::static_variant&lt; Types &gt;::static_variant</definition>
        <argsstring>(const static_variant &amp;cpy)</argsstring>
        <name>static_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1static__variant" kindref="compound">static_variant</ref> &amp;</type>
          <declname>cpy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/static_variant.hpp" line="166" column="5" bodyfile="libraries/fc/include/fc/static_variant.hpp" bodystart="166" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1static__variant_1a163c0efde242bed98389f8e47a95284c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>fc::static_variant&lt; Types &gt;::static_variant</definition>
        <argsstring>(static_variant &amp;&amp;mv)</argsstring>
        <name>static_variant</name>
        <param>
          <type><ref refid="classfc_1_1static__variant" kindref="compound">static_variant</ref> &amp;&amp;</type>
          <declname>mv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/static_variant.hpp" line="173" column="5" bodyfile="libraries/fc/include/fc/static_variant.hpp" bodystart="173" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1static__variant_1ad65568e7924085139d95809ebdbec439" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Other</declname>
            <defname>Other</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>fc::static_variant&lt; Types &gt;::static_variant</definition>
        <argsstring>(static_variant&lt; Other... &gt; &amp;&amp;mv)</argsstring>
        <name>static_variant</name>
        <param>
          <type><ref refid="classfc_1_1static__variant" kindref="compound">static_variant</ref>&lt; Other... &gt; &amp;&amp;</type>
          <declname>mv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/static_variant.hpp" line="181" column="5" bodyfile="libraries/fc/include/fc/static_variant.hpp" bodystart="181" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1static__variant_1a38f834c72dfffa8f6f2b9cd75ab0a289" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename X</type>
          </param>
          <param>
            <type>typename</type>
            <defval><ref refid="classfc_1_1static__variant_1a38b3a37de693251654e02a796402c37c" kindref="member">type_in_typelist</ref>&lt;X&gt;</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>fc::static_variant&lt; Types &gt;::static_variant</definition>
        <argsstring>(const X &amp;v)</argsstring>
        <name>static_variant</name>
        <param>
          <type>const X &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/static_variant.hpp" line="189" column="5" bodyfile="libraries/fc/include/fc/static_variant.hpp" bodystart="189" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1static__variant_1a385ffe0884ea09366796a92598a2bb38" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename X</type>
          </param>
          <param>
            <type>typename</type>
            <defval><ref refid="classfc_1_1static__variant_1a38b3a37de693251654e02a796402c37c" kindref="member">type_in_typelist</ref>&lt;X&gt;</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>fc::static_variant&lt; Types &gt;::static_variant</definition>
        <argsstring>(X &amp;&amp;v)</argsstring>
        <name>static_variant</name>
        <param>
          <type>X &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/static_variant.hpp" line="193" column="5" bodyfile="libraries/fc/include/fc/static_variant.hpp" bodystart="193" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1static__variant_1a5d668b4e7e178afd9d7c83fa2776b9b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>fc::static_variant&lt; Types &gt;::~static_variant</definition>
        <argsstring>()</argsstring>
        <name>~static_variant</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/static_variant.hpp" line="197" column="5" bodyfile="libraries/fc/include/fc/static_variant.hpp" bodystart="197" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1static__variant_1a32f2b7544df5c070ac8d4c935fe9036c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename X</type>
          </param>
          <param>
            <type>typename</type>
            <defval><ref refid="classfc_1_1static__variant_1a38b3a37de693251654e02a796402c37c" kindref="member">type_in_typelist</ref>&lt;X&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classfc_1_1static__variant" kindref="compound">static_variant</ref> &amp;</type>
        <definition>static_variant&amp; fc::static_variant&lt; Types &gt;::operator=</definition>
        <argsstring>(const X &amp;v)</argsstring>
        <name>operator=</name>
        <param>
          <type>const X &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/static_variant.hpp" line="202" column="20" bodyfile="libraries/fc/include/fc/static_variant.hpp" bodystart="202" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1static__variant_1aba7bff21c84651e5c173e83970e89068" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfc_1_1static__variant" kindref="compound">static_variant</ref> &amp;</type>
        <definition>static_variant&amp; fc::static_variant&lt; Types &gt;::operator=</definition>
        <argsstring>(const static_variant &amp;v)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classfc_1_1static__variant" kindref="compound">static_variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/static_variant.hpp" line="207" column="20" bodyfile="libraries/fc/include/fc/static_variant.hpp" bodystart="207" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1static__variant_1abd8fecdd03a65f1045cdac2875eddd88" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfc_1_1static__variant" kindref="compound">static_variant</ref> &amp;</type>
        <definition>static_variant&amp; fc::static_variant&lt; Types &gt;::operator=</definition>
        <argsstring>(static_variant &amp;&amp;v)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classfc_1_1static__variant" kindref="compound">static_variant</ref> &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/static_variant.hpp" line="216" column="20" bodyfile="libraries/fc/include/fc/static_variant.hpp" bodystart="216" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1static__variant_1a9dc9edbccc8adc738c5f86dff8fdfc62" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename X</type>
          </param>
          <param>
            <type>typename</type>
            <defval><ref refid="classfc_1_1static__variant_1a38b3a37de693251654e02a796402c37c" kindref="member">type_in_typelist</ref>&lt;X&gt;</defval>
          </param>
        </templateparamlist>
        <type>X &amp;</type>
        <definition>X&amp; fc::static_variant&lt; Types &gt;::get</definition>
        <argsstring>()</argsstring>
        <name>get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/static_variant.hpp" line="236" column="7" bodyfile="libraries/fc/include/fc/static_variant.hpp" bodystart="236" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1static__variant_1a483073cdc1ddcb54c05cb05685356be0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename X</type>
          </param>
          <param>
            <type>typename</type>
            <defval><ref refid="classfc_1_1static__variant_1a38b3a37de693251654e02a796402c37c" kindref="member">type_in_typelist</ref>&lt;X&gt;</defval>
          </param>
        </templateparamlist>
        <type>const X &amp;</type>
        <definition>const X&amp; fc::static_variant&lt; Types &gt;::get</definition>
        <argsstring>() const</argsstring>
        <name>get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/static_variant.hpp" line="246" column="13" bodyfile="libraries/fc/include/fc/static_variant.hpp" bodystart="246" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1static__variant_1a925e65f1cb62cb92e017aa720b66697a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename visitor</type>
          </param>
        </templateparamlist>
        <type>visitor::result_type</type>
        <definition>visitor::result_type fc::static_variant&lt; Types &gt;::visit</definition>
        <argsstring>(visitor &amp;v)</argsstring>
        <name>visit</name>
        <param>
          <type>visitor &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/static_variant.hpp" line="256" column="35" bodyfile="libraries/fc/include/fc/static_variant.hpp" bodystart="256" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1static__variant_1ada2479eb3f11e2067bb81766864faede" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename visitor</type>
          </param>
        </templateparamlist>
        <type>visitor::result_type</type>
        <definition>visitor::result_type fc::static_variant&lt; Types &gt;::visit</definition>
        <argsstring>(const visitor &amp;v)</argsstring>
        <name>visit</name>
        <param>
          <type>const visitor &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/static_variant.hpp" line="261" column="35" bodyfile="libraries/fc/include/fc/static_variant.hpp" bodystart="261" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1static__variant_1ab55fdf4f0a8aa9959af125b8b857fd6d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename visitor</type>
          </param>
        </templateparamlist>
        <type>visitor::result_type</type>
        <definition>visitor::result_type fc::static_variant&lt; Types &gt;::visit</definition>
        <argsstring>(visitor &amp;v) const</argsstring>
        <name>visit</name>
        <param>
          <type>visitor &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/static_variant.hpp" line="266" column="35" bodyfile="libraries/fc/include/fc/static_variant.hpp" bodystart="266" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1static__variant_1a1a26a7e9eea0491e7e4d8a0eaf049c31" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename visitor</type>
          </param>
        </templateparamlist>
        <type>visitor::result_type</type>
        <definition>visitor::result_type fc::static_variant&lt; Types &gt;::visit</definition>
        <argsstring>(const visitor &amp;v) const</argsstring>
        <name>visit</name>
        <param>
          <type>const visitor &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/static_variant.hpp" line="271" column="35" bodyfile="libraries/fc/include/fc/static_variant.hpp" bodystart="271" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1static__variant_1a00a7b4405889f8c91024b884f47540fb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void fc::static_variant&lt; Types &gt;::set_which</definition>
        <argsstring>(tag_type tag)</argsstring>
        <name>set_which</name>
        <param>
          <type><ref refid="classfc_1_1static__variant_1aba87b38cb3bcf33da8b38323211fdcb7" kindref="member">tag_type</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/static_variant.hpp" line="320" column="10" bodyfile="libraries/fc/include/fc/static_variant.hpp" bodystart="320" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1static__variant_1a40403826f654825ed6081aff5c50624f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfc_1_1static__variant_1aba87b38cb3bcf33da8b38323211fdcb7" kindref="member">tag_type</ref></type>
        <definition>tag_type fc::static_variant&lt; Types &gt;::which</definition>
        <argsstring>() const</argsstring>
        <name>which</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/static_variant.hpp" line="329" column="14" bodyfile="libraries/fc/include/fc/static_variant.hpp" bodystart="329" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1static__variant_1a38c5425760ec21725f8fb9c2018b3cb7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool fc::static_variant&lt; Types &gt;::is_type</definition>
        <argsstring>() const</argsstring>
        <name>is_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/static_variant.hpp" line="332" column="10" bodyfile="libraries/fc/include/fc/static_variant.hpp" bodystart="332" bodyend="332"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classfc_1_1static__variant_1a4f8bf4c32a2bf2ce7c91a81a1fcd3b8c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const static_variant &amp;a, const static_variant &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classfc_1_1static__variant" kindref="compound">static_variant</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1static__variant" kindref="compound">static_variant</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/static_variant.hpp" line="226" column="17" bodyfile="libraries/fc/include/fc/static_variant.hpp" bodystart="226" bodyend="233"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>fc::static_variant&lt; Types &gt;</label>
        <link refid="classfc_1_1static__variant"/>
        <childnode refid="2" relation="usage">
          <edgelabel>storage</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>fc::impl::dynamic_storage</label>
        <link refid="classfc_1_1impl_1_1dynamic__storage"/>
      </node>
    </collaborationgraph>
    <location file="libraries/fc/include/fc/io/raw_fwd.hpp" line="27" column="14" bodyfile="libraries/fc/include/fc/io/raw_fwd.hpp" bodystart="27" bodyend="-1"/>
    <listofallmembers>
      <member refid="classfc_1_1static__variant_1af7bccf217a452e1673051f613c6f844a" prot="protected" virt="non-virtual"><scope>fc::static_variant</scope><name>_tag</name></member>
      <member refid="classfc_1_1static__variant_1a53f125b737e8ea2c32e11b9614baebc5" prot="protected" virt="non-virtual"><scope>fc::static_variant</scope><name>clean</name></member>
      <member refid="classfc_1_1static__variant_1a4619c2fb92a1ee1b5ba992a2175e868b" prot="public" virt="non-virtual"><scope>fc::static_variant</scope><name>count</name></member>
      <member refid="classfc_1_1static__variant_1af88f7f04dd15f07ade8335a911542561" prot="public" virt="non-virtual"><scope>fc::static_variant</scope><name>flat_set_type</name></member>
      <member refid="classfc_1_1static__variant_1a9dc9edbccc8adc738c5f86dff8fdfc62" prot="public" virt="non-virtual"><scope>fc::static_variant</scope><name>get</name></member>
      <member refid="classfc_1_1static__variant_1a483073cdc1ddcb54c05cb05685356be0" prot="public" virt="non-virtual"><scope>fc::static_variant</scope><name>get</name></member>
      <member refid="classfc_1_1static__variant_1a2f48c6f1af1627152cda7373180c8680" prot="public" virt="non-virtual"><scope>fc::static_variant</scope><name>import_from</name></member>
      <member refid="classfc_1_1static__variant_1ac3c523426f6d203b8da7f64802f58275" prot="public" virt="non-virtual"><scope>fc::static_variant</scope><name>import_from</name></member>
      <member refid="classfc_1_1static__variant_1abd3a3e46a8f4558e5b0893a662415bf7" prot="protected" virt="non-virtual"><scope>fc::static_variant</scope><name>init</name></member>
      <member refid="classfc_1_1static__variant_1a92f1fb0160ff6e8649a3da77ff4774a8" prot="protected" virt="non-virtual"><scope>fc::static_variant</scope><name>init</name></member>
      <member refid="classfc_1_1static__variant_1a7e3fa4109db2099c03f2ab3b954b8660" prot="protected" virt="non-virtual"><scope>fc::static_variant</scope><name>init_from_tag</name></member>
      <member refid="classfc_1_1static__variant_1a38c5425760ec21725f8fb9c2018b3cb7" prot="public" virt="non-virtual"><scope>fc::static_variant</scope><name>is_type</name></member>
      <member refid="classfc_1_1static__variant_1a03ad0667ee25a15d94667b7d3c7604ed" prot="public" virt="non-virtual"><scope>fc::static_variant</scope><name>list</name></member>
      <member refid="classfc_1_1static__variant_1a32f2b7544df5c070ac8d4c935fe9036c" prot="public" virt="non-virtual"><scope>fc::static_variant</scope><name>operator=</name></member>
      <member refid="classfc_1_1static__variant_1aba7bff21c84651e5c173e83970e89068" prot="public" virt="non-virtual"><scope>fc::static_variant</scope><name>operator=</name></member>
      <member refid="classfc_1_1static__variant_1abd8fecdd03a65f1045cdac2875eddd88" prot="public" virt="non-virtual"><scope>fc::static_variant</scope><name>operator=</name></member>
      <member refid="classfc_1_1static__variant_1a4f8bf4c32a2bf2ce7c91a81a1fcd3b8c" prot="public" virt="non-virtual"><scope>fc::static_variant</scope><name>operator==</name></member>
      <member refid="classfc_1_1static__variant_1a00a7b4405889f8c91024b884f47540fb" prot="public" virt="non-virtual"><scope>fc::static_variant</scope><name>set_which</name></member>
      <member refid="classfc_1_1static__variant_1af150f40b5b3860e28be1ef0710dc9718" prot="public" virt="non-virtual"><scope>fc::static_variant</scope><name>static_variant</name></member>
      <member refid="classfc_1_1static__variant_1a2b4e0ec9f3fa4383f9030e92281388ff" prot="public" virt="non-virtual"><scope>fc::static_variant</scope><name>static_variant</name></member>
      <member refid="classfc_1_1static__variant_1ad8841f15bfeead64a55d4cb01a6d93bc" prot="public" virt="non-virtual"><scope>fc::static_variant</scope><name>static_variant</name></member>
      <member refid="classfc_1_1static__variant_1a163c0efde242bed98389f8e47a95284c" prot="public" virt="non-virtual"><scope>fc::static_variant</scope><name>static_variant</name></member>
      <member refid="classfc_1_1static__variant_1ad65568e7924085139d95809ebdbec439" prot="public" virt="non-virtual"><scope>fc::static_variant</scope><name>static_variant</name></member>
      <member refid="classfc_1_1static__variant_1a38f834c72dfffa8f6f2b9cd75ab0a289" prot="public" virt="non-virtual"><scope>fc::static_variant</scope><name>static_variant</name></member>
      <member refid="classfc_1_1static__variant_1a385ffe0884ea09366796a92598a2bb38" prot="public" virt="non-virtual"><scope>fc::static_variant</scope><name>static_variant</name></member>
      <member refid="classfc_1_1static__variant_1a48520140372c08b994d3ca27a683f9c9" prot="protected" virt="non-virtual"><scope>fc::static_variant</scope><name>storage</name></member>
      <member refid="classfc_1_1static__variant_1aba87b38cb3bcf33da8b38323211fdcb7" prot="public" virt="non-virtual"><scope>fc::static_variant</scope><name>tag_type</name></member>
      <member refid="classfc_1_1static__variant_1a38b3a37de693251654e02a796402c37c" prot="protected" virt="non-virtual"><scope>fc::static_variant</scope><name>type_in_typelist</name></member>
      <member refid="classfc_1_1static__variant_1a925e65f1cb62cb92e017aa720b66697a" prot="public" virt="non-virtual"><scope>fc::static_variant</scope><name>visit</name></member>
      <member refid="classfc_1_1static__variant_1ada2479eb3f11e2067bb81766864faede" prot="public" virt="non-virtual"><scope>fc::static_variant</scope><name>visit</name></member>
      <member refid="classfc_1_1static__variant_1ab55fdf4f0a8aa9959af125b8b857fd6d" prot="public" virt="non-virtual"><scope>fc::static_variant</scope><name>visit</name></member>
      <member refid="classfc_1_1static__variant_1a1a26a7e9eea0491e7e4d8a0eaf049c31" prot="public" virt="non-virtual"><scope>fc::static_variant</scope><name>visit</name></member>
      <member refid="classfc_1_1static__variant_1aea20045d8096843fb3680349e07ac93d" prot="public" virt="non-virtual"><scope>fc::static_variant</scope><name>visit</name></member>
      <member refid="classfc_1_1static__variant_1adc071b36a163f5b7ac22e084d7724681" prot="public" virt="non-virtual"><scope>fc::static_variant</scope><name>visit</name></member>
      <member refid="classfc_1_1static__variant_1a95ba0f5aed51c46206170e64eba38ec7" prot="public" virt="non-virtual"><scope>fc::static_variant</scope><name>visit</name></member>
      <member refid="classfc_1_1static__variant_1a9c41da3c7d5aa4c09b46eaa7ead9a8c5" prot="public" virt="non-virtual"><scope>fc::static_variant</scope><name>visit</name></member>
      <member refid="classfc_1_1static__variant_1a40403826f654825ed6081aff5c50624f" prot="public" virt="non-virtual"><scope>fc::static_variant</scope><name>which</name></member>
      <member refid="classfc_1_1static__variant_1a5d668b4e7e178afd9d7c83fa2776b9b0" prot="public" virt="non-virtual"><scope>fc::static_variant</scope><name>~static_variant</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
