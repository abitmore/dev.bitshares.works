<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structfc_1_1typelist_1_1builder" kind="struct" language="C++" prot="public">
    <compoundname>fc::typelist::builder</compoundname>
    <includes refid="typelist_8hpp" local="no">typelist.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>List</declname>
        <defname>List</defname>
        <defval><ref refid="structfc_1_1typelist_1_1list" kindref="compound">list</ref>&lt;&gt;</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structfc_1_1typelist_1_1builder_1aebd6c317413faec60ee88c4457b26ef4" prot="public" static="no">
        <type>typename <ref refid="structfc_1_1typelist_1_1builder" kindref="compound">builder</ref>&lt; typename <ref refid="structfc_1_1typelist_1_1impl_1_1concat" kindref="compound">impl::concat</ref>&lt; List, <ref refid="structfc_1_1typelist_1_1list" kindref="compound">list</ref>&lt; NewType &gt; &gt;::<ref refid="structfc_1_1typelist_1_1builder_1ad1307aad3e565cf09d2d366cb690f65c" kindref="member">type</ref> &gt;::<ref refid="structfc_1_1typelist_1_1builder_1ad1307aad3e565cf09d2d366cb690f65c" kindref="member">type</ref></type>
        <definition>using fc::typelist::builder&lt; List &gt;::add =  typename builder&lt;typename impl::concat&lt;List, list&lt;NewType&gt; &gt;::type&gt;::type</definition>
        <argsstring></argsstring>
        <name>add</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/reflect/typelist.hpp" line="162" column="1" bodyfile="libraries/fc/include/fc/reflect/typelist.hpp" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structfc_1_1typelist_1_1builder_1ae7d5e943653606eb1ad2c4948086401f" prot="public" static="no">
        <type>typename <ref refid="structfc_1_1typelist_1_1builder" kindref="compound">builder</ref>&lt; typename <ref refid="structfc_1_1typelist_1_1impl_1_1concat" kindref="compound">impl::concat</ref>&lt; List, NewList &gt;::<ref refid="structfc_1_1typelist_1_1builder_1ad1307aad3e565cf09d2d366cb690f65c" kindref="member">type</ref> &gt;::<ref refid="structfc_1_1typelist_1_1builder_1ad1307aad3e565cf09d2d366cb690f65c" kindref="member">type</ref></type>
        <definition>using fc::typelist::builder&lt; List &gt;::add_list =  typename builder&lt;typename impl::concat&lt;List, NewList&gt;::type&gt;::type</definition>
        <argsstring></argsstring>
        <name>add_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/reflect/typelist.hpp" line="163" column="1" bodyfile="libraries/fc/include/fc/reflect/typelist.hpp" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structfc_1_1typelist_1_1builder_1ad1307aad3e565cf09d2d366cb690f65c" prot="public" static="no">
        <type><ref refid="structfc_1_1typelist_1_1builder" kindref="compound">builder</ref></type>
        <definition>using fc::typelist::builder&lt; List &gt;::type =  builder</definition>
        <argsstring></argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/reflect/typelist.hpp" line="164" column="1" bodyfile="libraries/fc/include/fc/reflect/typelist.hpp" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structfc_1_1typelist_1_1builder_1a6a0bb5ea2a5ba68fee0eac79f3ff14cf" prot="public" static="no">
        <type>List</type>
        <definition>using fc::typelist::builder&lt; List &gt;::finalize =  List</definition>
        <argsstring></argsstring>
        <name>finalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/reflect/typelist.hpp" line="165" column="1" bodyfile="libraries/fc/include/fc/reflect/typelist.hpp" bodystart="165" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Template to build typelists using the following syntax: <programlisting><codeline><highlight class="normal">builder&lt;&gt;::type::add&lt;T1&gt;::add&lt;T2&gt;::add&lt;T3&gt;[...]::finalize<sp/></highlight></codeline>
</programlisting> Or: <programlisting><codeline><highlight class="normal">builder&lt;&gt;::type::add_list&lt;list&lt;T1,<sp/>T2&gt;&gt;::add_list&lt;T3,<sp/>T4&gt;&gt;[...]::finalize<sp/></highlight></codeline>
</programlisting> </para>    </detaileddescription>
    <location file="libraries/fc/include/fc/reflect/typelist.hpp" line="161" column="1" bodyfile="libraries/fc/include/fc/reflect/typelist.hpp" bodystart="161" bodyend="166"/>
    <listofallmembers>
      <member refid="structfc_1_1typelist_1_1builder_1aebd6c317413faec60ee88c4457b26ef4" prot="public" virt="non-virtual"><scope>fc::typelist::builder</scope><name>add</name></member>
      <member refid="structfc_1_1typelist_1_1builder_1ae7d5e943653606eb1ad2c4948086401f" prot="public" virt="non-virtual"><scope>fc::typelist::builder</scope><name>add_list</name></member>
      <member refid="structfc_1_1typelist_1_1builder_1a6a0bb5ea2a5ba68fee0eac79f3ff14cf" prot="public" virt="non-virtual"><scope>fc::typelist::builder</scope><name>finalize</name></member>
      <member refid="structfc_1_1typelist_1_1builder_1ad1307aad3e565cf09d2d366cb690f65c" prot="public" virt="non-virtual"><scope>fc::typelist::builder</scope><name>type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
