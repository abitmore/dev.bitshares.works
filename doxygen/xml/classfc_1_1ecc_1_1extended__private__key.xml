<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classfc_1_1ecc_1_1extended__private__key" kind="class" language="C++" prot="public">
    <compoundname>fc::ecc::extended_private_key</compoundname>
    <basecompoundref refid="classfc_1_1ecc_1_1private__key" prot="public" virt="non-virtual">fc::ecc::private_key</basecompoundref>
    <includes refid="elliptic_8hpp" local="no">elliptic.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classfc_1_1ecc_1_1extended__private__key_1a5a1655c6895b993f3285aa77f15f47c9" prot="private" static="no" mutable="no">
        <type><ref refid="classfc_1_1sha256" kindref="compound">sha256</ref></type>
        <definition>sha256 fc::ecc::extended_private_key::c</definition>
        <argsstring></argsstring>
        <name>c</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="191" column="1" bodyfile="libraries/fc/include/fc/crypto/elliptic.hpp" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classfc_1_1ecc_1_1extended__private__key_1aa3479b79c5e28942823585ea2b93453c" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int fc::ecc::extended_private_key::child_num</definition>
        <argsstring></argsstring>
        <name>child_num</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="192" column="1" bodyfile="libraries/fc/include/fc/crypto/elliptic.hpp" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classfc_1_1ecc_1_1extended__private__key_1acd8d93b2bad24066c1ecc5e6424c4e73" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int fc::ecc::extended_private_key::parent_fp</definition>
        <argsstring></argsstring>
        <name>parent_fp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="192" column="1" bodyfile="libraries/fc/include/fc/crypto/elliptic.hpp" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classfc_1_1ecc_1_1extended__private__key_1a0b01f347c46b7ac1d37965afc9a13e76" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t fc::ecc::extended_private_key::depth</definition>
        <argsstring></argsstring>
        <name>depth</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="193" column="1" bodyfile="libraries/fc/include/fc/crypto/elliptic.hpp" bodystart="193" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classfc_1_1ecc_1_1extended__private__key_1a9048cd8113c57a8c396bda9bde34bc53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::ecc::extended_private_key::extended_private_key</definition>
        <argsstring>(const private_key &amp;k, const sha256 &amp;c, int child=0, int parent_fp=0, uint8_t depth=0)</argsstring>
        <name>extended_private_key</name>
        <param>
          <type>const <ref refid="classfc_1_1ecc_1_1private__key" kindref="compound">private_key</ref> &amp;</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1sha256" kindref="compound">sha256</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>child</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>parent_fp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>depth</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="171" column="1" bodyfile="libraries/fc/src/crypto/elliptic_secp256k1.cpp" bodystart="193" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ecc_1_1extended__private__key_1af23d5d3886fa1a2cae0e95d25063cbad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ecc_1_1extended__public__key" kindref="compound">extended_public_key</ref></type>
        <definition>extended_public_key fc::ecc::extended_private_key::get_extended_public_key</definition>
        <argsstring>() const</argsstring>
        <name>get_extended_public_key</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="174" column="1" bodyfile="libraries/fc/src/crypto/elliptic_common.cpp" bodystart="297" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ecc_1_1extended__private__key_1afe5df510487b78d38a36e6e567450a2a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ecc_1_1extended__private__key" kindref="compound">extended_private_key</ref></type>
        <definition>extended_private_key fc::ecc::extended_private_key::derive_child</definition>
        <argsstring>(int i) const</argsstring>
        <name>derive_child</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="176" column="1" bodyfile="libraries/fc/src/crypto/elliptic_common.cpp" bodystart="302" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ecc_1_1extended__private__key_1a580594050905d12ea0dc93699c157206" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ecc_1_1extended__private__key" kindref="compound">extended_private_key</ref></type>
        <definition>extended_private_key fc::ecc::extended_private_key::derive_normal_child</definition>
        <argsstring>(int i) const</argsstring>
        <name>derive_normal_child</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="177" column="1" bodyfile="libraries/fc/src/crypto/elliptic_common.cpp" bodystart="307" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ecc_1_1extended__private__key_1a48918a551c7d39e3f4d60fb4e05b0334" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ecc_1_1extended__private__key" kindref="compound">extended_private_key</ref></type>
        <definition>extended_private_key fc::ecc::extended_private_key::derive_hardened_child</definition>
        <argsstring>(int i) const</argsstring>
        <name>derive_hardened_child</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="178" column="1" bodyfile="libraries/fc/src/crypto/elliptic_common.cpp" bodystart="315" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ecc_1_1extended__private__key_1a194166cd82d9ea0f55ab2fbe0ee6668a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacefc_1_1ecc_1a0ade047116801918646abc8a1062a3cd" kindref="member">extended_key_data</ref></type>
        <definition>extended_key_data fc::ecc::extended_private_key::serialize_extended</definition>
        <argsstring>() const</argsstring>
        <name>serialize_extended</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="180" column="1" bodyfile="libraries/fc/src/crypto/elliptic_common.cpp" bodystart="324" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ecc_1_1extended__private__key_1a479f54410d957cc74774b7f57b66d9d7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string fc::ecc::extended_private_key::str</definition>
        <argsstring>() const</argsstring>
        <name>str</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="182" column="1" bodyfile="libraries/fc/src/crypto/elliptic_common.cpp" bodystart="344" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ecc_1_1extended__private__key_1ac790a7809cff7c49f7791720d2388314" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string fc::ecc::extended_private_key::to_base58</definition>
        <argsstring>() const</argsstring>
        <name>to_base58</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="183" column="1" bodyfile="libraries/fc/include/fc/crypto/elliptic.hpp" bodystart="183" bodyend="183"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classfc_1_1ecc_1_1extended__private__key_1acf58e6c0b65009bfffa45e95cf3ef18e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ecc_1_1extended__private__key" kindref="compound">extended_private_key</ref></type>
        <definition>extended_private_key fc::ecc::extended_private_key::deserialize</definition>
        <argsstring>(const extended_key_data &amp;data)</argsstring>
        <name>deserialize</name>
        <param>
          <type>const <ref refid="namespacefc_1_1ecc_1a0ade047116801918646abc8a1062a3cd" kindref="member">extended_key_data</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="181" column="1" bodyfile="libraries/fc/src/crypto/elliptic_common.cpp" bodystart="339" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ecc_1_1extended__private__key_1ac73b3162ae9841cfee96233ac2fae0e2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ecc_1_1extended__private__key" kindref="compound">extended_private_key</ref></type>
        <definition>extended_private_key fc::ecc::extended_private_key::from_base58</definition>
        <argsstring>(const std::string &amp;base58)</argsstring>
        <name>from_base58</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>base58</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="184" column="1" bodyfile="libraries/fc/src/crypto/elliptic_common.cpp" bodystart="349" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ecc_1_1extended__private__key_1ae470de614b9470bfb5a84a0a610fd964" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ecc_1_1extended__private__key" kindref="compound">extended_private_key</ref></type>
        <definition>extended_private_key fc::ecc::extended_private_key::generate_master</definition>
        <argsstring>(const std::string &amp;seed)</argsstring>
        <name>generate_master</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="185" column="1" bodyfile="libraries/fc/src/crypto/elliptic_common.cpp" bodystart="366" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ecc_1_1extended__private__key_1ac9e01fc0c1e06cf196ac43c26345d15c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ecc_1_1extended__private__key" kindref="compound">extended_private_key</ref></type>
        <definition>extended_private_key fc::ecc::extended_private_key::generate_master</definition>
        <argsstring>(const char *seed, uint32_t seed_len)</argsstring>
        <name>generate_master</name>
        <param>
          <type>const char *</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>seed_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="186" column="1" bodyfile="libraries/fc/src/crypto/elliptic_common.cpp" bodystart="371" bodyend="378"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classfc_1_1ecc_1_1extended__private__key_1a62f1c58fc1a46dd56334a198304cd7b3" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ecc_1_1extended__private__key" kindref="compound">extended_private_key</ref></type>
        <definition>extended_private_key fc::ecc::extended_private_key::private_derive_rest</definition>
        <argsstring>(const fc::sha512 &amp;hash, int num) const</argsstring>
        <name>private_derive_rest</name>
        <param>
          <type>const <ref refid="classfc_1_1sha512" kindref="compound">fc::sha512</ref> &amp;</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="189" column="1" bodyfile="libraries/fc/src/crypto/elliptic_secp256k1.cpp" bodystart="197" bodyend="206"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3719">
        <label>fc::ecc::extended_private_key</label>
        <link refid="classfc_1_1ecc_1_1extended__private__key"/>
        <childnode refid="3720" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3720">
        <label>fc::ecc::private_key</label>
        <link refid="classfc_1_1ecc_1_1private__key"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3721">
        <label>fc::ecc::extended_private_key</label>
        <link refid="classfc_1_1ecc_1_1extended__private__key"/>
        <childnode refid="3722" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3722">
        <label>fc::ecc::private_key</label>
        <link refid="classfc_1_1ecc_1_1private__key"/>
      </node>
    </collaborationgraph>
    <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="169" column="1" bodyfile="libraries/fc/include/fc/crypto/elliptic.hpp" bodystart="168" bodyend="194"/>
    <listofallmembers>
      <member refid="classfc_1_1ecc_1_1extended__private__key_1a5a1655c6895b993f3285aa77f15f47c9" prot="private" virt="non-virtual"><scope>fc::ecc::extended_private_key</scope><name>c</name></member>
      <member refid="classfc_1_1ecc_1_1private__key_1a40b27d62eab21bdff688d45b4ef2b6a1" prot="public" virt="non-virtual"><scope>fc::ecc::extended_private_key</scope><name>child</name></member>
      <member refid="classfc_1_1ecc_1_1extended__private__key_1aa3479b79c5e28942823585ea2b93453c" prot="private" virt="non-virtual"><scope>fc::ecc::extended_private_key</scope><name>child_num</name></member>
      <member refid="classfc_1_1ecc_1_1extended__private__key_1a0b01f347c46b7ac1d37965afc9a13e76" prot="private" virt="non-virtual"><scope>fc::ecc::extended_private_key</scope><name>depth</name></member>
      <member refid="classfc_1_1ecc_1_1extended__private__key_1afe5df510487b78d38a36e6e567450a2a" prot="public" virt="non-virtual"><scope>fc::ecc::extended_private_key</scope><name>derive_child</name></member>
      <member refid="classfc_1_1ecc_1_1extended__private__key_1a48918a551c7d39e3f4d60fb4e05b0334" prot="public" virt="non-virtual"><scope>fc::ecc::extended_private_key</scope><name>derive_hardened_child</name></member>
      <member refid="classfc_1_1ecc_1_1extended__private__key_1a580594050905d12ea0dc93699c157206" prot="public" virt="non-virtual"><scope>fc::ecc::extended_private_key</scope><name>derive_normal_child</name></member>
      <member refid="classfc_1_1ecc_1_1extended__private__key_1acf58e6c0b65009bfffa45e95cf3ef18e" prot="public" virt="non-virtual"><scope>fc::ecc::extended_private_key</scope><name>deserialize</name></member>
      <member refid="classfc_1_1ecc_1_1extended__private__key_1a9048cd8113c57a8c396bda9bde34bc53" prot="public" virt="non-virtual"><scope>fc::ecc::extended_private_key</scope><name>extended_private_key</name></member>
      <member refid="classfc_1_1ecc_1_1private__key_1aa4d077eff99bc1fa9608cddab3a5fc58" prot="public" virt="non-virtual"><scope>fc::ecc::extended_private_key</scope><name>fingerprint</name></member>
      <member refid="classfc_1_1ecc_1_1extended__private__key_1ac73b3162ae9841cfee96233ac2fae0e2" prot="public" virt="non-virtual"><scope>fc::ecc::extended_private_key</scope><name>from_base58</name></member>
      <member refid="classfc_1_1ecc_1_1private__key_1a047e701b70d0fcdcd3cd54a73c0af5a4" prot="public" virt="non-virtual"><scope>fc::ecc::extended_private_key</scope><name>generate</name></member>
      <member refid="classfc_1_1ecc_1_1private__key_1a748751090ea736a761cd3af9633eb7de" prot="public" virt="non-virtual"><scope>fc::ecc::extended_private_key</scope><name>generate_from_seed</name></member>
      <member refid="classfc_1_1ecc_1_1extended__private__key_1ae470de614b9470bfb5a84a0a610fd964" prot="public" virt="non-virtual"><scope>fc::ecc::extended_private_key</scope><name>generate_master</name></member>
      <member refid="classfc_1_1ecc_1_1extended__private__key_1ac9e01fc0c1e06cf196ac43c26345d15c" prot="public" virt="non-virtual"><scope>fc::ecc::extended_private_key</scope><name>generate_master</name></member>
      <member refid="classfc_1_1ecc_1_1extended__private__key_1af23d5d3886fa1a2cae0e95d25063cbad" prot="public" virt="non-virtual"><scope>fc::ecc::extended_private_key</scope><name>get_extended_public_key</name></member>
      <member refid="classfc_1_1ecc_1_1private__key_1a11ee154d3fd6f6e4c882fe965dee3d89" prot="public" virt="non-virtual"><scope>fc::ecc::extended_private_key</scope><name>get_public_key</name></member>
      <member refid="classfc_1_1ecc_1_1private__key_1a24fb0ebbb99a8404323387fd06d5145f" prot="public" virt="non-virtual"><scope>fc::ecc::extended_private_key</scope><name>get_secret</name></member>
      <member refid="classfc_1_1ecc_1_1private__key_1a81a1b0f5dacfd6f611d8291a0df60be7" prot="public" virt="non-virtual"><scope>fc::ecc::extended_private_key</scope><name>get_shared_secret</name></member>
      <member refid="classfc_1_1ecc_1_1private__key_1a2cc3896accde0c4a48663fec0d075979" prot="public" virt="non-virtual"><scope>fc::ecc::extended_private_key</scope><name>operator private_key_secret</name></member>
      <member refid="classfc_1_1ecc_1_1private__key_1a35e700049a1b301202a45bb4e46e8240" prot="public" virt="non-virtual"><scope>fc::ecc::extended_private_key</scope><name>operator=</name></member>
      <member refid="classfc_1_1ecc_1_1private__key_1a2cec7b462875dee7ccaa51d94185d9fa" prot="public" virt="non-virtual"><scope>fc::ecc::extended_private_key</scope><name>operator=</name></member>
      <member refid="classfc_1_1ecc_1_1extended__private__key_1acd8d93b2bad24066c1ecc5e6424c4e73" prot="private" virt="non-virtual"><scope>fc::ecc::extended_private_key</scope><name>parent_fp</name></member>
      <member refid="classfc_1_1ecc_1_1extended__private__key_1a62f1c58fc1a46dd56334a198304cd7b3" prot="private" virt="non-virtual"><scope>fc::ecc::extended_private_key</scope><name>private_derive_rest</name></member>
      <member refid="classfc_1_1ecc_1_1private__key_1aee641a197bfa93b96eca0c79a348b4f4" prot="public" virt="non-virtual"><scope>fc::ecc::extended_private_key</scope><name>private_key</name></member>
      <member refid="classfc_1_1ecc_1_1private__key_1af661dbffcc6ab52220a9d1ce1ed2cf52" prot="public" virt="non-virtual"><scope>fc::ecc::extended_private_key</scope><name>private_key</name></member>
      <member refid="classfc_1_1ecc_1_1private__key_1a5f83d375d76ffc530accc51fd22a1c20" prot="public" virt="non-virtual"><scope>fc::ecc::extended_private_key</scope><name>private_key</name></member>
      <member refid="classfc_1_1ecc_1_1private__key_1abcc5312450e72cd78f78b7d2feb6c899" prot="public" virt="non-virtual"><scope>fc::ecc::extended_private_key</scope><name>regenerate</name></member>
      <member refid="classfc_1_1ecc_1_1extended__private__key_1a194166cd82d9ea0f55ab2fbe0ee6668a" prot="public" virt="non-virtual"><scope>fc::ecc::extended_private_key</scope><name>serialize_extended</name></member>
      <member refid="classfc_1_1ecc_1_1private__key_1a9641e922356152e449044813b029ea86" prot="public" virt="non-virtual"><scope>fc::ecc::extended_private_key</scope><name>sign_compact</name></member>
      <member refid="classfc_1_1ecc_1_1extended__private__key_1a479f54410d957cc74774b7f57b66d9d7" prot="public" virt="non-virtual"><scope>fc::ecc::extended_private_key</scope><name>str</name></member>
      <member refid="classfc_1_1ecc_1_1extended__private__key_1ac790a7809cff7c49f7791720d2388314" prot="public" virt="non-virtual"><scope>fc::ecc::extended_private_key</scope><name>to_base58</name></member>
      <member refid="classfc_1_1ecc_1_1private__key_1ad34b09556c29b636ee5a5ddfb392069f" prot="public" virt="non-virtual"><scope>fc::ecc::extended_private_key</scope><name>~private_key</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
