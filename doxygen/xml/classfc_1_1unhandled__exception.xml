<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classfc_1_1unhandled__exception" kind="class" language="C++" prot="public">
    <compoundname>fc::unhandled_exception</compoundname>
    <basecompoundref refid="classfc_1_1exception" prot="public" virt="non-virtual">fc::exception</basecompoundref>
    <includes refid="exception_8hpp" local="no">exception.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classfc_1_1unhandled__exception_1a9b059031419041311998822df4d27ac1" prot="public" static="no">
        <name>code_enum</name>
        <enumvalue id="classfc_1_1unhandled__exception_1a9b059031419041311998822df4d27ac1aed517d376c8981388093f67452ce3091" prot="public">
          <name>code_value</name>
          <initializer>= unhandled_exception_code</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="149" column="1" bodyfile="libraries/fc/include/fc/exception/exception.hpp" bodystart="149" bodyend="151"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classfc_1_1unhandled__exception_1a4c89f7806e0116a4af8ef5d2bd1d6ee7" prot="private" static="no" mutable="no">
        <type>std::exception_ptr</type>
        <definition>std::exception_ptr fc::unhandled_exception::_inner</definition>
        <argsstring></argsstring>
        <name>_inner</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="161" column="1" bodyfile="libraries/fc/include/fc/exception/exception.hpp" bodystart="161" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classfc_1_1unhandled__exception_1a1f9c263f19732a3cbe153e98c5b8a9d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::unhandled_exception::unhandled_exception</definition>
        <argsstring>(log_message &amp;&amp;m, std::exception_ptr e=std::current_exception())</argsstring>
        <name>unhandled_exception</name>
        <param>
          <type><ref refid="classfc_1_1log__message" kindref="compound">log_message</ref> &amp;&amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>std::exception_ptr</type>
          <declname>e</declname>
          <defval>std::current_exception()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="152" column="1" bodyfile="libraries/fc/src/exception.cpp" bodystart="84" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1unhandled__exception_1ac274c1f499e26a47b759a8356636b296" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::unhandled_exception::unhandled_exception</definition>
        <argsstring>(log_messages)</argsstring>
        <name>unhandled_exception</name>
        <param>
          <type><ref refid="namespacefc_1a54370140f7c964a12e90393d525605d1" kindref="member">log_messages</ref></type>
          <defname>m</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="153" column="1" bodyfile="libraries/fc/src/exception.cpp" bodystart="93" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1unhandled__exception_1a819e457fd9bd6f9d941133d6527758d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::unhandled_exception::unhandled_exception</definition>
        <argsstring>(const exception &amp;)</argsstring>
        <name>unhandled_exception</name>
        <param>
          <type>const <ref refid="classfc_1_1exception" kindref="compound">exception</ref> &amp;</type>
          <defname>r</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="154" column="1" bodyfile="libraries/fc/src/exception.cpp" bodystart="89" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1unhandled__exception_1a85c226973a5ba415554b39b5082c1a77" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::exception_ptr</type>
        <definition>std::exception_ptr fc::unhandled_exception::get_inner_exception</definition>
        <argsstring>() const</argsstring>
        <name>get_inner_exception</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="156" column="1" bodyfile="libraries/fc/src/exception.cpp" bodystart="97" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1unhandled__exception_1a9bb61e7f175c2f5c1d461280c794a763" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void fc::unhandled_exception::dynamic_rethrow_exception</definition>
        <argsstring>() const</argsstring>
        <name>dynamic_rethrow_exception</name>
        <reimplements refid="classfc_1_1exception_1a342741d526bd167e204140278ac0ed73">dynamic_rethrow_exception</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Throw this exception as its most derived type.</para><para><simplesect kind="note"><para>does not return.</para></simplesect>
Rethrows the exception restoring the proper type based upon the error code. This is used to propagate exception types across conversions to/from JSON </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="158" column="1" bodyfile="libraries/fc/src/exception.cpp" bodystart="99" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1unhandled__exception_1a7946c956fb83ac7167173be9fdcac3e8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::shared_ptr&lt; <ref refid="classfc_1_1exception" kindref="compound">exception</ref> &gt;</type>
        <definition>std::shared_ptr&lt; exception &gt; fc::unhandled_exception::dynamic_copy_exception</definition>
        <argsstring>() const</argsstring>
        <name>dynamic_copy_exception</name>
        <reimplements refid="classfc_1_1exception_1a38ac38d910ba13a339ce5855a51c9127">dynamic_copy_exception</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to: <programlisting><codeline><highlight class="normal">try<sp/>{<sp/>throwAsDynamic_exception();<sp/>}</highlight></codeline>
<codeline><highlight class="normal">catch(<sp/>...<sp/>)<sp/>{<sp/>return<sp/>std::current_exception();<sp/>}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="159" column="1" bodyfile="libraries/fc/src/exception.cpp" bodystart="105" bodyend="110"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>re-thrown whenever an unhandled exception is caught.</para><para>Any exceptions thrown by 3rd party libraries that are not caught get wrapped in an <ref refid="classfc_1_1unhandled__exception" kindref="compound">unhandled_exception</ref> exception. </para>    </briefdescription>
    <detaileddescription>
<para>The original exception is captured as a std::exception_ptr which may be rethrown. The std::exception_ptr does not propgate across process boundaries. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="7571">
        <label>fc::exception</label>
        <link refid="classfc_1_1exception"/>
      </node>
      <node id="7570">
        <label>fc::unhandled_exception</label>
        <link refid="classfc_1_1unhandled__exception"/>
        <childnode refid="7571" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7573">
        <label>fc::exception</label>
        <link refid="classfc_1_1exception"/>
      </node>
      <node id="7572">
        <label>fc::unhandled_exception</label>
        <link refid="classfc_1_1unhandled__exception"/>
        <childnode refid="7573" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="libraries/fc/include/fc/exception/exception.hpp" line="147" column="1" bodyfile="libraries/fc/include/fc/exception/exception.hpp" bodystart="146" bodyend="162"/>
    <listofallmembers>
      <member refid="classfc_1_1unhandled__exception_1a4c89f7806e0116a4af8ef5d2bd1d6ee7" prot="private" virt="non-virtual"><scope>fc::unhandled_exception</scope><name>_inner</name></member>
      <member refid="classfc_1_1exception_1a685fab238fa9b86dcf64b35417eb63b2" prot="public" virt="non-virtual"><scope>fc::unhandled_exception</scope><name>append_log</name></member>
      <member refid="classfc_1_1exception_1a79a36225cde10dcd23057bbe19d3390f" prot="public" virt="non-virtual"><scope>fc::unhandled_exception</scope><name>code</name></member>
      <member refid="classfc_1_1unhandled__exception_1a9b059031419041311998822df4d27ac1" prot="public" virt="non-virtual"><scope>fc::unhandled_exception</scope><name>code_enum</name></member>
      <member refid="classfc_1_1unhandled__exception_1a9b059031419041311998822df4d27ac1aed517d376c8981388093f67452ce3091" prot="public" virt="non-virtual"><scope>fc::unhandled_exception</scope><name>code_value</name></member>
      <member refid="classfc_1_1unhandled__exception_1a7946c956fb83ac7167173be9fdcac3e8" prot="public" virt="virtual"><scope>fc::unhandled_exception</scope><name>dynamic_copy_exception</name></member>
      <member refid="classfc_1_1unhandled__exception_1a9bb61e7f175c2f5c1d461280c794a763" prot="public" virt="virtual"><scope>fc::unhandled_exception</scope><name>dynamic_rethrow_exception</name></member>
      <member refid="classfc_1_1exception_1a438cb875c834068b29e0a6cd3319e7f3" prot="public" virt="non-virtual"><scope>fc::unhandled_exception</scope><name>exception</name></member>
      <member refid="classfc_1_1exception_1af4312be4f267fda7b0bf8bccbfac232b" prot="public" virt="non-virtual"><scope>fc::unhandled_exception</scope><name>exception</name></member>
      <member refid="classfc_1_1exception_1a536774ba4cc639d3215bd91f412ffded" prot="public" virt="non-virtual"><scope>fc::unhandled_exception</scope><name>exception</name></member>
      <member refid="classfc_1_1exception_1a57f2149839df7dc42ee356ca62a2dc90" prot="public" virt="non-virtual"><scope>fc::unhandled_exception</scope><name>exception</name></member>
      <member refid="classfc_1_1exception_1ae8accd0c86f53a5f0c0c473609b642dc" prot="public" virt="non-virtual"><scope>fc::unhandled_exception</scope><name>exception</name></member>
      <member refid="classfc_1_1exception_1acb133b17f42ee76692b472e887373720" prot="public" virt="non-virtual"><scope>fc::unhandled_exception</scope><name>exception</name></member>
      <member refid="classfc_1_1unhandled__exception_1a85c226973a5ba415554b39b5082c1a77" prot="public" virt="non-virtual"><scope>fc::unhandled_exception</scope><name>get_inner_exception</name></member>
      <member refid="classfc_1_1exception_1a70b72c1e4fe0d17485a8b7a0a6f397de" prot="public" virt="non-virtual"><scope>fc::unhandled_exception</scope><name>get_log</name></member>
      <member refid="classfc_1_1exception_1a91cc1ed42499761c2f750de4a89ce627" prot="protected" virt="non-virtual"><scope>fc::unhandled_exception</scope><name>my</name></member>
      <member refid="classfc_1_1exception_1aa5734af6ae6e44c7c8a9b3c4ea8131e1" prot="public" virt="non-virtual"><scope>fc::unhandled_exception</scope><name>name</name></member>
      <member refid="classfc_1_1exception_1afb0e1fac60179c7b2e171c87d295f690" prot="public" virt="non-virtual"><scope>fc::unhandled_exception</scope><name>operator=</name></member>
      <member refid="classfc_1_1exception_1a4f257882990e94900d31d030be6601b2" prot="public" virt="non-virtual"><scope>fc::unhandled_exception</scope><name>operator=</name></member>
      <member refid="classfc_1_1exception_1a7611ea8fbe25dde56649b685c2298a37" prot="public" virt="non-virtual"><scope>fc::unhandled_exception</scope><name>to_detail_string</name></member>
      <member refid="classfc_1_1exception_1adbc4557b14bc29b74e9cf9f0ed5fb8d8" prot="public" virt="non-virtual"><scope>fc::unhandled_exception</scope><name>to_string</name></member>
      <member refid="classfc_1_1unhandled__exception_1a1f9c263f19732a3cbe153e98c5b8a9d3" prot="public" virt="non-virtual"><scope>fc::unhandled_exception</scope><name>unhandled_exception</name></member>
      <member refid="classfc_1_1unhandled__exception_1ac274c1f499e26a47b759a8356636b296" prot="public" virt="non-virtual"><scope>fc::unhandled_exception</scope><name>unhandled_exception</name></member>
      <member refid="classfc_1_1unhandled__exception_1a819e457fd9bd6f9d941133d6527758d0" prot="public" virt="non-virtual"><scope>fc::unhandled_exception</scope><name>unhandled_exception</name></member>
      <member refid="classfc_1_1exception_1a6c67d14894efbcab7650e8213f0a1e71" prot="public" virt="virtual"><scope>fc::unhandled_exception</scope><name>what</name></member>
      <member refid="classfc_1_1exception_1a72f637422588d6f2e59ce35d53882522" prot="public" virt="virtual"><scope>fc::unhandled_exception</scope><name>~exception</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
