<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classgraphene_1_1chain_1_1database" kind="class" language="C++" prot="public">
    <compoundname>graphene::chain::database</compoundname>
    <basecompoundref refid="classgraphene_1_1db_1_1object__database" prot="public" virt="non-virtual">graphene::db::object_database</basecompoundref>
    <includes refid="database_8hpp" local="no">database.hpp</includes>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1aa771c27abfab94ef6ed5f32348594508" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::initialize_indexes</definition>
        <argsstring>()</argsstring>
        <name>initialize_indexes</name>
        <briefdescription>
<para>Reset the object graph in-memory. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="db__init_8cpp" kindref="compound">db_init.cpp</ref> //////////////////// </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="229" column="15" bodyfile="libraries/chain/db_init.cpp" bodystart="154" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1adbdb993dd56503d38044847dc478d19d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::initialize_evaluators</definition>
        <argsstring>()</argsstring>
        <name>initialize_evaluators</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="231" column="15" bodyfile="libraries/chain/db_init.cpp" bodystart="78" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a91a45b5f416d80e1abab0affb75ea16a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::init_genesis</definition>
        <argsstring>(const genesis_state_type &amp;genesis_state=genesis_state_type())</argsstring>
        <name>init_genesis</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1genesis__state__type" kindref="compound">genesis_state_type</ref> &amp;</type>
          <declname>genesis_state</declname>
          <defval><ref refid="structgraphene_1_1chain_1_1genesis__state__type" kindref="compound">genesis_state_type</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="232" column="15" bodyfile="libraries/chain/db_genesis.cpp" bodystart="48" bodyend="593"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a116eef07a5b0af2512e1c55c724c6a60" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EvaluatorType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void graphene::chain::database::register_evaluator</definition>
        <argsstring>()</argsstring>
        <name>register_evaluator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="235" column="15" bodyfile="libraries/chain/include/graphene/chain/database.hpp" bodystart="235" bodyend="243"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a0d85b8e37f9dd64ef989c462a0d7860f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::globally_settle_asset</definition>
        <argsstring>(const asset_object &amp;bitasset, const price &amp;settle_price, bool check_margin_calls=false)</argsstring>
        <name>globally_settle_asset</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1asset__object" kindref="compound">asset_object</ref> &amp;</type>
          <declname>bitasset</declname>
          <defname>mia</defname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>settle_price</declname>
          <defname>settlement_price</defname>
        </param>
        <param>
          <type>bool</type>
          <declname>check_margin_calls</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Globally settle <computeroutput>bitasset</computeroutput> at <computeroutput>settle_price</computeroutput>, let margin calls pay a premium and margin call fee if <computeroutput>check_margin_calls</computeroutput> is <computeroutput>true</computeroutput> (in this case others would be closed not at <computeroutput>settle_price</computeroutput> but at a price better for their owners).</para>
<para>All margin positions are force closed at the swan price Collateral received goes into a force-settlement fund No new margin positions can be created for this asset Force settlement happens without delay at the swan price, deducting from force-settlement fund </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="317" column="15" bodyfile="libraries/chain/db_market.cpp" bodystart="221" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a056dfc88cbdc1c05ea14e1fe9e80716f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::cancel_settle_order</definition>
        <argsstring>(const force_settlement_object &amp;order)</argsstring>
        <name>cancel_settle_order</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1force__settlement__object" kindref="compound">force_settlement_object</ref> &amp;</type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="319" column="15" bodyfile="libraries/chain/db_market.cpp" bodystart="524" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a245d31d0cbaec0e89b38659b19154c54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::cancel_limit_order</definition>
        <argsstring>(const limit_order_object &amp;order, bool create_virtual_op=true, bool skip_cancel_fee=false)</argsstring>
        <name>cancel_limit_order</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref> &amp;</type>
          <declname>order</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>create_virtual_op</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>skip_cancel_fee</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="320" column="15" bodyfile="libraries/chain/db_market.cpp" bodystart="533" bodyend="630"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a9f7b1b0f3d3fd677b60cf815dbcde6f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::revive_bitasset</definition>
        <argsstring>(const asset_object &amp;bitasset, const asset_bitasset_data_object &amp;bad)</argsstring>
        <name>revive_bitasset</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1asset__object" kindref="compound">asset_object</ref> &amp;</type>
          <declname>bitasset</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1asset__bitasset__data__object" kindref="compound">asset_bitasset_data_object</ref> &amp;</type>
          <declname>bad</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="323" column="15" bodyfile="libraries/chain/db_market.cpp" bodystart="422" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a21787ce006ee78b21cf2de47767fab5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::cancel_bid</definition>
        <argsstring>(const collateral_bid_object &amp;bid, bool create_virtual_op=true)</argsstring>
        <name>cancel_bid</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1collateral__bid__object" kindref="compound">collateral_bid_object</ref> &amp;</type>
          <declname>bid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>create_virtual_op</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="324" column="15" bodyfile="libraries/chain/db_market.cpp" bodystart="477" bodyend="490"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1aeb2506f031441c93b369b3c21552131d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::execute_bid</definition>
        <argsstring>(const collateral_bid_object &amp;bid, share_type debt_covered, share_type collateral_from_fund, const price_feed &amp;current_feed)</argsstring>
        <name>execute_bid</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1collateral__bid__object" kindref="compound">collateral_bid_object</ref> &amp;</type>
          <declname>bid</declname>
        </param>
        <param>
          <type><ref refid="namespacegraphene_1_1protocol_1a69b2104c1c11eed2d17bd29b86713347" kindref="member">share_type</ref></type>
          <declname>debt_covered</declname>
        </param>
        <param>
          <type><ref refid="namespacegraphene_1_1protocol_1a69b2104c1c11eed2d17bd29b86713347" kindref="member">share_type</ref></type>
          <declname>collateral_from_fund</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price__feed" kindref="compound">price_feed</ref> &amp;</type>
          <declname>current_feed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="325" column="15" bodyfile="libraries/chain/db_market.cpp" bodystart="492" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1ab822a2dedcbb25a24eb9529f6c5aaaaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::database::apply_order_before_hardfork_625</definition>
        <argsstring>(const limit_order_object &amp;new_order_object)</argsstring>
        <name>apply_order_before_hardfork_625</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref> &amp;</type>
          <declname>new_order_object</declname>
        </param>
        <briefdescription>
<para>Process a new limit order through the markets. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_order_object</parametername>
</parameternamelist>
<parameterdescription>
<para>The new order to process </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if order was completely filled; false otherwise</para>
</simplesect>
This function takes a new limit order, and runs the markets attempting to match it with existing orders already on the books. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="382" column="15" bodyfile="libraries/chain/db_market.cpp" bodystart="672" bodyend="724"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1aced15760a488f2dbfc188231d414fa2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::database::apply_order</definition>
        <argsstring>(const limit_order_object &amp;new_order_object)</argsstring>
        <name>apply_order</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref> &amp;</type>
          <declname>new_order_object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="383" column="15" bodyfile="libraries/chain/db_market.cpp" bodystart="741" bodyend="941"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a369b9ada2cd37401c5954cf0869dffdf" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::cleanup_and_remove_limit_order</definition>
        <argsstring>(const limit_order_object &amp;order)</argsstring>
        <name>cleanup_and_remove_limit_order</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref> &amp;</type>
          <declname>order</declname>
        </param>
        <briefdescription>
<para>Clean up for a limit order and then remove it from database. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="330" column="15" bodyfile="libraries/chain/db_market.cpp" bodystart="632" bodyend="644"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a4cd1c5994e3b36251d02f26e9fc71c64" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1optional" kindref="compound">optional</ref>&lt; limit_order_id_type &gt;</type>
        <definition>optional&lt; limit_order_id_type &gt; graphene::chain::database::process_limit_order_on_fill</definition>
        <argsstring>(const limit_order_object &amp;order, const asset &amp;order_receives)</argsstring>
        <name>process_limit_order_on_fill</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref> &amp;</type>
          <declname>order</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>order_receives</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Process on_fill for a limit order <simplesect kind="return"><para>the ID of the newly created take profit order (in that case), otherwise null </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="333" column="19" bodyfile="libraries/chain/db_market.cpp" bodystart="1659" bodyend="1782"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a12b1cbf647a44777d323f313d5dd7c0a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::_cancel_bids_and_revive_mpa</definition>
        <argsstring>(const asset_object &amp;bitasset, const asset_bitasset_data_object &amp;bad)</argsstring>
        <name>_cancel_bids_and_revive_mpa</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1asset__object" kindref="compound">asset_object</ref> &amp;</type>
          <declname>bitasset</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1asset__bitasset__data__object" kindref="compound">asset_bitasset_data_object</ref> &amp;</type>
          <declname>bad</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="335" column="15" bodyfile="libraries/chain/db_market.cpp" bodystart="450" bodyend="475"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1af3e204348461ff4f9327416072d4eb94" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::database::check_for_blackswan</definition>
        <argsstring>(const asset_object &amp;mia, bool enable_black_swan=true, const asset_bitasset_data_object *bitasset_ptr=nullptr)</argsstring>
        <name>check_for_blackswan</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1asset__object" kindref="compound">asset_object</ref> &amp;</type>
          <declname>mia</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable_black_swan</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1asset__bitasset__data__object" kindref="compound">asset_bitasset_data_object</ref> *</type>
          <declname>bitasset_ptr</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="336" column="15" bodyfile="libraries/chain/db_market.cpp" bodystart="50" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1add0a8183f988655c42247c30f029d014" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void graphene::chain::database::globally_settle_asset_impl</definition>
        <argsstring>(const asset_object &amp;bitasset, const price &amp;settle_price, const IndexType &amp;call_index, bool check_margin_calls=false)</argsstring>
        <name>globally_settle_asset_impl</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1asset__object" kindref="compound">asset_object</ref> &amp;</type>
          <declname>bitasset</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>settle_price</declname>
        </param>
        <param>
          <type>const IndexType &amp;</type>
          <declname>call_index</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>check_margin_calls</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="339" column="15" bodyfile="libraries/chain/db_market.cpp" bodystart="243" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1ae4de203b7b7ed9eb055b7ed483de14bd" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::individually_settle</definition>
        <argsstring>(const asset_bitasset_data_object &amp;bitasset, const call_order_object &amp;call_order)</argsstring>
        <name>individually_settle</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1asset__bitasset__data__object" kindref="compound">asset_bitasset_data_object</ref> &amp;</type>
          <declname>bitasset</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1call__order__object" kindref="compound">call_order_object</ref> &amp;</type>
          <declname>call_order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Individually settle the <computeroutput>call_order</computeroutput>. Called when the call order is undercollateralized. See <ref refid="structgraphene_1_1protocol_1_1bitasset__options_1a86d8df815d5ff26c11c9894fefe202be" kindref="member">protocol::bitasset_options::black_swan_response_type</ref> for more info. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bitasset</parametername>
</parameternamelist>
<parameterdescription>
<para>the bitasset object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>call_order</parametername>
</parameternamelist>
<parameterdescription>
<para>the call order </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="347" column="15" bodyfile="libraries/chain/db_market.cpp" bodystart="340" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a3c447262c8a489f33232b6caccc962aa" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::database::match_force_settlements</definition>
        <argsstring>(const asset_bitasset_data_object &amp;bitasset)</argsstring>
        <name>match_force_settlements</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1asset__bitasset__data__object" kindref="compound">asset_bitasset_data_object</ref> &amp;</type>
          <declname>bitasset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match force settlements with margin calls <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bitasset</parametername>
</parameternamelist>
<parameterdescription>
<para>the asset that to be checked </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if matched at least one margin call order </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="351" column="15" bodyfile="libraries/chain/db_market.cpp" bodystart="2434" bodyend="2502"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a93d519ed299f6f24b67eef7ed86a8bb4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref></type>
        <definition>asset graphene::chain::database::match_impl</definition>
        <argsstring>(const force_settlement_object &amp;settle, const call_order_object &amp;call, const price &amp;match_price, const asset_bitasset_data_object &amp;bitasset, const asset &amp;max_settlement, const price &amp;fill_price, bool is_margin_call=false, bool settle_order_is_taker=true)</argsstring>
        <name>match_impl</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1force__settlement__object" kindref="compound">force_settlement_object</ref> &amp;</type>
          <declname>settle</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1call__order__object" kindref="compound">call_order_object</ref> &amp;</type>
          <declname>call</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>match_price</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1asset__bitasset__data__object" kindref="compound">asset_bitasset_data_object</ref> &amp;</type>
          <declname>bitasset</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>max_settlement</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>fill_price</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_margin_call</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>settle_order_is_taker</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Matches the two orders <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>settle</parametername>
</parameternamelist>
<parameterdescription>
<para>the force-settlement order </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>call</parametername>
</parameternamelist>
<parameterdescription>
<para>the call order </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>match_price</parametername>
</parameternamelist>
<parameterdescription>
<para>the price to calculate how much the call order pays </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bitasset</parametername>
</parameternamelist>
<parameterdescription>
<para>the bitasset object corresponding to debt asset of the call order </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_settlement</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum debt amount to be filled during this match </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fill_price</parametername>
</parameternamelist>
<parameterdescription>
<para>the price to be recorded in market history plugin. It is the price to calculate how much the settle order receives when the call order is being margin called </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_margin_call</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the call order is being margin called </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>settle_order_is_taker</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the settle_order is the taker </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the amount of asset settled </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>If the least collateralized call position lacks sufficient collateral to cover at the match price then this indicates a black swan event according to the price feed, but only the market can trigger a black swan. So now we must cancel the forced settlement object.</para>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="363" column="16" bodyfile="libraries/chain/db_market.cpp" bodystart="1451" bodyend="1657"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1aac40483fbda0abd78ab3a80d1a5c0245" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgraphene_1_1chain_1_1database_1aaa234ff3fda171f0cf673fe338632599" kindref="member">match_result_type</ref></type>
        <definition>database::match_result_type graphene::chain::database::match</definition>
        <argsstring>(const limit_order_object &amp;taker, const limit_order_object &amp;maker, const price &amp;trade_price)</argsstring>
        <name>match</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref> &amp;</type>
          <declname>taker</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref> &amp;</type>
          <declname>maker</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>trade_price</declname>
          <defname>match_price</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Matches the two orders, the first parameter is taker, the second is maker.</para>
<para><simplesect kind="return"><para>which orders were filled (and thus removed) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="432" column="28" bodyfile="libraries/chain/db_market.cpp" bodystart="1039" bodyend="1051"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1acb5e46328e1de68360cd73d4f511c313" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgraphene_1_1chain_1_1database_1aaa234ff3fda171f0cf673fe338632599" kindref="member">match_result_type</ref></type>
        <definition>database::match_result_type graphene::chain::database::match_limit_normal_limit</definition>
        <argsstring>(const limit_order_object &amp;taker, const limit_order_object &amp;maker, const price &amp;trade_price)</argsstring>
        <name>match_limit_normal_limit</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref> &amp;</type>
          <declname>taker</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref> &amp;</type>
          <declname>maker</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>trade_price</declname>
        </param>
        <briefdescription>
<para>Match a normal limit order with another normal limit order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="434" column="28" bodyfile="libraries/chain/db_market.cpp" bodystart="1054" bodyend="1129"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a978a4e2d44c3e106c2685e12c62361d7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgraphene_1_1chain_1_1database_1aaa234ff3fda171f0cf673fe338632599" kindref="member">match_result_type</ref></type>
        <definition>database::match_result_type graphene::chain::database::match_limit_settled_debt</definition>
        <argsstring>(const limit_order_object &amp;taker, const limit_order_object &amp;maker, const price &amp;trade_price)</argsstring>
        <name>match_limit_settled_debt</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref> &amp;</type>
          <declname>taker</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref> &amp;</type>
          <declname>maker</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>trade_price</declname>
        </param>
        <briefdescription>
<para>When matching a limit order against settled debt, the maker actually behaviors like a call order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="436" column="28" bodyfile="libraries/chain/db_market.cpp" bodystart="1132" bodyend="1244"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1adda47fe7b5130f97c86323883aeb5ac3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgraphene_1_1chain_1_1database_1aaa234ff3fda171f0cf673fe338632599" kindref="member">match_result_type</ref></type>
        <definition>database::match_result_type graphene::chain::database::match_settled_debt_limit</definition>
        <argsstring>(const limit_order_object &amp;taker, const limit_order_object &amp;maker, const price &amp;trade_price)</argsstring>
        <name>match_settled_debt_limit</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref> &amp;</type>
          <declname>taker</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref> &amp;</type>
          <declname>maker</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>trade_price</declname>
        </param>
        <briefdescription>
<para>When matching a settled debt order against a limit order, the taker actually behaviors like a call order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="438" column="28" bodyfile="libraries/chain/db_market.cpp" bodystart="1248" bodyend="1338"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a6b430828eb5fcd237abf935e037aa54a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgraphene_1_1chain_1_1database_1aaa234ff3fda171f0cf673fe338632599" kindref="member">match_result_type</ref></type>
        <definition>database::match_result_type graphene::chain::database::match</definition>
        <argsstring>(const limit_order_object &amp;taker, const call_order_object &amp;maker, const price &amp;trade_price, const asset_bitasset_data_object &amp;bitasset, const price &amp;call_pays_price)</argsstring>
        <name>match</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref> &amp;</type>
          <declname>taker</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1call__order__object" kindref="compound">call_order_object</ref> &amp;</type>
          <declname>maker</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>trade_price</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1asset__bitasset__data__object" kindref="compound">asset_bitasset_data_object</ref> &amp;</type>
          <declname>bitasset</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>call_pays_price</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="450" column="28" bodyfile="libraries/chain/db_market.cpp" bodystart="1341" bodyend="1427"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1af406679ca8759bfb9afa4bd093b69359" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classgraphene_1_1chain_1_1database_1aaa234ff3fda171f0cf673fe338632599" kindref="member">match_result_type</ref></type>
        <definition>match_result_type graphene::chain::database::match</definition>
        <argsstring>(const limit_order_object &amp;taker, const call_order_object &amp;maker, const price &amp;trade_price, const asset_bitasset_data_object &amp;bitasset)</argsstring>
        <name>match</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref> &amp;</type>
          <declname>taker</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1call__order__object" kindref="compound">call_order_object</ref> &amp;</type>
          <declname>maker</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>trade_price</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1asset__bitasset__data__object" kindref="compound">asset_bitasset_data_object</ref> &amp;</type>
          <declname>bitasset</declname>
        </param>
        <briefdescription>
<para>If separate call_pays_price not provided, assume call pays at trade_price: </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="455" column="28" bodyfile="libraries/chain/include/graphene/chain/database.hpp" bodystart="455" bodyend="459"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1ac30625919191bffea58de8e3563f3320" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref></type>
        <definition>asset graphene::chain::database::calculate_market_fee</definition>
        <argsstring>(const asset_object &amp;trade_asset, const asset &amp;trade_amount, const bool &amp;is_maker) const</argsstring>
        <name>calculate_market_fee</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1asset__object" kindref="compound">asset_object</ref> &amp;</type>
          <declname>trade_asset</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>trade_amount</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>is_maker</declname>
        </param>
        <briefdescription>
<para>Calculate the market fee that is to be taken. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trade_asset</parametername>
</parameternamelist>
<parameterdescription>
<para>the asset (passed in to avoid a lookup) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trade_amount</parametername>
</parameternamelist>
<parameterdescription>
<para>the quantity that the fee calculation is based upon </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_maker</parametername>
</parameternamelist>
<parameterdescription>
<para>TRUE if this is the fee for a maker, FALSE if taker </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="548" column="16" bodyfile="libraries/chain/db_market.cpp" bodystart="2557" bodyend="2589"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a889865bc9a3a2e7e7d79ec7d00b03902" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref></type>
        <definition>asset graphene::chain::database::pay_market_fees</definition>
        <argsstring>(const account_object *seller, const asset_object &amp;recv_asset, const asset &amp;receives, const bool &amp;is_maker, const optional&lt; asset &gt; &amp;calculated_market_fees={})</argsstring>
        <name>pay_market_fees</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1account__object" kindref="compound">account_object</ref> *</type>
          <declname>seller</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1asset__object" kindref="compound">asset_object</ref> &amp;</type>
          <declname>recv_asset</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>receives</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>is_maker</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1optional" kindref="compound">optional</ref>&lt; <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &gt; &amp;</type>
          <declname>calculated_market_fees</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="550" column="16" bodyfile="libraries/chain/db_market.cpp" bodystart="2592" bodyend="2693"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a7d3b2fc4773d4e5227748403fdd5d925" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref></type>
        <definition>asset graphene::chain::database::pay_force_settle_fees</definition>
        <argsstring>(const asset_object &amp;collecting_asset, const asset &amp;collat_receives)</argsstring>
        <name>pay_force_settle_fees</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1asset__object" kindref="compound">asset_object</ref> &amp;</type>
          <declname>collecting_asset</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>collat_receives</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="552" column="16" bodyfile="libraries/chain/db_market.cpp" bodystart="2702" bodyend="2721"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a98391f198bc95d206c91da61dc55373d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::pay_order</definition>
        <argsstring>(const account_object &amp;receiver, const asset &amp;receives, const asset &amp;pays)</argsstring>
        <name>pay_order</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1account__object" kindref="compound">account_object</ref> &amp;</type>
          <declname>receiver</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>receives</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>pays</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>helpers to fill_order </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="539" column="15" bodyfile="libraries/chain/db_market.cpp" bodystart="2545" bodyend="2555"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1database_1a6c5fdb41f8fff0fa1aecc3c7778bf28c" prot="public" static="no" mutable="no">
        <type>std::deque&lt; <ref refid="classgraphene_1_1protocol_1_1precomputable__transaction" kindref="compound">precomputable_transaction</ref> &gt;</type>
        <definition>std::deque&lt; precomputable_transaction &gt; graphene::chain::database::_popped_tx</definition>
        <argsstring></argsstring>
        <name>_popped_tx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>when popping a block, the transactions that were removed get cached here so they can be reapplied at the proper time </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="660" column="21" bodyfile="libraries/chain/include/graphene/chain/database.hpp" bodystart="660" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a414ee96a9f64b119cd3849266885d93d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1processed__transaction" kindref="compound">processed_transaction</ref></type>
        <definition>processed_transaction graphene::chain::database::validate_transaction</definition>
        <argsstring>(const signed_transaction &amp;trx)</argsstring>
        <name>validate_transaction</name>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1signed__transaction" kindref="compound">signed_transaction</ref> &amp;</type>
          <declname>trx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method validates transactions without adding it to the pending state. <simplesect kind="return"><para>true if the transaction would validate </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="655" column="32" bodyfile="libraries/chain/db_block.cpp" bodystart="307" bodyend="311"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1af0ba4838b6533fb5a95f1dcb27004cd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1generic__operation__result" kindref="compound">generic_operation_result</ref></type>
        <definition>generic_operation_result graphene::chain::database::process_tickets</definition>
        <argsstring>()</argsstring>
        <name>process_tickets</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="735" column="35" bodyfile="libraries/chain/db_update.cpp" bodystart="652" bodyend="745"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1aa3d40d41a108ab3408ee02ea4035607b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::update_bitasset_current_feed</definition>
        <argsstring>(const asset_bitasset_data_object &amp;bitasset, bool skip_median_update=false)</argsstring>
        <name>update_bitasset_current_feed</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1asset__bitasset__data__object" kindref="compound">asset_bitasset_data_object</ref> &amp;</type>
          <declname>bitasset</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>skip_median_update</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Derive <ref refid="classgraphene_1_1chain_1_1asset__bitasset__data__object_1a16c8791b8387ccf5d9e4d69906e04d79" kindref="member">asset_bitasset_data_object::current_feed</ref> from other data in the database <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bitasset</parametername>
</parameternamelist>
<parameterdescription>
<para>The bitasset object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>skip_median_update</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to skip updating <ref refid="classgraphene_1_1chain_1_1asset__bitasset__data__object_1a06fa836f4412ec1ca52e881d84bcb78c" kindref="member">asset_bitasset_data_object::median_feed</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="739" column="15" bodyfile="libraries/chain/db_update.cpp" bodystart="270" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1abb25d544cb49ea782f43630e0bed084c" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classgraphene_1_1chain_1_1witness__object" kindref="compound">witness_object</ref> &amp;</type>
        <definition>const witness_object &amp; graphene::chain::database::validate_block_header</definition>
        <argsstring>(uint32_t skip, const signed_block &amp;next_block) const</argsstring>
        <name>validate_block_header</name>
        <param>
          <type>uint32_t</type>
          <declname>skip</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1signed__block" kindref="compound">signed_block</ref> &amp;</type>
          <declname>next_block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Steps involved in applying a new block </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="720" column="31" bodyfile="libraries/chain/db_block.cpp" bodystart="827" bodyend="848"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1afe0c00a60f6bbe322c6a2db3cfb74b25" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classgraphene_1_1chain_1_1witness__object" kindref="compound">witness_object</ref> &amp;</type>
        <definition>const witness_object&amp; graphene::chain::database::_validate_block_header</definition>
        <argsstring>(const signed_block &amp;next_block) const</argsstring>
        <name>_validate_block_header</name>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1signed__block" kindref="compound">signed_block</ref> &amp;</type>
          <declname>next_block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="721" column="31"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a3821159b55c5519285d3f45409e4c977" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::verify_signing_witness</definition>
        <argsstring>(const signed_block &amp;new_block, const fork_item &amp;fork_entry) const</argsstring>
        <name>verify_signing_witness</name>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1signed__block" kindref="compound">signed_block</ref> &amp;</type>
          <declname>new_block</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1fork__item" kindref="compound">fork_item</ref> &amp;</type>
          <declname>fork_entry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="722" column="15" bodyfile="libraries/chain/db_block.cpp" bodystart="232" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a3d1e43ff6c46dfb2a0bde15451d1e625" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::update_witnesses</definition>
        <argsstring>(fork_item &amp;fork_entry) const</argsstring>
        <name>update_witnesses</name>
        <param>
          <type><ref refid="structgraphene_1_1chain_1_1fork__item" kindref="compound">fork_item</ref> &amp;</type>
          <declname>fork_entry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="723" column="15" bodyfile="libraries/chain/db_block.cpp" bodystart="243" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a614eb98379c3991d972133f6f846593d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::create_block_summary</definition>
        <argsstring>(const signed_block &amp;next_block)</argsstring>
        <name>create_block_summary</name>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1signed__block" kindref="compound">signed_block</ref> &amp;</type>
          <declname>next_block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="724" column="15" bodyfile="libraries/chain/db_block.cpp" bodystart="850" bodyend="856"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a3eab987028ac7d74e4788ccc020f27e8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::update_global_dynamic_data</definition>
        <argsstring>(const signed_block &amp;b, const uint32_t missed_blocks)</argsstring>
        <name>update_global_dynamic_data</name>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1signed__block" kindref="compound">signed_block</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>missed_blocks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="742" column="15" bodyfile="libraries/chain/db_update.cpp" bodystart="44" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a0485e7a64376580ca08ada3b83a6de76" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::update_signing_witness</definition>
        <argsstring>(const witness_object &amp;signing_witness, const signed_block &amp;new_block)</argsstring>
        <name>update_signing_witness</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1witness__object" kindref="compound">witness_object</ref> &amp;</type>
          <declname>signing_witness</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1signed__block" kindref="compound">signed_block</ref> &amp;</type>
          <declname>new_block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="743" column="15" bodyfile="libraries/chain/db_update.cpp" bodystart="85" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1aa281b08f27f23e83863106e7c5db543b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::update_last_irreversible_block</definition>
        <argsstring>()</argsstring>
        <name>update_last_irreversible_block</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="744" column="15" bodyfile="libraries/chain/db_update.cpp" bodystart="107" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1ad4844a036da23d18c0e65f5859f12683" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::clear_expired_transactions</definition>
        <argsstring>()</argsstring>
        <name>clear_expired_transactions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="745" column="15" bodyfile="libraries/chain/db_update.cpp" bodystart="144" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1ad75c225b144139e71fa68de637b2c548" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::clear_expired_proposals</definition>
        <argsstring>()</argsstring>
        <name>clear_expired_proposals</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="746" column="15" bodyfile="libraries/chain/db_update.cpp" bodystart="155" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1abdcb89e79aaadcdec3b90ebebcd130c5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::clear_expired_orders</definition>
        <argsstring>()</argsstring>
        <name>clear_expired_orders</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="747" column="15" bodyfile="libraries/chain/db_update.cpp" bodystart="320" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a96829431e0fb7ce36cb3fe0be5d3b2be" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::clear_expired_force_settlements</definition>
        <argsstring>()</argsstring>
        <name>clear_expired_force_settlements</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="748" column="15" bodyfile="libraries/chain/db_update.cpp" bodystart="348" bodyend="528"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1ae46cba129339864cc6958450b53c27f6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::update_expired_feeds</definition>
        <argsstring>()</argsstring>
        <name>update_expired_feeds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="749" column="15" bodyfile="libraries/chain/db_update.cpp" bodystart="530" bodyend="589"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1acd99f1cccc899866bb8473242aa78385" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::update_core_exchange_rates</definition>
        <argsstring>()</argsstring>
        <name>update_core_exchange_rates</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="750" column="15" bodyfile="libraries/chain/db_update.cpp" bodystart="591" bodyend="614"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1ae68098fd0de4ab679bfc696a364ebb56" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::update_maintenance_flag</definition>
        <argsstring>(bool new_maintenance_flag)</argsstring>
        <name>update_maintenance_flag</name>
        <param>
          <type>bool</type>
          <declname>new_maintenance_flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="751" column="15" bodyfile="libraries/chain/db_update.cpp" bodystart="616" bodyend="626"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a5dd219435fad332aa12893b1aefdcbf8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::update_withdraw_permissions</definition>
        <argsstring>()</argsstring>
        <name>update_withdraw_permissions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="752" column="15" bodyfile="libraries/chain/db_update.cpp" bodystart="628" bodyend="633"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a3cc72f702be53384cc2fb4cd262d351b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::update_credit_offers_and_deals</definition>
        <argsstring>()</argsstring>
        <name>update_credit_offers_and_deals</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="753" column="15" bodyfile="libraries/chain/db_update.cpp" bodystart="747" bodyend="872"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a23203344023adbac57dab610604aa030" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::clear_expired_htlcs</definition>
        <argsstring>()</argsstring>
        <name>clear_expired_htlcs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="754" column="15" bodyfile="libraries/chain/db_update.cpp" bodystart="635" bodyend="650"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1af51b59445b07cab91bd70fd4ddec2e4f" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::initialize_budget_record</definition>
        <argsstring>(fc::time_point_sec now, budget_record &amp;rec) const</argsstring>
        <name>initialize_budget_record</name>
        <param>
          <type><ref refid="classfc_1_1time__point__sec" kindref="compound">fc::time_point_sec</ref></type>
          <declname>now</declname>
        </param>
        <param>
          <type><ref refid="structgraphene_1_1chain_1_1budget__record" kindref="compound">budget_record</ref> &amp;</type>
          <declname>rec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Steps performed only at maintenance intervals </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="761" column="15" bodyfile="libraries/chain/db_maint.cpp" bodystart="417" bodyend="463"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1aff91fc596f814302f39d4c0233969d37" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::process_budget</definition>
        <argsstring>()</argsstring>
        <name>process_budget</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update the budget for witnesses and workers. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="762" column="15" bodyfile="libraries/chain/db_maint.cpp" bodystart="468" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a6fe82633f6c1133154b070c83a05362f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::pay_workers</definition>
        <argsstring>(share_type &amp;budget)</argsstring>
        <name>pay_workers</name>
        <param>
          <type><ref refid="namespacegraphene_1_1protocol_1a69b2104c1c11eed2d17bd29b86713347" kindref="member">share_type</ref> &amp;</type>
          <declname>budget</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="763" column="15" bodyfile="libraries/chain/db_maint.cpp" bodystart="154" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a8444b35d6ecf325dc2caad45e316f6ef" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::perform_chain_maintenance</definition>
        <argsstring>(const signed_block &amp;next_block)</argsstring>
        <name>perform_chain_maintenance</name>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1signed__block" kindref="compound">signed_block</ref> &amp;</type>
          <declname>next_block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>&lt; all voting power.</para>
<para>the voting power of the proxy, if there is no attenuation, it is equal to vp_all.</para>
<para>&lt; the final voting power for the committees.</para>
<para>&lt; the final voting power for the witnesses.</para>
<para>&lt; the final voting power for the workers.</para>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="764" column="15" bodyfile="libraries/chain/db_maint.cpp" bodystart="1246" bodyend="1598"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1af31a9714d1e4a1de0ecd91346e0ae35f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::update_active_witnesses</definition>
        <argsstring>()</argsstring>
        <name>update_active_witnesses</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>accounts that vote for 0 or 1 witness do not get to express an opinion on the number of witnesses to have (they abstain and are non-voting accounts)</para>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="765" column="15" bodyfile="libraries/chain/db_maint.cpp" bodystart="203" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a8c6abb44b82f50b6c07b759bae840064" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::update_active_committee_members</definition>
        <argsstring>()</argsstring>
        <name>update_active_committee_members</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>accounts that vote for 0 or 1 committee member do not get to express an opinion on the number of committee members to have (they abstain and are non-voting accounts)</para>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="766" column="15" bodyfile="libraries/chain/db_maint.cpp" bodystart="310" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1af3b2871563286c018ef252daec940f15" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::update_worker_votes</definition>
        <argsstring>()</argsstring>
        <name>update_worker_votes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="767" column="15" bodyfile="libraries/chain/db_maint.cpp" bodystart="137" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1abbadc138e491d9fabf4c4500fb3f7880" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::process_bids</definition>
        <argsstring>(const asset_bitasset_data_object &amp;bad)</argsstring>
        <name>process_bids</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1asset__bitasset__data__object" kindref="compound">asset_bitasset_data_object</ref> &amp;</type>
          <declname>bad</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="768" column="15" bodyfile="libraries/chain/db_maint.cpp" bodystart="827" bodyend="893"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a7a68bea3940b894653ed5f38b41e3063" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::process_bitassets</definition>
        <argsstring>()</argsstring>
        <name>process_bitassets</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="769" column="15" bodyfile="libraries/chain/db_maint.cpp" bodystart="953" bodyend="990"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a7127cd2d681e467886043883d32cc4a1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Type</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void graphene::chain::database::perform_account_maintenance</definition>
        <argsstring>(Type tally_helper)</argsstring>
        <name>perform_account_maintenance</name>
        <param>
          <type>Type</type>
          <declname>tally_helper</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="772" column="15" bodyfile="libraries/chain/db_maint.cpp" bodystart="78" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a110fcf6a054a23576d5573ee4db3fd9c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::notify_applied_block</definition>
        <argsstring>(const signed_block &amp;block)</argsstring>
        <name>notify_applied_block</name>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1signed__block" kindref="compound">signed_block</ref> &amp;</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="729" column="15" bodyfile="libraries/chain/db_notify.cpp" bodystart="582" bodyend="585"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a9b827a50067542ef8c1ea9f2e6177f8d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::notify_on_pending_transaction</definition>
        <argsstring>(const signed_transaction &amp;tx)</argsstring>
        <name>notify_on_pending_transaction</name>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1signed__transaction" kindref="compound">signed_transaction</ref> &amp;</type>
          <declname>tx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="730" column="15" bodyfile="libraries/chain/db_notify.cpp" bodystart="587" bodyend="590"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1ae3f480762bbb94cfecf98dd81fe3ed6e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::notify_changed_objects</definition>
        <argsstring>()</argsstring>
        <name>notify_changed_objects</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="731" column="15" bodyfile="libraries/chain/db_notify.cpp" bodystart="592" bodyend="659"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1database_1a4e333e18f538e3945076234258553f1c" prot="private" static="no" mutable="no">
        <type>const <ref refid="classgraphene_1_1chain_1_1asset__object" kindref="compound">asset_object</ref> *</type>
        <definition>const asset_object* graphene::chain::database::_p_core_asset_obj</definition>
        <argsstring></argsstring>
        <name>_p_core_asset_obj</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pointers to core asset object and global objects who will have immutable addresses after created </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="837" column="48" bodyfile="libraries/chain/include/graphene/chain/database.hpp" bodystart="837" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1database_1a8682770e72c0e3fa93275c4ff96049de" prot="private" static="no" mutable="no">
        <type>const <ref refid="classgraphene_1_1chain_1_1asset__dynamic__data__object" kindref="compound">asset_dynamic_data_object</ref> *</type>
        <definition>const asset_dynamic_data_object* graphene::chain::database::_p_core_dynamic_data_obj</definition>
        <argsstring></argsstring>
        <name>_p_core_dynamic_data_obj</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="838" column="48" bodyfile="libraries/chain/include/graphene/chain/database.hpp" bodystart="838" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1database_1a154deba8b408604a3dd800434f8687de" prot="private" static="no" mutable="no">
        <type>const <ref refid="classgraphene_1_1chain_1_1global__property__object" kindref="compound">global_property_object</ref> *</type>
        <definition>const global_property_object* graphene::chain::database::_p_global_prop_obj</definition>
        <argsstring></argsstring>
        <name>_p_global_prop_obj</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="839" column="48" bodyfile="libraries/chain/include/graphene/chain/database.hpp" bodystart="839" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1database_1a5e02222afc911521d869764c88527f1f" prot="private" static="no" mutable="no">
        <type>const <ref refid="classgraphene_1_1chain_1_1dynamic__global__property__object" kindref="compound">dynamic_global_property_object</ref> *</type>
        <definition>const dynamic_global_property_object* graphene::chain::database::_p_dyn_global_prop_obj</definition>
        <argsstring></argsstring>
        <name>_p_dyn_global_prop_obj</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="840" column="48" bodyfile="libraries/chain/include/graphene/chain/database.hpp" bodystart="840" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1database_1a4c733864b6589d5c7ec61f2ee584e4ab" prot="private" static="no" mutable="no">
        <type>const <ref refid="classgraphene_1_1chain_1_1chain__property__object" kindref="compound">chain_property_object</ref> *</type>
        <definition>const chain_property_object* graphene::chain::database::_p_chain_property_obj</definition>
        <argsstring></argsstring>
        <name>_p_chain_property_obj</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="841" column="48" bodyfile="libraries/chain/include/graphene/chain/database.hpp" bodystart="841" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1database_1a65931172b3a3900067a78f0c03ae4735" prot="private" static="no" mutable="no">
        <type>const <ref refid="classgraphene_1_1chain_1_1witness__schedule__object" kindref="compound">witness_schedule_object</ref> *</type>
        <definition>const witness_schedule_object* graphene::chain::database::_p_witness_schedule_obj</definition>
        <argsstring></argsstring>
        <name>_p_witness_schedule_obj</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="842" column="48" bodyfile="libraries/chain/include/graphene/chain/database.hpp" bodystart="842" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classgraphene_1_1chain_1_1database_1a6de6add85d012876641f2a50ad707726" prot="public" static="no" strong="no">
        <type></type>
        <name>validation_steps</name>
        <enumvalue id="classgraphene_1_1chain_1_1database_1a6de6add85d012876641f2a50ad707726afbe701c12ae94e417ef9424306aabbdc" prot="public">
          <name>skip_nothing</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classgraphene_1_1chain_1_1database_1a6de6add85d012876641f2a50ad707726a7cd765f84f450cfdd68e3adcf87c02d2" prot="public">
          <name>skip_witness_signature</name>
          <initializer>= 1 &lt;&lt; 0</initializer>
          <briefdescription>
<para>used while reindexing </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classgraphene_1_1chain_1_1database_1a6de6add85d012876641f2a50ad707726ada088aa976bc3f5a1813dc7645b591ad" prot="public">
          <name>skip_transaction_signatures</name>
          <initializer>= 1 &lt;&lt; 1</initializer>
          <briefdescription>
<para>used by non-witness nodes </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classgraphene_1_1chain_1_1database_1a6de6add85d012876641f2a50ad707726aa4b454d723548a14369e9d54ebff309c" prot="public">
          <name>skip_transaction_dupe_check</name>
          <initializer>= 1 &lt;&lt; 2</initializer>
          <briefdescription>
<para>used while reindexing </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classgraphene_1_1chain_1_1database_1a6de6add85d012876641f2a50ad707726ad400a74260f27eef16d855f4c325840f" prot="public">
          <name>skip_block_size_check</name>
          <initializer>= 1 &lt;&lt; 4</initializer>
          <briefdescription>
<para>used when applying locally generated transactions </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classgraphene_1_1chain_1_1database_1a6de6add85d012876641f2a50ad707726aa9965640871a2f76bacd60c977a183bc" prot="public">
          <name>skip_tapos_check</name>
          <initializer>= 1 &lt;&lt; 5</initializer>
          <briefdescription>
<para>used while reindexing <ndash/> note this skips expiration check too </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classgraphene_1_1chain_1_1database_1a6de6add85d012876641f2a50ad707726a67c110807cc8ac1b8096a8d7888804c4" prot="public">
          <name>skip_merkle_check</name>
          <initializer>= 1 &lt;&lt; 7</initializer>
          <briefdescription>
<para>used while reindexing </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classgraphene_1_1chain_1_1database_1a6de6add85d012876641f2a50ad707726ab1814f44f09e9aa67dc11f1a82179368" prot="public">
          <name>skip_assert_evaluation</name>
          <initializer>= 1 &lt;&lt; 8</initializer>
          <briefdescription>
<para>used while reindexing </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classgraphene_1_1chain_1_1database_1a6de6add85d012876641f2a50ad707726a8627024a0226d1f03a963a90a26383b7" prot="public">
          <name>skip_undo_history_check</name>
          <initializer>= 1 &lt;&lt; 9</initializer>
          <briefdescription>
<para>used while reindexing </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classgraphene_1_1chain_1_1database_1a6de6add85d012876641f2a50ad707726a5658faff01cd4c139d313f6888bc7da0" prot="public">
          <name>skip_witness_schedule_check</name>
          <initializer>= 1 &lt;&lt; 10</initializer>
          <briefdescription>
<para>used while reindexing </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="78" column="1" bodyfile="libraries/chain/include/graphene/chain/database.hpp" bodystart="77" bodyend="90"/>
      </memberdef>
      <memberdef kind="enum" id="classgraphene_1_1chain_1_1database_1aaa234ff3fda171f0cf673fe338632599" prot="public" static="no" strong="yes">
        <type></type>
        <name>match_result_type</name>
        <enumvalue id="classgraphene_1_1chain_1_1database_1aaa234ff3fda171f0cf673fe338632599a931f2bc4714ed6ae40ed86bf30d1bf89" prot="public">
          <name>none_filled</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classgraphene_1_1chain_1_1database_1aaa234ff3fda171f0cf673fe338632599aefa26597c4fd834f3665c116752df90d" prot="public">
          <name>only_taker_filled</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classgraphene_1_1chain_1_1database_1aaa234ff3fda171f0cf673fe338632599ac640a86c9e0e36798d0781f62124b5df" prot="public">
          <name>only_maker_filled</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classgraphene_1_1chain_1_1database_1aaa234ff3fda171f0cf673fe338632599a28b9b9f52f9ca19e928b72f6951fce99" prot="public">
          <name>both_filled</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="418" column="1" bodyfile="libraries/chain/include/graphene/chain/database.hpp" bodystart="417" bodyend="423"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1database_1a3e6934dcd3926a0064ef136afc242c33" prot="public" static="no" mutable="no">
        <type><ref refid="namespacefc_1a6c2f257e2f2f1a64dbdfe8b7b5e0f411" kindref="member">fc::signal</ref>&lt; void(const <ref refid="classgraphene_1_1protocol_1_1signed__block" kindref="compound">signed_block</ref> &amp;)&gt;</type>
        <definition>fc::signal&lt;void(const signed_block&amp;)&gt; graphene::chain::database::applied_block</definition>
        <argsstring></argsstring>
        <name>applied_block</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted after all operations and virtual operation for a block have been applied but before the <ref refid="classgraphene_1_1chain_1_1database_1a87c74f1ef2f8840261c3d9789151b305" kindref="member">get_applied_operations()</ref> are cleared.</para>
<para>You may not yield from this callback because the blockchain is holding the write lock and may be in an &quot;inconstant state&quot; until after it is released. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="624" column="31" bodyfile="libraries/chain/include/graphene/chain/database.hpp" bodystart="624" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1database_1a0747f461aea199b260777d4b1975013d" prot="public" static="no" mutable="no">
        <type><ref refid="namespacefc_1a6c2f257e2f2f1a64dbdfe8b7b5e0f411" kindref="member">fc::signal</ref>&lt; void(const <ref refid="classgraphene_1_1protocol_1_1signed__transaction" kindref="compound">signed_transaction</ref> &amp;)&gt;</type>
        <definition>fc::signal&lt;void(const signed_transaction&amp;)&gt; graphene::chain::database::on_pending_transaction</definition>
        <argsstring></argsstring>
        <name>on_pending_transaction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted any time a new transaction is added to the pending block state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="630" column="25" bodyfile="libraries/chain/include/graphene/chain/database.hpp" bodystart="630" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1database_1a11eac7e673b4a9bb4458282b3b01e21f" prot="public" static="no" mutable="no">
        <type><ref refid="namespacefc_1a6c2f257e2f2f1a64dbdfe8b7b5e0f411" kindref="member">fc::signal</ref>&lt; void(const vector&lt; <ref refid="structgraphene_1_1db_1_1object__id__type" kindref="compound">object_id_type</ref> &gt; &amp;, const flat_set&lt; account_id_type &gt; &amp;)&gt;</type>
        <definition>fc::signal&lt;void(const vector&lt;object_id_type&gt;&amp;, const flat_set&lt;account_id_type&gt;&amp;)&gt; graphene::chain::database::new_objects</definition>
        <argsstring></argsstring>
        <name>new_objects</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Emitted After a block has been applied and committed. The callback should not yield and should execute quickly. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="636" column="21" bodyfile="libraries/chain/include/graphene/chain/database.hpp" bodystart="636" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1database_1a89c462c2ed0224b34cd6b6b06985d046" prot="public" static="no" mutable="no">
        <type><ref refid="namespacefc_1a6c2f257e2f2f1a64dbdfe8b7b5e0f411" kindref="member">fc::signal</ref>&lt; void(const vector&lt; <ref refid="structgraphene_1_1db_1_1object__id__type" kindref="compound">object_id_type</ref> &gt; &amp;, const flat_set&lt; account_id_type &gt; &amp;)&gt;</type>
        <definition>fc::signal&lt;void(const vector&lt;object_id_type&gt;&amp;, const flat_set&lt;account_id_type&gt;&amp;)&gt; graphene::chain::database::changed_objects</definition>
        <argsstring></argsstring>
        <name>changed_objects</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Emitted After a block has been applied and committed. The callback should not yield and should execute quickly. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="642" column="21" bodyfile="libraries/chain/include/graphene/chain/database.hpp" bodystart="642" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1database_1a9aa30b505cfa4e5cdc9a0b354d49e89e" prot="public" static="no" mutable="no">
        <type><ref refid="namespacefc_1a6c2f257e2f2f1a64dbdfe8b7b5e0f411" kindref="member">fc::signal</ref>&lt; void(const vector&lt; <ref refid="structgraphene_1_1db_1_1object__id__type" kindref="compound">object_id_type</ref> &gt; &amp;, const vector&lt; const <ref refid="classgraphene_1_1db_1_1object" kindref="compound">object</ref> * &gt; &amp;, const flat_set&lt; account_id_type &gt; &amp;)&gt;</type>
        <definition>fc::signal&lt;void(const vector&lt;object_id_type&gt;&amp;, const vector&lt;const object*&gt;&amp;, const flat_set&lt;account_id_type&gt;&amp;)&gt; graphene::chain::database::removed_objects</definition>
        <argsstring></argsstring>
        <name>removed_objects</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>this signal is emitted any time an object is removed and contains a pointer to the last value of every object that was removed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="648" column="3" bodyfile="libraries/chain/include/graphene/chain/database.hpp" bodystart="648" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1database_1aa2b2f2fe588d6d533a656d2287354bab" prot="public" static="no" mutable="no">
        <type><ref refid="classfc_1_1time__point__sec" kindref="compound">fc::time_point_sec</ref></type>
        <definition>fc::time_point_sec graphene::chain::database::_current_block_time</definition>
        <argsstring></argsstring>
        <name>_current_block_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="799" column="44" bodyfile="libraries/chain/include/graphene/chain/database.hpp" bodystart="799" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1database_1a675728076c3aec61222edcae59af7337" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t graphene::chain::database::_current_block_num</definition>
        <argsstring></argsstring>
        <name>_current_block_num</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="800" column="44" bodyfile="libraries/chain/include/graphene/chain/database.hpp" bodystart="800" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1database_1a4fc3dc98840a3b6a652488b420662845" prot="private" static="no" mutable="no">
        <type>optional&lt; <ref refid="classgraphene_1_1db_1_1undo__database_1_1session" kindref="compound">undo_database::session</ref> &gt;</type>
        <definition>optional&lt;undo_database::session&gt; graphene::chain::database::_pending_tx_session</definition>
        <argsstring></argsstring>
        <name>_pending_tx_session</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="695" column="25" bodyfile="libraries/chain/include/graphene/chain/database.hpp" bodystart="695" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1database_1ac9b667d4d617a607787c9a3c1f42ac30" prot="private" static="no" mutable="no">
        <type>vector&lt; unique_ptr&lt; <ref refid="classgraphene_1_1chain_1_1op__evaluator" kindref="compound">op_evaluator</ref> &gt; &gt;</type>
        <definition>vector&lt; unique_ptr&lt;op_evaluator&gt; &gt; graphene::chain::database::_operation_evaluators</definition>
        <argsstring></argsstring>
        <name>_operation_evaluators</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="696" column="21" bodyfile="libraries/chain/include/graphene/chain/database.hpp" bodystart="696" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1database_1a2818f2ad9b765d588fd125dc191e523a" prot="private" static="no" mutable="no">
        <type>vector&lt; <ref refid="structgraphene_1_1protocol_1_1processed__transaction" kindref="compound">processed_transaction</ref> &gt;</type>
        <definition>vector&lt; processed_transaction &gt; graphene::chain::database::_pending_tx</definition>
        <argsstring></argsstring>
        <name>_pending_tx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="776" column="24" bodyfile="libraries/chain/include/graphene/chain/database.hpp" bodystart="776" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1database_1ac1eab6ae52717cef08746bd3b2c9d464" prot="private" static="no" mutable="no">
        <type><ref refid="classgraphene_1_1chain_1_1fork__database" kindref="compound">fork_database</ref></type>
        <definition>fork_database graphene::chain::database::_fork_db</definition>
        <argsstring></argsstring>
        <name>_fork_db</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="777" column="49" bodyfile="libraries/chain/include/graphene/chain/database.hpp" bodystart="777" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1database_1aca7a7972f572bb397bb9cd666f476879" prot="private" static="no" mutable="no">
        <type><ref refid="classgraphene_1_1chain_1_1block__database" kindref="compound">block_database</ref></type>
        <definition>block_database graphene::chain::database::_block_id_to_block</definition>
        <argsstring></argsstring>
        <name>_block_id_to_block</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Note: we can probably store blocks by block num rather than block id because after the undo window is past the block ID is no longer relevant and its number is irreversible.</para>
<para>During the &quot;fork window&quot; we can cache blocks in memory until the fork is resolved. This should make maintaining the fork tree relatively simple. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="788" column="27" bodyfile="libraries/chain/include/graphene/chain/database.hpp" bodystart="788" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1database_1a0cdbc9e636ec8cba85507264b3477c79" prot="private" static="no" mutable="no">
        <type>vector&lt; optional&lt; <ref refid="classgraphene_1_1chain_1_1operation__history__object" kindref="compound">operation_history_object</ref> &gt; &gt;</type>
        <definition>vector&lt;optional&lt;operation_history_object&gt; &gt; graphene::chain::database::_applied_ops</definition>
        <argsstring></argsstring>
        <name>_applied_ops</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Contains the set of ops that are in the process of being applied from the current block. It contains real and virtual operations in the order they occur and is cleared after the applied_block signal is emited. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="796" column="18" bodyfile="libraries/chain/include/graphene/chain/database.hpp" bodystart="796" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1database_1a84008aa5f9c5d989b2e5e1bb9b91a995" prot="private" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t graphene::chain::database::_current_trx_in_block</definition>
        <argsstring></argsstring>
        <name>_current_trx_in_block</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="802" column="44" bodyfile="libraries/chain/include/graphene/chain/database.hpp" bodystart="802" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1database_1a1e9b993a696f1fc3be6b913686d8b35b" prot="private" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t graphene::chain::database::_current_op_in_trx</definition>
        <argsstring></argsstring>
        <name>_current_op_in_trx</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="803" column="44" bodyfile="libraries/chain/include/graphene/chain/database.hpp" bodystart="803" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1database_1aa39fa024e699c96b04b3c54d0d56972f" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t graphene::chain::database::_current_virtual_op</definition>
        <argsstring></argsstring>
        <name>_current_virtual_op</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="804" column="44" bodyfile="libraries/chain/include/graphene/chain/database.hpp" bodystart="804" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1database_1a59e5f7edb13bd71745c73e65359ca465" prot="private" static="no" mutable="no">
        <type>vector&lt; uint64_t &gt;</type>
        <definition>vector&lt;uint64_t&gt; graphene::chain::database::_vote_tally_buffer</definition>
        <argsstring></argsstring>
        <name>_vote_tally_buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="806" column="34" bodyfile="libraries/chain/include/graphene/chain/database.hpp" bodystart="806" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1database_1a694ccfb5385c32ab164b8388802ce36b" prot="private" static="no" mutable="no">
        <type>vector&lt; uint64_t &gt;</type>
        <definition>vector&lt;uint64_t&gt; graphene::chain::database::_witness_count_histogram_buffer</definition>
        <argsstring></argsstring>
        <name>_witness_count_histogram_buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="807" column="34" bodyfile="libraries/chain/include/graphene/chain/database.hpp" bodystart="807" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1database_1aa26ab6ee28c4157489e89160659e2ef8" prot="private" static="no" mutable="no">
        <type>vector&lt; uint64_t &gt;</type>
        <definition>vector&lt;uint64_t&gt; graphene::chain::database::_committee_count_histogram_buffer</definition>
        <argsstring></argsstring>
        <name>_committee_count_histogram_buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="808" column="34" bodyfile="libraries/chain/include/graphene/chain/database.hpp" bodystart="808" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1database_1a142f3f5ab6695131c1407fbfc5b932c6" prot="private" static="no" mutable="no">
        <type>std::array&lt; uint64_t, 2 &gt;</type>
        <definition>std::array&lt;uint64_t,2&gt; graphene::chain::database::_total_voting_stake</definition>
        <argsstring></argsstring>
        <name>_total_voting_stake</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="809" column="32" bodyfile="libraries/chain/include/graphene/chain/database.hpp" bodystart="809" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1database_1a61078f4c87b4fcb49d5a3e15d235fe0c" prot="private" static="no" mutable="no">
        <type>flat_map&lt; uint32_t, <ref refid="namespacegraphene_1_1protocol_1a32e784a8edceba5506db2c130ed9cb9c" kindref="member">block_id_type</ref> &gt;</type>
        <definition>flat_map&lt;uint32_t,block_id_type&gt; graphene::chain::database::_checkpoints</definition>
        <argsstring></argsstring>
        <name>_checkpoints</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="812" column="20" bodyfile="libraries/chain/include/graphene/chain/database.hpp" bodystart="812" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1database_1a6c570ecbccb63d37c08c060f3dfaed19" prot="private" static="no" mutable="no">
        <type><ref refid="classgraphene_1_1chain_1_1node__property__object" kindref="compound">node_property_object</ref></type>
        <definition>node_property_object graphene::chain::database::_node_property_object</definition>
        <argsstring></argsstring>
        <name>_node_property_object</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="814" column="44" bodyfile="libraries/chain/include/graphene/chain/database.hpp" bodystart="814" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1database_1aee254525d107b4e2f6723833be243dad" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool graphene::chain::database::_track_standby_votes</definition>
        <argsstring></argsstring>
        <name>_track_standby_votes</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether to update votes of standby witnesses and committee members when performing chain maintenance. Set it to true to provide accurate data to API clients, set to false to have better performance. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="818" column="44" bodyfile="libraries/chain/include/graphene/chain/database.hpp" bodystart="818" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1database_1a99bb66b056f57f04f50dc88b480babff" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool graphene::chain::database::_opened</definition>
        <argsstring></argsstring>
        <name>_opened</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether database is successfully opened or not.</para>
<para>The database is considered open when there&apos;s no exception or assertion fail during <ref refid="classgraphene_1_1chain_1_1database_1a2d5356973d8d14d8267b7d49a2c6d939" kindref="member">database::open()</ref> method, and <ref refid="classgraphene_1_1db_1_1object__database_1a076e75fbe95c3cbd0bf637c258973533" kindref="member">database::close()</ref> has not been called, or failed during execution. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="827" column="44" bodyfile="libraries/chain/include/graphene/chain/database.hpp" bodystart="827" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1database_1ab2d3bdd42bbdcff329a7d0755810a970" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t graphene::chain::database::_undo_session_nesting_depth</definition>
        <argsstring></argsstring>
        <name>_undo_session_nesting_depth</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Counts nested undo sessions due to (for example) proposal updates or order-sends-order executions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="830" column="44" bodyfile="libraries/chain/include/graphene/chain/database.hpp" bodystart="830" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1database_1a888ab47c857e5047b0e2dc40d09bca7f" prot="private" static="no" mutable="no">
        <type>flat_set&lt; asset_id_type &gt;</type>
        <definition>flat_set&lt;asset_id_type&gt; graphene::chain::database::_issue_453_affected_assets</definition>
        <argsstring></argsstring>
        <name>_issue_453_affected_assets</name>
        <briefdescription>
<para>Tracks assets affected by bitshares-core issue #453 before hard fork #615 in one block. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="833" column="29" bodyfile="libraries/chain/include/graphene/chain/database.hpp" bodystart="833" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a5314db2d542f49fe5487e144a03c2ee9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::chain::database::database</definition>
        <argsstring>()</argsstring>
        <name>database</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="74" column="10" bodyfile="libraries/chain/db_management.cpp" bodystart="44" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a483796147553d8d1fca562d6303c8d93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::chain::database::~database</definition>
        <argsstring>() override</argsstring>
        <name>~database</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="75" column="10" bodyfile="libraries/chain/db_management.cpp" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a2d5356973d8d14d8267b7d49a2c6d939" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::open</definition>
        <argsstring>(const fc::path &amp;data_dir, std::function&lt; genesis_state_type()&gt; genesis_loader, const std::string &amp;db_version)</argsstring>
        <name>open</name>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">fc::path</ref> &amp;</type>
          <declname>data_dir</declname>
        </param>
        <param>
          <type>std::function&lt; <ref refid="structgraphene_1_1chain_1_1genesis__state__type" kindref="compound">genesis_state_type</ref>()&gt;</type>
          <declname>genesis_loader</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>db_version</declname>
        </param>
        <briefdescription>
<para>Open a database, creating a new one if necessary. </para>
        </briefdescription>
        <detaileddescription>
<para>Opens a database in the specified directory. If no initialized database is found, genesis_loader is called and its return value is used as the genesis state when initializing the new database</para>
<para>genesis_loader will not be called if an existing database is found.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Path to open or create database in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>genesis_loader</parametername>
</parameternamelist>
<parameterdescription>
<para>A callable object which returns the genesis state to initialize new databases on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>db_version</parametername>
</parameternamelist>
<parameterdescription>
<para>a version string that changes when the internal database format and/or logic is modified </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="104" column="16" bodyfile="libraries/chain/db_management.cpp" bodystart="176" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1ad9a4bc8bc2683554aac84fdd1e96b710" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::reindex</definition>
        <argsstring>(fc::path data_dir)</argsstring>
        <name>reindex</name>
        <param>
          <type><ref refid="classfc_1_1path" kindref="compound">fc::path</ref></type>
          <declname>data_dir</declname>
        </param>
        <briefdescription>
<para>Rebuild object graph from block history and open detabase. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to store the database</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This method may be called after or instead of <ref refid="classgraphene_1_1chain_1_1database_1a2d5356973d8d14d8267b7d49a2c6d939" kindref="member">database::open</ref>, and will rebuild the object graph by replaying blockchain history. When this method exits successfully, the database will be open. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="116" column="15" bodyfile="libraries/chain/db_management.cpp" bodystart="55" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a37463bb4fc61d94effff3f5784a2f168" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::wipe</definition>
        <argsstring>(const fc::path &amp;data_dir, bool include_blocks)</argsstring>
        <name>wipe</name>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">fc::path</ref> &amp;</type>
          <declname>data_dir</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>include_blocks</declname>
        </param>
        <briefdescription>
<para>wipe Delete database from disk, and potentially the raw chain as well. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to store the database </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>include_blocks</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, delete the raw chain as well as the database.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Will close the database before wiping. Database will be closed when this function returns. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="125" column="15" bodyfile="libraries/chain/db_management.cpp" bodystart="165" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1aaef6e311f1eb8ddfea82751b4e2df2d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::close</definition>
        <argsstring>(bool rewind=true)</argsstring>
        <name>close</name>
        <param>
          <type>bool</type>
          <declname>rewind</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="126" column="15" bodyfile="libraries/chain/db_management.cpp" bodystart="230" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a3daf7627fbbad235bc99cecc6464731b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>witness_id_type</type>
        <definition>witness_id_type graphene::chain::database::get_scheduled_witness</definition>
        <argsstring>(uint32_t slot_num) const</argsstring>
        <name>get_scheduled_witness</name>
        <param>
          <type>uint32_t</type>
          <declname>slot_num</declname>
        </param>
        <briefdescription>
<para>Get the witness scheduled for block production in a slot. </para>
        </briefdescription>
        <detaileddescription>
<para>slot_num always corresponds to a time in the future.</para>
<para>If slot_num == 1, returns the next scheduled witness. If slot_num == 2, returns the next scheduled witness after 1 block gap.</para>
<para>Use the <ref refid="classgraphene_1_1chain_1_1database_1a7a40590812847fac95aaded9dcac020e" kindref="member">get_slot_time()</ref> and <ref refid="classgraphene_1_1chain_1_1database_1a9f6a3131085a7411a46db17a818fd1ca" kindref="member">get_slot_at_time()</ref> functions to convert between slot_num and timestamp.</para>
<para>Passing slot_num == 0 returns GRAPHENE_NULL_WITNESS </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="144" column="26" bodyfile="libraries/chain/db_witness_schedule.cpp" bodystart="36" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a7a40590812847fac95aaded9dcac020e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1time__point__sec" kindref="compound">fc::time_point_sec</ref></type>
        <definition>fc::time_point_sec graphene::chain::database::get_slot_time</definition>
        <argsstring>(uint32_t slot_num) const</argsstring>
        <name>get_slot_time</name>
        <param>
          <type>uint32_t</type>
          <declname>slot_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the time at which the given slot occurs.</para>
<para>If slot_num == 0, return time_point_sec().</para>
<para>If slot_num == N for N &gt; 0, return the Nth next block-interval-aligned time greater than <ref refid="classgraphene_1_1chain_1_1database_1aa53e34701c0ab1b1c124b9c9e9c50ba1" kindref="member">head_block_time()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="154" column="29" bodyfile="libraries/chain/db_witness_schedule.cpp" bodystart="44" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a9f6a3131085a7411a46db17a818fd1ca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t graphene::chain::database::get_slot_at_time</definition>
        <argsstring>(fc::time_point_sec when) const</argsstring>
        <name>get_slot_at_time</name>
        <param>
          <type><ref refid="classfc_1_1time__point__sec" kindref="compound">fc::time_point_sec</ref></type>
          <declname>when</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the last slot which occurs AT or BEFORE the given time.</para>
<para>The return value is the greatest value N such that get_slot_time( N ) &lt;= when.</para>
<para>If no such N exists, return 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="164" column="19" bodyfile="libraries/chain/db_witness_schedule.cpp" bodystart="74" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1afa79d883fabbeab89ec71a47566ef1e6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t graphene::chain::database::witness_participation_rate</definition>
        <argsstring>() const</argsstring>
        <name>witness_participation_rate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the percent of block production slots that were missed in the past 128 blocks, not including the current block. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="170" column="19" bodyfile="libraries/chain/db_witness_schedule.cpp" bodystart="98" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a92ccabc0b2ed4232e41f44ad57ef321a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="namespacegraphene_1_1protocol_1a56354f39ed89f6a0a13fe90ba8228809" kindref="member">chain_id_type</ref> &amp;</type>
        <definition>const chain_id_type &amp; graphene::chain::database::get_chain_id</definition>
        <argsstring>() const</argsstring>
        <name>get_chain_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="179" column="48" bodyfile="libraries/chain/db_getter.cpp" bodystart="87" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a73b613c345d2411977fb4f1b12b0b837" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classgraphene_1_1chain_1_1asset__object" kindref="compound">asset_object</ref> &amp;</type>
        <definition>const asset_object &amp; graphene::chain::database::get_core_asset</definition>
        <argsstring>() const</argsstring>
        <name>get_core_asset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="180" column="48" bodyfile="libraries/chain/db_getter.cpp" bodystart="37" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a32af52750e60217ee3a2d9189c1d5437" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classgraphene_1_1chain_1_1asset__dynamic__data__object" kindref="compound">asset_dynamic_data_object</ref> &amp;</type>
        <definition>const asset_dynamic_data_object &amp; graphene::chain::database::get_core_dynamic_data</definition>
        <argsstring>() const</argsstring>
        <name>get_core_dynamic_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="181" column="48" bodyfile="libraries/chain/db_getter.cpp" bodystart="42" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1ac5519a9a8081356fa490be2db554b2e6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classgraphene_1_1chain_1_1chain__property__object" kindref="compound">chain_property_object</ref> &amp;</type>
        <definition>const chain_property_object &amp; graphene::chain::database::get_chain_properties</definition>
        <argsstring>() const</argsstring>
        <name>get_chain_properties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="182" column="48" bodyfile="libraries/chain/db_getter.cpp" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a464a05994e41fdadd6351114eddaa316" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classgraphene_1_1chain_1_1global__property__object" kindref="compound">global_property_object</ref> &amp;</type>
        <definition>const global_property_object &amp; graphene::chain::database::get_global_properties</definition>
        <argsstring>() const</argsstring>
        <name>get_global_properties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="183" column="48" bodyfile="libraries/chain/db_getter.cpp" bodystart="47" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a3d8bc74b9cd108aaff1ed60de7fbfeb3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classgraphene_1_1chain_1_1dynamic__global__property__object" kindref="compound">dynamic_global_property_object</ref> &amp;</type>
        <definition>const dynamic_global_property_object &amp; graphene::chain::database::get_dynamic_global_properties</definition>
        <argsstring>() const</argsstring>
        <name>get_dynamic_global_properties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="184" column="48" bodyfile="libraries/chain/db_getter.cpp" bodystart="57" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1ad10d0309e4c878cb896b09bcbdb5e3b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classgraphene_1_1chain_1_1node__property__object" kindref="compound">node_property_object</ref> &amp;</type>
        <definition>const node_property_object &amp; graphene::chain::database::get_node_properties</definition>
        <argsstring>() const</argsstring>
        <name>get_node_properties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="185" column="48" bodyfile="libraries/chain/db_getter.cpp" bodystart="92" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a337f8cd5e02c51ffde53b67cc04e2581" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structgraphene_1_1protocol_1_1fee__schedule" kindref="compound">fee_schedule</ref> &amp;</type>
        <definition>const fee_schedule &amp; graphene::chain::database::current_fee_schedule</definition>
        <argsstring>() const</argsstring>
        <name>current_fee_schedule</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="186" column="48" bodyfile="libraries/chain/db_getter.cpp" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a1fecc8c74e7c53dc3429bcfebda91775" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classgraphene_1_1chain_1_1account__statistics__object" kindref="compound">account_statistics_object</ref> &amp;</type>
        <definition>const account_statistics_object &amp; graphene::chain::database::get_account_stats_by_owner</definition>
        <argsstring>(account_id_type owner) const</argsstring>
        <name>get_account_stats_by_owner</name>
        <param>
          <type>account_id_type</type>
          <declname>owner</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="187" column="48" bodyfile="libraries/chain/db_getter.cpp" bodystart="142" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a8e31a33a034747e485b88aa194b048e5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classgraphene_1_1chain_1_1witness__schedule__object" kindref="compound">witness_schedule_object</ref> &amp;</type>
        <definition>const witness_schedule_object &amp; graphene::chain::database::get_witness_schedule_object</definition>
        <argsstring>() const</argsstring>
        <name>get_witness_schedule_object</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="188" column="48" bodyfile="libraries/chain/db_getter.cpp" bodystart="147" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1aa53e34701c0ab1b1c124b9c9e9c50ba1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1time__point__sec" kindref="compound">time_point_sec</ref></type>
        <definition>time_point_sec graphene::chain::database::head_block_time</definition>
        <argsstring>() const</argsstring>
        <name>head_block_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="190" column="27" bodyfile="libraries/chain/db_getter.cpp" bodystart="67" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1aed39a6bd1c0356d6b7016af12509726d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t graphene::chain::database::head_block_num</definition>
        <argsstring>() const</argsstring>
        <name>head_block_num</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="191" column="27" bodyfile="libraries/chain/db_getter.cpp" bodystart="72" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a9d10c99200b0fa6dacc17993e7e22985" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegraphene_1_1protocol_1a32e784a8edceba5506db2c130ed9cb9c" kindref="member">block_id_type</ref></type>
        <definition>block_id_type graphene::chain::database::head_block_id</definition>
        <argsstring>() const</argsstring>
        <name>head_block_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="192" column="27" bodyfile="libraries/chain/db_getter.cpp" bodystart="77" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a021e7b3697719810c2cf76772b55b44e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>witness_id_type</type>
        <definition>witness_id_type graphene::chain::database::head_block_witness</definition>
        <argsstring>() const</argsstring>
        <name>head_block_witness</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="193" column="27"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a5a11d2aa7bfc6fbbc33f67f6a6174b10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgraphene_1_1chain_1_1node__property__object" kindref="compound">node_property_object</ref> &amp;</type>
        <definition>node_property_object &amp; graphene::chain::database::node_properties</definition>
        <argsstring>()</argsstring>
        <name>node_properties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="197" column="31" bodyfile="libraries/chain/db_getter.cpp" bodystart="97" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a6a85674d08a39f70220822f591b7af69" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1protocol_1_1authority" kindref="compound">authority</ref> &gt;</type>
        <definition>vector&lt; authority &gt; graphene::chain::database::get_viable_custom_authorities</definition>
        <argsstring>(account_id_type account, const operation &amp;op, rejected_predicate_map *rejected_authorities=nullptr) const</argsstring>
        <name>get_viable_custom_authorities</name>
        <param>
          <type>account_id_type</type>
          <declname>account</declname>
        </param>
        <param>
          <type>const <ref refid="group__operations_1gad4674c1a800a9c624a13e1243dcbe967" kindref="member">operation</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <param>
          <type><ref refid="namespacegraphene_1_1protocol_1af8005c97798e625be4f50584c35fa824" kindref="member">rejected_predicate_map</ref> *</type>
          <declname>rejected_authorities</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Get a list of custom authorities which can validate the provided operation for the provided account. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account</parametername>
</parameternamelist>
<parameterdescription>
<para>The account whose authority is required </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation requring the specified account&apos;s authority </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rejected_authorities</parametername>
</parameternamelist>
<parameterdescription>
<para>[Optional] A pointer to a map that should be populated with the custom authorities which were valid, but rejected because the operation did not comply with the restrictions </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vector of authorities which can be used to authorize op in place of account </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="207" column="17" bodyfile="libraries/chain/db_getter.cpp" bodystart="102" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1aee3dea95aed2dc56b5e3243e85c72e15" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t graphene::chain::database::last_non_undoable_block_num</definition>
        <argsstring>() const</argsstring>
        <name>last_non_undoable_block_num</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="211" column="19" bodyfile="libraries/chain/db_getter.cpp" bodystart="130" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1af6be0732a2aba64044902116e32a6e62" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classgraphene_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref> *</type>
        <definition>const limit_order_object * graphene::chain::database::find_settled_debt_order</definition>
        <argsstring>(const asset_id_type &amp;a) const</argsstring>
        <name>find_settled_debt_order</name>
        <param>
          <type>const asset_id_type &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find the limit order which is the individual settlement fund of the specified asset <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the asset </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>nullptr if not found, pointer to the limit order if found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="216" column="35" bodyfile="libraries/chain/db_getter.cpp" bodystart="152" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1ae168449902e13f14a2fc8cad695e74bb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classgraphene_1_1chain_1_1call__order__object" kindref="compound">call_order_object</ref> *</type>
        <definition>const call_order_object * graphene::chain::database::find_least_collateralized_short</definition>
        <argsstring>(const asset_bitasset_data_object &amp;bitasset, bool force_by_collateral_index) const</argsstring>
        <name>find_least_collateralized_short</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1asset__bitasset__data__object" kindref="compound">asset_bitasset_data_object</ref> &amp;</type>
          <declname>bitasset</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>force_by_collateral_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find the call order with the least collateral ratio <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bitasset</parametername>
</parameternamelist>
<parameterdescription>
<para>The bitasset object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>force_by_collateral_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to forcefully search via the by_collateral index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>nullptr if not found, pointer to the call order if found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="222" column="34" bodyfile="libraries/chain/db_getter.cpp" bodystart="161" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a8f835513204025989f650833b43fb60c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref></type>
        <definition>asset graphene::chain::database::get_balance</definition>
        <argsstring>(account_id_type owner, asset_id_type asset_id) const</argsstring>
        <name>get_balance</name>
        <param>
          <type>account_id_type</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>asset_id_type</type>
          <declname>asset_id</declname>
        </param>
        <briefdescription>
<para>Retrieve a particular account&apos;s balance in a given asset. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>owner</parametername>
</parameternamelist>
<parameterdescription>
<para>Account whose balance should be retrieved </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>asset_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the asset to get balance in </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>owner&apos;s balance in asset </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="255" column="16" bodyfile="libraries/chain/db_balance.cpp" bodystart="35" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a66a6c5d7a70f514b80fff03620656f7d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref></type>
        <definition>asset graphene::chain::database::get_balance</definition>
        <argsstring>(const account_object &amp;owner, const asset_object &amp;asset_obj) const</argsstring>
        <name>get_balance</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1account__object" kindref="compound">account_object</ref> &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1asset__object" kindref="compound">asset_object</ref> &amp;</type>
          <declname>asset_obj</declname>
        </param>
        <briefdescription>
<para>This is an overloaded method. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="257" column="16" bodyfile="libraries/chain/db_balance.cpp" bodystart="44" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a1a4ebf561fcd858fa830e0582193eddd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::adjust_balance</definition>
        <argsstring>(account_id_type account, asset delta)</argsstring>
        <name>adjust_balance</name>
        <param>
          <type>account_id_type</type>
          <declname>account</declname>
        </param>
        <param>
          <type><ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref></type>
          <declname>delta</declname>
        </param>
        <briefdescription>
<para>Adjust a particular account&apos;s balance in a given asset by a delta. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of account whose balance should be adjusted </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delta</parametername>
</parameternamelist>
<parameterdescription>
<para>Asset ID and amount to adjust balance by </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="264" column="15" bodyfile="libraries/chain/db_balance.cpp" bodystart="54" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a8f8a92f72cc2c03fb8b144419011e746" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::deposit_market_fee_vesting_balance</definition>
        <argsstring>(const account_id_type &amp;account_id, const asset &amp;delta)</argsstring>
        <name>deposit_market_fee_vesting_balance</name>
        <param>
          <type>const account_id_type &amp;</type>
          <declname>account_id</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="266" column="15" bodyfile="libraries/chain/db_balance.cpp" bodystart="127" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1ae62c01ea5a924d30bf3bc7a16af185d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref></type>
        <definition>asset graphene::chain::database::get_market_fee_vesting_balance</definition>
        <argsstring>(const account_id_type &amp;account_id, const asset_id_type &amp;asset_id)</argsstring>
        <name>get_market_fee_vesting_balance</name>
        <param>
          <type>const account_id_type &amp;</type>
          <declname>account_id</declname>
        </param>
        <param>
          <type>const asset_id_type &amp;</type>
          <declname>asset_id</declname>
        </param>
        <briefdescription>
<para>Retrieve a particular account&apos;s market fee vesting balance in a given asset. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Account whose balance should be retrieved </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>asset_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the asset to get balance in </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>owner&apos;s balance in asset </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="273" column="16" bodyfile="libraries/chain/db_balance.cpp" bodystart="114" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a47c4b977b360da1178df3a5ef5d1cb0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1optional" kindref="compound">optional</ref>&lt; vesting_balance_id_type &gt;</type>
        <definition>optional&lt; vesting_balance_id_type &gt; graphene::chain::database::deposit_lazy_vesting</definition>
        <argsstring>(const optional&lt; vesting_balance_id_type &gt; &amp;ovbid, share_type amount, uint32_t req_vesting_seconds, vesting_balance_type balance_type, account_id_type req_owner, bool require_vesting)</argsstring>
        <name>deposit_lazy_vesting</name>
        <param>
          <type>const <ref refid="classfc_1_1optional" kindref="compound">optional</ref>&lt; vesting_balance_id_type &gt; &amp;</type>
          <declname>ovbid</declname>
        </param>
        <param>
          <type><ref refid="namespacegraphene_1_1protocol_1a69b2104c1c11eed2d17bd29b86713347" kindref="member">share_type</ref></type>
          <declname>amount</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>req_vesting_seconds</declname>
        </param>
        <param>
          <type><ref refid="namespacegraphene_1_1chain_1a4efc4a0f6c3e0ba09fc0091955ed8bc7" kindref="member">vesting_balance_type</ref></type>
          <declname>balance_type</declname>
        </param>
        <param>
          <type>account_id_type</type>
          <declname>req_owner</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>require_vesting</declname>
        </param>
        <briefdescription>
<para>Helper to make lazy deposit to CDD VBO. </para>
        </briefdescription>
        <detaileddescription>
<para>If the given optional VBID is not valid(), or it does not have a CDD vesting policy, or the owner / vesting_seconds of the policy does not match the parameter, then credit amount to newly created VBID and return it.</para>
<para>Otherwise, credit amount to ovbid.</para>
<para><simplesect kind="return"><para>ID of newly created VBO, but only if VBO was created. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="288" column="19" bodyfile="libraries/chain/db_balance.cpp" bodystart="156" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1ada0ca07bcd351e7ee1f95719b8543579" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::deposit_cashback</definition>
        <argsstring>(const account_object &amp;acct, share_type amount, bool require_vesting=true)</argsstring>
        <name>deposit_cashback</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1account__object" kindref="compound">account_object</ref> &amp;</type>
          <declname>acct</declname>
        </param>
        <param>
          <type><ref refid="namespacegraphene_1_1protocol_1a69b2104c1c11eed2d17bd29b86713347" kindref="member">share_type</ref></type>
          <declname>amount</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>require_vesting</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>helper to handle cashback rewards </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="297" column="15" bodyfile="libraries/chain/db_balance.cpp" bodystart="202" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a8eba388c99ae3a7c13bb16cbfeb6be10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::deposit_witness_pay</definition>
        <argsstring>(const witness_object &amp;wit, share_type amount)</argsstring>
        <name>deposit_witness_pay</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1witness__object" kindref="compound">witness_object</ref> &amp;</type>
          <declname>wit</declname>
        </param>
        <param>
          <type><ref refid="namespacegraphene_1_1protocol_1a69b2104c1c11eed2d17bd29b86713347" kindref="member">share_type</ref></type>
          <declname>amount</declname>
        </param>
        <briefdescription>
<para>helper to handle witness pay </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="299" column="15" bodyfile="libraries/chain/db_balance.cpp" bodystart="249" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a5ebd612bd6895e9acf40c71ac69baed8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string graphene::chain::database::to_pretty_string</definition>
        <argsstring>(const asset &amp;a) const</argsstring>
        <name>to_pretty_string</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="301" column="17" bodyfile="libraries/chain/db_balance.cpp" bodystart="49" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1ae82d4e2f0f40a9b7a5b13eb23315d637" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::debug_dump</definition>
        <argsstring>()</argsstring>
        <name>debug_dump</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method dumps the state of the blockchain in a semi-human readable form for the purpose of tracking down funds and mismatches in currency allocation </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="305" column="15" bodyfile="libraries/chain/db_debug.cpp" bodystart="41" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a8a805900b1a5c1ee4672b8f2732fda0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::apply_debug_updates</definition>
        <argsstring>()</argsstring>
        <name>apply_debug_updates</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="306" column="15" bodyfile="libraries/chain/db_debug.cpp" bodystart="187" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a69528d69a226d6a75670f5e31187db3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::debug_update</definition>
        <argsstring>(const fc::variant_object &amp;update)</argsstring>
        <name>debug_update</name>
        <param>
          <type>const <ref refid="classfc_1_1variant__object" kindref="compound">fc::variant_object</ref> &amp;</type>
          <declname>update</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="307" column="15" bodyfile="libraries/chain/db_debug.cpp" bodystart="197" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1ac22bc63bd066abe065aa1044aa1b47ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::apply_force_settlement</definition>
        <argsstring>(const force_settlement_object &amp;new_settlement, const asset_bitasset_data_object &amp;bitasset, const asset_object &amp;asset_obj)</argsstring>
        <name>apply_force_settlement</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1force__settlement__object" kindref="compound">force_settlement_object</ref> &amp;</type>
          <declname>new_settlement</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1asset__bitasset__data__object" kindref="compound">asset_bitasset_data_object</ref> &amp;</type>
          <declname>bitasset</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1asset__object" kindref="compound">asset_object</ref> &amp;</type>
          <declname>asset_obj</declname>
        </param>
        <briefdescription>
<para>Process a new force-settlement request. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_settlement</parametername>
</parameternamelist>
<parameterdescription>
<para>The new force-settlement request </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bitasset</parametername>
</parameternamelist>
<parameterdescription>
<para>The bitasset data object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>asset_obj</parametername>
</parameternamelist>
<parameterdescription>
<para>The asset object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Since the core-2481 hard fork, this function is called after a new force-settlement object is created to check if there are margin calls to be matched instantly. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="395" column="15" bodyfile="libraries/chain/db_market.cpp" bodystart="943" bodyend="1021"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1adfb5ff7580e65c689ba92bd58b614bb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::database::check_call_orders</definition>
        <argsstring>(const asset_object &amp;mia, bool enable_black_swan=true, bool for_new_limit_order=false, const asset_bitasset_data_object *bitasset_ptr=nullptr, bool mute_exceptions=false, bool skip_matching_settle_orders=false)</argsstring>
        <name>check_call_orders</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1asset__object" kindref="compound">asset_object</ref> &amp;</type>
          <declname>mia</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable_black_swan</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>for_new_limit_order</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1asset__bitasset__data__object" kindref="compound">asset_bitasset_data_object</ref> *</type>
          <declname>bitasset_ptr</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>mute_exceptions</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>skip_matching_settle_orders</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Starting with the least collateralized orders, fill them if their call price is above the max(lowest bid,call_limit).</para>
<para>This method will return true if it filled a short or limit</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mia</parametername>
</parameternamelist>
<parameterdescription>
<para>- the market issued asset that should be called. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable_black_swan</parametername>
</parameternamelist>
<parameterdescription>
<para>- when adjusting collateral, triggering a black swan is invalid and will throw if enable_black_swan is not set to true. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>for_new_limit_order</parametername>
</parameternamelist>
<parameterdescription>
<para>- true if this function is called when matching call orders with a new limit order. (Only relevent before hardfork 625. <ref refid="classgraphene_1_1chain_1_1database_1ab822a2dedcbb25a24eb9529f6c5aaaaa" kindref="member">apply_order_before_hardfork_625()</ref> is only function that calls this with for_new_limit_order true.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bitasset_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>- an optional pointer to the bitasset_data object of the asset </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mute_exceptions</parametername>
</parameternamelist>
<parameterdescription>
<para>- whether to mute exceptions in a special case </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>skip_matching_settle_orders</parametername>
</parameternamelist>
<parameterdescription>
<para>- whether to skip matching call orders with force settlements</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if a margin call was executed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="399" column="15" bodyfile="libraries/chain/db_market.cpp" bodystart="2079" bodyend="2432"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1ad243587c39c4e0aa08e32aa338feac79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::check_settled_debt_order</definition>
        <argsstring>(const asset_bitasset_data_object &amp;bitasset)</argsstring>
        <name>check_settled_debt_order</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1asset__bitasset__data__object" kindref="compound">asset_bitasset_data_object</ref> &amp;</type>
          <declname>bitasset</declname>
        </param>
        <briefdescription>
<para>Match the settled debt order of the specified asset as taker with other orders on the opposite side of the order book. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bitasset</parametername>
</parameternamelist>
<parameterdescription>
<para>The bitasset data object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Since the core-2591 hard fork, this function is called after processed all call orders in <ref refid="classgraphene_1_1chain_1_1database_1adfb5ff7580e65c689ba92bd58b614bb5" kindref="member">check_call_orders()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="413" column="15" bodyfile="libraries/chain/db_market.cpp" bodystart="2504" bodyend="2543"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a98795dba60947210dd9a0fbb770709a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::database::is_known_block</definition>
        <argsstring>(const block_id_type &amp;id) const</argsstring>
        <name>is_known_block</name>
        <param>
          <type>const <ref refid="namespacegraphene_1_1protocol_1a32e784a8edceba5506db2c130ed9cb9c" kindref="member">block_id_type</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the block is in our fork DB or saved to disk as part of the official chain, otherwise return false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="562" column="37" bodyfile="libraries/chain/db_block.cpp" bodystart="48" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a0600c987cf89e038128684da9b8c2829" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::database::is_known_transaction</definition>
        <argsstring>(const transaction_id_type &amp;id) const</argsstring>
        <name>is_known_transaction</name>
        <param>
          <type>const <ref refid="namespacegraphene_1_1protocol_1a040f9f71bff896e89dc9ee3ff92bb076" kindref="member">transaction_id_type</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Only return true <emphasis>if</emphasis> the transaction has not expired or been invalidated. If this method is called with a VERY old transaction we will return false, they should query things by blocks if they are that old. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="563" column="37" bodyfile="libraries/chain/db_block.cpp" bodystart="57" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a4294f12b2299bab7684555c986abac76" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegraphene_1_1protocol_1a32e784a8edceba5506db2c130ed9cb9c" kindref="member">block_id_type</ref></type>
        <definition>block_id_type graphene::chain::database::get_block_id_for_num</definition>
        <argsstring>(uint32_t block_num) const</argsstring>
        <name>get_block_id_for_num</name>
        <param>
          <type>uint32_t</type>
          <declname>block_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="564" column="37" bodyfile="libraries/chain/db_block.cpp" bodystart="63" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1ae517d3ed2a2362a70d120962536e16a0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1optional" kindref="compound">optional</ref>&lt; <ref refid="classgraphene_1_1protocol_1_1signed__block" kindref="compound">signed_block</ref> &gt;</type>
        <definition>optional&lt; signed_block &gt; graphene::chain::database::fetch_block_by_id</definition>
        <argsstring>(const block_id_type &amp;id) const</argsstring>
        <name>fetch_block_by_id</name>
        <param>
          <type>const <ref refid="namespacegraphene_1_1protocol_1a32e784a8edceba5506db2c130ed9cb9c" kindref="member">block_id_type</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="565" column="23" bodyfile="libraries/chain/db_block.cpp" bodystart="68" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a380a803937941dbbf86321373279a218" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1optional" kindref="compound">optional</ref>&lt; <ref refid="classgraphene_1_1protocol_1_1signed__block" kindref="compound">signed_block</ref> &gt;</type>
        <definition>optional&lt; signed_block &gt; graphene::chain::database::fetch_block_by_number</definition>
        <argsstring>(uint32_t num) const</argsstring>
        <name>fetch_block_by_number</name>
        <param>
          <type>uint32_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="566" column="23" bodyfile="libraries/chain/db_block.cpp" bodystart="76" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a19352bf8822d30ed4c71dd65fd62f0ca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classgraphene_1_1protocol_1_1signed__transaction" kindref="compound">signed_transaction</ref> &amp;</type>
        <definition>const signed_transaction &amp; graphene::chain::database::get_recent_transaction</definition>
        <argsstring>(const transaction_id_type &amp;trx_id) const</argsstring>
        <name>get_recent_transaction</name>
        <param>
          <type>const <ref refid="namespacegraphene_1_1protocol_1a040f9f71bff896e89dc9ee3ff92bb076" kindref="member">transaction_id_type</ref> &amp;</type>
          <declname>trx_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="567" column="36" bodyfile="libraries/chain/db_block.cpp" bodystart="85" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1aba653e023b116d6a004ebf27dd184328" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespacegraphene_1_1protocol_1a32e784a8edceba5506db2c130ed9cb9c" kindref="member">block_id_type</ref> &gt;</type>
        <definition>std::vector&lt; block_id_type &gt; graphene::chain::database::get_block_ids_on_fork</definition>
        <argsstring>(block_id_type head_of_fork) const</argsstring>
        <name>get_block_ids_on_fork</name>
        <param>
          <type><ref refid="namespacegraphene_1_1protocol_1a32e784a8edceba5506db2c130ed9cb9c" kindref="member">block_id_type</ref></type>
          <declname>head_of_fork</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="568" column="22" bodyfile="libraries/chain/db_block.cpp" bodystart="93" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a0e8c92ac95d4ac2569f6b079193691dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::add_checkpoints</definition>
        <argsstring>(const flat_map&lt; uint32_t, block_id_type &gt; &amp;checkpts)</argsstring>
        <name>add_checkpoints</name>
        <param>
          <type>const flat_map&lt; uint32_t, <ref refid="namespacegraphene_1_1protocol_1a32e784a8edceba5506db2c130ed9cb9c" kindref="member">block_id_type</ref> &gt; &amp;</type>
          <declname>checkpts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="570" column="37" bodyfile="libraries/chain/db_block.cpp" bodystart="858" bodyend="862"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1ad467f7f5b2d7cb5a142e1e80186589a6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const flat_map&lt; uint32_t, <ref refid="namespacegraphene_1_1protocol_1a32e784a8edceba5506db2c130ed9cb9c" kindref="member">block_id_type</ref> &gt;</type>
        <definition>const flat_map&lt;uint32_t,block_id_type&gt; graphene::chain::database::get_checkpoints</definition>
        <argsstring>() const</argsstring>
        <name>get_checkpoints</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="571" column="25" bodyfile="libraries/chain/include/graphene/chain/database.hpp" bodystart="571" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a293e9896a2e9c9b6d62fb5e2c19d11e8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::database::before_last_checkpoint</definition>
        <argsstring>() const</argsstring>
        <name>before_last_checkpoint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="572" column="15" bodyfile="libraries/chain/db_block.cpp" bodystart="864" bodyend="867"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1aa62eb8144a717f62da5404e8bb482414" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::database::push_block</definition>
        <argsstring>(const signed_block &amp;b, uint32_t skip=skip_nothing)</argsstring>
        <name>push_block</name>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1signed__block" kindref="compound">signed_block</ref> &amp;</type>
          <declname>b</declname>
          <defname>new_block</defname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>skip</declname>
          <defval><ref refid="classgraphene_1_1chain_1_1database_1a6de6add85d012876641f2a50ad707726afbe701c12ae94e417ef9424306aabbdc" kindref="member">skip_nothing</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Push block &quot;may fail&quot; in which case every partial change is unwound. After push block is successful the block is appended to the chain database on disk.</para>
<para><simplesect kind="return"><para>true if we switched forks as a result of this push. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="574" column="15" bodyfile="libraries/chain/db_block.cpp" bodystart="118" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1af9ec01b12cd9c42a2da204c4a19d63aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1processed__transaction" kindref="compound">processed_transaction</ref></type>
        <definition>processed_transaction graphene::chain::database::push_transaction</definition>
        <argsstring>(const precomputable_transaction &amp;trx, uint32_t skip=skip_nothing)</argsstring>
        <name>push_transaction</name>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1precomputable__transaction" kindref="compound">precomputable_transaction</ref> &amp;</type>
          <declname>trx</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>skip</declname>
          <defval><ref refid="classgraphene_1_1chain_1_1database_1a6de6add85d012876641f2a50ad707726afbe701c12ae94e417ef9424306aabbdc" kindref="member">skip_nothing</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Attempts to push the transaction into the pending queue</para>
<para>When called to push a locally generated transaction, set the skip_block_size_check bit on the skip argument. This will allow the transaction to be pushed even if it causes the pending block size to exceed the maximum block size. Although the transaction will probably not propagate further now, as the peers are likely to have their pending queues full as well, it will be kept in the queue to be propagated later when a new block flushes out the pending queues. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="575" column="32" bodyfile="libraries/chain/db_block.cpp" bodystart="270" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1ad8ca84ffcf797732a8227b27b335c66c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1processed__transaction" kindref="compound">processed_transaction</ref></type>
        <definition>processed_transaction graphene::chain::database::_push_transaction</definition>
        <argsstring>(const precomputable_transaction &amp;trx)</argsstring>
        <name>_push_transaction</name>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1precomputable__transaction" kindref="compound">precomputable_transaction</ref> &amp;</type>
          <declname>trx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="580" column="32" bodyfile="libraries/chain/db_block.cpp" bodystart="282" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1ab5abeddad5156d1bcad2e97256d54fa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1processed__transaction" kindref="compound">processed_transaction</ref></type>
        <definition>processed_transaction graphene::chain::database::push_proposal</definition>
        <argsstring>(const proposal_object &amp;proposal)</argsstring>
        <name>push_proposal</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1proposal__object" kindref="compound">proposal_object</ref> &amp;</type>
          <declname>proposal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classfc_1_1exception" kindref="compound">fc::exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the proposed transaction fails to apply. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="582" column="32" bodyfile="libraries/chain/db_block.cpp" bodystart="336" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1ae8f11489883556cf872c893bc90fae53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgraphene_1_1protocol_1_1signed__block" kindref="compound">signed_block</ref></type>
        <definition>signed_block graphene::chain::database::generate_block</definition>
        <argsstring>(const fc::time_point_sec when, witness_id_type witness_id, const fc::ecc::private_key &amp;block_signing_private_key, uint32_t skip)</argsstring>
        <name>generate_block</name>
        <param>
          <type>const <ref refid="classfc_1_1time__point__sec" kindref="compound">fc::time_point_sec</ref></type>
          <declname>when</declname>
        </param>
        <param>
          <type>witness_id_type</type>
          <declname>witness_id</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1ecc_1_1private__key" kindref="compound">fc::ecc::private_key</ref> &amp;</type>
          <declname>block_signing_private_key</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>skip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="584" column="23" bodyfile="libraries/chain/db_block.cpp" bodystart="382" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a03253124ee8714af752c1d68b7cc206c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::pop_block</definition>
        <argsstring>()</argsstring>
        <name>pop_block</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes the most recent block from the database and undoes any changes it made. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="598" column="15" bodyfile="libraries/chain/db_block.cpp" bodystart="523" bodyend="539"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1af1c4e067598a0318e728b1d28df7a598" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::clear_pending</definition>
        <argsstring>()</argsstring>
        <name>clear_pending</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="599" column="15" bodyfile="libraries/chain/db_block.cpp" bodystart="541" bodyend="546"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1aa519d48f98a8c695717ae95ac3f46d5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t graphene::chain::database::push_applied_operation</definition>
        <argsstring>(const operation &amp;op, bool is_virtual=true)</argsstring>
        <name>push_applied_operation</name>
        <param>
          <type>const <ref refid="group__operations_1gad4674c1a800a9c624a13e1243dcbe967" kindref="member">operation</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_virtual</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method is used to track appied operations during the evaluation of a block, these operations should include any operation actually included in a transaction as well as any implied/virtual operations that resulted, such as filling an order. The applied operations is cleared after applying each block and calling the block observers which may want to index these operations. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation to push </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_virtual</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the operation is a virtual operation</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the op_id which can be used to set the result after it has finished being applied. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="612" column="20" bodyfile="libraries/chain/db_block.cpp" bodystart="548" bodyend="554"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a1d85784b1e8dd37a7cecce893e248061" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::set_applied_operation_result</definition>
        <argsstring>(uint32_t op_id, const operation_result &amp;r)</argsstring>
        <name>set_applied_operation_result</name>
        <param>
          <type>uint32_t</type>
          <declname>op_id</declname>
        </param>
        <param>
          <type>const <ref refid="group__operations_1gaa71296d574534eaf5315415023d64eeb" kindref="member">operation_result</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="613" column="20" bodyfile="libraries/chain/db_block.cpp" bodystart="555" bodyend="564"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a87c74f1ef2f8840261c3d9789151b305" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const vector&lt; <ref refid="classfc_1_1optional" kindref="compound">optional</ref>&lt; <ref refid="classgraphene_1_1chain_1_1operation__history__object" kindref="compound">operation_history_object</ref> &gt; &gt; &amp;</type>
        <definition>const vector&lt; optional&lt; operation_history_object &gt; &gt; &amp; graphene::chain::database::get_applied_operations</definition>
        <argsstring>() const</argsstring>
        <name>get_applied_operations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="614" column="23" bodyfile="libraries/chain/db_block.cpp" bodystart="566" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a34c54fd8e47f00cdfe23de1eb8a55bb8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1future" kindref="compound">fc::future</ref>&lt; void &gt;</type>
        <definition>fc::future&lt; void &gt; graphene::chain::database::precompute_parallel</definition>
        <argsstring>(const signed_block &amp;block, const uint32_t skip=skip_nothing) const</argsstring>
        <name>precompute_parallel</name>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1signed__block" kindref="compound">signed_block</ref> &amp;</type>
          <declname>block</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>skip</declname>
          <defval><ref refid="classgraphene_1_1chain_1_1database_1a6de6add85d012876641f2a50ad707726afbe701c12ae94e417ef9424306aabbdc" kindref="member">skip_nothing</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Precomputes digests, signatures and operation validations depending on skip flags. &quot;Expensive&quot; computations may be done in a parallel thread.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>the block to preprocess </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>skip</parametername>
</parameternamelist>
<parameterdescription>
<para>indicates which computations can be skipped </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a future that will resolve to the input block with precomputations applied </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="675" column="21" bodyfile="libraries/chain/db_block.cpp" bodystart="888" bodyend="924"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1ad76db729d92b453958e49c4ca7b9e382" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1future" kindref="compound">fc::future</ref>&lt; void &gt;</type>
        <definition>fc::future&lt; void &gt; graphene::chain::database::precompute_parallel</definition>
        <argsstring>(const precomputable_transaction &amp;trx) const</argsstring>
        <name>precompute_parallel</name>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1precomputable__transaction" kindref="compound">precomputable_transaction</ref> &amp;</type>
          <declname>trx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Precomputes digests, signatures and operation validations. &quot;Expensive&quot; computations may be done in a parallel thread.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trx</parametername>
</parameternamelist>
<parameterdescription>
<para>the transaction to preprocess </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a future that will resolve to the input transaction with precomputations applied </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="684" column="21" bodyfile="libraries/chain/db_block.cpp" bodystart="926" bodyend="931"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1af9556e43f26824c2036c8916d0bc460c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::apply_block</definition>
        <argsstring>(const signed_block &amp;next_block, uint32_t skip=skip_nothing)</argsstring>
        <name>apply_block</name>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1signed__block" kindref="compound">signed_block</ref> &amp;</type>
          <declname>next_block</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>skip</declname>
          <defval><ref refid="classgraphene_1_1chain_1_1database_1a6de6add85d012876641f2a50ad707726afbe701c12ae94e417ef9424306aabbdc" kindref="member">skip_nothing</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="703" column="32" bodyfile="libraries/chain/db_block.cpp" bodystart="573" bodyend="591"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1aaadc49139eb020b3b1e91b60b128e49f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1processed__transaction" kindref="compound">processed_transaction</ref></type>
        <definition>processed_transaction graphene::chain::database::apply_transaction</definition>
        <argsstring>(const signed_transaction &amp;trx, uint32_t skip=skip_nothing)</argsstring>
        <name>apply_transaction</name>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1signed__transaction" kindref="compound">signed_transaction</ref> &amp;</type>
          <declname>trx</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>skip</declname>
          <defval><ref refid="classgraphene_1_1chain_1_1database_1a6de6add85d012876641f2a50ad707726afbe701c12ae94e417ef9424306aabbdc" kindref="member">skip_nothing</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>if a <computeroutput>processed_transaction</computeroutput> is passed in, it is cast into <computeroutput>signed_transaction</computeroutput> here. It also means that the <computeroutput>operation_results</computeroutput> field is ignored by consensus, although it is a part of block data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="704" column="32" bodyfile="libraries/chain/db_block.cpp" bodystart="688" bodyend="696"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1aa895b116b1dd6495a691385b895fb277" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__operations_1gaa71296d574534eaf5315415023d64eeb" kindref="member">operation_result</ref></type>
        <definition>operation_result graphene::chain::database::apply_operation</definition>
        <argsstring>(transaction_evaluation_state &amp;eval_state, const operation &amp;op, bool is_virtual=true)</argsstring>
        <name>apply_operation</name>
        <param>
          <type><ref refid="classgraphene_1_1chain_1_1transaction__evaluation__state" kindref="compound">transaction_evaluation_state</ref> &amp;</type>
          <declname>eval_state</declname>
        </param>
        <param>
          <type>const <ref refid="group__operations_1gad4674c1a800a9c624a13e1243dcbe967" kindref="member">operation</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_virtual</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="705" column="32" bodyfile="libraries/chain/db_block.cpp" bodystart="784" bodyend="797"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1abbc9d3f6064163078b9a21c2c580f24b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::enable_standby_votes_tracking</definition>
        <argsstring>(bool enable)</argsstring>
        <name>enable_standby_votes_tracking</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Enable or disable tracking of votes of standby witnesses and committee members. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="846" column="22" bodyfile="libraries/chain/include/graphene/chain/database.hpp" bodystart="846" bodyend="846"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a163717adf25c4e105fe25d26531cbe51" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t graphene::chain::database::update_witness_missed_blocks</definition>
        <argsstring>(const signed_block &amp;b)</argsstring>
        <name>update_witness_missed_blocks</name>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1signed__block" kindref="compound">signed_block</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="172" column="19" bodyfile="libraries/chain/db_witness_schedule.cpp" bodystart="82" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1aa10c1d73609828c1594e4054e4399b9a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::update_witness_schedule</definition>
        <argsstring>()</argsstring>
        <name>update_witness_schedule</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>High performance random generator <ulink url="http://xorshift.di.unimi.it/">http://xorshift.di.unimi.it/</ulink></para>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="174" column="15" bodyfile="libraries/chain/db_witness_schedule.cpp" bodystart="104" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a61d8f547d66ec2e01ff2219e326c396f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref></type>
        <definition>asset graphene::chain::database::match</definition>
        <argsstring>(const force_settlement_object &amp;settle, const call_order_object &amp;call, const price &amp;match_price, const asset_bitasset_data_object &amp;bitasset, const asset &amp;max_settlement, const price &amp;fill_price, bool is_margin_call=false)</argsstring>
        <name>match</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1force__settlement__object" kindref="compound">force_settlement_object</ref> &amp;</type>
          <declname>settle</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1call__order__object" kindref="compound">call_order_object</ref> &amp;</type>
          <declname>call</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>match_price</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1asset__bitasset__data__object" kindref="compound">asset_bitasset_data_object</ref> &amp;</type>
          <declname>bitasset</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>max_settlement</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>fill_price</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_margin_call</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Matches the two orders, the first parameter is taker, the second is maker. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>settle</parametername>
</parameternamelist>
<parameterdescription>
<para>the force-settlement order </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>call</parametername>
</parameternamelist>
<parameterdescription>
<para>the call order </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>match_price</parametername>
</parameternamelist>
<parameterdescription>
<para>the price to calculate how much the call order pays </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bitasset</parametername>
</parameternamelist>
<parameterdescription>
<para>the bitasset object corresponding to debt asset of the call order </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_settlement</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum debt amount to be filled during this match </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fill_price</parametername>
</parameternamelist>
<parameterdescription>
<para>the price to be recorded in market history plugin. It is the price to calculate how much the settle order receives when the call order is being margin called </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_margin_call</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the call order is being margin called </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the amount of asset settled </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="473" column="16" bodyfile="libraries/chain/db_market.cpp" bodystart="1430" bodyend="1439"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a74b0076783ce1240cdb36cccfacad4c8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref></type>
        <definition>asset graphene::chain::database::match</definition>
        <argsstring>(const call_order_object &amp;call, const force_settlement_object &amp;settle, const price &amp;match_price, const asset_bitasset_data_object &amp;bitasset, const asset &amp;max_settlement, const price &amp;fill_price)</argsstring>
        <name>match</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1call__order__object" kindref="compound">call_order_object</ref> &amp;</type>
          <declname>call</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1force__settlement__object" kindref="compound">force_settlement_object</ref> &amp;</type>
          <declname>settle</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>match_price</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1asset__bitasset__data__object" kindref="compound">asset_bitasset_data_object</ref> &amp;</type>
          <declname>bitasset</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>max_settlement</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>fill_price</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Matches the two orders, the first parameter is taker, the second is maker. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>call</parametername>
</parameternamelist>
<parameterdescription>
<para>the call order being margin called </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>settle</parametername>
</parameternamelist>
<parameterdescription>
<para>the force-settlement order </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>match_price</parametername>
</parameternamelist>
<parameterdescription>
<para>the price to calculate how much the call order pays </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bitasset</parametername>
</parameternamelist>
<parameterdescription>
<para>the bitasset object corresponding to debt asset of the call order </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_settlement</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum debt amount to be filled during this match </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fill_price</parametername>
</parameternamelist>
<parameterdescription>
<para>the price to be recorded in market history plugin. It is the price to calculate how much the settle order receives. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the amount of asset settled </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="490" column="16" bodyfile="libraries/chain/db_market.cpp" bodystart="1441" bodyend="1449"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a88144a9795e65d5836711f69a1848bdb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::database::fill_limit_order</definition>
        <argsstring>(const limit_order_object &amp;order, const asset &amp;pays, const asset &amp;receives, bool cull_if_small, const price &amp;fill_price, const bool is_maker)</argsstring>
        <name>fill_limit_order</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref> &amp;</type>
          <declname>order</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>pays</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>receives</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cull_if_small</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>fill_price</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>is_maker</declname>
        </param>
        <briefdescription>
<para>fills limit order </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para>the order </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pays</parametername>
</parameternamelist>
<parameterdescription>
<para>what the account is paying </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>receives</parametername>
</parameternamelist>
<parameterdescription>
<para>what the account is receiving </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cull_if_small</parametername>
</parameternamelist>
<parameterdescription>
<para>take care of dust </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fill_price</parametername>
</parameternamelist>
<parameterdescription>
<para>the transaction price </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_maker</parametername>
</parameternamelist>
<parameterdescription>
<para>TRUE if this order is maker, FALSE if taker </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the order was completely filled and thus freed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="507" column="15" bodyfile="libraries/chain/db_market.cpp" bodystart="1784" bodyend="1903"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a7dc04c3c62d4b17813ba64379d14f82b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::database::fill_call_order</definition>
        <argsstring>(const call_order_object &amp;order, const asset &amp;pays, const asset &amp;receives, const price &amp;fill_price, const bool is_maker, const asset &amp;margin_fee, bool reduce_current_supply=true)</argsstring>
        <name>fill_call_order</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1call__order__object" kindref="compound">call_order_object</ref> &amp;</type>
          <declname>order</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>pays</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>receives</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>fill_price</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>is_maker</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>margin_fee</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reduce_current_supply</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="521" column="15" bodyfile="libraries/chain/db_market.cpp" bodystart="1915" bodyend="1986"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1aa3cc4d526b5332fa898c114a90baff22" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::database::fill_call_order</definition>
        <argsstring>(const call_order_object &amp;order, const asset &amp;pays, const asset &amp;receives, const price &amp;fill_price, const bool is_maker, bool reduce_current_supply=true)</argsstring>
        <name>fill_call_order</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1call__order__object" kindref="compound">call_order_object</ref> &amp;</type>
          <declname>order</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>pays</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>receives</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>fill_price</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>is_maker</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reduce_current_supply</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Overload provides compatible default value for margin_fee: (margin_fee.asset_id == pays.asset_id) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="526" column="15" bodyfile="libraries/chain/include/graphene/chain/database.hpp" bodystart="526" bodyend="532"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1ad99007e73411a8a7dc248910ada74d30" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::database::fill_settle_order</definition>
        <argsstring>(const force_settlement_object &amp;settle, const asset &amp;pays, const asset &amp;receives, const price &amp;fill_price, bool is_maker, bool pay_force_settle_fee=true)</argsstring>
        <name>fill_settle_order</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1force__settlement__object" kindref="compound">force_settlement_object</ref> &amp;</type>
          <declname>settle</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>pays</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>receives</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>fill_price</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_maker</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>pay_force_settle_fee</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="534" column="15" bodyfile="libraries/chain/db_market.cpp" bodystart="2009" bodyend="2059"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1aae68153f9fb7d63e8c3d2d43875acbf9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::database::_push_block</definition>
        <argsstring>(const signed_block &amp;b)</argsstring>
        <name>_push_block</name>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1signed__block" kindref="compound">signed_block</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="577" column="15" bodyfile="libraries/chain/db_block.cpp" bodystart="133" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a581a8d9539e3d2337d5665932048156c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgraphene_1_1protocol_1_1signed__block" kindref="compound">signed_block</ref></type>
        <definition>signed_block graphene::chain::database::_generate_block</definition>
        <argsstring>(const fc::time_point_sec when, witness_id_type witness_id, const fc::ecc::private_key &amp;block_signing_private_key)</argsstring>
        <name>_generate_block</name>
        <param>
          <type>const <ref refid="classfc_1_1time__point__sec" kindref="compound">fc::time_point_sec</ref></type>
          <declname>when</declname>
        </param>
        <param>
          <type>witness_id_type</type>
          <declname>witness_id</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1ecc_1_1private__key" kindref="compound">fc::ecc::private_key</ref> &amp;</type>
          <declname>block_signing_private_key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="591" column="23" bodyfile="libraries/chain/db_block.cpp" bodystart="397" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1ac8293173a68b4e958c27ae36d88dabb7" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Trx</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void graphene::chain::database::_precompute_parallel</definition>
        <argsstring>(const Trx *trx, const size_t count, const uint32_t skip) const</argsstring>
        <name>_precompute_parallel</name>
        <param>
          <type>const Trx *</type>
          <declname>trx</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>skip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="687" column="15" bodyfile="libraries/chain/db_block.cpp" bodystart="874" bodyend="886"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1aa90507ca970108d15c464c3938bb98df" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Index</type>
          </param>
        </templateparamlist>
        <type>vector&lt; std::reference_wrapper&lt; const typename Index::object_type &gt; &gt;</type>
        <definition>vector&lt; std::reference_wrapper&lt; const typename Index::object_type &gt; &gt; graphene::chain::database::sort_votable_objects</definition>
        <argsstring>(size_t count) const</argsstring>
        <name>sort_votable_objects</name>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="699" column="17" bodyfile="libraries/chain/db_maint.cpp" bodystart="54" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a55eb3701b763add49f4dc56f848b6dd3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::_apply_block</definition>
        <argsstring>(const signed_block &amp;next_block)</argsstring>
        <name>_apply_block</name>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1signed__block" kindref="compound">signed_block</ref> &amp;</type>
          <declname>next_block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="709" column="32" bodyfile="libraries/chain/db_block.cpp" bodystart="593" bodyend="681"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1a575e603b3c68ea8fb91d16b92a8c543a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1processed__transaction" kindref="compound">processed_transaction</ref></type>
        <definition>processed_transaction graphene::chain::database::_apply_transaction</definition>
        <argsstring>(const signed_transaction &amp;trx)</argsstring>
        <name>_apply_transaction</name>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1signed__transaction" kindref="compound">signed_transaction</ref> &amp;</type>
          <declname>trx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="710" column="32" bodyfile="libraries/chain/db_block.cpp" bodystart="698" bodyend="782"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1aeaf4c3ad75ac598c46356488accf0111" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__operations_1gaa71296d574534eaf5315415023d64eeb" kindref="member">operation_result</ref></type>
        <definition>operation_result graphene::chain::database::try_push_virtual_operation</definition>
        <argsstring>(transaction_evaluation_state &amp;eval_state, const operation &amp;op)</argsstring>
        <name>try_push_virtual_operation</name>
        <param>
          <type><ref refid="classgraphene_1_1chain_1_1transaction__evaluation__state" kindref="compound">transaction_evaluation_state</ref> &amp;</type>
          <declname>eval_state</declname>
        </param>
        <param>
          <type>const <ref refid="group__operations_1gad4674c1a800a9c624a13e1243dcbe967" kindref="member">operation</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Validate, evaluate and apply a virtual operation using a temporary undo_database session, if fail, rewind any changes made </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="714" column="32" bodyfile="libraries/chain/db_block.cpp" bodystart="799" bodyend="825"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classgraphene_1_1chain_1_1database_1aea9d1ca437641003a9426718ebe05481" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::database::pop_undo</definition>
        <argsstring>()</argsstring>
        <name>pop_undo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/database.hpp" line="692" column="15" bodyfile="libraries/chain/include/graphene/chain/database.hpp" bodystart="692" bodyend="692"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>tracks the blockchain state in an extensible manner </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>graphene::db::object_database</label>
        <link refid="classgraphene_1_1db_1_1object__database"/>
      </node>
      <node id="1">
        <label>graphene::chain::database</label>
        <link refid="classgraphene_1_1chain_1_1database"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>fc::time_point_sec</label>
        <link refid="classfc_1_1time__point__sec"/>
      </node>
      <node id="2">
        <label>graphene::db::object_database</label>
        <link refid="classgraphene_1_1db_1_1object__database"/>
        <childnode refid="3" relation="usage">
          <edgelabel>_undo_db</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>graphene::chain::database</label>
        <link refid="classgraphene_1_1chain_1_1database"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>_current_block_time</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>graphene::db::undo_database</label>
        <link refid="classgraphene_1_1db_1_1undo__database"/>
      </node>
    </collaborationgraph>
    <location file="libraries/chain/include/graphene/chain/database.hpp" line="71" column="1" bodyfile="libraries/chain/include/graphene/chain/database.hpp" bodystart="70" bodyend="847"/>
    <listofallmembers>
      <member refid="classgraphene_1_1chain_1_1database_1a0cdbc9e636ec8cba85507264b3477c79" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>_applied_ops</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a55eb3701b763add49f4dc56f848b6dd3" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>_apply_block</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a575e603b3c68ea8fb91d16b92a8c543a" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>_apply_transaction</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1aca7a7972f572bb397bb9cd666f476879" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>_block_id_to_block</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a12b1cbf647a44777d323f313d5dd7c0a" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>_cancel_bids_and_revive_mpa</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a61078f4c87b4fcb49d5a3e15d235fe0c" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>_checkpoints</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1aa26ab6ee28c4157489e89160659e2ef8" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>_committee_count_histogram_buffer</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a675728076c3aec61222edcae59af7337" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>_current_block_num</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1aa2b2f2fe588d6d533a656d2287354bab" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>_current_block_time</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a1e9b993a696f1fc3be6b913686d8b35b" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>_current_op_in_trx</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a84008aa5f9c5d989b2e5e1bb9b91a995" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>_current_trx_in_block</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1aa39fa024e699c96b04b3c54d0d56972f" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>_current_virtual_op</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1ac1eab6ae52717cef08746bd3b2c9d464" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>_fork_db</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a581a8d9539e3d2337d5665932048156c" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>_generate_block</name></member>
      <member refid="classgraphene_1_1db_1_1object__database_1ada13e68758cbba506f4eb4e6f803146d" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>_index_size</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a888ab47c857e5047b0e2dc40d09bca7f" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>_issue_453_affected_assets</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a6c570ecbccb63d37c08c060f3dfaed19" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>_node_property_object</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a99bb66b056f57f04f50dc88b480babff" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>_opened</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1ac9b667d4d617a607787c9a3c1f42ac30" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>_operation_evaluators</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a4c733864b6589d5c7ec61f2ee584e4ab" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>_p_chain_property_obj</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a4e333e18f538e3945076234258553f1c" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>_p_core_asset_obj</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a8682770e72c0e3fa93275c4ff96049de" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>_p_core_dynamic_data_obj</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a5e02222afc911521d869764c88527f1f" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>_p_dyn_global_prop_obj</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a154deba8b408604a3dd800434f8687de" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>_p_global_prop_obj</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a65931172b3a3900067a78f0c03ae4735" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>_p_witness_schedule_obj</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a2818f2ad9b765d588fd125dc191e523a" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>_pending_tx</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a4fc3dc98840a3b6a652488b420662845" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>_pending_tx_session</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a6c5fdb41f8fff0fa1aecc3c7778bf28c" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>_popped_tx</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1ac8293173a68b4e958c27ae36d88dabb7" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>_precompute_parallel</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1aae68153f9fb7d63e8c3d2d43875acbf9" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>_push_block</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1ad8ca84ffcf797732a8227b27b335c66c" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>_push_transaction</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a142f3f5ab6695131c1407fbfc5b932c6" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>_total_voting_stake</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1aee254525d107b4e2f6723833be243dad" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>_track_standby_votes</name></member>
      <member refid="classgraphene_1_1db_1_1object__database_1a4fc57af0f2725f5a33631c05a1b62b37" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>_undo_db</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1ab2d3bdd42bbdcff329a7d0755810a970" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>_undo_session_nesting_depth</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1afe0c00a60f6bbe322c6a2db3cfb74b25" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>_validate_block_header</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a59e5f7edb13bd71745c73e65359ca465" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>_vote_tally_buffer</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a694ccfb5385c32ab164b8388802ce36b" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>_witness_count_histogram_buffer</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a0e8c92ac95d4ac2569f6b079193691dc" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>add_checkpoints</name></member>
      <member refid="classgraphene_1_1db_1_1object__database_1a82b09b4adc04d3468706cfb5b73a4798" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>add_index</name></member>
      <member refid="classgraphene_1_1db_1_1object__database_1a2fa6f4541c4595ead30e4fad08bce5e1" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>add_secondary_index</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a1a4ebf561fcd858fa830e0582193eddd" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>adjust_balance</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a3e6934dcd3926a0064ef136afc242c33" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>applied_block</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1af9556e43f26824c2036c8916d0bc460c" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>apply_block</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a8a805900b1a5c1ee4672b8f2732fda0a" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>apply_debug_updates</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1ac22bc63bd066abe065aa1044aa1b47ac" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>apply_force_settlement</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1aa895b116b1dd6495a691385b895fb277" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>apply_operation</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1aced15760a488f2dbfc188231d414fa2a" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>apply_order</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1ab822a2dedcbb25a24eb9529f6c5aaaaa" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>apply_order_before_hardfork_625</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1aaadc49139eb020b3b1e91b60b128e49f" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>apply_transaction</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a293e9896a2e9c9b6d62fb5e2c19d11e8" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>before_last_checkpoint</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1ac30625919191bffea58de8e3563f3320" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>calculate_market_fee</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a21787ce006ee78b21cf2de47767fab5a" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>cancel_bid</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a245d31d0cbaec0e89b38659b19154c54" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>cancel_limit_order</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a056dfc88cbdc1c05ea14e1fe9e80716f" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>cancel_settle_order</name></member>
      <member refid="classgraphene_1_1db_1_1object__database_1aa17265d1f5b4b8e8d669543a00b2d5a7" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>cast</name></member>
      <member refid="classgraphene_1_1db_1_1object__database_1a690bd73898c375cc17a024af631a35b2" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>cast</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a89c462c2ed0224b34cd6b6b06985d046" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>changed_objects</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1adfb5ff7580e65c689ba92bd58b614bb5" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>check_call_orders</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1af3e204348461ff4f9327416072d4eb94" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>check_for_blackswan</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1ad243587c39c4e0aa08e32aa338feac79" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>check_settled_debt_order</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a369b9ada2cd37401c5954cf0869dffdf" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>cleanup_and_remove_limit_order</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a96829431e0fb7ce36cb3fe0be5d3b2be" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>clear_expired_force_settlements</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a23203344023adbac57dab610604aa030" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>clear_expired_htlcs</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1abdcb89e79aaadcdec3b90ebebcd130c5" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>clear_expired_orders</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1ad75c225b144139e71fa68de637b2c548" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>clear_expired_proposals</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1ad4844a036da23d18c0e65f5859f12683" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>clear_expired_transactions</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1af1c4e067598a0318e728b1d28df7a598" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>clear_pending</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1aaef6e311f1eb8ddfea82751b4e2df2d2" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>close</name></member>
      <member refid="classgraphene_1_1db_1_1object__database_1a076e75fbe95c3cbd0bf637c258973533" prot="public" virt="non-virtual" ambiguityscope="graphene::db::object_database::"><scope>graphene::chain::database</scope><name>close</name></member>
      <member refid="classgraphene_1_1db_1_1object__database_1a8ab509742fb251702ee056ee234d94fa" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>create</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a614eb98379c3991d972133f6f846593d" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>create_block_summary</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a337f8cd5e02c51ffde53b67cc04e2581" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>current_fee_schedule</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a5314db2d542f49fe5487e144a03c2ee9" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>database</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1ae82d4e2f0f40a9b7a5b13eb23315d637" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>debug_dump</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a69528d69a226d6a75670f5e31187db3f" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>debug_update</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1ada0ca07bcd351e7ee1f95719b8543579" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>deposit_cashback</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a47c4b977b360da1178df3a5ef5d1cb0e" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>deposit_lazy_vesting</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a8f8a92f72cc2c03fb8b144419011e746" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>deposit_market_fee_vesting_balance</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a8eba388c99ae3a7c13bb16cbfeb6be10" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>deposit_witness_pay</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1abbc9d3f6064163078b9a21c2c580f24b" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>enable_standby_votes_tracking</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1aeb2506f031441c93b369b3c21552131d" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>execute_bid</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1ae517d3ed2a2362a70d120962536e16a0" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>fetch_block_by_id</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a380a803937941dbbf86321373279a218" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>fetch_block_by_number</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a7dc04c3c62d4b17813ba64379d14f82b" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>fill_call_order</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1aa3cc4d526b5332fa898c114a90baff22" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>fill_call_order</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a88144a9795e65d5836711f69a1848bdb" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>fill_limit_order</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1ad99007e73411a8a7dc248910ada74d30" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>fill_settle_order</name></member>
      <member refid="classgraphene_1_1db_1_1object__database_1a7f0c18925ec35bd7a35bd6a6a2a6a381" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>find</name></member>
      <member refid="classgraphene_1_1db_1_1object__database_1a259c718933fbbc4dd3145acf28f9832b" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>find</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1ae168449902e13f14a2fc8cad695e74bb" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>find_least_collateralized_short</name></member>
      <member refid="classgraphene_1_1db_1_1object__database_1afc15a7ce74c805e1aebd3460e5e43035" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>find_object</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1af6be0732a2aba64044902116e32a6e62" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>find_settled_debt_order</name></member>
      <member refid="classgraphene_1_1db_1_1object__database_1a0732ee7acd14e92c44638d4601bbedde" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>flush</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1ae8f11489883556cf872c893bc90fae53" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>generate_block</name></member>
      <member refid="classgraphene_1_1db_1_1object__database_1a14a8b6ed7a24c990999f1d6dc31a21df" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>get</name></member>
      <member refid="classgraphene_1_1db_1_1object__database_1a21e09042df1e66beb4fc28a5e640be2a" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>get</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a1fecc8c74e7c53dc3429bcfebda91775" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>get_account_stats_by_owner</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a87c74f1ef2f8840261c3d9789151b305" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>get_applied_operations</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a8f835513204025989f650833b43fb60c" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>get_balance</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a66a6c5d7a70f514b80fff03620656f7d" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>get_balance</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a4294f12b2299bab7684555c986abac76" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>get_block_id_for_num</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1aba653e023b116d6a004ebf27dd184328" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>get_block_ids_on_fork</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a92ccabc0b2ed4232e41f44ad57ef321a" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>get_chain_id</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1ac5519a9a8081356fa490be2db554b2e6" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>get_chain_properties</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1ad467f7f5b2d7cb5a142e1e80186589a6" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>get_checkpoints</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a73b613c345d2411977fb4f1b12b0b837" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>get_core_asset</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a32af52750e60217ee3a2d9189c1d5437" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>get_core_dynamic_data</name></member>
      <member refid="classgraphene_1_1db_1_1object__database_1a77bb98b3d49362133fff779b6587facf" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>get_data_dir</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a3d8bc74b9cd108aaff1ed60de7fbfeb3" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>get_dynamic_global_properties</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a464a05994e41fdadd6351114eddaa316" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>get_global_properties</name></member>
      <member refid="classgraphene_1_1db_1_1object__database_1ace1d662d6cb889e6363468702b8639b2" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>get_index</name></member>
      <member refid="classgraphene_1_1db_1_1object__database_1a622efe7a25196b0d226ad6b1e454b0ae" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>get_index</name></member>
      <member refid="classgraphene_1_1db_1_1object__database_1a67378fdc73274eec7ef344b403c92525" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>get_index</name></member>
      <member refid="classgraphene_1_1db_1_1object__database_1ad8fc93c417524922d380dd3ee95fc2b0" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>get_index_type</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1ae62c01ea5a924d30bf3bc7a16af185d9" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>get_market_fee_vesting_balance</name></member>
      <member refid="classgraphene_1_1db_1_1object__database_1ae74125300ed2da8d46e3c7436fbfc0d2" prot="protected" virt="non-virtual"><scope>graphene::chain::database</scope><name>get_mutable_index</name></member>
      <member refid="classgraphene_1_1db_1_1object__database_1a1cbd2af525743976c2587da1505676c2" prot="protected" virt="non-virtual"><scope>graphene::chain::database</scope><name>get_mutable_index</name></member>
      <member refid="classgraphene_1_1db_1_1object__database_1a6ec111d856befc5bcec11d0d76eefd7f" prot="protected" virt="non-virtual"><scope>graphene::chain::database</scope><name>get_mutable_index</name></member>
      <member refid="classgraphene_1_1db_1_1object__database_1a3ca684af9f341d319209b8c1163eb1d5" prot="protected" virt="non-virtual"><scope>graphene::chain::database</scope><name>get_mutable_index_type</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1ad10d0309e4c878cb896b09bcbdb5e3b4" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>get_node_properties</name></member>
      <member refid="classgraphene_1_1db_1_1object__database_1aa61a3adba87f7f1731bc88ad1ea1ec5c" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>get_object</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a19352bf8822d30ed4c71dd65fd62f0ca" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>get_recent_transaction</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a3daf7627fbbad235bc99cecc6464731b" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>get_scheduled_witness</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a9f6a3131085a7411a46db17a818fd1ca" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>get_slot_at_time</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a7a40590812847fac95aaded9dcac020e" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>get_slot_time</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a6a85674d08a39f70220822f591b7af69" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>get_viable_custom_authorities</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a8e31a33a034747e485b88aa194b048e5" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>get_witness_schedule_object</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a0d85b8e37f9dd64ef989c462a0d7860f" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>globally_settle_asset</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1add0a8183f988655c42247c30f029d014" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>globally_settle_asset_impl</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a9d10c99200b0fa6dacc17993e7e22985" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>head_block_id</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1aed39a6bd1c0356d6b7016af12509726d" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>head_block_num</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1aa53e34701c0ab1b1c124b9c9e9c50ba1" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>head_block_time</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a021e7b3697719810c2cf76772b55b44e" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>head_block_witness</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1ae4de203b7b7ed9eb055b7ed483de14bd" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>individually_settle</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a91a45b5f416d80e1abab0affb75ea16a" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>init_genesis</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1af51b59445b07cab91bd70fd4ddec2e4f" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>initialize_budget_record</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1adbdb993dd56503d38044847dc478d19d" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>initialize_evaluators</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1aa771c27abfab94ef6ed5f32348594508" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>initialize_indexes</name></member>
      <member refid="classgraphene_1_1db_1_1object__database_1ab417fee5b66b97908a142864d582c671" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>insert</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a98795dba60947210dd9a0fbb770709a2" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>is_known_block</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a0600c987cf89e038128684da9b8c2829" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>is_known_transaction</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1aee3dea95aed2dc56b5e3243e85c72e15" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>last_non_undoable_block_num</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1aac40483fbda0abd78ab3a80d1a5c0245" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>match</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a6b430828eb5fcd237abf935e037aa54a" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>match</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1af406679ca8759bfb9afa4bd093b69359" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>match</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a61d8f547d66ec2e01ff2219e326c396f" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>match</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a74b0076783ce1240cdb36cccfacad4c8" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>match</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a3c447262c8a489f33232b6caccc962aa" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>match_force_settlements</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a93d519ed299f6f24b67eef7ed86a8bb4" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>match_impl</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1acb5e46328e1de68360cd73d4f511c313" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>match_limit_normal_limit</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a978a4e2d44c3e106c2685e12c62361d7" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>match_limit_settled_debt</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1aaa234ff3fda171f0cf673fe338632599" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>match_result_type</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1adda47fe7b5130f97c86323883aeb5ac3" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>match_settled_debt_limit</name></member>
      <member refid="classgraphene_1_1db_1_1object__database_1a88949a42022fae3668dabba8b1cccd40" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>modify</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a11eac7e673b4a9bb4458282b3b01e21f" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>new_objects</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a5a11d2aa7bfc6fbbc33f67f6a6174b10" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>node_properties</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a110fcf6a054a23576d5573ee4db3fd9c" prot="protected" virt="non-virtual"><scope>graphene::chain::database</scope><name>notify_applied_block</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1ae3f480762bbb94cfecf98dd81fe3ed6e" prot="protected" virt="non-virtual"><scope>graphene::chain::database</scope><name>notify_changed_objects</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a9b827a50067542ef8c1ea9f2e6177f8d" prot="protected" virt="non-virtual"><scope>graphene::chain::database</scope><name>notify_on_pending_transaction</name></member>
      <member refid="classgraphene_1_1db_1_1object__database_1a63ad25dd455b179cafced627e8a43e88" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>object_database</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a0747f461aea199b260777d4b1975013d" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>on_pending_transaction</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a2d5356973d8d14d8267b7d49a2c6d939" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>open</name></member>
      <member refid="classgraphene_1_1db_1_1object__database_1a0e179b70876f837430d1b3a1af683a03" prot="public" virt="non-virtual" ambiguityscope="graphene::db::object_database::"><scope>graphene::chain::database</scope><name>open</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a7d3b2fc4773d4e5227748403fdd5d925" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>pay_force_settle_fees</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a889865bc9a3a2e7e7d79ec7d00b03902" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>pay_market_fees</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a98391f198bc95d206c91da61dc55373d" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>pay_order</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a6fe82633f6c1133154b070c83a05362f" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>pay_workers</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a7127cd2d681e467886043883d32cc4a1" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>perform_account_maintenance</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a8444b35d6ecf325dc2caad45e316f6ef" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>perform_chain_maintenance</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a03253124ee8714af752c1d68b7cc206c" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>pop_block</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1aea9d1ca437641003a9426718ebe05481" prot="protected" virt="non-virtual"><scope>graphene::chain::database</scope><name>pop_undo</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a34c54fd8e47f00cdfe23de1eb8a55bb8" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>precompute_parallel</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1ad76db729d92b453958e49c4ca7b9e382" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>precompute_parallel</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1abbadc138e491d9fabf4c4500fb3f7880" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>process_bids</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a7a68bea3940b894653ed5f38b41e3063" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>process_bitassets</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1aff91fc596f814302f39d4c0233969d37" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>process_budget</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a4cd1c5994e3b36251d02f26e9fc71c64" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>process_limit_order_on_fill</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1af0ba4838b6533fb5a95f1dcb27004cd3" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>process_tickets</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1aa519d48f98a8c695717ae95ac3f46d5a" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>push_applied_operation</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1aa62eb8144a717f62da5404e8bb482414" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>push_block</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1ab5abeddad5156d1bcad2e97256d54fa0" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>push_proposal</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1af9ec01b12cd9c42a2da204c4a19d63aa" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>push_transaction</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a116eef07a5b0af2512e1c55c724c6a60" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>register_evaluator</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1ad9a4bc8bc2683554aac84fdd1e96b710" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>reindex</name></member>
      <member refid="classgraphene_1_1db_1_1object__database_1a991969449bef27210b5308f689871d25" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>remove</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a9aa30b505cfa4e5cdc9a0b354d49e89e" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>removed_objects</name></member>
      <member refid="classgraphene_1_1db_1_1object__database_1ac0aee0c82f1fe2380b56c7a13fb87a98" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>reset_indexes</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a9f7b1b0f3d3fd677b60cf815dbcde6f7" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>revive_bitasset</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a1d85784b1e8dd37a7cecce893e248061" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>set_applied_operation_result</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a6de6add85d012876641f2a50ad707726ab1814f44f09e9aa67dc11f1a82179368" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>skip_assert_evaluation</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a6de6add85d012876641f2a50ad707726ad400a74260f27eef16d855f4c325840f" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>skip_block_size_check</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a6de6add85d012876641f2a50ad707726a67c110807cc8ac1b8096a8d7888804c4" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>skip_merkle_check</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a6de6add85d012876641f2a50ad707726afbe701c12ae94e417ef9424306aabbdc" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>skip_nothing</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a6de6add85d012876641f2a50ad707726aa9965640871a2f76bacd60c977a183bc" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>skip_tapos_check</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a6de6add85d012876641f2a50ad707726aa4b454d723548a14369e9d54ebff309c" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>skip_transaction_dupe_check</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a6de6add85d012876641f2a50ad707726ada088aa976bc3f5a1813dc7645b591ad" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>skip_transaction_signatures</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a6de6add85d012876641f2a50ad707726a8627024a0226d1f03a963a90a26383b7" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>skip_undo_history_check</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a6de6add85d012876641f2a50ad707726a5658faff01cd4c139d313f6888bc7da0" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>skip_witness_schedule_check</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a6de6add85d012876641f2a50ad707726a7cd765f84f450cfdd68e3adcf87c02d2" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>skip_witness_signature</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1aa90507ca970108d15c464c3938bb98df" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>sort_votable_objects</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a5ebd612bd6895e9acf40c71ac69baed8" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>to_pretty_string</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1aeaf4c3ad75ac598c46356488accf0111" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>try_push_virtual_operation</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a8c6abb44b82f50b6c07b759bae840064" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>update_active_committee_members</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1af31a9714d1e4a1de0ecd91346e0ae35f" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>update_active_witnesses</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1aa3d40d41a108ab3408ee02ea4035607b" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>update_bitasset_current_feed</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1acd99f1cccc899866bb8473242aa78385" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>update_core_exchange_rates</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a3cc72f702be53384cc2fb4cd262d351b" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>update_credit_offers_and_deals</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1ae46cba129339864cc6958450b53c27f6" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>update_expired_feeds</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a3eab987028ac7d74e4788ccc020f27e8" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>update_global_dynamic_data</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1aa281b08f27f23e83863106e7c5db543b" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>update_last_irreversible_block</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1ae68098fd0de4ab679bfc696a364ebb56" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>update_maintenance_flag</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a0485e7a64376580ca08ada3b83a6de76" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>update_signing_witness</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a5dd219435fad332aa12893b1aefdcbf8" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>update_withdraw_permissions</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a163717adf25c4e105fe25d26531cbe51" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>update_witness_missed_blocks</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1aa10c1d73609828c1594e4054e4399b9a" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>update_witness_schedule</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a3d1e43ff6c46dfb2a0bde15451d1e625" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>update_witnesses</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1af3b2871563286c018ef252daec940f15" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>update_worker_votes</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1abb25d544cb49ea782f43630e0bed084c" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>validate_block_header</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a414ee96a9f64b119cd3849266885d93d" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>validate_transaction</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a6de6add85d012876641f2a50ad707726" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>validation_steps</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a3821159b55c5519285d3f45409e4c977" prot="private" virt="non-virtual"><scope>graphene::chain::database</scope><name>verify_signing_witness</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a37463bb4fc61d94effff3f5784a2f168" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>wipe</name></member>
      <member refid="classgraphene_1_1db_1_1object__database_1a762ede07c458acb11142340ce71d1e27" prot="public" virt="non-virtual" ambiguityscope="graphene::db::object_database::"><scope>graphene::chain::database</scope><name>wipe</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1afa79d883fabbeab89ec71a47566ef1e6" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>witness_participation_rate</name></member>
      <member refid="classgraphene_1_1chain_1_1database_1a483796147553d8d1fca562d6303c8d93" prot="public" virt="non-virtual"><scope>graphene::chain::database</scope><name>~database</name></member>
      <member refid="classgraphene_1_1db_1_1object__database_1a5e8b60949b1ec0c513414c13833fc172" prot="public" virt="virtual"><scope>graphene::chain::database</scope><name>~object_database</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
