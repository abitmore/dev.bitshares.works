<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classgraphene_1_1chain_1_1asset__object" kind="class" language="C++" prot="public">
    <compoundname>graphene::chain::asset_object</compoundname>
    <basecompoundref refid="classgraphene_1_1db_1_1abstract__object" prot="public" virt="non-virtual">graphene::db::abstract_object&lt; asset_object, protocol_ids, asset_object_type &gt;</basecompoundref>
    <derivedcompoundref refid="structgraphene_1_1app_1_1extended__asset__object" prot="public" virt="non-virtual">graphene::app::extended_asset_object</derivedcompoundref>
    <includes refid="asset__object_8hpp" local="no">asset_object.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1asset__object_1a089165870abab6b77345acea240937b6" prot="public" static="no" mutable="no">
        <type>string</type>
        <definition>string graphene::chain::asset_object::symbol</definition>
        <argsstring></argsstring>
        <name>symbol</name>
        <briefdescription>
<para>Ticker symbol for this asset, i.e. &quot;USD&quot;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="131" column="17" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1asset__object_1a7169594e64f681273a6ece486de9ef38" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t graphene::chain::asset_object::precision</definition>
        <argsstring></argsstring>
        <name>precision</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Maximum number of digits after the decimal point (must be &lt;= 12) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="133" column="18" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1asset__object_1ad5274b71ad420b57da53c3ef80b95577" prot="public" static="no" mutable="no">
        <type>account_id_type</type>
        <definition>account_id_type graphene::chain::asset_object::issuer</definition>
        <argsstring></argsstring>
        <name>issuer</name>
        <briefdescription>
<para>ID of the account which issued this asset. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="135" column="26" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1asset__object_1a51510fee637f062e6db9cfc0986fcf49" prot="public" static="no" mutable="no">
        <type><ref refid="structgraphene_1_1protocol_1_1asset__options" kindref="compound">asset_options</ref></type>
        <definition>asset_options graphene::chain::asset_object::options</definition>
        <argsstring></argsstring>
        <name>options</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="137" column="24" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1asset__object_1a85367857043568d480de982ae1b6518c" prot="public" static="no" mutable="no">
        <type>asset_dynamic_data_id_type</type>
        <definition>asset_dynamic_data_id_type graphene::chain::asset_object::dynamic_asset_data_id</definition>
        <argsstring></argsstring>
        <name>dynamic_asset_data_id</name>
        <briefdescription>
<para>Current supply, fee pool, and collected fees are stored in a separate object as they change frequently. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="140" column="38" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1asset__object_1a5a69d1ef467d5eb7163fb4c301937066" prot="public" static="no" mutable="no">
        <type>optional&lt; asset_bitasset_data_id_type &gt;</type>
        <definition>optional&lt;asset_bitasset_data_id_type&gt; graphene::chain::asset_object::bitasset_data_id</definition>
        <argsstring></argsstring>
        <name>bitasset_data_id</name>
        <briefdescription>
<para>Extra data associated with BitAssets. This field is non-null if and only if <ref refid="classgraphene_1_1chain_1_1asset__object_1a5cd681e6cc216f87d99f60c1de63eba8" kindref="member">is_market_issued()</ref> returns true. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="142" column="19" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1asset__object_1a57ff2c36a04a2123d1dad48ea76049bc" prot="public" static="no" mutable="no">
        <type>optional&lt; account_id_type &gt;</type>
        <definition>optional&lt;account_id_type&gt; graphene::chain::asset_object::buyback_account</definition>
        <argsstring></argsstring>
        <name>buyback_account</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="144" column="19" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1asset__object_1a179fd11dac23e45085e27cca5ec8e794" prot="public" static="no" mutable="no">
        <type>optional&lt; liquidity_pool_id_type &gt;</type>
        <definition>optional&lt;liquidity_pool_id_type&gt; graphene::chain::asset_object::for_liquidity_pool</definition>
        <argsstring></argsstring>
        <name>for_liquidity_pool</name>
        <briefdescription>
<para>The ID of the liquidity pool if the asset is the share asset of a liquidity pool. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="147" column="19" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1asset__object_1a6e4725c3ac6301c74e85e63d4f21e818" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t graphene::chain::asset_object::creation_block_num</definition>
        <argsstring></argsstring>
        <name>creation_block_num</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>The block number when the asset object was created. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="150" column="25" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1asset__object_1aea9eddf02cd2496702bb55cf9b163e74" prot="public" static="no" mutable="no">
        <type>time_point_sec</type>
        <definition>time_point_sec graphene::chain::asset_object::creation_time</definition>
        <argsstring></argsstring>
        <name>creation_time</name>
        <briefdescription>
<para>The time when the asset object was created. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="152" column="25" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="152" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1ac15166dec400e72604ecdbb6d25ae800" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool graphene::chain::asset_object::is_valid_symbol</definition>
        <argsstring>(const string &amp;symbol)</argsstring>
        <name>is_valid_symbol</name>
        <param>
          <type>const string &amp;</type>
          <declname>symbol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function does not check if any registered asset has this symbol or not; it simply checks whether the symbol would be valid. <simplesect kind="return"><para>true if symbol is a valid ticker symbol; false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="81" column="22"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1a5cd681e6cc216f87d99f60c1de63eba8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::asset_object::is_market_issued</definition>
        <argsstring>() const</argsstring>
        <name>is_market_issued</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if this is a market-issued asset; false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="84" column="15" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="84" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1a0bdbeedb6fec7fefd953350d055a24c3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::asset_object::is_liquidity_pool_share_asset</definition>
        <argsstring>() const</argsstring>
        <name>is_liquidity_pool_share_asset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if this is a share asset of a liquidity pool; false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="86" column="15" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="86" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1aae49c2f2dc541d0f3e8299191cc63746" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::asset_object::can_force_settle</definition>
        <argsstring>() const</argsstring>
        <name>can_force_settle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if users may request force-settlement of this market-issued asset; false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="88" column="15" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="88" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1a0a21f0bfc85c0e44928d9ada2ae89327" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::asset_object::can_global_settle</definition>
        <argsstring>() const</argsstring>
        <name>can_global_settle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the issuer of this market-issued asset may globally settle the asset; false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="90" column="15" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1aab9293c90db12e09ca4d95f5fa4706c1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::asset_object::charges_market_fees</definition>
        <argsstring>() const</argsstring>
        <name>charges_market_fees</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if this asset charges a fee for the issuer on market operations; false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="92" column="15" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="92" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1a6d2f96a1d93ba79d13a184a259a7c3da" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::asset_object::is_transfer_restricted</definition>
        <argsstring>() const</argsstring>
        <name>is_transfer_restricted</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if this asset may only be transferred to/from the issuer or market orders </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="94" column="15" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="94" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1a5531018d6bc4fd9bca594cbefa0f414f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::asset_object::can_override</definition>
        <argsstring>() const</argsstring>
        <name>can_override</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="95" column="15" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="95" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1a47d7fac85d5d45035b51b03a03af29b6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::asset_object::allow_confidential</definition>
        <argsstring>() const</argsstring>
        <name>allow_confidential</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="96" column="15" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="96" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1af96c65cec50df07df2bd57f795b3e001" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::asset_object::can_update_max_supply</definition>
        <argsstring>() const</argsstring>
        <name>can_update_max_supply</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if max supply of the asset can be updated </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="99" column="15" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="99" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1a8b5918605d510bb8a451fdfcb53e8754" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::asset_object::can_create_new_supply</definition>
        <argsstring>() const</argsstring>
        <name>can_create_new_supply</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if can create new supply for the asset </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="101" column="15" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="101" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1a99044fd223e4edf4e351545fd3459be3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::asset_object::can_owner_update_mcr</definition>
        <argsstring>() const</argsstring>
        <name>can_owner_update_mcr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the asset owner can update MCR directly </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="103" column="15" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="103" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1a99c39733fc374f4fd1a0a15bcbb0e570" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::asset_object::can_owner_update_icr</definition>
        <argsstring>() const</argsstring>
        <name>can_owner_update_icr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the asset owner can update ICR directly </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="105" column="15" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="105" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1a9e3b53641fc1fdcf6023529a7a10ea23" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::asset_object::can_owner_update_mssr</definition>
        <argsstring>() const</argsstring>
        <name>can_owner_update_mssr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the asset owner can update MSSR directly </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="107" column="15" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1a57d46d1d5f3dff3cdc4ec0cce99d4c1f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::asset_object::can_owner_update_bsrm</definition>
        <argsstring>() const</argsstring>
        <name>can_owner_update_bsrm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the asset owner can change black swan response method </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="109" column="15" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="109" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1a4f08bf6140d8dd11b06c576bc2a282ef" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::asset_object::can_bid_collateral</definition>
        <argsstring>() const</argsstring>
        <name>can_bid_collateral</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if can bid collateral for the asset </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="111" column="15" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1acb60f1912e9463316ae5c1577cafdaa5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref></type>
        <definition>asset graphene::chain::asset_object::amount</definition>
        <argsstring>(share_type a) const</argsstring>
        <name>amount</name>
        <param>
          <type><ref refid="namespacegraphene_1_1protocol_1a69b2104c1c11eed2d17bd29b86713347" kindref="member">share_type</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Helper function to get an asset object with the given amount in this asset&apos;s type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="114" column="16" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="114" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1a390e68ee7a3c90609a15cfe14040fb06" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref></type>
        <definition>asset graphene::chain::asset_object::amount_from_string</definition>
        <argsstring>(string amount_string) const</argsstring>
        <name>amount_from_string</name>
        <param>
          <type>string</type>
          <declname>amount_string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a string amount (i.e. &quot;123.45&quot;) to an asset object with this asset&apos;s type The string may have a decimal and/or a negative sign. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="117" column="16" bodyfile="libraries/chain/asset_object.cpp" bodystart="152" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1a4c5249cded57e1eaaea431d07c3c925b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string graphene::chain::asset_object::amount_to_string</definition>
        <argsstring>(share_type amount) const</argsstring>
        <name>amount_to_string</name>
        <param>
          <type><ref refid="namespacegraphene_1_1protocol_1a69b2104c1c11eed2d17bd29b86713347" kindref="member">share_type</ref></type>
          <declname>amount</declname>
        </param>
        <briefdescription>
<para>Convert an asset to a textual representation, i.e. &quot;123.45&quot;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="119" column="17" bodyfile="libraries/chain/asset_object.cpp" bodystart="207" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1a05bc40ee989e7c43e8ab14a010519175" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>string</type>
        <definition>string graphene::chain::asset_object::amount_to_string</definition>
        <argsstring>(const asset &amp;amount) const</argsstring>
        <name>amount_to_string</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>amount</declname>
        </param>
        <briefdescription>
<para>Convert an asset to a textual representation, i.e. &quot;123.45&quot;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="121" column="17" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="121" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1a1cbad7d23cf2f980af956b4e8e625142" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>string</type>
        <definition>string graphene::chain::asset_object::amount_to_pretty_string</definition>
        <argsstring>(share_type amount) const</argsstring>
        <name>amount_to_pretty_string</name>
        <param>
          <type><ref refid="namespacegraphene_1_1protocol_1a69b2104c1c11eed2d17bd29b86713347" kindref="member">share_type</ref></type>
          <declname>amount</declname>
        </param>
        <briefdescription>
<para>Convert an asset to a textual representation with symbol, i.e. &quot;123.45 USD&quot;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="124" column="17" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="124" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1a0118c84ac2a7856e191d6c09ff2a3715" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>string</type>
        <definition>string graphene::chain::asset_object::amount_to_pretty_string</definition>
        <argsstring>(const asset &amp;amount) const</argsstring>
        <name>amount_to_pretty_string</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>amount</declname>
        </param>
        <briefdescription>
<para>Convert an asset to a textual representation with symbol, i.e. &quot;123.45 USD&quot;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="127" column="17" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="127" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1aa7756248ee88ce97490c4261c7e1b75c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::asset_object::validate</definition>
        <argsstring>() const</argsstring>
        <name>validate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="154" column="15" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="154" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1a92611ccbf1c28aef5649a96ec8c5b712" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DB</type>
          </param>
        </templateparamlist>
        <type>const <ref refid="classgraphene_1_1chain_1_1asset__bitasset__data__object" kindref="compound">asset_bitasset_data_object</ref> &amp;</type>
        <definition>const asset_bitasset_data_object&amp; graphene::chain::asset_object::bitasset_data</definition>
        <argsstring>(const DB &amp;db) const</argsstring>
        <name>bitasset_data</name>
        <param>
          <type>const DB &amp;</type>
          <declname>db</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="166" column="43" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="166" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1a6d1165c64b8d38b36b8c8d4165cbfc7b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DB</type>
          </param>
        </templateparamlist>
        <type>const <ref refid="classgraphene_1_1chain_1_1asset__dynamic__data__object" kindref="compound">asset_dynamic_data_object</ref> &amp;</type>
        <definition>const asset_dynamic_data_object&amp; graphene::chain::asset_object::dynamic_data</definition>
        <argsstring>(const DB &amp;db) const</argsstring>
        <name>dynamic_data</name>
        <param>
          <type>const DB &amp;</type>
          <declname>db</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="175" column="42" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="175" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1a6c2a607af2e8ef974baa0f347a7c2ffe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DB</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacegraphene_1_1protocol_1a69b2104c1c11eed2d17bd29b86713347" kindref="member">share_type</ref></type>
        <definition>share_type graphene::chain::asset_object::reserved</definition>
        <argsstring>(const DB &amp;db) const</argsstring>
        <name>reserved</name>
        <param>
          <type>const DB &amp;</type>
          <declname>db</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The total amount of an asset that is reserved for future issuance. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="182" column="21" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="182" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1afc2a57751192be2501d6609a48cd3a1c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DB</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool graphene::chain::asset_object::can_accumulate_fee</definition>
        <argsstring>(const DB &amp;db, const asset &amp;fee) const</argsstring>
        <name>can_accumulate_fee</name>
        <param>
          <type>const DB &amp;</type>
          <declname>db</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>fee</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if asset can accumulate fees in the given denomination </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="187" column="15" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="187" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1ae3de155b1a09eff55855baf137b6386f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DB</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void graphene::chain::asset_object::accumulate_fee</definition>
        <argsstring>(DB &amp;db, const asset &amp;fee) const</argsstring>
        <name>accumulate_fee</name>
        <param>
          <type>DB &amp;</type>
          <declname>db</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>fee</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="201" column="15" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="201" bodyend="222"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>tracks the parameters of an asset </para>
    </briefdescription>
    <detaileddescription>
<para>All assets have a globally unique symbol name that controls how they are traded and an issuer who has authority over the parameters of the asset. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>graphene::db::base_abstract_object&lt; asset_object &gt;</label>
        <link refid="classgraphene_1_1db_1_1base__abstract__object"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>graphene::db::abstract_object&lt; asset_object, protocol_ids, asset_object_type &gt;</label>
        <link refid="classgraphene_1_1db_1_1abstract__object"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>graphene::chain::asset_object</label>
        <link refid="classgraphene_1_1chain_1_1asset__object"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>graphene::db::object</label>
        <link refid="classgraphene_1_1db_1_1object"/>
      </node>
      <node id="5">
        <label>graphene::app::extended_asset_object</label>
        <link refid="structgraphene_1_1app_1_1extended__asset__object"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="19">
        <label>fc::optional&lt; liquidity_pool_id_type &gt;</label>
        <link refid="classfc_1_1optional"/>
      </node>
      <node id="12">
        <label>flat_set&lt; asset_id_type &gt;</label>
      </node>
      <node id="3">
        <label>graphene::db::base_abstract_object&lt; asset_object &gt;</label>
        <link refid="classgraphene_1_1db_1_1base__abstract__object"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>fc::safe_base&lt; int64_t &gt;</label>
        <link refid="structfc_1_1safe__base"/>
      </node>
      <node id="15">
        <label>string</label>
      </node>
      <node id="16">
        <label>graphene::protocol::price</label>
        <link refid="structgraphene_1_1protocol_1_1price"/>
        <childnode refid="17" relation="usage">
          <edgelabel>base</edgelabel>
          <edgelabel>quote</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>graphene::protocol::additional_asset_options</label>
        <link refid="structgraphene_1_1protocol_1_1additional__asset__options"/>
        <childnode refid="10" relation="usage">
          <edgelabel>taker_fee_percent</edgelabel>
          <edgelabel>reward_percent</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>whitelist_market_fee_sharing</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>graphene::db::abstract_object&lt; asset_object, protocol_ids, asset_object_type &gt;</label>
        <link refid="classgraphene_1_1db_1_1abstract__object"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>fc::optional&lt; flat_set&lt; account_id_type &gt; &gt;</label>
        <link refid="classfc_1_1optional"/>
      </node>
      <node id="21">
        <label>account_id_type</label>
      </node>
      <node id="18">
        <label>flat_set&lt; account_id_type &gt;</label>
      </node>
      <node id="13">
        <label>fc::safe&lt; int64_t &gt;</label>
        <link refid="structfc_1_1safe"/>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>graphene::protocol::asset_options</label>
        <link refid="structgraphene_1_1protocol_1_1asset__options"/>
        <childnode refid="8" relation="usage">
          <edgelabel>extensions</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>whitelist_markets</edgelabel>
          <edgelabel>blacklist_markets</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>max_market_fee</edgelabel>
          <edgelabel>max_supply</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>description</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>core_exchange_rate</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>whitelist_authorities</edgelabel>
          <edgelabel>blacklist_authorities</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>fc::optional&lt; asset_bitasset_data_id_type &gt;</label>
        <link refid="classfc_1_1optional"/>
      </node>
      <node id="17">
        <label>graphene::protocol::asset</label>
        <link refid="structgraphene_1_1protocol_1_1asset"/>
        <childnode refid="13" relation="usage">
          <edgelabel>amount</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>graphene::chain::asset_object</label>
        <link refid="classgraphene_1_1chain_1_1asset__object"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>bitasset_data_id</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>options</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>for_liquidity_pool</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>buyback_account</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>issuer</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>symbol</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>graphene::db::object_id_type</label>
        <link refid="structgraphene_1_1db_1_1object__id__type"/>
      </node>
      <node id="4">
        <label>graphene::db::object</label>
        <link refid="classgraphene_1_1db_1_1object"/>
        <childnode refid="5" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>graphene::protocol::extension&lt; additional_asset_options &gt;</label>
        <link refid="structgraphene_1_1protocol_1_1extension"/>
        <childnode refid="9" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>fc::optional&lt; account_id_type &gt;</label>
        <link refid="classfc_1_1optional"/>
      </node>
      <node id="10">
        <label>fc::optional&lt; uint16_t &gt;</label>
        <link refid="classfc_1_1optional"/>
      </node>
    </collaborationgraph>
    <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="76" column="1" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="75" bodyend="224"/>
    <listofallmembers>
      <member refid="classgraphene_1_1db_1_1abstract__object_1a62b6a9a9290a38dc05763d920186872c" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>abstract_object</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1ae3de155b1a09eff55855baf137b6386f" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>accumulate_fee</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a47d7fac85d5d45035b51b03a03af29b6" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>allow_confidential</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1acb60f1912e9463316ae5c1577cafdaa5" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>amount</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a390e68ee7a3c90609a15cfe14040fb06" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>amount_from_string</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a1cbad7d23cf2f980af956b4e8e625142" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>amount_to_pretty_string</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a0118c84ac2a7856e191d6c09ff2a3715" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>amount_to_pretty_string</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a4c5249cded57e1eaaea431d07c3c925b" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>amount_to_string</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a05bc40ee989e7c43e8ab14a010519175" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>amount_to_string</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a92611ccbf1c28aef5649a96ec8c5b712" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>bitasset_data</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a5a69d1ef467d5eb7163fb4c301937066" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>bitasset_data_id</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a57ff2c36a04a2123d1dad48ea76049bc" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>buyback_account</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1afc2a57751192be2501d6609a48cd3a1c" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>can_accumulate_fee</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a4f08bf6140d8dd11b06c576bc2a282ef" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>can_bid_collateral</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a8b5918605d510bb8a451fdfcb53e8754" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>can_create_new_supply</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1aae49c2f2dc541d0f3e8299191cc63746" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>can_force_settle</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a0a21f0bfc85c0e44928d9ada2ae89327" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>can_global_settle</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a5531018d6bc4fd9bca594cbefa0f414f" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>can_override</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a57d46d1d5f3dff3cdc4ec0cce99d4c1f" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>can_owner_update_bsrm</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a99c39733fc374f4fd1a0a15bcbb0e570" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>can_owner_update_icr</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a99044fd223e4edf4e351545fd3459be3" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>can_owner_update_mcr</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a9e3b53641fc1fdcf6023529a7a10ea23" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>can_owner_update_mssr</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1af96c65cec50df07df2bd57f795b3e001" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>can_update_max_supply</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1aab9293c90db12e09ca4d95f5fa4706c1" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>charges_market_fees</name></member>
      <member refid="classgraphene_1_1db_1_1base__abstract__object_1af3a4c0e78138f72a0e5fd120f4105488" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>clone</name></member>
      <member refid="classgraphene_1_1db_1_1object_1a338c362d7ad8dec65847ed1621b0364a" prot="public" virt="pure-virtual" ambiguityscope="graphene::db::object::"><scope>graphene::chain::asset_object</scope><name>clone</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a6e4725c3ac6301c74e85e63d4f21e818" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>creation_block_num</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1aea9eddf02cd2496702bb55cf9b163e74" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>creation_time</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a85367857043568d480de982ae1b6518c" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>dynamic_asset_data_id</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a6d1165c64b8d38b36b8c8d4165cbfc7b" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>dynamic_data</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a179fd11dac23e45085e27cca5ec8e794" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>for_liquidity_pool</name></member>
      <member refid="classgraphene_1_1db_1_1abstract__object_1abdd95dc811d3bf7dbdc9aa0251129f81" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>get_id</name></member>
      <member refid="classgraphene_1_1db_1_1object_1a2ce812569d565a45dda1420cfbdf79ad" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>id</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a0bdbeedb6fec7fefd953350d055a24c3" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>is_liquidity_pool_share_asset</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a5cd681e6cc216f87d99f60c1de63eba8" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>is_market_issued</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a6d2f96a1d93ba79d13a184a259a7c3da" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>is_transfer_restricted</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1ac15166dec400e72604ecdbb6d25ae800" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>is_valid_symbol</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1ad5274b71ad420b57da53c3ef80b95577" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>issuer</name></member>
      <member refid="classgraphene_1_1db_1_1base__abstract__object_1ae411f8719b1a5d32781c71a06c2b9386" prot="public" virt="virtual"><scope>graphene::chain::asset_object</scope><name>move_from</name></member>
      <member refid="classgraphene_1_1db_1_1base__abstract__object_1ae57a6f64a9444b2f0fa0c937be480f54" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>object</name></member>
      <member refid="classgraphene_1_1db_1_1base__abstract__object_1abc6d16d10de6c2e780d62918a458276f" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>object</name></member>
      <member refid="classgraphene_1_1db_1_1object_1abc6d16d10de6c2e780d62918a458276f" prot="public" virt="non-virtual" ambiguityscope="graphene::db::object::"><scope>graphene::chain::asset_object</scope><name>object</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a51510fee637f062e6db9cfc0986fcf49" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>options</name></member>
      <member refid="classgraphene_1_1db_1_1base__abstract__object_1a9ba1e81bf5d130ad4f61cc95c8c9861f" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>pack</name></member>
      <member refid="classgraphene_1_1db_1_1object_1ae0ac940716e76ee0876fbfc3023b26eb" prot="public" virt="pure-virtual" ambiguityscope="graphene::db::object::"><scope>graphene::chain::asset_object</scope><name>pack</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a7169594e64f681273a6ece486de9ef38" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>precision</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a6c2a607af2e8ef974baa0f347a7c2ffe" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>reserved</name></member>
      <member refid="classgraphene_1_1db_1_1abstract__object_1afb1fe30941a4e9e6d3ca3f4a55c9e59b" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>space_id</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a089165870abab6b77345acea240937b6" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>symbol</name></member>
      <member refid="classgraphene_1_1db_1_1base__abstract__object_1a7dd7f3ea796b0f3ec9b4899b3e33e4b2" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>to_variant</name></member>
      <member refid="classgraphene_1_1db_1_1object_1aca896a32d67ffbcddd2a831c87c24644" prot="public" virt="pure-virtual" ambiguityscope="graphene::db::object::"><scope>graphene::chain::asset_object</scope><name>to_variant</name></member>
      <member refid="classgraphene_1_1db_1_1abstract__object_1ab3d8c613dd39c1b04abfb7ac758246e6" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>type_id</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1aa7756248ee88ce97490c4261c7e1b75c" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>validate</name></member>
      <member refid="classgraphene_1_1db_1_1object_1ae8f3fa315d81c80cd93cf5ea2853e65f" prot="public" virt="virtual"><scope>graphene::chain::asset_object</scope><name>~object</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
