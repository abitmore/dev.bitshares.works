<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structgraphene_1_1protocol_1_1transfer__to__blind__operation" kind="class" language="C++" prot="public">
    <compoundname>graphene::protocol::transfer_to_blind_operation</compoundname>
    <basecompoundref refid="structgraphene_1_1protocol_1_1base__operation" prot="public" virt="non-virtual">graphene::protocol::base_operation</basecompoundref>
    <includes refid="confidential_8hpp" local="no">confidential.hpp</includes>
    <innerclass refid="structgraphene_1_1protocol_1_1transfer__to__blind__operation_1_1fee__params__t" prot="public">graphene::protocol::transfer_to_blind_operation::fee_params_t</innerclass>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1transfer__to__blind__operation_1a97378b8efbf98fd04cb6728f2b268cbd" prot="public" static="no" mutable="no">
        <type><ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref></type>
        <definition>asset graphene::protocol::transfer_to_blind_operation::fee</definition>
        <argsstring></argsstring>
        <name>fee</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/confidential.hpp" line="158" column="26" bodyfile="libraries/protocol/include/graphene/protocol/confidential.hpp" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1transfer__to__blind__operation_1a54115eb0edf78236e878a1173c5d2213" prot="public" static="no" mutable="no">
        <type><ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref></type>
        <definition>asset graphene::protocol::transfer_to_blind_operation::amount</definition>
        <argsstring></argsstring>
        <name>amount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/confidential.hpp" line="159" column="26" bodyfile="libraries/protocol/include/graphene/protocol/confidential.hpp" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1transfer__to__blind__operation_1aac138ad0557c30453136bae37c8080cd" prot="public" static="no" mutable="no">
        <type>account_id_type</type>
        <definition>account_id_type graphene::protocol::transfer_to_blind_operation::from</definition>
        <argsstring></argsstring>
        <name>from</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/confidential.hpp" line="160" column="26" bodyfile="libraries/protocol/include/graphene/protocol/confidential.hpp" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1transfer__to__blind__operation_1acd7ad38e111c7068fd6131223f06561b" prot="public" static="no" mutable="no">
        <type>blind_factor_type</type>
        <definition>blind_factor_type graphene::protocol::transfer_to_blind_operation::blinding_factor</definition>
        <argsstring></argsstring>
        <name>blinding_factor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/confidential.hpp" line="161" column="26" bodyfile="libraries/protocol/include/graphene/protocol/confidential.hpp" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1transfer__to__blind__operation_1a091a7afe96691ef022298cb602d32f86" prot="public" static="no" mutable="no">
        <type>vector&lt; <ref refid="structgraphene_1_1protocol_1_1blind__output" kindref="compound">blind_output</ref> &gt;</type>
        <definition>vector&lt;blind_output&gt; graphene::protocol::transfer_to_blind_operation::outputs</definition>
        <argsstring></argsstring>
        <name>outputs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/confidential.hpp" line="162" column="12" bodyfile="libraries/protocol/include/graphene/protocol/confidential.hpp" bodystart="162" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1transfer__to__blind__operation_1a1a5f2f5fe0d115b7ccb146eaab378329" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>account_id_type</type>
        <definition>account_id_type graphene::protocol::transfer_to_blind_operation::fee_payer</definition>
        <argsstring>() const</argsstring>
        <name>fee_payer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/confidential.hpp" line="164" column="20" bodyfile="libraries/protocol/include/graphene/protocol/confidential.hpp" bodystart="164" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1transfer__to__blind__operation_1af84a948a33771543870c6804ebd95888" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void graphene::protocol::transfer_to_blind_operation::validate</definition>
        <argsstring>() const</argsstring>
        <name>validate</name>
        <reimplements refid="structgraphene_1_1protocol_1_1base__operation_1a23d617a6fa0921d3f5b51dd5167e7a29">validate</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>require all outputs to be sorted prevents duplicates AND prevents implementations from accidentally leaking information by how they arrange commitments.</para>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/confidential.hpp" line="165" column="20" bodyfile="libraries/protocol/confidential.cpp" bodystart="32" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1transfer__to__blind__operation_1a9c020c1b14252a25e57b68f1ab12ca0c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegraphene_1_1protocol_1a69b2104c1c11eed2d17bd29b86713347" kindref="member">share_type</ref></type>
        <definition>share_type graphene::protocol::transfer_to_blind_operation::calculate_fee</definition>
        <argsstring>(const fee_params_t &amp;) const</argsstring>
        <name>calculate_fee</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1transfer__to__blind__operation_1_1fee__params__t" kindref="compound">fee_params_t</ref> &amp;</type>
          <defname>k</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/confidential.hpp" line="166" column="20" bodyfile="libraries/protocol/confidential.cpp" bodystart="64" bodyend="67"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Converts public account balance to a blinded or stealth balance. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>graphene::protocol::base_operation</label>
        <link refid="structgraphene_1_1protocol_1_1base__operation"/>
      </node>
      <node id="1">
        <label>graphene::protocol::transfer_to_blind_operation</label>
        <link refid="structgraphene_1_1protocol_1_1transfer__to__blind__operation"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7">
        <label>vector&lt; graphene::protocol::blind_output &gt;</label>
      </node>
      <node id="5">
        <label>fc::safe_base&lt; int64_t &gt;</label>
        <link refid="structfc_1_1safe__base"/>
      </node>
      <node id="6">
        <label>account_id_type</label>
      </node>
      <node id="4">
        <label>fc::safe&lt; int64_t &gt;</label>
        <link refid="structfc_1_1safe"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>graphene::protocol::base_operation</label>
        <link refid="structgraphene_1_1protocol_1_1base__operation"/>
      </node>
      <node id="3">
        <label>graphene::protocol::asset</label>
        <link refid="structgraphene_1_1protocol_1_1asset"/>
        <childnode refid="4" relation="usage">
          <edgelabel>amount</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>graphene::protocol::transfer_to_blind_operation</label>
        <link refid="structgraphene_1_1protocol_1_1transfer__to__blind__operation"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>fee</edgelabel>
          <edgelabel>amount</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>from</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>outputs</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="libraries/protocol/include/graphene/protocol/confidential.hpp" line="151" column="1" bodyfile="libraries/protocol/include/graphene/protocol/confidential.hpp" bodystart="150" bodyend="167"/>
    <listofallmembers>
      <member refid="structgraphene_1_1protocol_1_1transfer__to__blind__operation_1a54115eb0edf78236e878a1173c5d2213" prot="public" virt="non-virtual"><scope>graphene::protocol::transfer_to_blind_operation</scope><name>amount</name></member>
      <member refid="structgraphene_1_1protocol_1_1transfer__to__blind__operation_1acd7ad38e111c7068fd6131223f06561b" prot="public" virt="non-virtual"><scope>graphene::protocol::transfer_to_blind_operation</scope><name>blinding_factor</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1aaccb0fa71ee529cf62324baaa99988fe" prot="public" virt="non-virtual"><scope>graphene::protocol::transfer_to_blind_operation</scope><name>calculate_data_fee</name></member>
      <member refid="structgraphene_1_1protocol_1_1transfer__to__blind__operation_1a9c020c1b14252a25e57b68f1ab12ca0c" prot="public" virt="non-virtual"><scope>graphene::protocol::transfer_to_blind_operation</scope><name>calculate_fee</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1a0be44badcee9a648413eb906dac1d3b3" prot="public" virt="non-virtual" ambiguityscope="graphene::protocol::base_operation::"><scope>graphene::protocol::transfer_to_blind_operation</scope><name>calculate_fee</name></member>
      <member refid="structgraphene_1_1protocol_1_1transfer__to__blind__operation_1a97378b8efbf98fd04cb6728f2b268cbd" prot="public" virt="non-virtual"><scope>graphene::protocol::transfer_to_blind_operation</scope><name>fee</name></member>
      <member refid="structgraphene_1_1protocol_1_1transfer__to__blind__operation_1a1a5f2f5fe0d115b7ccb146eaab378329" prot="public" virt="non-virtual"><scope>graphene::protocol::transfer_to_blind_operation</scope><name>fee_payer</name></member>
      <member refid="structgraphene_1_1protocol_1_1transfer__to__blind__operation_1aac138ad0557c30453136bae37c8080cd" prot="public" virt="non-virtual"><scope>graphene::protocol::transfer_to_blind_operation</scope><name>from</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1a89ed7c6e7da93cd99bb41bc8d7e2627b" prot="public" virt="virtual"><scope>graphene::protocol::transfer_to_blind_operation</scope><name>get_required_active_authorities</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1aabc48ce97877c67ff560b94284a7c0bb" prot="public" virt="virtual"><scope>graphene::protocol::transfer_to_blind_operation</scope><name>get_required_authorities</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1a3251978e7bd0bb2f2fa23bcea5dee95c" prot="public" virt="virtual"><scope>graphene::protocol::transfer_to_blind_operation</scope><name>get_required_owner_authorities</name></member>
      <member refid="structgraphene_1_1protocol_1_1transfer__to__blind__operation_1a091a7afe96691ef022298cb602d32f86" prot="public" virt="non-virtual"><scope>graphene::protocol::transfer_to_blind_operation</scope><name>outputs</name></member>
      <member refid="structgraphene_1_1protocol_1_1transfer__to__blind__operation_1af84a948a33771543870c6804ebd95888" prot="public" virt="virtual"><scope>graphene::protocol::transfer_to_blind_operation</scope><name>validate</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1a485f3d3b963ff4c081af85945cf27774" prot="public" virt="non-virtual"><scope>graphene::protocol::transfer_to_blind_operation</scope><name>validate_parallel</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1a04ac6688e2df1d511514e4fc1983b828" prot="public" virt="virtual"><scope>graphene::protocol::transfer_to_blind_operation</scope><name>~base_operation</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
