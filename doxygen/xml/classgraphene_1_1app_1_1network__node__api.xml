<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classgraphene_1_1app_1_1network__node__api" kind="class" language="C++" prot="public">
    <compoundname>graphene::app::network_node_api</compoundname>
    <includes refid="app_2include_2graphene_2app_2api_8hpp" local="no">api.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classgraphene_1_1app_1_1network__node__api_1aad4d3f8120878e826275d7e80ea84958" prot="private" static="no" mutable="no">
        <type><ref refid="classgraphene_1_1app_1_1application" kindref="compound">application</ref> &amp;</type>
        <definition>application&amp; graphene::app::network_node_api::_app</definition>
        <argsstring></argsstring>
        <name>_app</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/api.hpp" line="415" column="1" bodyfile="libraries/app/include/graphene/app/api.hpp" bodystart="415" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgraphene_1_1app_1_1network__node__api_1a18a99d65a8cde46d13c1efd24c229c9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::app::network_node_api::network_node_api</definition>
        <argsstring>(application &amp;a)</argsstring>
        <name>network_node_api</name>
        <param>
          <type><ref refid="classgraphene_1_1app_1_1application" kindref="compound">application</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/api.hpp" line="378" column="1" bodyfile="libraries/app/api.cpp" bodystart="215" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1network__node__api_1aef815bd4b4dab0023e6fc4929d780248" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1variant__object" kindref="compound">fc::variant_object</ref></type>
        <definition>fc::variant_object graphene::app::network_node_api::get_info</definition>
        <argsstring>() const </argsstring>
        <name>get_info</name>
        <briefdescription>
<para>Return general network information, such as p2p port. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/api.hpp" line="383" column="1" bodyfile="libraries/app/api.cpp" bodystart="219" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1network__node__api_1acb792c2b97e1775236b5001a94ddbaa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::network_node_api::add_node</definition>
        <argsstring>(const fc::ip::endpoint &amp;ep)</argsstring>
        <name>add_node</name>
        <param>
          <type>const <ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">fc::ip::endpoint</ref> &amp;</type>
          <declname>ep</declname>
        </param>
        <briefdescription>
<para>add_node Connect to a new peer </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ep</parametername>
</parameternamelist>
<parameterdescription>
<para>The IP/Port of the peer to connect to </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/api.hpp" line="389" column="1" bodyfile="libraries/app/api.cpp" bodystart="227" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1network__node__api_1a3441fb8762c1b26a89af97838cee7aca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structgraphene_1_1net_1_1peer__status" kindref="compound">net::peer_status</ref> &gt;</type>
        <definition>std::vector&lt; net::peer_status &gt; graphene::app::network_node_api::get_connected_peers</definition>
        <argsstring>() const </argsstring>
        <name>get_connected_peers</name>
        <briefdescription>
<para>Get status of all current connections to peers. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/api.hpp" line="394" column="1" bodyfile="libraries/app/api.cpp" bodystart="233" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1network__node__api_1a0574f6802ee41d7419d2911cdb7a4972" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1variant__object" kindref="compound">fc::variant_object</ref></type>
        <definition>fc::variant_object graphene::app::network_node_api::get_advanced_node_parameters</definition>
        <argsstring>() const </argsstring>
        <name>get_advanced_node_parameters</name>
        <briefdescription>
<para>Get advanced node parameters, such as desired and max number of connections. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/api.hpp" line="400" column="1" bodyfile="libraries/app/api.cpp" bodystart="247" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1network__node__api_1a59eb5a747b02c2b7c7f08462338a6805" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::network_node_api::set_advanced_node_parameters</definition>
        <argsstring>(const fc::variant_object &amp;params)</argsstring>
        <name>set_advanced_node_parameters</name>
        <param>
          <type>const <ref refid="classfc_1_1variant__object" kindref="compound">fc::variant_object</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Set advanced node parameters, such as desired and max number of connections. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>a JSON object containing the name/value pairs for the parameters to set </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/api.hpp" line="407" column="1" bodyfile="libraries/app/api.cpp" bodystart="253" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1network__node__api_1ae31bd43a30221f6a4bca9d20d93ee195" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structgraphene_1_1net_1_1potential__peer__record" kindref="compound">net::potential_peer_record</ref> &gt;</type>
        <definition>std::vector&lt; net::potential_peer_record &gt; graphene::app::network_node_api::get_potential_peers</definition>
        <argsstring>() const </argsstring>
        <name>get_potential_peers</name>
        <briefdescription>
<para>Return list of potential peers. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/api.hpp" line="412" column="1" bodyfile="libraries/app/api.cpp" bodystart="240" bodyend="245"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classgraphene_1_1app_1_1network__node__api" kindref="compound">network_node_api</ref> class allows maintenance of p2p connections. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/app/include/graphene/app/api.hpp" line="376" column="1" bodyfile="libraries/app/include/graphene/app/api.hpp" bodystart="375" bodyend="416"/>
    <listofallmembers>
      <member refid="classgraphene_1_1app_1_1network__node__api_1aad4d3f8120878e826275d7e80ea84958" prot="private" virt="non-virtual"><scope>graphene::app::network_node_api</scope><name>_app</name></member>
      <member refid="classgraphene_1_1app_1_1network__node__api_1acb792c2b97e1775236b5001a94ddbaa0" prot="public" virt="non-virtual"><scope>graphene::app::network_node_api</scope><name>add_node</name></member>
      <member refid="classgraphene_1_1app_1_1network__node__api_1a0574f6802ee41d7419d2911cdb7a4972" prot="public" virt="non-virtual"><scope>graphene::app::network_node_api</scope><name>get_advanced_node_parameters</name></member>
      <member refid="classgraphene_1_1app_1_1network__node__api_1a3441fb8762c1b26a89af97838cee7aca" prot="public" virt="non-virtual"><scope>graphene::app::network_node_api</scope><name>get_connected_peers</name></member>
      <member refid="classgraphene_1_1app_1_1network__node__api_1aef815bd4b4dab0023e6fc4929d780248" prot="public" virt="non-virtual"><scope>graphene::app::network_node_api</scope><name>get_info</name></member>
      <member refid="classgraphene_1_1app_1_1network__node__api_1ae31bd43a30221f6a4bca9d20d93ee195" prot="public" virt="non-virtual"><scope>graphene::app::network_node_api</scope><name>get_potential_peers</name></member>
      <member refid="classgraphene_1_1app_1_1network__node__api_1a18a99d65a8cde46d13c1efd24c229c9f" prot="public" virt="non-virtual"><scope>graphene::app::network_node_api</scope><name>network_node_api</name></member>
      <member refid="classgraphene_1_1app_1_1network__node__api_1a59eb5a747b02c2b7c7f08462338a6805" prot="public" virt="non-virtual"><scope>graphene::app::network_node_api</scope><name>set_advanced_node_parameters</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
