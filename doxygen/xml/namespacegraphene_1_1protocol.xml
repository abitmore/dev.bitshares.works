<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacegraphene_1_1protocol" kind="namespace" language="C++">
    <compoundname>graphene::protocol</compoundname>
    <innerclass refid="structgraphene_1_1protocol_1_1account__create__operation" prot="public">graphene::protocol::account_create_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1account__name__eq__lit__predicate" prot="public">graphene::protocol::account_name_eq_lit_predicate</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1account__options" prot="public">graphene::protocol::account_options</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1account__transfer__operation" prot="public">graphene::protocol::account_transfer_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1account__update__operation" prot="public">graphene::protocol::account_update_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1account__upgrade__operation" prot="public">graphene::protocol::account_upgrade_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1account__whitelist__operation" prot="public">graphene::protocol::account_whitelist_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1adder" prot="public">graphene::protocol::adder</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1additional__asset__options" prot="public">graphene::protocol::additional_asset_options</innerclass>
    <innerclass refid="classgraphene_1_1protocol_1_1address" prot="public">graphene::protocol::address</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1assert__operation" prot="public">graphene::protocol::assert_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1asset" prot="public">graphene::protocol::asset</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1asset__claim__fees__operation" prot="public">graphene::protocol::asset_claim_fees_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1asset__claim__pool__operation" prot="public">graphene::protocol::asset_claim_pool_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1asset__create__operation" prot="public">graphene::protocol::asset_create_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1asset__fund__fee__pool__operation" prot="public">graphene::protocol::asset_fund_fee_pool_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1asset__global__settle__operation" prot="public">graphene::protocol::asset_global_settle_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1asset__issue__operation" prot="public">graphene::protocol::asset_issue_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1asset__options" prot="public">graphene::protocol::asset_options</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1asset__publish__feed__operation" prot="public">graphene::protocol::asset_publish_feed_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1asset__reserve__operation" prot="public">graphene::protocol::asset_reserve_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1asset__settle__cancel__operation" prot="public">graphene::protocol::asset_settle_cancel_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1asset__settle__operation" prot="public">graphene::protocol::asset_settle_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1asset__symbol__eq__lit__predicate" prot="public">graphene::protocol::asset_symbol_eq_lit_predicate</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1asset__update__bitasset__operation" prot="public">graphene::protocol::asset_update_bitasset_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1asset__update__feed__producers__operation" prot="public">graphene::protocol::asset_update_feed_producers_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1asset__update__issuer__operation" prot="public">graphene::protocol::asset_update_issuer_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1asset__update__operation" prot="public">graphene::protocol::asset_update_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1attribute__assertion" prot="public">graphene::protocol::attribute_assertion</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1attribute__assertion_3_01extension_3_01_extension_01_4_01_4" prot="public">graphene::protocol::attribute_assertion&lt; extension&lt; Extension &gt; &gt;</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1attribute__assertion_3_01fc_1_1optional_3_01_field_01_4_01_4" prot="public">graphene::protocol::attribute_assertion&lt; fc::optional&lt; Field &gt; &gt;</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1authority" prot="public">graphene::protocol::authority</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1balance__claim__operation" prot="public">graphene::protocol::balance_claim_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1base__operation" prot="public">graphene::protocol::base_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1bid__collateral__operation" prot="public">graphene::protocol::bid_collateral_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1bitasset__options" prot="public">graphene::protocol::bitasset_options</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1blind__input" prot="public">graphene::protocol::blind_input</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1blind__memo" prot="public">graphene::protocol::blind_memo</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1blind__output" prot="public">graphene::protocol::blind_output</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1blind__transfer__operation" prot="public">graphene::protocol::blind_transfer_operation</innerclass>
    <innerclass refid="classgraphene_1_1protocol_1_1block__header" prot="public">graphene::protocol::block_header</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1block__id__predicate" prot="public">graphene::protocol::block_id_predicate</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1burn__worker__initializer" prot="public">graphene::protocol::burn_worker_initializer</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1buyback__account__options" prot="public">graphene::protocol::buyback_account_options</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1calc__fee__visitor" prot="public">graphene::protocol::calc_fee_visitor</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1call__order__update__operation" prot="public">graphene::protocol::call_order_update_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1cdd__vesting__policy__initializer" prot="public">graphene::protocol::cdd_vesting_policy_initializer</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1chain__parameters" prot="public">graphene::protocol::chain_parameters</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1committee__member__create__operation" prot="public">graphene::protocol::committee_member_create_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1committee__member__update__global__parameters__operation" prot="public">graphene::protocol::committee_member_update_global_parameters_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1committee__member__update__operation" prot="public">graphene::protocol::committee_member_update_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1credit__deal__expired__operation" prot="public">graphene::protocol::credit_deal_expired_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1credit__deal__repay__operation" prot="public">graphene::protocol::credit_deal_repay_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1credit__offer__accept__operation" prot="public">graphene::protocol::credit_offer_accept_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1credit__offer__create__operation" prot="public">graphene::protocol::credit_offer_create_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1credit__offer__delete__operation" prot="public">graphene::protocol::credit_offer_delete_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1credit__offer__update__operation" prot="public">graphene::protocol::credit_offer_update_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1custom__authority__create__operation" prot="public">graphene::protocol::custom_authority_create_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1custom__authority__delete__operation" prot="public">graphene::protocol::custom_authority_delete_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1custom__authority__options__type" prot="public">graphene::protocol::custom_authority_options_type</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1custom__authority__update__operation" prot="public">graphene::protocol::custom_authority_update_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1custom__operation" prot="public">graphene::protocol::custom_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1execute__bid__operation" prot="public">graphene::protocol::execute_bid_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1extendable__operation__result__dtl" prot="public">graphene::protocol::extendable_operation_result_dtl</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1extension" prot="public">graphene::protocol::extension</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1fba__distribute__operation" prot="public">graphene::protocol::fba_distribute_operation</innerclass>
    <innerclass refid="classgraphene_1_1protocol_1_1fee__helper" prot="public">graphene::protocol::fee_helper</innerclass>
    <innerclass refid="classgraphene_1_1protocol_1_1fee__helper_3_01account__create__operation_01_4" prot="public">graphene::protocol::fee_helper&lt; account_create_operation &gt;</innerclass>
    <innerclass refid="classgraphene_1_1protocol_1_1fee__helper_3_01asset__claim__pool__operation_01_4" prot="public">graphene::protocol::fee_helper&lt; asset_claim_pool_operation &gt;</innerclass>
    <innerclass refid="classgraphene_1_1protocol_1_1fee__helper_3_01asset__update__issuer__operation_01_4" prot="public">graphene::protocol::fee_helper&lt; asset_update_issuer_operation &gt;</innerclass>
    <innerclass refid="classgraphene_1_1protocol_1_1fee__helper_3_01bid__collateral__operation_01_4" prot="public">graphene::protocol::fee_helper&lt; bid_collateral_operation &gt;</innerclass>
    <innerclass refid="classgraphene_1_1protocol_1_1fee__helper_3_01htlc__create__operation_01_4" prot="public">graphene::protocol::fee_helper&lt; htlc_create_operation &gt;</innerclass>
    <innerclass refid="classgraphene_1_1protocol_1_1fee__helper_3_01htlc__extend__operation_01_4" prot="public">graphene::protocol::fee_helper&lt; htlc_extend_operation &gt;</innerclass>
    <innerclass refid="classgraphene_1_1protocol_1_1fee__helper_3_01htlc__redeem__operation_01_4" prot="public">graphene::protocol::fee_helper&lt; htlc_redeem_operation &gt;</innerclass>
    <innerclass refid="classgraphene_1_1protocol_1_1fee__helper_3_01ticket__create__operation_01_4" prot="public">graphene::protocol::fee_helper&lt; ticket_create_operation &gt;</innerclass>
    <innerclass refid="classgraphene_1_1protocol_1_1fee__helper_3_01ticket__update__operation_01_4" prot="public">graphene::protocol::fee_helper&lt; ticket_update_operation &gt;</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1fee__schedule" prot="public">graphene::protocol::fee_schedule</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1fill__order__operation" prot="public">graphene::protocol::fill_order_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1generic__exchange__operation__result" prot="public">graphene::protocol::generic_exchange_operation_result</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1generic__operation__result" prot="public">graphene::protocol::generic_operation_result</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1graphene__extension__pack__count__visitor" prot="public">graphene::protocol::graphene_extension_pack_count_visitor</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1graphene__extension__pack__read__visitor" prot="public">graphene::protocol::graphene_extension_pack_read_visitor</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1graphene__extension__unpack__visitor" prot="public">graphene::protocol::graphene_extension_unpack_visitor</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1htlc__create__operation" prot="public">graphene::protocol::htlc_create_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1htlc__extend__operation" prot="public">graphene::protocol::htlc_extend_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1htlc__options" prot="public">graphene::protocol::htlc_options</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1htlc__redeem__operation" prot="public">graphene::protocol::htlc_redeem_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1htlc__redeemed__operation" prot="public">graphene::protocol::htlc_redeemed_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1htlc__refund__operation" prot="public">graphene::protocol::htlc_refund_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1instant__vesting__policy__initializer" prot="public">graphene::protocol::instant_vesting_policy_initializer</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1is__container__impl" prot="public">graphene::protocol::is_container_impl</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1is__container__impl_3_01_t_00_01make__void_3_01typename_01_t_1_1va60cb1d296d473b26b4b0dc5ef237d5fe" prot="public">graphene::protocol::is_container_impl&lt; T, make_void&lt; typename T::value_type, decltype(declval&lt; T &gt;().size())&gt; &gt;</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1is__flat__set__impl" prot="public">graphene::protocol::is_flat_set_impl</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1is__flat__set__impl_3_01flat__set_3_01_t_01_4_01_4" prot="public">graphene::protocol::is_flat_set_impl&lt; flat_set&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1limit__order__cancel__operation" prot="public">graphene::protocol::limit_order_cancel_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1limit__order__create__operation" prot="public">graphene::protocol::limit_order_create_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1linear__vesting__policy__initializer" prot="public">graphene::protocol::linear_vesting_policy_initializer</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1liquidity__pool__create__operation" prot="public">graphene::protocol::liquidity_pool_create_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1liquidity__pool__delete__operation" prot="public">graphene::protocol::liquidity_pool_delete_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1liquidity__pool__deposit__operation" prot="public">graphene::protocol::liquidity_pool_deposit_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1liquidity__pool__exchange__operation" prot="public">graphene::protocol::liquidity_pool_exchange_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1liquidity__pool__withdraw__operation" prot="public">graphene::protocol::liquidity_pool_withdraw_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1make__flat__set" prot="public">graphene::protocol::make_flat_set</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1memo__data" prot="public">graphene::protocol::memo_data</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1memo__message" prot="public">graphene::protocol::memo_message</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1no__special__authority" prot="public">graphene::protocol::no_special_authority</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1op__wrapper" prot="public">graphene::protocol::op_wrapper</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1operation__get__required__auth" prot="public">graphene::protocol::operation_get_required_auth</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1operation__validator" prot="public">graphene::protocol::operation_validator</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1override__transfer__operation" prot="public">graphene::protocol::override_transfer_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1p10" prot="public">graphene::protocol::p10</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1p10_3_010_01_4" prot="public">graphene::protocol::p10&lt; 0 &gt;</innerclass>
    <innerclass refid="classgraphene_1_1protocol_1_1precomputable__transaction" prot="public">graphene::protocol::precomputable_transaction</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1predicate__compare" prot="public">graphene::protocol::predicate_compare</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1predicate__compare_3_01fc_1_1optional_3_01_field_01_4_00_01_argument_00_01void_01_4" prot="public">graphene::protocol::predicate_compare&lt; fc::optional&lt; Field &gt;, Argument, void &gt;</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1predicate__compare_3_01_field_00_01_argument_00_01std_1_1enable__i8d03ea053195ac90a5f69a19bd40a862" prot="public">graphene::protocol::predicate_compare&lt; Field, Argument, std::enable_if_t&lt; is_integral&lt; Field &gt; &amp;&amp;is_integral&lt; Argument &gt; &amp;&amp;!std::is_same&lt; Field, Argument &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1predicate__compare_3_01_field_00_01_argument_00_01std_1_1enable__i68d99afe72d0ba3774a2b26dc282f15d" prot="public">graphene::protocol::predicate_compare&lt; Field, Argument, std::enable_if_t&lt; std::is_same&lt; Field, Argument &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1predicate__eq" prot="public">graphene::protocol::predicate_eq</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1predicate__eq_3_01fc_1_1optional_3_01_field_01_4_00_01_argument_002c5057ac4cf8e2f05c3a471740898ae5" prot="public">graphene::protocol::predicate_eq&lt; fc::optional&lt; Field &gt;, Argument, std::enable_if_t&lt; comparable_types&lt; Field, Argument &gt; &gt; &gt;</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1predicate__eq_3_01fc_1_1optional_3_01_field_01_4_00_01void__t_00_01void_01_4" prot="public">graphene::protocol::predicate_eq&lt; fc::optional&lt; Field &gt;, void_t, void &gt;</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1predicate__eq_3_01_field_00_01_argument_00_01std_1_1enable__if__t_3b47c835bc14818414687bddd3197a78" prot="public">graphene::protocol::predicate_eq&lt; Field, Argument, std::enable_if_t&lt; is_container&lt; Field &gt; &amp;&amp;is_integral&lt; Argument &gt; &gt; &gt;</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1predicate__eq_3_01_field_00_01_argument_00_01std_1_1enable__if__t_0abe1dba19f90c6aa48d4261d6cf13f4" prot="public">graphene::protocol::predicate_eq&lt; Field, Argument, std::enable_if_t&lt; is_integral&lt; Field &gt; &amp;&amp;is_integral&lt; Argument &gt; &amp;&amp;!std::is_same&lt; Field, Argument &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1predicate__eq_3_01_field_00_01_argument_00_01std_1_1enable__if__t_bfdd7f9ff585212942832ec2cc410d8f" prot="public">graphene::protocol::predicate_eq&lt; Field, Argument, std::enable_if_t&lt; std::is_same&lt; Field, Argument &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1predicate__ge" prot="public">graphene::protocol::predicate_ge</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1predicate__gt" prot="public">graphene::protocol::predicate_gt</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1predicate__has__all" prot="public">graphene::protocol::predicate_has_all</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1predicate__has__all_3_01fc_1_1optional_3_01_optional_type_01_4_00_01_argument_00_01void_01_4" prot="public">graphene::protocol::predicate_has_all&lt; fc::optional&lt; OptionalType &gt;, Argument, void &gt;</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1predicate__has__all_3_01_field_container_00_01flat__set_3_01_argum165d8797b8a2a4e7c316888de0804a4e" prot="public">graphene::protocol::predicate_has_all&lt; FieldContainer, flat_set&lt; ArgumentElement &gt;, std::enable_if_t&lt; is_container&lt; FieldContainer &gt; &amp;&amp;!is_flat_set&lt; FieldContainer &gt; &amp;&amp;comparable_types&lt; typename FieldContainer::value_type, ArgumentElement &gt; &gt; &gt;</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1predicate__has__all_3_01flat__set_3_01_field_element_01_4_00_01fla9b76da282283edfa45d51600e031495b" prot="public">graphene::protocol::predicate_has_all&lt; flat_set&lt; FieldElement &gt;, flat_set&lt; ArgumentElement &gt;, std::enable_if_t&lt; comparable_types&lt; FieldElement, ArgumentElement &gt; &gt; &gt;</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1predicate__has__none" prot="public">graphene::protocol::predicate_has_none</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1predicate__has__none_3_01fc_1_1optional_3_01_optional_type_01_4_00_01_argument_00_01void_01_4" prot="public">graphene::protocol::predicate_has_none&lt; fc::optional&lt; OptionalType &gt;, Argument, void &gt;</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1predicate__has__none_3_01_field_container_00_01flat__set_3_01_argu5322df7a724d52e5e2d3c6503b038fc4" prot="public">graphene::protocol::predicate_has_none&lt; FieldContainer, flat_set&lt; ArgumentElement &gt;, std::enable_if_t&lt; is_container&lt; FieldContainer &gt; &amp;&amp;!is_flat_set&lt; FieldContainer &gt; &amp;&amp;comparable_types&lt; typename FieldContainer::value_type, ArgumentElement &gt; &gt; &gt;</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1predicate__has__none_3_01flat__set_3_01_field_element_01_4_00_01fl6200ee677a64a5c204d6149dbf6d7ac5" prot="public">graphene::protocol::predicate_has_none&lt; flat_set&lt; FieldElement &gt;, flat_set&lt; ArgumentElement &gt;, std::enable_if_t&lt; comparable_types&lt; FieldElement, ArgumentElement &gt; &gt; &gt;</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1predicate__in" prot="public">graphene::protocol::predicate_in</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1predicate__in_3_01_container_00_01flat__set_3_01_element_01_4_00_058c4f9dcba47161f45ce0c302497e4aa" prot="public">graphene::protocol::predicate_in&lt; Container, flat_set&lt; Element &gt;, std::enable_if_t&lt; is_container&lt; Container &gt; &amp;&amp;comparable_types&lt; typename Container::value_type, Element &gt; &gt; &gt;</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1predicate__in_3_01fc_1_1optional_3_01_field_01_4_00_01flat__set_3_b29856ee571441aa4bcdf5cb55a3adc6" prot="public">graphene::protocol::predicate_in&lt; fc::optional&lt; Field &gt;, flat_set&lt; Element &gt;, std::enable_if_t&lt; comparable_types&lt; Field, Element &gt; &gt; &gt;</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1predicate__in_3_01fc_1_1safe_3_01_field_01_4_00_01flat__set_3_01_efeed697973b1adce17f8c2752859fc33" prot="public">graphene::protocol::predicate_in&lt; fc::safe&lt; Field &gt;, flat_set&lt; Element &gt;, std::enable_if_t&lt; comparable_types&lt; Field, Element &gt; &gt; &gt;</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1predicate__in_3_01_field_00_01flat__set_3_01_element_01_4_00_01std008b254b7094a3bab250e8cb30766bb9" prot="public">graphene::protocol::predicate_in&lt; Field, flat_set&lt; Element &gt;, std::enable_if_t&lt; comparable_types&lt; Field, Element &gt; &amp;&amp;!is_safe&lt; Field &gt; &gt; &gt;</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1predicate__invalid" prot="public">graphene::protocol::predicate_invalid</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1predicate__le" prot="public">graphene::protocol::predicate_le</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1predicate__lt" prot="public">graphene::protocol::predicate_lt</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1predicate__ne" prot="public">graphene::protocol::predicate_ne</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1predicate__not__in" prot="public">graphene::protocol::predicate_not_in</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1predicate__not__in_3_01_container_00_01flat__set_3_01_element_01_4fe72a17f8d3fa4c32b128949df332be9" prot="public">graphene::protocol::predicate_not_in&lt; Container, flat_set&lt; Element &gt;, std::enable_if_t&lt; is_container&lt; Container &gt; &amp;&amp;comparable_types&lt; typename Container::value_type, Element &gt; &gt; &gt;</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1predicate__result" prot="public">graphene::protocol::predicate_result</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1predicate__validator" prot="public">graphene::protocol::predicate_validator</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1price" prot="public">graphene::protocol::price</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1price__feed" prot="public">graphene::protocol::price_feed</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1processed__transaction" prot="public">graphene::protocol::processed_transaction</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1proposal__create__operation" prot="public">graphene::protocol::proposal_create_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1proposal__delete__operation" prot="public">graphene::protocol::proposal_delete_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1proposal__update__operation" prot="public">graphene::protocol::proposal_update_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1pts__address" prot="public">graphene::protocol::pts_address</innerclass>
    <innerclass refid="classgraphene_1_1protocol_1_1pubkey__comparator" prot="public">graphene::protocol::pubkey_comparator</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1public__key__type" prot="public">graphene::protocol::public_key_type</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1refund__worker__initializer" prot="public">graphene::protocol::refund_worker_initializer</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1restriction" prot="public">graphene::protocol::restriction</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1samet__fund__borrow__operation" prot="public">graphene::protocol::samet_fund_borrow_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1samet__fund__create__operation" prot="public">graphene::protocol::samet_fund_create_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1samet__fund__delete__operation" prot="public">graphene::protocol::samet_fund_delete_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1samet__fund__repay__operation" prot="public">graphene::protocol::samet_fund_repay_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1samet__fund__update__operation" prot="public">graphene::protocol::samet_fund_update_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1set__fee__visitor" prot="public">graphene::protocol::set_fee_visitor</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1sign__state" prot="public">graphene::protocol::sign_state</innerclass>
    <innerclass refid="classgraphene_1_1protocol_1_1signed__block" prot="public">graphene::protocol::signed_block</innerclass>
    <innerclass refid="classgraphene_1_1protocol_1_1signed__block__header" prot="public">graphene::protocol::signed_block_header</innerclass>
    <innerclass refid="classgraphene_1_1protocol_1_1signed__transaction" prot="public">graphene::protocol::signed_transaction</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1special__authority__validate__visitor" prot="public">graphene::protocol::special_authority_validate_visitor</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1stealth__confirmation" prot="public">graphene::protocol::stealth_confirmation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1ticket__create__operation" prot="public">graphene::protocol::ticket_create_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1ticket__update__operation" prot="public">graphene::protocol::ticket_update_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1top__holders__special__authority" prot="public">graphene::protocol::top_holders_special_authority</innerclass>
    <innerclass refid="classgraphene_1_1protocol_1_1transaction" prot="public">graphene::protocol::transaction</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1transfer__from__blind__operation" prot="public">graphene::protocol::transfer_from_blind_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1transfer__operation" prot="public">graphene::protocol::transfer_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1transfer__to__blind__operation" prot="public">graphene::protocol::transfer_to_blind_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1transform__to__fee__parameters" prot="public">graphene::protocol::transform_to_fee_parameters</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1transform__to__fee__parameters_3_01fc_1_1static__variant_3_01_t_8_8_8_01_4_01_4" prot="public">graphene::protocol::transform_to_fee_parameters&lt; fc::static_variant&lt; T... &gt; &gt;</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1variant__assertion" prot="public">graphene::protocol::variant_assertion</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1variant__assertion_3_01fc_1_1optional_3_01static__variant_3_01_types_8_8_8_01_4_01_4_01_4" prot="public">graphene::protocol::variant_assertion&lt; fc::optional&lt; static_variant&lt; Types... &gt; &gt; &gt;</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1variant__assertion_3_01static__variant_3_01_types_8_8_8_01_4_01_4" prot="public">graphene::protocol::variant_assertion&lt; static_variant&lt; Types... &gt; &gt;</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1vesting__balance__create__operation" prot="public">graphene::protocol::vesting_balance_create_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1vesting__balance__withdraw__operation" prot="public">graphene::protocol::vesting_balance_withdraw_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1vesting__balance__worker__initializer" prot="public">graphene::protocol::vesting_balance_worker_initializer</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1void__result" prot="public">graphene::protocol::void_result</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1void__t" prot="public">graphene::protocol::void_t</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1vote__id__type" prot="public">graphene::protocol::vote_id_type</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1withdraw__permission__claim__operation" prot="public">graphene::protocol::withdraw_permission_claim_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1withdraw__permission__create__operation" prot="public">graphene::protocol::withdraw_permission_create_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1withdraw__permission__delete__operation" prot="public">graphene::protocol::withdraw_permission_delete_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1withdraw__permission__update__operation" prot="public">graphene::protocol::withdraw_permission_update_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1witness__create__operation" prot="public">graphene::protocol::witness_create_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1witness__update__operation" prot="public">graphene::protocol::witness_update_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1worker__create__operation" prot="public">graphene::protocol::worker_create_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1zero__fee__visitor" prot="public">graphene::protocol::zero_fee_visitor</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacegraphene_1_1protocol_1af90f1034c9ac27d8290e0fa8120c8269" prot="public" static="no">
        <name>ticket_type</name>
        <enumvalue id="namespacegraphene_1_1protocol_1af90f1034c9ac27d8290e0fa8120c8269af07a1ddd5123b39916b093bb50945eeb" prot="public">
          <name>liquid</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1protocol_1af90f1034c9ac27d8290e0fa8120c8269a097feba5872e0d5af0227cf0f9ff240c" prot="public">
          <name>lock_180_days</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1protocol_1af90f1034c9ac27d8290e0fa8120c8269afb9c87921c74244a0607c22c7d2cf156" prot="public">
          <name>lock_360_days</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1protocol_1af90f1034c9ac27d8290e0fa8120c8269ab216f63a6a6eae9ef9be71b0a02b0b90" prot="public">
          <name>lock_720_days</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1protocol_1af90f1034c9ac27d8290e0fa8120c8269a1ed55cf80d6a9f950f0d3a995b898ed7" prot="public">
          <name>lock_forever</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1protocol_1af90f1034c9ac27d8290e0fa8120c8269a1ba07d5a49310b9e4ca687fd27ae813e" prot="public">
          <name>TICKET_TYPE_COUNT</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Type of a ticket. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/ticket.hpp" line="34" column="1" bodyfile="libraries/protocol/include/graphene/protocol/ticket.hpp" bodystart="33" bodyend="41"/>
      </memberdef>
      <memberdef kind="enum" id="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7" prot="public" static="no">
        <name>asset_issuer_permission_flags</name>
        <enumvalue id="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7ac0be53c416c0f365980a14e5d6a83a60" prot="public">
          <name>charge_market_fee</name>
          <initializer>= 0x01</initializer>
          <briefdescription>
<para>market trades in this asset may be charged </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a925268cf7f7e511d2858eee66ef82cbf" prot="public">
          <name>white_list</name>
          <initializer>= 0x02</initializer>
          <briefdescription>
<para>accounts must be whitelisted in order to hold or transact this asset </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a63b60eb3d6e25d669d8b93cb45ac6bc4" prot="public">
          <name>override_authority</name>
          <initializer>= 0x04</initializer>
          <briefdescription>
<para>issuer may transfer asset back to himself </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7aaec73585631ebefcce567035b27c252c" prot="public">
          <name>transfer_restricted</name>
          <initializer>= 0x08</initializer>
          <briefdescription>
<para>require the issuer to be one party to every transfer </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7aedc04b6ab421f7f2363f3dc9d113b73d" prot="public">
          <name>disable_force_settle</name>
          <initializer>= 0x10</initializer>
          <briefdescription>
<para>disable force settling </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7afa951fce8754e6fb747e13854615eeb9" prot="public">
          <name>global_settle</name>
          <initializer>= 0x20</initializer>
          <briefdescription>
<para>allow the bitasset owner to force a global settlement, permission only </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a5a96fe025ec33ffe4b103458846d08b3" prot="public">
          <name>disable_confidential</name>
          <initializer>= 0x40</initializer>
          <briefdescription>
<para>disallow the asset to be used with confidential transactions </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a4ec6c6bd50bc48052bd7783d8b08d70a" prot="public">
          <name>witness_fed_asset</name>
          <initializer>= 0x80</initializer>
          <briefdescription>
<para>the bitasset is to be fed by witnesses </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7ad19c5dd00f90497696a850af9c8bd26c" prot="public">
          <name>committee_fed_asset</name>
          <initializer>= 0x100</initializer>
          <briefdescription>
<para>the bitasset is to be fed by the committee </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7aecdf0e2eaaf02379a4e59b3a480ee79a" prot="public">
          <name>lock_max_supply</name>
          <initializer>= 0x200</initializer>
          <briefdescription>
<para>the max supply of the asset can not be updated </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a143eda9f4527f81fdef4c1cfe22965de" prot="public">
          <name>disable_new_supply</name>
          <initializer>= 0x400</initializer>
          <briefdescription>
<para>unable to create new supply for the asset </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a00ba1631057f985e077c7e7b2e318266" prot="public">
          <name>disable_mcr_update</name>
          <initializer>= 0x800</initializer>
          <briefdescription>
<para>the bitasset owner can not update MCR, permission only </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7aff93381986b4c574d1b2365120274364" prot="public">
          <name>disable_icr_update</name>
          <initializer>= 0x1000</initializer>
          <briefdescription>
<para>the bitasset owner can not update ICR, permission only </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a6d6c06210cdf7cb26dba5263e1d18d23" prot="public">
          <name>disable_mssr_update</name>
          <initializer>= 0x2000</initializer>
          <briefdescription>
<para>the bitasset owner can not update MSSR, permission only </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a549e875509c1f788fd14e8570dad07d1" prot="public">
          <name>disable_bsrm_update</name>
          <initializer>= 0x4000</initializer>
          <briefdescription>
<para>the bitasset owner can not update BSRM, permission only </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a91387a1c4b272a590ac37cf88b8ba491" prot="public">
          <name>disable_collateral_bidding</name>
          <initializer>= 0x8000</initializer>
          <briefdescription>
<para>Can not bid collateral after a global settlement. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If one of the following bits is set in asset issuer permissions, it means the asset issuer (or owner for bitassets) has the permission to update the corresponding flag, parameters or perform certain actions.<itemizedlist>
<listitem><para><ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7ac0be53c416c0f365980a14e5d6a83a60" kindref="member">charge_market_fee</ref></para></listitem><listitem><para><ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a925268cf7f7e511d2858eee66ef82cbf" kindref="member">white_list</ref></para></listitem><listitem><para><ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a63b60eb3d6e25d669d8b93cb45ac6bc4" kindref="member">override_authority</ref></para></listitem><listitem><para><ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7aaec73585631ebefcce567035b27c252c" kindref="member">transfer_restricted</ref></para></listitem><listitem><para><ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7aedc04b6ab421f7f2363f3dc9d113b73d" kindref="member">disable_force_settle</ref></para></listitem><listitem><para><ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7afa951fce8754e6fb747e13854615eeb9" kindref="member">global_settle</ref></para></listitem><listitem><para><ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a5a96fe025ec33ffe4b103458846d08b3" kindref="member">disable_confidential</ref></para></listitem><listitem><para><ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a4ec6c6bd50bc48052bd7783d8b08d70a" kindref="member">witness_fed_asset</ref></para></listitem><listitem><para><ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7ad19c5dd00f90497696a850af9c8bd26c" kindref="member">committee_fed_asset</ref></para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="note"><para>If one of the following bits is set in asset issuer permissions, it means the asset issuer (or owner for bitassets) does NOT have the permission to update the corresponding flag, parameters or perform certain actions. This is to be compatible with old client software.<itemizedlist>
<listitem><para><ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7aecdf0e2eaaf02379a4e59b3a480ee79a" kindref="member">lock_max_supply</ref></para></listitem><listitem><para><ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a143eda9f4527f81fdef4c1cfe22965de" kindref="member">disable_new_supply</ref></para></listitem><listitem><para><ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a00ba1631057f985e077c7e7b2e318266" kindref="member">disable_mcr_update</ref></para></listitem><listitem><para><ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7aff93381986b4c574d1b2365120274364" kindref="member">disable_icr_update</ref></para></listitem><listitem><para><ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a6d6c06210cdf7cb26dba5263e1d18d23" kindref="member">disable_mssr_update</ref></para></listitem><listitem><para><ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a549e875509c1f788fd14e8570dad07d1" kindref="member">disable_bsrm_update</ref></para></listitem><listitem><para><ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a91387a1c4b272a590ac37cf88b8ba491" kindref="member">disable_collateral_bidding</ref></para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="note"><para>For <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a00ba1631057f985e077c7e7b2e318266" kindref="member">disable_mcr_update</ref>, <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7aff93381986b4c574d1b2365120274364" kindref="member">disable_icr_update</ref> and <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a6d6c06210cdf7cb26dba5263e1d18d23" kindref="member">disable_mssr_update</ref>, if one of these is set in asset issuer permissions, and<itemizedlist>
<listitem><para>if the bitasset owner has set a value for the corresponding parameter, the value can not be updated,</para></listitem><listitem><para>if the bitasset owner has not set a value for the corresponding parameter, the parameter can still be updated by the price feed producers. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="188" column="1" bodyfile="libraries/protocol/include/graphene/protocol/types.hpp" bodystart="188" bodyend="225"/>
      </memberdef>
      <memberdef kind="enum" id="namespacegraphene_1_1protocol_1a7fe50b12d88be67656c1550cbfd52d68" prot="public" static="no">
        <name>reserved_spaces</name>
        <enumvalue id="namespacegraphene_1_1protocol_1a7fe50b12d88be67656c1550cbfd52d68a0fb9ea39eb1dbd8203e9770991fb858e" prot="public">
          <name>relative_protocol_ids</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1protocol_1a7fe50b12d88be67656c1550cbfd52d68a5f0b9f66a4d54ff832b1c57585d66e66" prot="public">
          <name>protocol_ids</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1protocol_1a7fe50b12d88be67656c1550cbfd52d68a1808e5bc955e9a7202c4a1a7ba5a04df" prot="public">
          <name>implementation_ids</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="296" column="1" bodyfile="libraries/protocol/include/graphene/protocol/types.hpp" bodystart="296" bodyend="300"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a3c1d4080710cedea70727ba0b347e8d8" prot="public" static="no">
        <type><ref refid="namespacegraphene_1_1protocol_1a7253c01693b853bacbc927c3430c9c5f" kindref="member">object_restriction_predicate</ref>&lt; <ref refid="group__operations_1ga9aa13b4d89e9b8b56d1074b715de6568" kindref="member">operation</ref> &gt;</type>
        <definition>typedef object_restriction_predicate&lt; operation &gt; graphene::protocol::result_type</definition>
        <argsstring></argsstring>
        <name>result_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/list_1.cpp" line="29" column="1" bodyfile="libraries/protocol/custom_authorities/list_1.cpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1aca1bacaf83ddbb8876ae659dab000d9b" prot="public" static="no">
        <type><ref refid="structgraphene_1_1protocol_1_1restriction_1a1a4815353982e8a48101c3b3d1c84da9" kindref="member">restriction::function_type</ref></type>
        <definition>using graphene::protocol::restriction_function = typedef restriction::function_type</definition>
        <argsstring></argsstring>
        <name>restriction_function</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/restriction_predicate.hxx" line="35" column="1" bodyfile="libraries/protocol/custom_authorities/restriction_predicate.hxx" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1abb79b765f1d37d996872265184ddfc19" prot="public" static="no">
        <type><ref refid="structgraphene_1_1protocol_1_1restriction_1ac5f168eff38ae367a88c400cf0e416d4" kindref="member">restriction::argument_type</ref></type>
        <definition>using graphene::protocol::restriction_argument = typedef restriction::argument_type</definition>
        <argsstring></argsstring>
        <name>restriction_argument</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/restriction_predicate.hxx" line="36" column="1" bodyfile="libraries/protocol/custom_authorities/restriction_predicate.hxx" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a62bf297969e25bf342e2b3b82d050ca2" prot="public" static="no">
        <type>void</type>
        <definition>using graphene::protocol::make_void = typedef void</definition>
        <argsstring></argsstring>
        <name>make_void</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/restriction_predicate.hxx" line="39" column="1" bodyfile="libraries/protocol/custom_authorities/restriction_predicate.hxx" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a7253c01693b853bacbc927c3430c9c5f" prot="public" static="no">
        <type>std::function&lt; <ref refid="structgraphene_1_1protocol_1_1predicate__result" kindref="compound">predicate_result</ref>(const Field &amp;)&gt;</type>
        <definition>using graphene::protocol::object_restriction_predicate = typedef std::function&lt;predicate_result(const Field&amp;)&gt;</definition>
        <argsstring></argsstring>
        <name>object_restriction_predicate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/restriction_predicate.hxx" line="69" column="1" bodyfile="libraries/protocol/custom_authorities/restriction_predicate.hxx" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a76794f619ceb23989bdaba47401cc029" prot="public" static="no">
        <type><ref refid="structfc_1_1typelist_1_1list" kindref="compound">typelist::list</ref>&lt; int64_t, string, <ref refid="classfc_1_1time__point__sec" kindref="compound">time_point_sec</ref>, account_id_type, asset_id_type, force_settlement_id_type, committee_member_id_type, witness_id_type, limit_order_id_type, call_order_id_type, custom_id_type, proposal_id_type, withdraw_permission_id_type, vesting_balance_id_type, worker_id_type, balance_id_type &gt;</type>
        <definition>using graphene::protocol::comparable_types_list = typedef typelist::list&lt;int64_t, string, time_point_sec, account_id_type, asset_id_type, force_settlement_id_type, committee_member_id_type, witness_id_type, limit_order_id_type, call_order_id_type, custom_id_type, proposal_id_type, withdraw_permission_id_type, vesting_balance_id_type, worker_id_type, balance_id_type&gt;</definition>
        <argsstring></argsstring>
        <name>comparable_types_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/restriction_predicate.hxx" line="124" column="1" bodyfile="libraries/protocol/custom_authorities/restriction_predicate.hxx" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a549e650b7417a192aaeb376ed3c5acaf" prot="public" static="no">
        <type><ref refid="namespacefc_1_1typelist_1a970b3620a2d0606bf5bd667e96beb7fd" kindref="member">typelist::transform</ref>&lt; <ref refid="namespacefc_1_1typelist_1ad6cff0cd8c45c506a34052f254f40d13" kindref="member">typelist::concat</ref>&lt; <ref refid="structfc_1_1typelist_1_1list" kindref="compound">typelist::list</ref>&lt; bool, <ref refid="structgraphene_1_1protocol_1_1public__key__type" kindref="compound">public_key_type</ref>, <ref refid="classfc_1_1sha256" kindref="compound">fc::sha256</ref> &gt;, <ref refid="namespacegraphene_1_1protocol_1a76794f619ceb23989bdaba47401cc029" kindref="member">comparable_types_list</ref> &gt;, <ref refid="structgraphene_1_1protocol_1_1make__flat__set" kindref="compound">make_flat_set</ref> &gt;</type>
        <definition>using graphene::protocol::list_types_list = typedef typelist::transform&lt;typelist::concat&lt;typelist::list&lt;bool, public_key_type, fc::sha256&gt;, comparable_types_list&gt;, make_flat_set&gt;</definition>
        <argsstring></argsstring>
        <name>list_types_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/restriction_predicate.hxx" line="131" column="1" bodyfile="libraries/protocol/custom_authorities/restriction_predicate.hxx" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a0493c0127f1b120d66443f1ff1241538" prot="public" static="no">
        <type>typename <ref refid="namespacefc_1_1typelist_1ad6cff0cd8c45c506a34052f254f40d13" kindref="member">typelist::concat</ref>&lt; <ref refid="structfc_1_1typelist_1_1list" kindref="compound">typelist::list</ref>&lt; <ref refid="structgraphene_1_1protocol_1_1void__t" kindref="compound">void_t</ref>, bool, <ref refid="structgraphene_1_1protocol_1_1public__key__type" kindref="compound">public_key_type</ref>, <ref refid="classfc_1_1sha256" kindref="compound">fc::sha256</ref> &gt;, <ref refid="namespacegraphene_1_1protocol_1a76794f619ceb23989bdaba47401cc029" kindref="member">comparable_types_list</ref>, <ref refid="namespacegraphene_1_1protocol_1a549e650b7417a192aaeb376ed3c5acaf" kindref="member">list_types_list</ref> &gt;</type>
        <definition>using graphene::protocol::equality_types_list = typedef typename typelist::concat&lt;typelist::list&lt;void_t, bool, public_key_type, fc::sha256&gt;, comparable_types_list, list_types_list&gt;</definition>
        <argsstring></argsstring>
        <name>equality_types_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/restriction_predicate.hxx" line="135" column="1" bodyfile="libraries/protocol/custom_authorities/restriction_predicate.hxx" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a6d2e47dc28853e7e5bc9367b75a9a218" prot="public" static="no">
        <type><ref refid="structfc_1_1typelist_1_1list" kindref="compound">typelist::list</ref>&lt; vector&lt; <ref refid="structgraphene_1_1protocol_1_1restriction" kindref="compound">restriction</ref> &gt; &gt;</type>
        <definition>using graphene::protocol::attr_types_list = typedef typelist::list&lt;vector&lt;restriction&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>attr_types_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/restriction_predicate.hxx" line="138" column="1" bodyfile="libraries/protocol/custom_authorities/restriction_predicate.hxx" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1aedf6568dd7165dd29bb517f3e08c8093" prot="public" static="no">
        <type><ref refid="structfc_1_1typelist_1_1list" kindref="compound">typelist::list</ref>&lt; vector&lt; vector&lt; <ref refid="structgraphene_1_1protocol_1_1restriction" kindref="compound">restriction</ref> &gt; &gt;&gt;</type>
        <definition>using graphene::protocol::or_types_list = typedef typelist::list&lt;vector&lt;vector&lt;restriction&gt; &gt;&gt;</definition>
        <argsstring></argsstring>
        <name>or_types_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/restriction_predicate.hxx" line="140" column="1" bodyfile="libraries/protocol/custom_authorities/restriction_predicate.hxx" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a21cadde13be6ca81493c600b5fa62db4" prot="public" static="no">
        <type><ref refid="classfc_1_1static__variant" kindref="compound">static_variant</ref>&lt; <ref refid="structfc_1_1typelist_1_1builder" kindref="compound">typelist::builder</ref>&lt;&gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1transfer__operation" kindref="compound">transfer_operation</ref> &gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1limit__order__create__operation" kindref="compound">limit_order_create_operation</ref> &gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1limit__order__cancel__operation" kindref="compound">limit_order_cancel_operation</ref> &gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1call__order__update__operation" kindref="compound">call_order_update_operation</ref> &gt; ::finalize &gt;</type>
        <definition>using graphene::protocol::operation_list_1 = typedef static_variant&lt;typelist::builder&lt;&gt; ::add&lt;transfer_operation&gt; ::add&lt;limit_order_create_operation&gt; ::add&lt;limit_order_cancel_operation&gt; ::add&lt;call_order_update_operation&gt; ::finalize&gt;</definition>
        <argsstring></argsstring>
        <name>operation_list_1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/sliced_lists.hxx" line="33" column="1" bodyfile="libraries/protocol/custom_authorities/sliced_lists.hxx" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a898b8a6d3b11f5eff5bf38a542186f58" prot="public" static="no">
        <type><ref refid="classfc_1_1static__variant" kindref="compound">static_variant</ref>&lt; <ref refid="structfc_1_1typelist_1_1builder" kindref="compound">typelist::builder</ref>&lt;&gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1account__create__operation" kindref="compound">account_create_operation</ref> &gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1account__update__operation" kindref="compound">account_update_operation</ref> &gt; ::finalize &gt;</type>
        <definition>using graphene::protocol::operation_list_2 = typedef static_variant&lt;typelist::builder&lt;&gt; ::add&lt;account_create_operation&gt; ::add&lt;account_update_operation&gt; ::finalize&gt;</definition>
        <argsstring></argsstring>
        <name>operation_list_2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/sliced_lists.hxx" line="39" column="1" bodyfile="libraries/protocol/custom_authorities/sliced_lists.hxx" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1ad38db2ffdd110440dc05e34cf6c4b0f7" prot="public" static="no">
        <type><ref refid="classfc_1_1static__variant" kindref="compound">static_variant</ref>&lt; <ref refid="structfc_1_1typelist_1_1builder" kindref="compound">typelist::builder</ref>&lt;&gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1asset__create__operation" kindref="compound">asset_create_operation</ref> &gt; ::finalize &gt;</type>
        <definition>using graphene::protocol::operation_list_3 = typedef static_variant&lt;typelist::builder&lt;&gt; ::add&lt;asset_create_operation&gt; ::finalize&gt;</definition>
        <argsstring></argsstring>
        <name>operation_list_3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/sliced_lists.hxx" line="43" column="1" bodyfile="libraries/protocol/custom_authorities/sliced_lists.hxx" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1adedbc89b45b50f85d7906c49bb60b462" prot="public" static="no">
        <type><ref refid="classfc_1_1static__variant" kindref="compound">static_variant</ref>&lt; <ref refid="structfc_1_1typelist_1_1builder" kindref="compound">typelist::builder</ref>&lt;&gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1asset__update__feed__producers__operation" kindref="compound">asset_update_feed_producers_operation</ref> &gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1asset__issue__operation" kindref="compound">asset_issue_operation</ref> &gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1asset__reserve__operation" kindref="compound">asset_reserve_operation</ref> &gt; ::finalize &gt;</type>
        <definition>using graphene::protocol::operation_list_5 = typedef static_variant&lt;typelist::builder&lt;&gt; ::add&lt;asset_update_feed_producers_operation&gt; ::add&lt;asset_issue_operation&gt; ::add&lt;asset_reserve_operation&gt; ::finalize&gt;</definition>
        <argsstring></argsstring>
        <name>operation_list_5</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/sliced_lists.hxx" line="46" column="1" bodyfile="libraries/protocol/custom_authorities/sliced_lists.hxx" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1afe08cc296d698346e9282b8a1dd79c09" prot="public" static="no">
        <type><ref refid="classfc_1_1static__variant" kindref="compound">static_variant</ref>&lt; <ref refid="structfc_1_1typelist_1_1builder" kindref="compound">typelist::builder</ref>&lt;&gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1asset__publish__feed__operation" kindref="compound">asset_publish_feed_operation</ref> &gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1witness__update__operation" kindref="compound">witness_update_operation</ref> &gt; ::finalize &gt;</type>
        <definition>using graphene::protocol::operation_list_6 = typedef static_variant&lt;typelist::builder&lt;&gt; ::add&lt;asset_publish_feed_operation&gt; ::add&lt;witness_update_operation&gt; ::finalize&gt;</definition>
        <argsstring></argsstring>
        <name>operation_list_6</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/sliced_lists.hxx" line="51" column="1" bodyfile="libraries/protocol/custom_authorities/sliced_lists.hxx" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a7701c7f2d5f86bf7b431ceadbb154d68" prot="public" static="no">
        <type><ref refid="classfc_1_1static__variant" kindref="compound">static_variant</ref>&lt; <ref refid="structfc_1_1typelist_1_1builder" kindref="compound">typelist::builder</ref>&lt;&gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1vesting__balance__create__operation" kindref="compound">vesting_balance_create_operation</ref> &gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1vesting__balance__withdraw__operation" kindref="compound">vesting_balance_withdraw_operation</ref> &gt; ::finalize &gt;</type>
        <definition>using graphene::protocol::operation_list_9 = typedef static_variant&lt;typelist::builder&lt;&gt; ::add&lt;vesting_balance_create_operation&gt; ::add&lt;vesting_balance_withdraw_operation&gt; ::finalize&gt;</definition>
        <argsstring></argsstring>
        <name>operation_list_9</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/sliced_lists.hxx" line="55" column="1" bodyfile="libraries/protocol/custom_authorities/sliced_lists.hxx" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a31b170df5f8d620a41a8ec8d22a818d9" prot="public" static="no">
        <type><ref refid="classfc_1_1static__variant" kindref="compound">static_variant</ref>&lt; <ref refid="structfc_1_1typelist_1_1builder" kindref="compound">typelist::builder</ref>&lt;&gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1override__transfer__operation" kindref="compound">override_transfer_operation</ref> &gt; ::finalize &gt;</type>
        <definition>using graphene::protocol::operation_list_10 = typedef static_variant&lt;typelist::builder&lt;&gt; ::add&lt;override_transfer_operation&gt; ::finalize&gt;</definition>
        <argsstring></argsstring>
        <name>operation_list_10</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/sliced_lists.hxx" line="59" column="1" bodyfile="libraries/protocol/custom_authorities/sliced_lists.hxx" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a4f6b3ecbb7cacf01920fd96e647b12be" prot="public" static="no">
        <type><ref refid="classfc_1_1static__variant" kindref="compound">static_variant</ref>&lt; <ref refid="structfc_1_1typelist_1_1builder" kindref="compound">typelist::builder</ref>&lt;&gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1htlc__create__operation" kindref="compound">htlc_create_operation</ref> &gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1htlc__redeem__operation" kindref="compound">htlc_redeem_operation</ref> &gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1htlc__extend__operation" kindref="compound">htlc_extend_operation</ref> &gt; ::finalize &gt;</type>
        <definition>using graphene::protocol::operation_list_11 = typedef static_variant&lt;typelist::builder&lt;&gt; ::add&lt;htlc_create_operation&gt; ::add&lt;htlc_redeem_operation&gt; ::add&lt;htlc_extend_operation&gt; ::finalize&gt;</definition>
        <argsstring></argsstring>
        <name>operation_list_11</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/sliced_lists.hxx" line="62" column="1" bodyfile="libraries/protocol/custom_authorities/sliced_lists.hxx" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a16281285eda989438d3ddd64442909f1" prot="public" static="no">
        <type><ref refid="classfc_1_1static__variant" kindref="compound">static_variant</ref>&lt; <ref refid="structfc_1_1typelist_1_1builder" kindref="compound">typelist::builder</ref>&lt;&gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1fill__order__operation" kindref="compound">fill_order_operation</ref> &gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1account__whitelist__operation" kindref="compound">account_whitelist_operation</ref> &gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1account__upgrade__operation" kindref="compound">account_upgrade_operation</ref> &gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1account__transfer__operation" kindref="compound">account_transfer_operation</ref> &gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1asset__update__operation" kindref="compound">asset_update_operation</ref> &gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1asset__update__bitasset__operation" kindref="compound">asset_update_bitasset_operation</ref> &gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1asset__fund__fee__pool__operation" kindref="compound">asset_fund_fee_pool_operation</ref> &gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1asset__settle__operation" kindref="compound">asset_settle_operation</ref> &gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1asset__global__settle__operation" kindref="compound">asset_global_settle_operation</ref> &gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1witness__create__operation" kindref="compound">witness_create_operation</ref> &gt; ::add_list&lt; <ref refid="namespacefc_1_1typelist_1ad47d889257405c1c3ba4e3c7256b3ed7" kindref="member">typelist::slice</ref>&lt; <ref refid="classfc_1_1static__variant_1a03ad0667ee25a15d94667b7d3c7604ed" kindref="member">operation::list</ref>, typelist::index_of&lt; <ref refid="classfc_1_1static__variant_1a03ad0667ee25a15d94667b7d3c7604ed" kindref="member">operation::list</ref>, <ref refid="structgraphene_1_1protocol_1_1proposal__create__operation" kindref="compound">proposal_create_operation</ref> &gt;(), typelist::index_of&lt; <ref refid="classfc_1_1static__variant_1a03ad0667ee25a15d94667b7d3c7604ed" kindref="member">operation::list</ref>, <ref refid="structgraphene_1_1protocol_1_1vesting__balance__create__operation" kindref="compound">vesting_balance_create_operation</ref> &gt;() &gt; &gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1worker__create__operation" kindref="compound">worker_create_operation</ref> &gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1custom__operation" kindref="compound">custom_operation</ref> &gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1assert__operation" kindref="compound">assert_operation</ref> &gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1balance__claim__operation" kindref="compound">balance_claim_operation</ref> &gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1transfer__to__blind__operation" kindref="compound">transfer_to_blind_operation</ref> &gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1blind__transfer__operation" kindref="compound">blind_transfer_operation</ref> &gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1transfer__from__blind__operation" kindref="compound">transfer_from_blind_operation</ref> &gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1asset__settle__cancel__operation" kindref="compound">asset_settle_cancel_operation</ref> &gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1asset__claim__fees__operation" kindref="compound">asset_claim_fees_operation</ref> &gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1fba__distribute__operation" kindref="compound">fba_distribute_operation</ref> &gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1bid__collateral__operation" kindref="compound">bid_collateral_operation</ref> &gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1execute__bid__operation" kindref="compound">execute_bid_operation</ref> &gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1asset__claim__pool__operation" kindref="compound">asset_claim_pool_operation</ref> &gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1asset__update__issuer__operation" kindref="compound">asset_update_issuer_operation</ref> &gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1htlc__redeemed__operation" kindref="compound">htlc_redeemed_operation</ref> &gt; ::add&lt; <ref refid="structgraphene_1_1protocol_1_1htlc__refund__operation" kindref="compound">htlc_refund_operation</ref> &gt; ::add_list&lt; <ref refid="namespacefc_1_1typelist_1ad47d889257405c1c3ba4e3c7256b3ed7" kindref="member">typelist::slice</ref>&lt; <ref refid="classfc_1_1static__variant_1a03ad0667ee25a15d94667b7d3c7604ed" kindref="member">operation::list</ref>, typelist::index_of&lt; <ref refid="classfc_1_1static__variant_1a03ad0667ee25a15d94667b7d3c7604ed" kindref="member">operation::list</ref>, <ref refid="structgraphene_1_1protocol_1_1custom__authority__create__operation" kindref="compound">custom_authority_create_operation</ref> &gt;() &gt; &gt; ::finalize &gt;</type>
        <definition>using graphene::protocol::unsupported_operations_list = typedef static_variant&lt;typelist::builder&lt;&gt; ::add&lt;fill_order_operation&gt; ::add&lt;account_whitelist_operation&gt; ::add&lt;account_upgrade_operation&gt; ::add&lt;account_transfer_operation&gt; ::add&lt;asset_update_operation&gt; ::add&lt;asset_update_bitasset_operation&gt; ::add&lt;asset_fund_fee_pool_operation&gt; ::add&lt;asset_settle_operation&gt; ::add&lt;asset_global_settle_operation&gt; ::add&lt;witness_create_operation&gt; ::add_list&lt;typelist::slice&lt;operation::list, typelist::index_of&lt; operation::list, proposal_create_operation &gt;(), typelist::index_of&lt; operation::list, vesting_balance_create_operation &gt;() &gt; &gt; ::add&lt;worker_create_operation&gt; ::add&lt;custom_operation&gt; ::add&lt;assert_operation&gt; ::add&lt;balance_claim_operation&gt; ::add&lt;transfer_to_blind_operation&gt; ::add&lt;blind_transfer_operation&gt; ::add&lt;transfer_from_blind_operation&gt; ::add&lt;asset_settle_cancel_operation&gt; ::add&lt;asset_claim_fees_operation&gt; ::add&lt;fba_distribute_operation&gt; ::add&lt;bid_collateral_operation&gt; ::add&lt;execute_bid_operation&gt; ::add&lt;asset_claim_pool_operation&gt; ::add&lt;asset_update_issuer_operation&gt; ::add&lt;htlc_redeemed_operation&gt; ::add&lt;htlc_refund_operation&gt; ::add_list&lt;typelist::slice&lt;operation::list, typelist::index_of&lt; operation::list, custom_authority_create_operation &gt;() &gt; &gt; ::finalize&gt;</definition>
        <argsstring></argsstring>
        <name>unsupported_operations_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/sliced_lists.hxx" line="77" column="1" bodyfile="libraries/protocol/custom_authorities/sliced_lists.hxx" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a94748a50b37ab05b15fb496d1b9f7685" prot="public" static="no">
        <type><ref refid="classfc_1_1static__variant" kindref="compound">static_variant</ref>&lt; <ref refid="structgraphene_1_1protocol_1_1account__name__eq__lit__predicate" kindref="compound">account_name_eq_lit_predicate</ref>, <ref refid="structgraphene_1_1protocol_1_1asset__symbol__eq__lit__predicate" kindref="compound">asset_symbol_eq_lit_predicate</ref>, <ref refid="structgraphene_1_1protocol_1_1block__id__predicate" kindref="compound">block_id_predicate</ref> &gt;</type>
        <definition>typedef static_variant&lt; account_name_eq_lit_predicate, asset_symbol_eq_lit_predicate, block_id_predicate &gt; graphene::protocol::predicate</definition>
        <argsstring></argsstring>
        <name>predicate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When defining predicates do not make the protocol dependent upon implementation details. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/assert.hpp" line="83" column="1" bodyfile="libraries/protocol/include/graphene/protocol/assert.hpp" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a5d54f0af0b886cba542137f450bb6388" prot="public" static="no">
        <type><ref refid="structgraphene_1_1protocol_1_1extension" kindref="compound">extension</ref>&lt; <ref refid="structgraphene_1_1protocol_1_1additional__asset__options" kindref="compound">additional_asset_options</ref> &gt;</type>
        <definition>typedef extension&lt;additional_asset_options&gt; graphene::protocol::additional_asset_options_t</definition>
        <argsstring></argsstring>
        <name>additional_asset_options_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="38" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset_ops.hpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__operations_1ga8d0cc3fd7fdc83761fcf4420cc828631" prot="public" static="no">
        <type><ref refid="structgraphene_1_1protocol_1_1extension" kindref="compound">extension</ref>&lt; <ref refid="structgraphene_1_1protocol_1_1extendable__operation__result__dtl" kindref="compound">extendable_operation_result_dtl</ref> &gt;</type>
        <definition>using graphene::protocol::extendable_operation_result = typedef extension&lt;extendable_operation_result_dtl&gt;</definition>
        <argsstring></argsstring>
        <name>extendable_operation_result</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/base.hpp" line="113" column="1" bodyfile="libraries/protocol/include/graphene/protocol/base.hpp" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__operations_1gaa71296d574534eaf5315415023d64eeb" prot="public" static="no">
        <type><ref refid="classfc_1_1static__variant" kindref="compound">fc::static_variant</ref>&lt; <ref refid="structgraphene_1_1protocol_1_1void__result" kindref="compound">void_result</ref>, <ref refid="structgraphene_1_1db_1_1object__id__type" kindref="compound">object_id_type</ref>, <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref>, <ref refid="structgraphene_1_1protocol_1_1generic__operation__result" kindref="compound">generic_operation_result</ref>, <ref refid="structgraphene_1_1protocol_1_1generic__exchange__operation__result" kindref="compound">generic_exchange_operation_result</ref>, <ref refid="group__operations_1ga8d0cc3fd7fdc83761fcf4420cc828631" kindref="member">extendable_operation_result</ref> &gt;</type>
        <definition>using graphene::protocol::operation_result = typedef fc::static_variant &lt; void_result, object_id_type, asset, generic_operation_result, generic_exchange_operation_result, extendable_operation_result &gt;</definition>
        <argsstring></argsstring>
        <name>operation_result</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/base.hpp" line="115" column="1" bodyfile="libraries/protocol/include/graphene/protocol/base.hpp" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__operations_1gadd193c7a45f34f889d78acfcdd4d7b2e" prot="public" static="no">
        <type><ref refid="classfc_1_1static__variant" kindref="compound">static_variant</ref>&lt; <ref refid="structgraphene_1_1protocol_1_1void__t" kindref="compound">void_t</ref> &gt;</type>
        <definition>using graphene::protocol::future_extensions = typedef static_variant&lt;void_t&gt;</definition>
        <argsstring></argsstring>
        <name>future_extensions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For future expansion many structus include a single member of type extensions_type that can be changed when updating a protocol. You can always add new types to a static_variant without breaking backward compatibility. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/base.hpp" line="147" column="1" bodyfile="libraries/protocol/include/graphene/protocol/base.hpp" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__operations_1gabaddcaf5bde76414891b4c29031d9288" prot="public" static="no">
        <type><ref refid="classfc_1_1static__variant_1af88f7f04dd15f07ade8335a911542561" kindref="member">future_extensions::flat_set_type</ref></type>
        <definition>using graphene::protocol::extensions_type = typedef future_extensions::flat_set_type</definition>
        <argsstring></argsstring>
        <name>extensions_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A flat_set is used to make sure that only one extension of each type is added and that they are added in order.</para><para><simplesect kind="note"><para>static_variant compares only the type tag and not the content. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/base.hpp" line="156" column="1" bodyfile="libraries/protocol/include/graphene/protocol/base.hpp" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a6f5fc4218bbc2c67f49927f99f533e84" prot="public" static="no">
        <type><ref refid="structgraphene_1_1protocol_1_1transform__to__fee__parameters" kindref="compound">transform_to_fee_parameters</ref>&lt; <ref refid="group__operations_1ga9aa13b4d89e9b8b56d1074b715de6568" kindref="member">operation</ref> &gt;::type</type>
        <definition>using graphene::protocol::fee_parameters = typedef transform_to_fee_parameters&lt;operation&gt;::type</definition>
        <argsstring></argsstring>
        <name>fee_parameters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/fee_schedule.hpp" line="35" column="1" bodyfile="libraries/protocol/include/graphene/protocol/fee_schedule.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1afba6ca8ebc72dff107b62bb5a21f2e47" prot="public" static="no">
        <type><ref refid="structgraphene_1_1protocol_1_1fee__schedule" kindref="compound">fee_schedule</ref></type>
        <definition>using graphene::protocol::fee_schedule_type = typedef fee_schedule</definition>
        <argsstring></argsstring>
        <name>fee_schedule_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/fee_schedule.hpp" line="226" column="1" bodyfile="libraries/protocol/include/graphene/protocol/fee_schedule.hpp" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a1bae001b47b8d864a79406219d67b832" prot="public" static="no">
        <type><ref refid="classfc_1_1ripemd160" kindref="compound">fc::ripemd160</ref></type>
        <definition>typedef fc::ripemd160 graphene::protocol::htlc_algo_ripemd160</definition>
        <argsstring></argsstring>
        <name>htlc_algo_ripemd160</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/htlc.hpp" line="33" column="1" bodyfile="libraries/protocol/include/graphene/protocol/htlc.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1ac7a995704f215556cbfd73295621d059" prot="public" static="no">
        <type><ref refid="classfc_1_1sha1" kindref="compound">fc::sha1</ref></type>
        <definition>typedef fc::sha1 graphene::protocol::htlc_algo_sha1</definition>
        <argsstring></argsstring>
        <name>htlc_algo_sha1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/htlc.hpp" line="34" column="1" bodyfile="libraries/protocol/include/graphene/protocol/htlc.hpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a5938be26ca395e77538fb8632c71d8a5" prot="public" static="no">
        <type><ref refid="classfc_1_1sha256" kindref="compound">fc::sha256</ref></type>
        <definition>typedef fc::sha256 graphene::protocol::htlc_algo_sha256</definition>
        <argsstring></argsstring>
        <name>htlc_algo_sha256</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/htlc.hpp" line="35" column="1" bodyfile="libraries/protocol/include/graphene/protocol/htlc.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a55f7c41be40665a6c521bd6a25c24112" prot="public" static="no">
        <type><ref refid="classfc_1_1hash160" kindref="compound">fc::hash160</ref></type>
        <definition>typedef fc::hash160 graphene::protocol::htlc_algo_hash160</definition>
        <argsstring></argsstring>
        <name>htlc_algo_hash160</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/htlc.hpp" line="36" column="1" bodyfile="libraries/protocol/include/graphene/protocol/htlc.hpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a8edbef4035c72a541a106ad51d004606" prot="public" static="no">
        <type><ref refid="classfc_1_1static__variant" kindref="compound">fc::static_variant</ref>&lt; <ref refid="namespacegraphene_1_1protocol_1a1bae001b47b8d864a79406219d67b832" kindref="member">htlc_algo_ripemd160</ref>, <ref refid="namespacegraphene_1_1protocol_1ac7a995704f215556cbfd73295621d059" kindref="member">htlc_algo_sha1</ref>, <ref refid="namespacegraphene_1_1protocol_1a5938be26ca395e77538fb8632c71d8a5" kindref="member">htlc_algo_sha256</ref>, <ref refid="namespacegraphene_1_1protocol_1a55f7c41be40665a6c521bd6a25c24112" kindref="member">htlc_algo_hash160</ref> &gt;</type>
        <definition>typedef fc::static_variant&lt; htlc_algo_ripemd160, htlc_algo_sha1, htlc_algo_sha256, htlc_algo_hash160 &gt; graphene::protocol::htlc_hash</definition>
        <argsstring></argsstring>
        <name>htlc_hash</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/htlc.hpp" line="43" column="1" bodyfile="libraries/protocol/include/graphene/protocol/htlc.hpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__operations_1ga9aa13b4d89e9b8b56d1074b715de6568" prot="public" static="no">
        <type><ref refid="classfc_1_1static__variant" kindref="compound">fc::static_variant</ref>&lt; <ref refid="structgraphene_1_1protocol_1_1transfer__operation" kindref="compound">transfer_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1limit__order__create__operation" kindref="compound">limit_order_create_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1limit__order__cancel__operation" kindref="compound">limit_order_cancel_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1call__order__update__operation" kindref="compound">call_order_update_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1fill__order__operation" kindref="compound">fill_order_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1account__create__operation" kindref="compound">account_create_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1account__update__operation" kindref="compound">account_update_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1account__whitelist__operation" kindref="compound">account_whitelist_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1account__upgrade__operation" kindref="compound">account_upgrade_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1account__transfer__operation" kindref="compound">account_transfer_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1asset__create__operation" kindref="compound">asset_create_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1asset__update__operation" kindref="compound">asset_update_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1asset__update__bitasset__operation" kindref="compound">asset_update_bitasset_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1asset__update__feed__producers__operation" kindref="compound">asset_update_feed_producers_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1asset__issue__operation" kindref="compound">asset_issue_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1asset__reserve__operation" kindref="compound">asset_reserve_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1asset__fund__fee__pool__operation" kindref="compound">asset_fund_fee_pool_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1asset__settle__operation" kindref="compound">asset_settle_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1asset__global__settle__operation" kindref="compound">asset_global_settle_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1asset__publish__feed__operation" kindref="compound">asset_publish_feed_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1witness__create__operation" kindref="compound">witness_create_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1witness__update__operation" kindref="compound">witness_update_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1proposal__create__operation" kindref="compound">proposal_create_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1proposal__update__operation" kindref="compound">proposal_update_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1proposal__delete__operation" kindref="compound">proposal_delete_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1withdraw__permission__create__operation" kindref="compound">withdraw_permission_create_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1withdraw__permission__update__operation" kindref="compound">withdraw_permission_update_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1withdraw__permission__claim__operation" kindref="compound">withdraw_permission_claim_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1withdraw__permission__delete__operation" kindref="compound">withdraw_permission_delete_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1committee__member__create__operation" kindref="compound">committee_member_create_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1committee__member__update__operation" kindref="compound">committee_member_update_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1committee__member__update__global__parameters__operation" kindref="compound">committee_member_update_global_parameters_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1vesting__balance__create__operation" kindref="compound">vesting_balance_create_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1vesting__balance__withdraw__operation" kindref="compound">vesting_balance_withdraw_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1worker__create__operation" kindref="compound">worker_create_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1custom__operation" kindref="compound">custom_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1assert__operation" kindref="compound">assert_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1balance__claim__operation" kindref="compound">balance_claim_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1override__transfer__operation" kindref="compound">override_transfer_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1transfer__to__blind__operation" kindref="compound">transfer_to_blind_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1blind__transfer__operation" kindref="compound">blind_transfer_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1transfer__from__blind__operation" kindref="compound">transfer_from_blind_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1asset__settle__cancel__operation" kindref="compound">asset_settle_cancel_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1asset__claim__fees__operation" kindref="compound">asset_claim_fees_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1fba__distribute__operation" kindref="compound">fba_distribute_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1bid__collateral__operation" kindref="compound">bid_collateral_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1execute__bid__operation" kindref="compound">execute_bid_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1asset__claim__pool__operation" kindref="compound">asset_claim_pool_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1asset__update__issuer__operation" kindref="compound">asset_update_issuer_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1htlc__create__operation" kindref="compound">htlc_create_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1htlc__redeem__operation" kindref="compound">htlc_redeem_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1htlc__redeemed__operation" kindref="compound">htlc_redeemed_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1htlc__extend__operation" kindref="compound">htlc_extend_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1htlc__refund__operation" kindref="compound">htlc_refund_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1custom__authority__create__operation" kindref="compound">custom_authority_create_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1custom__authority__update__operation" kindref="compound">custom_authority_update_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1custom__authority__delete__operation" kindref="compound">custom_authority_delete_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1ticket__create__operation" kindref="compound">ticket_create_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1ticket__update__operation" kindref="compound">ticket_update_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1liquidity__pool__create__operation" kindref="compound">liquidity_pool_create_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1liquidity__pool__delete__operation" kindref="compound">liquidity_pool_delete_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1liquidity__pool__deposit__operation" kindref="compound">liquidity_pool_deposit_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1liquidity__pool__withdraw__operation" kindref="compound">liquidity_pool_withdraw_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1liquidity__pool__exchange__operation" kindref="compound">liquidity_pool_exchange_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1samet__fund__create__operation" kindref="compound">samet_fund_create_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1samet__fund__delete__operation" kindref="compound">samet_fund_delete_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1samet__fund__update__operation" kindref="compound">samet_fund_update_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1samet__fund__borrow__operation" kindref="compound">samet_fund_borrow_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1samet__fund__repay__operation" kindref="compound">samet_fund_repay_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1credit__offer__create__operation" kindref="compound">credit_offer_create_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1credit__offer__delete__operation" kindref="compound">credit_offer_delete_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1credit__offer__update__operation" kindref="compound">credit_offer_update_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1credit__offer__accept__operation" kindref="compound">credit_offer_accept_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1credit__deal__repay__operation" kindref="compound">credit_deal_repay_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1credit__deal__expired__operation" kindref="compound">credit_deal_expired_operation</ref> &gt;</type>
        <definition>using graphene::protocol::operation = typedef fc::static_variant&lt; transfer_operation, limit_order_create_operation, limit_order_cancel_operation, call_order_update_operation, fill_order_operation, account_create_operation, account_update_operation, account_whitelist_operation, account_upgrade_operation, account_transfer_operation, asset_create_operation, asset_update_operation, asset_update_bitasset_operation, asset_update_feed_producers_operation, asset_issue_operation, asset_reserve_operation, asset_fund_fee_pool_operation, asset_settle_operation, asset_global_settle_operation, asset_publish_feed_operation, witness_create_operation, witness_update_operation, proposal_create_operation, proposal_update_operation, proposal_delete_operation, withdraw_permission_create_operation, withdraw_permission_update_operation, withdraw_permission_claim_operation, withdraw_permission_delete_operation, committee_member_create_operation, committee_member_update_operation, committee_member_update_global_parameters_operation, vesting_balance_create_operation, vesting_balance_withdraw_operation, worker_create_operation, custom_operation, assert_operation, balance_claim_operation, override_transfer_operation, transfer_to_blind_operation, blind_transfer_operation, transfer_from_blind_operation, asset_settle_cancel_operation, asset_claim_fees_operation, fba_distribute_operation, bid_collateral_operation, execute_bid_operation, asset_claim_pool_operation, asset_update_issuer_operation, htlc_create_operation, htlc_redeem_operation, htlc_redeemed_operation, htlc_extend_operation, htlc_refund_operation, custom_authority_create_operation, custom_authority_update_operation, custom_authority_delete_operation, ticket_create_operation, ticket_update_operation, liquidity_pool_create_operation, liquidity_pool_delete_operation, liquidity_pool_deposit_operation, liquidity_pool_withdraw_operation, liquidity_pool_exchange_operation, samet_fund_create_operation, samet_fund_delete_operation, samet_fund_update_operation, samet_fund_borrow_operation, samet_fund_repay_operation, credit_offer_create_operation, credit_offer_delete_operation, credit_offer_update_operation, credit_offer_accept_operation, credit_deal_repay_operation, credit_deal_expired_operation &gt;</definition>
        <argsstring></argsstring>
        <name>operation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the set of valid operations as a discriminated union type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/operations.hpp" line="55" column="1" bodyfile="libraries/protocol/include/graphene/protocol/operations.hpp" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1ab01bcc65fd718934c7dc300dda464228" prot="public" static="no">
        <type>std::function&lt; <ref refid="structgraphene_1_1protocol_1_1predicate__result" kindref="compound">predicate_result</ref>(const <ref refid="group__operations_1ga9aa13b4d89e9b8b56d1074b715de6568" kindref="member">operation</ref> &amp;)&gt;</type>
        <definition>using graphene::protocol::restriction_predicate_function = typedef std::function&lt;predicate_result(const operation&amp;)&gt;</definition>
        <argsstring></argsstring>
        <name>restriction_predicate_function</name>
        <briefdescription>
<para>A restriction predicate is a function accepting an operation and returning a <ref refid="structgraphene_1_1protocol_1_1predicate__result" kindref="compound">predicate_result</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/restriction_predicate.hpp" line="62" column="1" bodyfile="libraries/protocol/include/graphene/protocol/restriction_predicate.hpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a0e74afece7dbfa1a51f7b183624850d4" prot="public" static="no">
        <type><ref refid="classfc_1_1static__variant" kindref="compound">static_variant</ref>&lt; <ref refid="structgraphene_1_1protocol_1_1no__special__authority" kindref="compound">no_special_authority</ref>, <ref refid="structgraphene_1_1protocol_1_1top__holders__special__authority" kindref="compound">top_holders_special_authority</ref> &gt;</type>
        <definition>typedef static_variant&lt; no_special_authority, top_holders_special_authority &gt; graphene::protocol::special_authority</definition>
        <argsstring></argsstring>
        <name>special_authority</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/special_authority.hpp" line="41" column="1" bodyfile="libraries/protocol/include/graphene/protocol/special_authority.hpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a087add7d52a3bc3d90dfe941e7dfd40e" prot="public" static="no">
        <type><ref refid="classfc_1_1static__variant" kindref="compound">static_variant</ref>&lt; <ref refid="structgraphene_1_1protocol_1_1predicate__result" kindref="compound">predicate_result</ref>, <ref refid="classfc_1_1exception" kindref="compound">fc::exception</ref> &gt;</type>
        <definition>using graphene::protocol::rejected_predicate = typedef static_variant&lt;predicate_result, fc::exception&gt;</definition>
        <argsstring></argsstring>
        <name>rejected_predicate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/transaction.hpp" line="30" column="1" bodyfile="libraries/protocol/include/graphene/protocol/transaction.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1af8005c97798e625be4f50584c35fa824" prot="public" static="no">
        <type>map&lt; custom_authority_id_type, <ref refid="namespacegraphene_1_1protocol_1a087add7d52a3bc3d90dfe941e7dfd40e" kindref="member">rejected_predicate</ref> &gt;</type>
        <definition>using graphene::protocol::rejected_predicate_map = typedef map&lt;custom_authority_id_type, rejected_predicate&gt;</definition>
        <argsstring></argsstring>
        <name>rejected_predicate_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/transaction.hpp" line="31" column="1" bodyfile="libraries/protocol/include/graphene/protocol/transaction.hpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a7af627fb15181383dae4695633a3a7d6" prot="public" static="no">
        <type>std::function&lt; vector&lt; <ref refid="structgraphene_1_1protocol_1_1authority" kindref="compound">authority</ref> &gt;(account_id_type, const <ref refid="group__operations_1ga9aa13b4d89e9b8b56d1074b715de6568" kindref="member">operation</ref> &amp;, <ref refid="namespacegraphene_1_1protocol_1af8005c97798e625be4f50584c35fa824" kindref="member">rejected_predicate_map</ref> *)&gt;</type>
        <definition>using graphene::protocol::custom_authority_lookup = typedef std::function&lt;vector&lt;authority&gt;(account_id_type, const operation&amp;, rejected_predicate_map*)&gt;</definition>
        <argsstring></argsstring>
        <name>custom_authority_lookup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/transaction.hpp" line="32" column="1" bodyfile="libraries/protocol/include/graphene/protocol/transaction.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a73d07cdf7c96887580ecfab2909ae548" prot="public" static="no">
        <type><ref refid="classfc_1_1ecc_1_1private__key" kindref="compound">fc::ecc::private_key</ref></type>
        <definition>using graphene::protocol::private_key_type = typedef fc::ecc::private_key</definition>
        <argsstring></argsstring>
        <name>private_key_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="148" column="1" bodyfile="libraries/protocol/include/graphene/protocol/types.hpp" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a56354f39ed89f6a0a13fe90ba8228809" prot="public" static="no">
        <type><ref refid="classfc_1_1sha256" kindref="compound">fc::sha256</ref></type>
        <definition>using graphene::protocol::chain_id_type = typedef fc::sha256</definition>
        <argsstring></argsstring>
        <name>chain_id_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="149" column="1" bodyfile="libraries/protocol/include/graphene/protocol/types.hpp" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a54851df9ea21bef79e7cdb2da2e3e3cc" prot="public" static="no">
        <type>boost::rational&lt; int32_t &gt;</type>
        <definition>using graphene::protocol::ratio_type = typedef boost::rational&lt;int32_t&gt;</definition>
        <argsstring></argsstring>
        <name>ratio_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="150" column="1" bodyfile="libraries/protocol/include/graphene/protocol/types.hpp" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a32e784a8edceba5506db2c130ed9cb9c" prot="public" static="no">
        <type><ref refid="classfc_1_1ripemd160" kindref="compound">fc::ripemd160</ref></type>
        <definition>using graphene::protocol::block_id_type = typedef fc::ripemd160</definition>
        <argsstring></argsstring>
        <name>block_id_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="304" column="1" bodyfile="libraries/protocol/include/graphene/protocol/types.hpp" bodystart="304" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a3268cd3ebeb529ab0c0681d9564dab4a" prot="public" static="no">
        <type><ref refid="classfc_1_1ripemd160" kindref="compound">fc::ripemd160</ref></type>
        <definition>using graphene::protocol::checksum_type = typedef fc::ripemd160</definition>
        <argsstring></argsstring>
        <name>checksum_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="305" column="1" bodyfile="libraries/protocol/include/graphene/protocol/types.hpp" bodystart="305" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a040f9f71bff896e89dc9ee3ff92bb076" prot="public" static="no">
        <type><ref refid="classfc_1_1ripemd160" kindref="compound">fc::ripemd160</ref></type>
        <definition>using graphene::protocol::transaction_id_type = typedef fc::ripemd160</definition>
        <argsstring></argsstring>
        <name>transaction_id_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="306" column="1" bodyfile="libraries/protocol/include/graphene/protocol/types.hpp" bodystart="306" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a4ba2f090fee47759ed812b7849c6fee8" prot="public" static="no">
        <type><ref refid="classfc_1_1sha256" kindref="compound">fc::sha256</ref></type>
        <definition>using graphene::protocol::digest_type = typedef fc::sha256</definition>
        <argsstring></argsstring>
        <name>digest_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="307" column="1" bodyfile="libraries/protocol/include/graphene/protocol/types.hpp" bodystart="307" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1ade0535fb9b29fcc7de372c0f1ff5d218" prot="public" static="no">
        <type><ref refid="namespacefc_1_1ecc_1a8ac51b98c1c16deb73d228874c5294af" kindref="member">fc::ecc::compact_signature</ref></type>
        <definition>using graphene::protocol::signature_type = typedef fc::ecc::compact_signature</definition>
        <argsstring></argsstring>
        <name>signature_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="308" column="1" bodyfile="libraries/protocol/include/graphene/protocol/types.hpp" bodystart="308" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a69b2104c1c11eed2d17bd29b86713347" prot="public" static="no">
        <type><ref refid="structfc_1_1safe" kindref="compound">safe</ref>&lt; int64_t &gt;</type>
        <definition>using graphene::protocol::share_type = typedef safe&lt;int64_t&gt;</definition>
        <argsstring></argsstring>
        <name>share_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="309" column="1" bodyfile="libraries/protocol/include/graphene/protocol/types.hpp" bodystart="309" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a0b8cef782b0ba0eb807da61f2cc811bf" prot="public" static="no">
        <type>uint16_t</type>
        <definition>using graphene::protocol::weight_type = typedef uint16_t</definition>
        <argsstring></argsstring>
        <name>weight_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="310" column="1" bodyfile="libraries/protocol/include/graphene/protocol/types.hpp" bodystart="310" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1aae2f87c394dcd3096561bb3ca5962148" prot="public" static="no">
        <type><ref refid="classfc_1_1static__variant" kindref="compound">fc::static_variant</ref>&lt; <ref refid="structgraphene_1_1protocol_1_1linear__vesting__policy__initializer" kindref="compound">linear_vesting_policy_initializer</ref>, <ref refid="structgraphene_1_1protocol_1_1cdd__vesting__policy__initializer" kindref="compound">cdd_vesting_policy_initializer</ref>, <ref refid="structgraphene_1_1protocol_1_1instant__vesting__policy__initializer" kindref="compound">instant_vesting_policy_initializer</ref> &gt;</type>
        <definition>typedef fc::static_variant&lt; linear_vesting_policy_initializer, cdd_vesting_policy_initializer, instant_vesting_policy_initializer &gt; graphene::protocol::vesting_policy_initializer</definition>
        <argsstring></argsstring>
        <name>vesting_policy_initializer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/vesting.hpp" line="54" column="1" bodyfile="libraries/protocol/include/graphene/protocol/vesting.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__workers_1gacad8e9996ced0a2fc8e66f65210701d9" prot="public" static="no">
        <type><ref refid="classfc_1_1static__variant" kindref="compound">static_variant</ref>&lt; <ref refid="structgraphene_1_1protocol_1_1refund__worker__initializer" kindref="compound">refund_worker_initializer</ref>, <ref refid="structgraphene_1_1protocol_1_1vesting__balance__worker__initializer" kindref="compound">vesting_balance_worker_initializer</ref>, <ref refid="structgraphene_1_1protocol_1_1burn__worker__initializer" kindref="compound">burn_worker_initializer</ref> &gt;</type>
        <definition>typedef static_variant&lt; refund_worker_initializer, vesting_balance_worker_initializer, burn_worker_initializer &gt; graphene::protocol::worker_initializer</definition>
        <argsstring></argsstring>
        <name>worker_initializer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/worker.hpp" line="72" column="1" bodyfile="libraries/protocol/include/graphene/protocol/worker.hpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacegraphene_1_1protocol_1ae2683dc9cb7f263a77bdcad5da823edc" prot="public" static="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>static constexpr bool graphene::protocol::is_safe&lt; fc::safe&lt; I &gt; &gt;</definition>
        <argsstring></argsstring>
        <name>is_safe</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/restriction_predicate.hxx" line="42" column="1" bodyfile="libraries/protocol/custom_authorities/restriction_predicate.hxx" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacegraphene_1_1protocol_1afbcad5f82fffb9b6c66e58fb6fd6735d" prot="public" static="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool graphene::protocol::is_flat_set</definition>
        <argsstring></argsstring>
        <name>is_flat_set</name>
        <initializer>= <ref refid="structgraphene_1_1protocol_1_1is__flat__set__impl" kindref="compound">is_flat_set_impl</ref>&lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/restriction_predicate.hxx" line="48" column="1" bodyfile="libraries/protocol/custom_authorities/restriction_predicate.hxx" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacegraphene_1_1protocol_1a17432cb358c84397417959259682d09b" prot="public" static="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool graphene::protocol::is_integral</definition>
        <argsstring></argsstring>
        <name>is_integral</name>
        <initializer>= !std::is_same&lt;T, bool&gt;::value &amp;&amp;
                                                         !std::is_same&lt;T, <ref refid="structfc_1_1safe" kindref="compound">safe</ref>&lt;bool&gt;&gt;::value &amp;&amp;
                                                         (is_safe&lt;T&gt; || std::is_integral&lt;T&gt;::value)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/restriction_predicate.hxx" line="51" column="1" bodyfile="libraries/protocol/custom_authorities/restriction_predicate.hxx" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacegraphene_1_1protocol_1aacc65186fc4086220f726a536343bc53" prot="public" static="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool graphene::protocol::comparable_types</definition>
        <argsstring></argsstring>
        <name>comparable_types</name>
        <initializer>= !std::is_same&lt;T, <ref refid="structgraphene_1_1protocol_1_1void__t" kindref="compound">void_t</ref>&gt;::value &amp;&amp;
                                         (std::is_same&lt;T, U&gt;::value || (is_integral&lt;T&gt; &amp;&amp; is_integral&lt;U&gt;))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/restriction_predicate.hxx" line="57" column="1" bodyfile="libraries/protocol/custom_authorities/restriction_predicate.hxx" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacegraphene_1_1protocol_1aae8dbe8fa4d21cc026549277e2f6f956" prot="public" static="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool graphene::protocol::is_container</definition>
        <argsstring></argsstring>
        <name>is_container</name>
        <initializer>= <ref refid="structgraphene_1_1protocol_1_1is__container__impl" kindref="compound">is_container_impl</ref>&lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/restriction_predicate.hxx" line="65" column="1" bodyfile="libraries/protocol/custom_authorities/restriction_predicate.hxx" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacegraphene_1_1protocol_1a0eb5c017bffe464bf93c19274807b85c" prot="public" static="yes" mutable="no">
        <type>const uint16_t</type>
        <definition>const uint16_t graphene::protocol::ASSET_ISSUER_PERMISSION_MASK</definition>
        <argsstring></argsstring>
        <name>ASSET_ISSUER_PERMISSION_MASK</name>
        <initializer>=
        <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7ac0be53c416c0f365980a14e5d6a83a60" kindref="member">charge_market_fee</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a925268cf7f7e511d2858eee66ef82cbf" kindref="member">white_list</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a63b60eb3d6e25d669d8b93cb45ac6bc4" kindref="member">override_authority</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7aaec73585631ebefcce567035b27c252c" kindref="member">transfer_restricted</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7aedc04b6ab421f7f2363f3dc9d113b73d" kindref="member">disable_force_settle</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7afa951fce8754e6fb747e13854615eeb9" kindref="member">global_settle</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a5a96fe025ec33ffe4b103458846d08b3" kindref="member">disable_confidential</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a4ec6c6bd50bc48052bd7783d8b08d70a" kindref="member">witness_fed_asset</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7ad19c5dd00f90497696a850af9c8bd26c" kindref="member">committee_fed_asset</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7aecdf0e2eaaf02379a4e59b3a480ee79a" kindref="member">lock_max_supply</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a143eda9f4527f81fdef4c1cfe22965de" kindref="member">disable_new_supply</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a00ba1631057f985e077c7e7b2e318266" kindref="member">disable_mcr_update</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7aff93381986b4c574d1b2365120274364" kindref="member">disable_icr_update</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a6d6c06210cdf7cb26dba5263e1d18d23" kindref="member">disable_mssr_update</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a549e875509c1f788fd14e8570dad07d1" kindref="member">disable_bsrm_update</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a91387a1c4b272a590ac37cf88b8ba491" kindref="member">disable_collateral_bidding</ref></initializer>
        <briefdescription>
<para>The bits that can be used in asset issuer permissions for non-UIA assets. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="228" column="1" bodyfile="libraries/protocol/include/graphene/protocol/types.hpp" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacegraphene_1_1protocol_1a8fe7d97154b3052e35192b35b3ea0e29" prot="public" static="yes" mutable="no">
        <type>const uint16_t</type>
        <definition>const uint16_t graphene::protocol::ASSET_ISSUER_PERMISSION_ENABLE_BITS_MASK</definition>
        <argsstring></argsstring>
        <name>ASSET_ISSUER_PERMISSION_ENABLE_BITS_MASK</name>
        <initializer>=
        <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7ac0be53c416c0f365980a14e5d6a83a60" kindref="member">charge_market_fee</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a925268cf7f7e511d2858eee66ef82cbf" kindref="member">white_list</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a63b60eb3d6e25d669d8b93cb45ac6bc4" kindref="member">override_authority</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7aaec73585631ebefcce567035b27c252c" kindref="member">transfer_restricted</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7aedc04b6ab421f7f2363f3dc9d113b73d" kindref="member">disable_force_settle</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7afa951fce8754e6fb747e13854615eeb9" kindref="member">global_settle</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a5a96fe025ec33ffe4b103458846d08b3" kindref="member">disable_confidential</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a4ec6c6bd50bc48052bd7783d8b08d70a" kindref="member">witness_fed_asset</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7ad19c5dd00f90497696a850af9c8bd26c" kindref="member">committee_fed_asset</ref></initializer>
        <briefdescription>
<para>The &quot;enable&quot; bits for non-UIA assets. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="246" column="1" bodyfile="libraries/protocol/include/graphene/protocol/types.hpp" bodystart="246" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacegraphene_1_1protocol_1a433aa86a54646b67173e7ec0a4f915c9" prot="public" static="yes" mutable="no">
        <type>const uint16_t</type>
        <definition>const uint16_t graphene::protocol::ASSET_ISSUER_PERMISSION_DISABLE_BITS_MASK</definition>
        <argsstring></argsstring>
        <name>ASSET_ISSUER_PERMISSION_DISABLE_BITS_MASK</name>
        <initializer>=
        <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7aecdf0e2eaaf02379a4e59b3a480ee79a" kindref="member">lock_max_supply</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a143eda9f4527f81fdef4c1cfe22965de" kindref="member">disable_new_supply</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a00ba1631057f985e077c7e7b2e318266" kindref="member">disable_mcr_update</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7aff93381986b4c574d1b2365120274364" kindref="member">disable_icr_update</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a6d6c06210cdf7cb26dba5263e1d18d23" kindref="member">disable_mssr_update</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a549e875509c1f788fd14e8570dad07d1" kindref="member">disable_bsrm_update</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a91387a1c4b272a590ac37cf88b8ba491" kindref="member">disable_collateral_bidding</ref></initializer>
        <briefdescription>
<para>The &quot;disable&quot; bits for non-UIA assets. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="257" column="1" bodyfile="libraries/protocol/include/graphene/protocol/types.hpp" bodystart="257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacegraphene_1_1protocol_1a8244e9677c0d3a39e1475127840a2ab3" prot="public" static="yes" mutable="no">
        <type>const uint16_t</type>
        <definition>const uint16_t graphene::protocol::UIA_ASSET_ISSUER_PERMISSION_MASK</definition>
        <argsstring></argsstring>
        <name>UIA_ASSET_ISSUER_PERMISSION_MASK</name>
        <initializer>=
        <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7ac0be53c416c0f365980a14e5d6a83a60" kindref="member">charge_market_fee</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a925268cf7f7e511d2858eee66ef82cbf" kindref="member">white_list</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a63b60eb3d6e25d669d8b93cb45ac6bc4" kindref="member">override_authority</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7aaec73585631ebefcce567035b27c252c" kindref="member">transfer_restricted</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a5a96fe025ec33ffe4b103458846d08b3" kindref="member">disable_confidential</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7aecdf0e2eaaf02379a4e59b3a480ee79a" kindref="member">lock_max_supply</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a143eda9f4527f81fdef4c1cfe22965de" kindref="member">disable_new_supply</ref></initializer>
        <briefdescription>
<para>The bits that can be used in asset issuer permissions for UIA assets. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="266" column="1" bodyfile="libraries/protocol/include/graphene/protocol/types.hpp" bodystart="266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacegraphene_1_1protocol_1ab7b7bc20530a11d4f3b234ff5467e006" prot="public" static="yes" mutable="no">
        <type>const uint16_t</type>
        <definition>const uint16_t graphene::protocol::DEFAULT_UIA_ASSET_ISSUER_PERMISSION</definition>
        <argsstring></argsstring>
        <name>DEFAULT_UIA_ASSET_ISSUER_PERMISSION</name>
        <initializer>=
        <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7ac0be53c416c0f365980a14e5d6a83a60" kindref="member">charge_market_fee</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a925268cf7f7e511d2858eee66ef82cbf" kindref="member">white_list</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a63b60eb3d6e25d669d8b93cb45ac6bc4" kindref="member">override_authority</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7aaec73585631ebefcce567035b27c252c" kindref="member">transfer_restricted</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a5a96fe025ec33ffe4b103458846d08b3" kindref="member">disable_confidential</ref></initializer>
        <briefdescription>
<para>The bits that can be used in asset issuer permissions for UIA assets before hf48/75. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="275" column="1" bodyfile="libraries/protocol/include/graphene/protocol/types.hpp" bodystart="275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacegraphene_1_1protocol_1a907e9d027ce0372a809c22e097959ffe" prot="public" static="yes" mutable="no">
        <type>const uint16_t</type>
        <definition>const uint16_t graphene::protocol::NON_UIA_ONLY_ISSUER_PERMISSION_MASK</definition>
        <argsstring></argsstring>
        <name>NON_UIA_ONLY_ISSUER_PERMISSION_MASK</name>
        <initializer>=
        ASSET_ISSUER_PERMISSION_MASK ^ UIA_ASSET_ISSUER_PERMISSION_MASK</initializer>
        <briefdescription>
<para>The bits that can be used in asset issuer permissions for non-UIA assets but not for UIA assets. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="282" column="1" bodyfile="libraries/protocol/include/graphene/protocol/types.hpp" bodystart="282" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacegraphene_1_1protocol_1a267fff9cc345aef4491acfc545e3b0d6" prot="public" static="yes" mutable="no">
        <type>const uint16_t</type>
        <definition>const uint16_t graphene::protocol::PERMISSION_ONLY_MASK</definition>
        <argsstring></argsstring>
        <name>PERMISSION_ONLY_MASK</name>
        <initializer>=
        <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7afa951fce8754e6fb747e13854615eeb9" kindref="member">global_settle</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a00ba1631057f985e077c7e7b2e318266" kindref="member">disable_mcr_update</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7aff93381986b4c574d1b2365120274364" kindref="member">disable_icr_update</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a6d6c06210cdf7cb26dba5263e1d18d23" kindref="member">disable_mssr_update</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a549e875509c1f788fd14e8570dad07d1" kindref="member">disable_bsrm_update</ref></initializer>
        <briefdescription>
<para>The bits that can be used in asset issuer permissions but can not be used in flags. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="285" column="1" bodyfile="libraries/protocol/include/graphene/protocol/types.hpp" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacegraphene_1_1protocol_1aecde169c42ed43656fd92c51e2abe857" prot="public" static="yes" mutable="no">
        <type>const uint16_t</type>
        <definition>const uint16_t graphene::protocol::VALID_FLAGS_MASK</definition>
        <argsstring></argsstring>
        <name>VALID_FLAGS_MASK</name>
        <initializer>= ASSET_ISSUER_PERMISSION_MASK &amp; (uint16_t)(~PERMISSION_ONLY_MASK)</initializer>
        <briefdescription>
<para>The bits that can be used in flags for non-UIA assets. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="292" column="1" bodyfile="libraries/protocol/include/graphene/protocol/types.hpp" bodystart="292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacegraphene_1_1protocol_1aa321252c49a5375abe25b61f62f038d5" prot="public" static="yes" mutable="no">
        <type>const uint16_t</type>
        <definition>const uint16_t graphene::protocol::UIA_VALID_FLAGS_MASK</definition>
        <argsstring></argsstring>
        <name>UIA_VALID_FLAGS_MASK</name>
        <initializer>= UIA_ASSET_ISSUER_PERMISSION_MASK</initializer>
        <briefdescription>
<para>the bits that can be used in flags for UIA assets </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="294" column="1" bodyfile="libraries/protocol/include/graphene/protocol/types.hpp" bodystart="294" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacegraphene_1_1protocol_1a59cd8474d34d9ea95bc8630340de313e" prot="public" static="no" mutable="no">
        <type></type>
        <definition>missing required active authority missing required other authority graphene::protocol::transaction_exception</definition>
        <argsstring></argsstring>
        <name>transaction_exception</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/small_ops.cpp" line="40" column="1" bodyfile="libraries/protocol/small_ops.cpp" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacegraphene_1_1protocol_1a03369f3ca9f5b7877e32928d1bace3c5" prot="public" static="no" mutable="no">
        <type>const flat_set&lt; <ref refid="structgraphene_1_1protocol_1_1public__key__type" kindref="compound">public_key_type</ref> &gt;</type>
        <definition>const flat_set&lt;public_key_type&gt; graphene::protocol::empty_keyset</definition>
        <argsstring></argsstring>
        <name>empty_keyset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/transaction.cpp" line="115" column="1" bodyfile="libraries/protocol/transaction.cpp" bodystart="115" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a17038847d568dbca2c8b23801675e749" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::is_valid_name</definition>
        <argsstring>(const string &amp;name)</argsstring>
        <name>is_valid_name</name>
        <param>
          <type>const string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Names must comply with the following grammar (RFC 1035): <programlisting><codeline><highlight class="normal">&lt;domain&gt;<sp/>::=<sp/>&lt;subdomain&gt;<sp/>|<sp/>&quot;<sp/>&quot;</highlight></codeline>
<codeline><highlight class="normal">&lt;subdomain&gt;<sp/>::=<sp/>&lt;label&gt;<sp/>|<sp/>&lt;subdomain&gt;<sp/>&quot;.&quot;<sp/>&lt;label&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;label&gt;<sp/>::=<sp/>&lt;letter&gt;<sp/>[<sp/>[<sp/>&lt;ldh-str&gt;<sp/>]<sp/>&lt;let-dig&gt;<sp/>]</highlight></codeline>
<codeline><highlight class="normal">&lt;ldh-str&gt;<sp/>::=<sp/>&lt;let-dig-hyp&gt;<sp/>|<sp/>&lt;let-dig-hyp&gt;<sp/>&lt;ldh-str&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;let-dig-hyp&gt;<sp/>::=<sp/>&lt;let-dig&gt;<sp/>|<sp/>&quot;-&quot;</highlight></codeline>
<codeline><highlight class="normal">&lt;let-dig&gt;<sp/>::=<sp/>&lt;letter&gt;<sp/>|<sp/>&lt;digit&gt;</highlight></codeline>
</programlisting></para><para>Which is equivalent to the following:</para><para><programlisting><codeline><highlight class="normal">&lt;domain&gt;<sp/>::=<sp/>&lt;subdomain&gt;<sp/>|<sp/>&quot;<sp/>&quot;</highlight></codeline>
<codeline><highlight class="normal">&lt;subdomain&gt;<sp/>::=<sp/>&lt;label&gt;<sp/>(&quot;.&quot;<sp/>&lt;label&gt;)*</highlight></codeline>
<codeline><highlight class="normal">&lt;label&gt;<sp/>::=<sp/>&lt;letter&gt;<sp/>[<sp/>[<sp/>&lt;let-dig-hyp&gt;+<sp/>]<sp/>&lt;let-dig&gt;<sp/>]</highlight></codeline>
<codeline><highlight class="normal">&lt;let-dig-hyp&gt;<sp/>::=<sp/>&lt;let-dig&gt;<sp/>|<sp/>&quot;-&quot;</highlight></codeline>
<codeline><highlight class="normal">&lt;let-dig&gt;<sp/>::=<sp/>&lt;letter&gt;<sp/>|<sp/>&lt;digit&gt;</highlight></codeline>
</programlisting></para><para>I.e. a valid name consists of a dot-separated sequence of one or more labels consisting of the following rules:</para><para><itemizedlist>
<listitem><para>Each label is three characters or more</para></listitem><listitem><para>Each label begins with a letter</para></listitem><listitem><para>Each label ends with a letter or digit</para></listitem><listitem><para>Each label contains only letters, digits or hyphens</para></listitem></itemizedlist>
</para><para>In addition we require the following:</para><para><itemizedlist>
<listitem><para>All letters are lowercase</para></listitem><listitem><para>Length is between (inclusive) GRAPHENE_MIN_ACCOUNT_NAME_LENGTH and GRAPHENE_MAX_ACCOUNT_NAME_LENGTH </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/account.cpp" line="64" column="1" bodyfile="libraries/protocol/account.cpp" bodystart="64" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1aa14f880973444987a8fa480cfc9f3f78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::is_cheap_name</definition>
        <argsstring>(const string &amp;n)</argsstring>
        <name>is_cheap_name</name>
        <param>
          <type>const string &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/account.cpp" line="133" column="1" bodyfile="libraries/protocol/account.cpp" bodystart="133" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a2babeb53917c92361abcf1e41a410506" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::operator==</definition>
        <argsstring>(const price &amp;a, const price &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/asset.cpp" line="34" column="1" bodyfile="libraries/protocol/asset.cpp" bodystart="34" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a6887697dfd803d25a5ede42ee5582e1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::operator&lt;</definition>
        <argsstring>(const price &amp;a, const price &amp;b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/asset.cpp" line="45" column="1" bodyfile="libraries/protocol/asset.cpp" bodystart="45" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1ad729df32a31402a8a97954c081809816" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref></type>
        <definition>asset graphene::protocol::operator*</definition>
        <argsstring>(const asset &amp;a, const price &amp;b)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Multiply and round down. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/asset.cpp" line="58" column="1" bodyfile="libraries/protocol/asset.cpp" bodystart="58" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1ab0740fdafe73c553696363b97480785d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref></type>
        <definition>price graphene::protocol::operator/</definition>
        <argsstring>(const asset &amp;base, const asset &amp;quote)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>quote</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/asset.cpp" line="100" column="1" bodyfile="libraries/protocol/asset.cpp" bodystart="100" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a0b645b95359baf95da9978f570eedc5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref></type>
        <definition>price graphene::protocol::operator*</definition>
        <argsstring>(const price &amp;p, const ratio_type &amp;r)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegraphene_1_1protocol_1a54851df9ea21bef79e7cdb2da2e3e3cc" kindref="member">ratio_type</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/asset.cpp" line="112" column="1" bodyfile="libraries/protocol/asset.cpp" bodystart="112" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1ad637106d775104ae7753d3cda321076f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref></type>
        <definition>price graphene::protocol::operator/</definition>
        <argsstring>(const price &amp;p, const ratio_type &amp;r)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegraphene_1_1protocol_1a54851df9ea21bef79e7cdb2da2e3e3cc" kindref="member">ratio_type</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/asset.cpp" line="193" column="1" bodyfile="libraries/protocol/asset.cpp" bodystart="193" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a30b50b9c985f8029039fd640b476e582" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::is_valid_symbol</definition>
        <argsstring>(const string &amp;symbol)</argsstring>
        <name>is_valid_symbol</name>
        <param>
          <type>const string &amp;</type>
          <declname>symbol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Valid symbols can contain [A-Z0-9], and &apos;.&apos; They must start with [A, Z] They must end with [A, Z] before HF_620 or [A-Z0-9] after it They can contain a maximum of one &apos;.&apos; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/asset_ops.cpp" line="38" column="1" bodyfile="libraries/protocol/asset_ops.cpp" bodystart="38" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a0e80310f8374ca441b6b1dfd28e9401d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::protocol::add_authority_accounts</definition>
        <argsstring>(flat_set&lt; account_id_type &gt; &amp;result, const authority &amp;a)</argsstring>
        <name>add_authority_accounts</name>
        <param>
          <type>flat_set&lt; account_id_type &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1authority" kindref="compound">authority</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add all account members of the given authority to the given flat_set. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/authority.cpp" line="31" column="1" bodyfile="libraries/protocol/authority.cpp" bodystart="31" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a2edda670d782a42d1505bce57e262c1f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void graphene::protocol::validate_acceptable_collateral</definition>
        <argsstring>(const flat_map&lt; asset_id_type, price &gt; &amp;acceptable_collateral, const asset_id_type *p_asset_type=nullptr)</argsstring>
        <name>validate_acceptable_collateral</name>
        <param>
          <type>const flat_map&lt; asset_id_type, <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &gt; &amp;</type>
          <declname>acceptable_collateral</declname>
        </param>
        <param>
          <type>const asset_id_type *</type>
          <declname>p_asset_type</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/credit_offer.cpp" line="30" column="1" bodyfile="libraries/protocol/credit_offer.cpp" bodystart="30" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a4eddb1d4806ef43e41e193feb85ebad6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void graphene::protocol::validate_acceptable_borrowers</definition>
        <argsstring>(const flat_map&lt; account_id_type, share_type &gt; &amp;acceptable_borrowers)</argsstring>
        <name>validate_acceptable_borrowers</name>
        <param>
          <type>const flat_map&lt; account_id_type, <ref refid="namespacegraphene_1_1protocol_1a69b2104c1c11eed2d17bd29b86713347" kindref="member">share_type</ref> &gt; &amp;</type>
          <declname>acceptable_borrowers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/credit_offer.cpp" line="50" column="1" bodyfile="libraries/protocol/credit_offer.cpp" bodystart="50" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a0b61b1de4094d36075aded3531ddfffa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template <ref refid="namespacegraphene_1_1protocol_1a7253c01693b853bacbc927c3430c9c5f" kindref="member">object_restriction_predicate</ref>&lt; <ref refid="namespacegraphene_1_1protocol_1a69b2104c1c11eed2d17bd29b86713347" kindref="member">share_type</ref> &gt;</type>
        <definition>template object_restriction_predicate&lt; extensions_type &gt; graphene::protocol::create_predicate_function</definition>
        <argsstring>(restriction_function func, restriction_argument arg)</argsstring>
        <name>create_predicate_function</name>
        <param>
          <type><ref refid="structgraphene_1_1protocol_1_1restriction_1a1a4815353982e8a48101c3b3d1c84da9" kindref="member">restriction_function</ref></type>
          <declname>func</declname>
        </param>
        <param>
          <type><ref refid="namespacegraphene_1_1protocol_1abb79b765f1d37d996872265184ddfc19" kindref="member">restriction_argument</ref></type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/create_predicate_fwd_1.cpp" line="43" column="1" bodyfile="libraries/protocol/custom_authorities/restriction_predicate.hxx" bodystart="469" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1ad11815bc29d3d028fab9aec4dd084423" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegraphene_1_1protocol_1a3c1d4080710cedea70727ba0b347e8d8" kindref="member">result_type</ref></type>
        <definition>object_restriction_predicate&lt; operation &gt; graphene::protocol::get_restriction_pred_list_1</definition>
        <argsstring>(size_t idx, vector&lt; restriction &gt; rs)</argsstring>
        <name>get_restriction_pred_list_1</name>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="structgraphene_1_1protocol_1_1restriction" kindref="compound">restriction</ref> &gt;</type>
          <declname>rs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/list_1.cpp" line="31" column="1" bodyfile="libraries/protocol/custom_authorities/list_1.cpp" bodystart="31" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1ac15228ea27a5e95a1120003429597de9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegraphene_1_1protocol_1a3c1d4080710cedea70727ba0b347e8d8" kindref="member">result_type</ref></type>
        <definition>object_restriction_predicate&lt; operation &gt; graphene::protocol::get_restriction_pred_list_10</definition>
        <argsstring>(size_t idx, vector&lt; restriction &gt; rs)</argsstring>
        <name>get_restriction_pred_list_10</name>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="structgraphene_1_1protocol_1_1restriction" kindref="compound">restriction</ref> &gt;</type>
          <declname>rs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/list_10.cpp" line="31" column="1" bodyfile="libraries/protocol/custom_authorities/list_10.cpp" bodystart="31" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1ad402dab3dd4732938f6f1ef91c9b9e55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegraphene_1_1protocol_1a3c1d4080710cedea70727ba0b347e8d8" kindref="member">result_type</ref></type>
        <definition>object_restriction_predicate&lt; operation &gt; graphene::protocol::get_restriction_pred_list_11</definition>
        <argsstring>(size_t idx, vector&lt; restriction &gt; rs)</argsstring>
        <name>get_restriction_pred_list_11</name>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="structgraphene_1_1protocol_1_1restriction" kindref="compound">restriction</ref> &gt;</type>
          <declname>rs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/list_11.cpp" line="31" column="1" bodyfile="libraries/protocol/custom_authorities/list_11.cpp" bodystart="31" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a597c53374d94d06f723542f109bcad83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegraphene_1_1protocol_1a3c1d4080710cedea70727ba0b347e8d8" kindref="member">result_type</ref></type>
        <definition>object_restriction_predicate&lt; operation &gt; graphene::protocol::get_restriction_pred_list_2</definition>
        <argsstring>(size_t idx, vector&lt; restriction &gt; rs)</argsstring>
        <name>get_restriction_pred_list_2</name>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="structgraphene_1_1protocol_1_1restriction" kindref="compound">restriction</ref> &gt;</type>
          <declname>rs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/list_2.cpp" line="32" column="1" bodyfile="libraries/protocol/custom_authorities/list_2.cpp" bodystart="32" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a95268a54ca5b20ab57d9e4df6ef5739b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegraphene_1_1protocol_1a3c1d4080710cedea70727ba0b347e8d8" kindref="member">result_type</ref></type>
        <definition>object_restriction_predicate&lt; operation &gt; graphene::protocol::get_restriction_pred_list_3</definition>
        <argsstring>(size_t idx, vector&lt; restriction &gt; rs)</argsstring>
        <name>get_restriction_pred_list_3</name>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="structgraphene_1_1protocol_1_1restriction" kindref="compound">restriction</ref> &gt;</type>
          <declname>rs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/list_3.cpp" line="32" column="1" bodyfile="libraries/protocol/custom_authorities/list_3.cpp" bodystart="32" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a193efd75c1018cec7f4347f6b94d6f46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegraphene_1_1protocol_1a3c1d4080710cedea70727ba0b347e8d8" kindref="member">result_type</ref></type>
        <definition>object_restriction_predicate&lt; operation &gt; graphene::protocol::get_restriction_pred_list_5</definition>
        <argsstring>(size_t idx, vector&lt; restriction &gt; rs)</argsstring>
        <name>get_restriction_pred_list_5</name>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="structgraphene_1_1protocol_1_1restriction" kindref="compound">restriction</ref> &gt;</type>
          <declname>rs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/list_5.cpp" line="32" column="1" bodyfile="libraries/protocol/custom_authorities/list_5.cpp" bodystart="32" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a5900672c4d8af6d5a922ac985cf6180e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegraphene_1_1protocol_1a3c1d4080710cedea70727ba0b347e8d8" kindref="member">result_type</ref></type>
        <definition>object_restriction_predicate&lt; operation &gt; graphene::protocol::get_restriction_pred_list_6</definition>
        <argsstring>(size_t idx, vector&lt; restriction &gt; rs)</argsstring>
        <name>get_restriction_pred_list_6</name>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="structgraphene_1_1protocol_1_1restriction" kindref="compound">restriction</ref> &gt;</type>
          <declname>rs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/list_6.cpp" line="32" column="1" bodyfile="libraries/protocol/custom_authorities/list_6.cpp" bodystart="32" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1af3c4befa4175b29970a81e6d2df7c7a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegraphene_1_1protocol_1a3c1d4080710cedea70727ba0b347e8d8" kindref="member">result_type</ref></type>
        <definition>object_restriction_predicate&lt; operation &gt; graphene::protocol::get_restriction_pred_list_9</definition>
        <argsstring>(size_t idx, vector&lt; restriction &gt; rs)</argsstring>
        <name>get_restriction_pred_list_9</name>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="structgraphene_1_1protocol_1_1restriction" kindref="compound">restriction</ref> &gt;</type>
          <declname>rs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/list_9.cpp" line="32" column="1" bodyfile="libraries/protocol/custom_authorities/list_9.cpp" bodystart="32" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a747da9ad2c8e44a5369658cabdb72fed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegraphene_1_1protocol_1ab01bcc65fd718934c7dc300dda464228" kindref="member">restriction_predicate_function</ref></type>
        <definition>restriction_predicate_function graphene::protocol::get_restriction_predicate</definition>
        <argsstring>(vector&lt; restriction &gt; rs, operation::tag_type op_type)</argsstring>
        <name>get_restriction_predicate</name>
        <param>
          <type>vector&lt; <ref refid="structgraphene_1_1protocol_1_1restriction" kindref="compound">restriction</ref> &gt;</type>
          <declname>rs</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1static__variant_1aba87b38cb3bcf33da8b38323211fdcb7" kindref="member">operation::tag_type</ref></type>
          <declname>op_type</declname>
        </param>
        <briefdescription>
<para>get_restriction_predicate Get a predicate function for the supplied restriction </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rs</parametername>
</parameternamelist>
<parameterdescription>
<para>The restrictions to evaluate operations against </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>op_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag specifying which operation type the restrictions apply to </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A predicate function which evaluates an operation to determine whether it complies with the restriction </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/restriction_predicate.cpp" line="32" column="1" bodyfile="libraries/protocol/custom_authorities/restriction_predicate.cpp" bodystart="32" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a895a8fdeb15525b40447501a441fec4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;I&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>const auto &amp;</type>
        <definition>const auto&amp; graphene::protocol::to_num</definition>
        <argsstring>(const I &amp;i)</argsstring>
        <name>to_num</name>
        <param>
          <type>const I &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/restriction_predicate.hxx" line="73" column="1" bodyfile="libraries/protocol/custom_authorities/restriction_predicate.hxx" bodystart="73" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a52970e15d26e4955a34a24d82f6370df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I</type>
          </param>
        </templateparamlist>
        <type>const auto &amp;</type>
        <definition>const auto&amp; graphene::protocol::to_num</definition>
        <argsstring>(const fc::safe&lt; I &gt; &amp;i)</argsstring>
        <name>to_num</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">fc::safe</ref>&lt; I &gt; &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/restriction_predicate.hxx" line="75" column="1" bodyfile="libraries/protocol/custom_authorities/restriction_predicate.hxx" bodystart="75" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1aafa8483afa9b8b60a39c791b654e057e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto graphene::protocol::to_num</definition>
        <argsstring>(const fc::time_point_sec &amp;t)</argsstring>
        <name>to_num</name>
        <param>
          <type>const <ref refid="classfc_1_1time__point__sec" kindref="compound">fc::time_point_sec</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/restriction_predicate.hxx" line="76" column="1" bodyfile="libraries/protocol/custom_authorities/restriction_predicate.hxx" bodystart="76" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a843163fb60c8fcaa50a7dd59d414b3c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Object</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacegraphene_1_1protocol_1a7253c01693b853bacbc927c3430c9c5f" kindref="member">object_restriction_predicate</ref>&lt; Object &gt;</type>
        <definition>object_restriction_predicate&lt; Object &gt; graphene::protocol::restrictions_to_predicate</definition>
        <argsstring>(vector&lt; restriction &gt;, bool)</argsstring>
        <name>restrictions_to_predicate</name>
        <param>
          <type>vector&lt; <ref refid="structgraphene_1_1protocol_1_1restriction" kindref="compound">restriction</ref> &gt;</type>
          <defname>rs</defname>
        </param>
        <param>
          <type>bool</type>
          <defname>allow_empty</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/restriction_predicate.hxx" line="375" column="1" bodyfile="libraries/protocol/custom_authorities/restriction_predicate.hxx" bodystart="568" bodyend="593"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a556c327b716f4ced58b3413510ccdd35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename P</type>
          </param>
          <param>
            <type>typename A</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;P::valid&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespacegraphene_1_1protocol_1a7253c01693b853bacbc927c3430c9c5f" kindref="member">object_restriction_predicate</ref>&lt; F &gt;</type>
        <definition>object_restriction_predicate&lt;F&gt; graphene::protocol::embed_argument</definition>
        <argsstring>(P p, A a, short)</argsstring>
        <name>embed_argument</name>
        <param>
          <type>P</type>
          <declname>p</declname>
        </param>
        <param>
          <type>A</type>
          <declname>a</declname>
        </param>
        <param>
          <type>short</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/restriction_predicate.hxx" line="447" column="1" bodyfile="libraries/protocol/custom_authorities/restriction_predicate.hxx" bodystart="447" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a6bc18453c54f77772de113b2e9cce7d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename P</type>
          </param>
          <param>
            <type>typename A</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacegraphene_1_1protocol_1a7253c01693b853bacbc927c3430c9c5f" kindref="member">object_restriction_predicate</ref>&lt; F &gt;</type>
        <definition>object_restriction_predicate&lt;F&gt; graphene::protocol::embed_argument</definition>
        <argsstring>(P, A, long)</argsstring>
        <name>embed_argument</name>
        <param>
          <type>P</type>
        </param>
        <param>
          <type>A</type>
        </param>
        <param>
          <type>long</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/restriction_predicate.hxx" line="454" column="1" bodyfile="libraries/protocol/custom_authorities/restriction_predicate.hxx" bodystart="454" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1ad525e080498378247f773ba4178a89ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; typename... &gt; class</type>
            <declname>Predicate</declname>
            <defname>Predicate</defname>
          </param>
          <param>
            <type>typename Field</type>
          </param>
          <param>
            <type>typename ArgVariant</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacegraphene_1_1protocol_1a7253c01693b853bacbc927c3430c9c5f" kindref="member">object_restriction_predicate</ref>&lt; Field &gt;</type>
        <definition>object_restriction_predicate&lt;Field&gt; graphene::protocol::make_predicate</definition>
        <argsstring>(ArgVariant arg)</argsstring>
        <name>make_predicate</name>
        <param>
          <type>ArgVariant</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/restriction_predicate.hxx" line="460" column="1" bodyfile="libraries/protocol/custom_authorities/restriction_predicate.hxx" bodystart="460" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a89d0ce69c5bca9e610e9f16ea56e963c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Object</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;typelist::length&lt;typename <ref refid="structfc_1_1reflector" kindref="compound">fc::reflector</ref>&lt;Object&gt;::native_members&gt;() != 0&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespacegraphene_1_1protocol_1a7253c01693b853bacbc927c3430c9c5f" kindref="member">object_restriction_predicate</ref>&lt; Object &gt;</type>
        <definition>object_restriction_predicate&lt;Object&gt; graphene::protocol::create_field_predicate</definition>
        <argsstring>(restriction &amp;&amp;r, short)</argsstring>
        <name>create_field_predicate</name>
        <param>
          <type><ref refid="structgraphene_1_1protocol_1_1restriction" kindref="compound">restriction</ref> &amp;&amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>short</type>
        </param>
        <briefdescription>
<para>Create a predicate asserting on the field of the object a restriction is referencing. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Object</parametername>
</parameternamelist>
<parameterdescription>
<para>The type the restriction restricts</para></parameterdescription>
</parameteritem>
</parameterlist>
A restriction specifies requirements about a field of an object. This struct shifts the focus from the object type the restriction references to the particular field type, creates a predicate on that field, and wraps that predicate to accept the object type and invoke the inner predicate on the specified field. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/restriction_predicate.hxx" line="526" column="1" bodyfile="libraries/protocol/custom_authorities/restriction_predicate.hxx" bodystart="526" bodyend="538"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1afd0018b233e65e0d22aac3cac393b509" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Object</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacegraphene_1_1protocol_1a7253c01693b853bacbc927c3430c9c5f" kindref="member">object_restriction_predicate</ref>&lt; Object &gt;</type>
        <definition>object_restriction_predicate&lt;Object&gt; graphene::protocol::create_field_predicate</definition>
        <argsstring>(restriction &amp;&amp;, long)</argsstring>
        <name>create_field_predicate</name>
        <param>
          <type><ref refid="structgraphene_1_1protocol_1_1restriction" kindref="compound">restriction</ref> &amp;&amp;</type>
        </param>
        <param>
          <type>long</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/restriction_predicate.hxx" line="540" column="1" bodyfile="libraries/protocol/custom_authorities/restriction_predicate.hxx" bodystart="540" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a0de7ef4d52b3b573925e37f734087bc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Object</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacegraphene_1_1protocol_1a7253c01693b853bacbc927c3430c9c5f" kindref="member">object_restriction_predicate</ref>&lt; Object &gt;</type>
        <definition>object_restriction_predicate&lt;Object&gt; graphene::protocol::create_logical_or_predicate</definition>
        <argsstring>(vector&lt; vector&lt; restriction &gt;&gt; rs)</argsstring>
        <name>create_logical_or_predicate</name>
        <param>
          <type>vector&lt; vector&lt; <ref refid="structgraphene_1_1protocol_1_1restriction" kindref="compound">restriction</ref> &gt;&gt;</type>
          <declname>rs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/restriction_predicate.hxx" line="546" column="1" bodyfile="libraries/protocol/custom_authorities/restriction_predicate.hxx" bodystart="546" bodyend="565"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a5129f8fcdb820acd03067f782b1e7f6f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::operator==</definition>
        <argsstring>(const address &amp;a, const address &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1address" kindref="compound">address</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1address" kindref="compound">address</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/address.hpp" line="60" column="1" bodyfile="libraries/protocol/include/graphene/protocol/address.hpp" bodystart="60" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1ae0ea32cd151c5f57a2b47f4527e9e5d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::operator!=</definition>
        <argsstring>(const address &amp;a, const address &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1address" kindref="compound">address</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1address" kindref="compound">address</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/address.hpp" line="61" column="1" bodyfile="libraries/protocol/include/graphene/protocol/address.hpp" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1ac278db20c5fbf361341c28c1c9a02e74" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::operator&lt;</definition>
        <argsstring>(const address &amp;a, const address &amp;b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1address" kindref="compound">address</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1address" kindref="compound">address</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/address.hpp" line="62" column="1" bodyfile="libraries/protocol/include/graphene/protocol/address.hpp" bodystart="62" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1affc03c7456b3cf5acde80d14fe5e77bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::operator==</definition>
        <argsstring>(const pts_address &amp;a, const address &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1pts__address" kindref="compound">pts_address</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1address" kindref="compound">address</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/address.hpp" line="64" column="1" bodyfile="libraries/protocol/include/graphene/protocol/address.hpp" bodystart="64" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a5b2edc3d10d7b5ef9f1fc3e7e3be9f8c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::operator==</definition>
        <argsstring>(const address &amp;a, const pts_address &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1address" kindref="compound">address</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1pts__address" kindref="compound">pts_address</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/address.hpp" line="65" column="1" bodyfile="libraries/protocol/include/graphene/protocol/address.hpp" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1ad4b82c0d660691a65518af5154365cb2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::operator==</definition>
        <argsstring>(const public_key_type &amp;a, const address &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1public__key__type" kindref="compound">public_key_type</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1address" kindref="compound">address</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/address.hpp" line="67" column="1" bodyfile="libraries/protocol/include/graphene/protocol/address.hpp" bodystart="67" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a1d99dceb945aabb86a064cc9176f6920" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::operator==</definition>
        <argsstring>(const address &amp;a, const public_key_type &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1address" kindref="compound">address</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1public__key__type" kindref="compound">public_key_type</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/address.hpp" line="68" column="1" bodyfile="libraries/protocol/include/graphene/protocol/address.hpp" bodystart="68" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a3531b7a2b006abb3be3f000870ca2c9e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref></type>
        <definition>price graphene::protocol::operator~</definition>
        <argsstring>(const price &amp;p)</argsstring>
        <name>operator~</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="136" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset.hpp" bodystart="136" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a55d88d3f291827b0aa3c83d32e767149" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::operator&gt;</definition>
        <argsstring>(const price &amp;a, const price &amp;b)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="141" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset.hpp" bodystart="141" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a29193b1353e306637073b84f8b0c56a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::operator&lt;=</definition>
        <argsstring>(const price &amp;a, const price &amp;b)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="142" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset.hpp" bodystart="142" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1ac1905ef4e43009f8d733b3b189ada00f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::operator&gt;=</definition>
        <argsstring>(const price &amp;a, const price &amp;b)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="143" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset.hpp" bodystart="143" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1ad8dba204b979060841eaf0dc094c4bb4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::operator!=</definition>
        <argsstring>(const price &amp;a, const price &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="144" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset.hpp" bodystart="144" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a985fca1eeec6fe264a4538e960dcec92" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
        <definition>price&amp; graphene::protocol::operator*=</definition>
        <argsstring>(price &amp;p, const ratio_type &amp;r)</argsstring>
        <name>operator*=</name>
        <param>
          <type><ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegraphene_1_1protocol_1a54851df9ea21bef79e7cdb2da2e3e3cc" kindref="member">ratio_type</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="151" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset.hpp" bodystart="151" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a7e00cb0dd96f904bcc25b0bdc38cf216" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
        <definition>price&amp; graphene::protocol::operator/=</definition>
        <argsstring>(price &amp;p, const ratio_type &amp;r)</argsstring>
        <name>operator/=</name>
        <param>
          <type><ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegraphene_1_1protocol_1a54851df9ea21bef79e7cdb2da2e3e3cc" kindref="member">ratio_type</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="153" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset.hpp" bodystart="153" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1ad91fceb5f8ea452e98b3504800447832" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::protocol::operation_get_required_authorities</definition>
        <argsstring>(const operation &amp;op, flat_set&lt; account_id_type &gt; &amp;active, flat_set&lt; account_id_type &gt; &amp;owner, vector&lt; authority &gt; &amp;other, bool ignore_custom_operation_required_auths)</argsstring>
        <name>operation_get_required_authorities</name>
        <param>
          <type>const <ref refid="group__operations_1ga9aa13b4d89e9b8b56d1074b715de6568" kindref="member">operation</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <param>
          <type>flat_set&lt; account_id_type &gt; &amp;</type>
          <declname>active</declname>
        </param>
        <param>
          <type>flat_set&lt; account_id_type &gt; &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="structgraphene_1_1protocol_1_1authority" kindref="compound">authority</ref> &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ignore_custom_operation_required_auths</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Appends required authorites to the result vector. The authorities appended are not the same as those returned by get_required_auth</para><para><simplesect kind="return"><para>a set of required authorities for <computeroutput>op</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/operations.hpp" line="141" column="1" bodyfile="libraries/protocol/operations.cpp" bodystart="103" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1ab4eaf3cdd7c2b540bd2180fbec4c4c8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::protocol::operation_validate</definition>
        <argsstring>(const operation &amp;op)</argsstring>
        <name>operation_validate</name>
        <param>
          <type>const <ref refid="group__operations_1ga9aa13b4d89e9b8b56d1074b715de6568" kindref="member">operation</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/operations.hpp" line="147" column="1" bodyfile="libraries/protocol/operations.cpp" bodystart="98" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1aed5ab34bcf5755f500482c60ce25eab0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::operator==</definition>
        <argsstring>(const pts_address &amp;a, const pts_address &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1pts__address" kindref="compound">pts_address</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1pts__address" kindref="compound">pts_address</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/pts_address.hpp" line="60" column="1" bodyfile="libraries/protocol/include/graphene/protocol/pts_address.hpp" bodystart="60" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a3fa654568af6da7ab41a00f15f6749c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::operator!=</definition>
        <argsstring>(const pts_address &amp;a, const pts_address &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1pts__address" kindref="compound">pts_address</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1pts__address" kindref="compound">pts_address</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/pts_address.hpp" line="61" column="1" bodyfile="libraries/protocol/include/graphene/protocol/pts_address.hpp" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a2e0a729c91726df732c789cc76207883" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::operator&lt;</definition>
        <argsstring>(const pts_address &amp;a, const pts_address &amp;b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1pts__address" kindref="compound">pts_address</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1pts__address" kindref="compound">pts_address</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/pts_address.hpp" line="62" column="1" bodyfile="libraries/protocol/include/graphene/protocol/pts_address.hpp" bodystart="62" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a39ae3b76548010be593199b1f101fe1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::protocol::validate_special_authority</definition>
        <argsstring>(const special_authority &amp;auth)</argsstring>
        <name>validate_special_authority</name>
        <param>
          <type>const <ref refid="namespacegraphene_1_1protocol_1a0e74afece7dbfa1a51f7b183624850d4" kindref="member">special_authority</ref> &amp;</type>
          <declname>auth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/special_authority.hpp" line="43" column="1" bodyfile="libraries/protocol/special_authority.cpp" bodystart="43" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="group__transactions_1ga8e37fc0fd4bd5f02a34b0e766f8bbad8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::protocol::verify_authority</definition>
        <argsstring>(const vector&lt; operation &gt; &amp;ops, const flat_set&lt; public_key_type &gt; &amp;sigs, const std::function&lt; const authority *(account_id_type)&gt; &amp;get_active, const std::function&lt; const authority *(account_id_type)&gt; &amp;get_owner, const custom_authority_lookup &amp;get_custom, bool allow_non_immediate_owner, bool ignore_custom_operation_required_auths, uint32_t max_recursion=GRAPHENE_MAX_SIG_CHECK_DEPTH, bool allow_committee=false, const flat_set&lt; account_id_type &gt; &amp;active_approvals=flat_set&lt; account_id_type &gt;(), const flat_set&lt; account_id_type &gt; &amp;owner_approvals=flat_set&lt; account_id_type &gt;())</argsstring>
        <name>verify_authority</name>
        <param>
          <type>const vector&lt; <ref refid="group__operations_1ga9aa13b4d89e9b8b56d1074b715de6568" kindref="member">operation</ref> &gt; &amp;</type>
          <declname>ops</declname>
        </param>
        <param>
          <type>const flat_set&lt; <ref refid="structgraphene_1_1protocol_1_1public__key__type" kindref="compound">public_key_type</ref> &gt; &amp;</type>
          <declname>sigs</declname>
        </param>
        <param>
          <type>const std::function&lt; const <ref refid="structgraphene_1_1protocol_1_1authority" kindref="compound">authority</ref> *(account_id_type)&gt; &amp;</type>
          <declname>get_active</declname>
        </param>
        <param>
          <type>const std::function&lt; const <ref refid="structgraphene_1_1protocol_1_1authority" kindref="compound">authority</ref> *(account_id_type)&gt; &amp;</type>
          <declname>get_owner</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegraphene_1_1protocol_1a7af627fb15181383dae4695633a3a7d6" kindref="member">custom_authority_lookup</ref> &amp;</type>
          <declname>get_custom</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allow_non_immediate_owner</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ignore_custom_operation_required_auths</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_recursion</declname>
          <defval><ref refid="protocol_2include_2graphene_2protocol_2config_8hpp_1aea0bc2216bc54371f7f54d6f6d6e4d9d" kindref="member">GRAPHENE_MAX_SIG_CHECK_DEPTH</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>allow_committee</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const flat_set&lt; account_id_type &gt; &amp;</type>
          <declname>active_approvals</declname>
          <defval>flat_set&lt; account_id_type &gt;()</defval>
        </param>
        <param>
          <type>const flat_set&lt; account_id_type &gt; &amp;</type>
          <declname>owner_approvals</declname>
          <defval>flat_set&lt; account_id_type &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks whether given public keys and approvals are sufficient to authorize given operations. Throws an exception when failed.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ops</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector of operations </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sigs</parametername>
</parameternamelist>
<parameterdescription>
<para>a set of public keys </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>get_active</parametername>
</parameternamelist>
<parameterdescription>
<para>callback function to retrieve active authorities of a given account </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>get_owner</parametername>
</parameternamelist>
<parameterdescription>
<para>callback function to retrieve owner authorities of a given account </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>get_custom</parametername>
</parameternamelist>
<parameterdescription>
<para>callback function to retrieve viable custom authorities for a given account and operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allow_non_immediate_owner</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to allow owner authority of non-immediately required accounts to authorize operations </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ignore_custom_operation_required_auths</parametername>
</parameternamelist>
<parameterdescription>
<para>See issue #210; whether to ignore the required_auths field of <ref refid="structgraphene_1_1protocol_1_1custom__operation" kindref="compound">custom_operation</ref> or not </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_recursion</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum level of recursion when verifying, since an account can have another account in active authorities and/or owner authorities </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allow_committee</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to allow the special &quot;committee account&quot; to authorize the operations </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>active_approvals</parametername>
</parameternamelist>
<parameterdescription>
<para>accounts that approved the operations with their active authories </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>owner_approvals</parametername>
</parameternamelist>
<parameterdescription>
<para>accounts that approved the operations with their owner authories </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/transaction.hpp" line="268" column="1" bodyfile="libraries/protocol/transaction.cpp" bodystart="269" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a7fa29913989b73d976f47c02d07db6c2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::is_relative</definition>
        <argsstring>(object_id_type o)</argsstring>
        <name>is_relative</name>
        <param>
          <type><ref refid="structgraphene_1_1db_1_1object__id__type" kindref="compound">object_id_type</ref></type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="302" column="1" bodyfile="libraries/protocol/include/graphene/protocol/types.hpp" bodystart="302" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a16c54c83a62fa622b6593b5cf7f142b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::protocol::FC_IMPLEMENT_DERIVED_EXCEPTION</definition>
        <argsstring>(transaction_exception, protocol_exception, 4010000, &quot;transaction validation exception&quot;) FC_IMPLEMENT_DERIVED_EXCEPTION(tx_missing_active_auth</argsstring>
        <name>FC_IMPLEMENT_DERIVED_EXCEPTION</name>
        <param>
          <type><ref refid="namespacegraphene_1_1protocol_1a59cd8474d34d9ea95bc8630340de313e" kindref="member">transaction_exception</ref></type>
        </param>
        <param>
          <type>protocol_exception</type>
        </param>
        <param>
          <type>4010000</type>
        </param>
        <param>
          <type>&quot;transaction validation exception&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/small_ops.cpp" line="37" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1abdc2ab76e48765b55154bdfc16e751cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>missing required active <ref refid="structgraphene_1_1protocol_1_1authority" kindref="compound">authority</ref></type>
        <definition>missing required active authority graphene::protocol::FC_IMPLEMENT_DERIVED_EXCEPTION</definition>
        <argsstring>(tx_missing_owner_auth, transaction_exception, 4010002, &quot;missing required owner authority&quot;) FC_IMPLEMENT_DERIVED_EXCEPTION(tx_missing_other_auth</argsstring>
        <name>FC_IMPLEMENT_DERIVED_EXCEPTION</name>
        <param>
          <type>tx_missing_owner_auth</type>
        </param>
        <param>
          <type><ref refid="namespacegraphene_1_1protocol_1a59cd8474d34d9ea95bc8630340de313e" kindref="member">transaction_exception</ref></type>
        </param>
        <param>
          <type>4010002</type>
        </param>
        <param>
          <type>&quot;missing required owner <ref refid="structgraphene_1_1protocol_1_1authority" kindref="compound">authority</ref>&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/small_ops.cpp" line="42" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1afd0a3ddad2e5fdb5a18525676dabee93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>missing required active <ref refid="structgraphene_1_1protocol_1_1authority" kindref="compound">authority</ref> missing required other <ref refid="structgraphene_1_1protocol_1_1authority" kindref="compound">authority</ref></type>
        <definition>missing required active authority missing required other authority graphene::protocol::FC_IMPLEMENT_DERIVED_EXCEPTION</definition>
        <argsstring>(tx_irrelevant_sig, transaction_exception, 4010004, &quot;irrelevant signature included&quot;) FC_IMPLEMENT_DERIVED_EXCEPTION(tx_duplicate_sig</argsstring>
        <name>FC_IMPLEMENT_DERIVED_EXCEPTION</name>
        <param>
          <type>tx_irrelevant_sig</type>
        </param>
        <param>
          <type><ref refid="namespacegraphene_1_1protocol_1a59cd8474d34d9ea95bc8630340de313e" kindref="member">transaction_exception</ref></type>
        </param>
        <param>
          <type>4010004</type>
        </param>
        <param>
          <type>&quot;irrelevant signature included&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/small_ops.cpp" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1af8dccb085c6e9752f218974f2660207d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::operator==</definition>
        <argsstring>(const public_key_type &amp;p1, const fc::ecc::public_key &amp;p2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1public__key__type" kindref="compound">public_key_type</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1ecc_1_1public__key" kindref="compound">fc::ecc::public_key</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/types.cpp" line="76" column="1" bodyfile="libraries/protocol/types.cpp" bodystart="76" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a2ba82e45361a4ea39926919b8f5ac013" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::operator==</definition>
        <argsstring>(const public_key_type &amp;p1, const public_key_type &amp;p2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1public__key__type" kindref="compound">public_key_type</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1public__key__type" kindref="compound">public_key_type</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/types.cpp" line="81" column="1" bodyfile="libraries/protocol/types.cpp" bodystart="81" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1aac81ba4c9ea6ae042873ec67c152a4a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::operator!=</definition>
        <argsstring>(const public_key_type &amp;p1, const public_key_type &amp;p2)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1public__key__type" kindref="compound">public_key_type</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1public__key__type" kindref="compound">public_key_type</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/types.cpp" line="86" column="1" bodyfile="libraries/protocol/types.cpp" bodystart="86" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a907c295ff568f5d11ffbfd44c047f1ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::operator&lt;</definition>
        <argsstring>(const public_key_type &amp;p1, const public_key_type &amp;p2)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1public__key__type" kindref="compound">public_key_type</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1public__key__type" kindref="compound">public_key_type</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/types.cpp" line="91" column="1" bodyfile="libraries/protocol/types.cpp" bodystart="91" bodyend="94"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/app/include/graphene/app/util.hpp" line="29" column="1"/>
  </compounddef>
</doxygen>
