<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structgraphene_1_1protocol_1_1calc__fee__visitor" kind="struct" language="C++" prot="public">
    <compoundname>graphene::protocol::calc_fee_visitor</compoundname>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structgraphene_1_1protocol_1_1calc__fee__visitor_1ab090ffa57172524a915bbf7e56ed65e0" prot="public" static="no">
        <type>uint64_t</type>
        <definition>using graphene::protocol::calc_fee_visitor::result_type =  uint64_t</definition>
        <argsstring></argsstring>
        <name>result_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/fee_schedule_calc.cpp" line="33" column="1" bodyfile="libraries/protocol/fee_schedule_calc.cpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1calc__fee__visitor_1a7f81ba00224b207c58bfd5680d48b83d" prot="public" static="no" mutable="no">
        <type>const <ref refid="structgraphene_1_1protocol_1_1fee__schedule" kindref="compound">fee_schedule</ref> &amp;</type>
        <definition>const fee_schedule&amp; graphene::protocol::calc_fee_visitor::param</definition>
        <argsstring></argsstring>
        <name>param</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/fee_schedule_calc.cpp" line="35" column="1" bodyfile="libraries/protocol/fee_schedule_calc.cpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1calc__fee__visitor_1a069fb3e0ca1094c80c82641ba90778b7" prot="public" static="no" mutable="no">
        <type>const <ref refid="classfc_1_1static__variant_1aba87b38cb3bcf33da8b38323211fdcb7" kindref="member">operation::tag_type</ref></type>
        <definition>const operation::tag_type graphene::protocol::calc_fee_visitor::current_op</definition>
        <argsstring></argsstring>
        <name>current_op</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/fee_schedule_calc.cpp" line="36" column="1" bodyfile="libraries/protocol/fee_schedule_calc.cpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1calc__fee__visitor_1a4fa5f45177b4e93b7e2a4783b0feaeae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>graphene::protocol::calc_fee_visitor::calc_fee_visitor</definition>
        <argsstring>(const fee_schedule &amp;p, const operation &amp;op)</argsstring>
        <name>calc_fee_visitor</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1fee__schedule" kindref="compound">fee_schedule</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="group__operations_1ga9aa13b4d89e9b8b56d1074b715de6568" kindref="member">operation</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/fee_schedule_calc.cpp" line="37" column="1" bodyfile="libraries/protocol/fee_schedule_calc.cpp" bodystart="37" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1calc__fee__visitor_1a91d2fe1323ffe8c0a63bd772b524e303" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OpType</type>
          </param>
        </templateparamlist>
        <type><ref refid="structgraphene_1_1protocol_1_1calc__fee__visitor_1ab090ffa57172524a915bbf7e56ed65e0" kindref="member">result_type</ref></type>
        <definition>result_type graphene::protocol::calc_fee_visitor::operator()</definition>
        <argsstring>(const OpType &amp;op) const</argsstring>
        <name>operator()</name>
        <param>
          <type>const OpType &amp;</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/fee_schedule_calc.cpp" line="41" column="1" bodyfile="libraries/protocol/fee_schedule_calc.cpp" bodystart="41" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1calc__fee__visitor_1adf7c283d788698032392a92e154b5721" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>uint64_t</type>
        <definition>uint64_t graphene::protocol::calc_fee_visitor::operator()</definition>
        <argsstring>(const htlc_create_operation &amp;op) const</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1htlc__create__operation" kindref="compound">htlc_create_operation</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/fee_schedule_calc.cpp" line="57" column="1" bodyfile="libraries/protocol/fee_schedule_calc.cpp" bodystart="57" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1calc__fee__visitor_1a345e15fcaedd87574f6435112cf4f456" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>uint64_t</type>
        <definition>uint64_t graphene::protocol::calc_fee_visitor::operator()</definition>
        <argsstring>(const asset_create_operation &amp;op) const</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset__create__operation" kindref="compound">asset_create_operation</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/fee_schedule_calc.cpp" line="67" column="1" bodyfile="libraries/protocol/fee_schedule_calc.cpp" bodystart="67" bodyend="77"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="2066">
        <label>graphene::protocol::fee_schedule</label>
        <link refid="structgraphene_1_1protocol_1_1fee__schedule"/>
      </node>
      <node id="2065">
        <label>graphene::protocol::calc_fee_visitor</label>
        <link refid="structgraphene_1_1protocol_1_1calc__fee__visitor"/>
        <childnode refid="2066" relation="usage">
          <edgelabel>param</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="libraries/protocol/fee_schedule_calc.cpp" line="32" column="1" bodyfile="libraries/protocol/fee_schedule_calc.cpp" bodystart="31" bodyend="54"/>
    <listofallmembers>
      <member refid="structgraphene_1_1protocol_1_1calc__fee__visitor_1a4fa5f45177b4e93b7e2a4783b0feaeae" prot="public" virt="non-virtual"><scope>graphene::protocol::calc_fee_visitor</scope><name>calc_fee_visitor</name></member>
      <member refid="structgraphene_1_1protocol_1_1calc__fee__visitor_1a069fb3e0ca1094c80c82641ba90778b7" prot="public" virt="non-virtual"><scope>graphene::protocol::calc_fee_visitor</scope><name>current_op</name></member>
      <member refid="structgraphene_1_1protocol_1_1calc__fee__visitor_1a91d2fe1323ffe8c0a63bd772b524e303" prot="public" virt="non-virtual"><scope>graphene::protocol::calc_fee_visitor</scope><name>operator()</name></member>
      <member refid="structgraphene_1_1protocol_1_1calc__fee__visitor_1adf7c283d788698032392a92e154b5721" prot="public" virt="non-virtual"><scope>graphene::protocol::calc_fee_visitor</scope><name>operator()</name></member>
      <member refid="structgraphene_1_1protocol_1_1calc__fee__visitor_1a345e15fcaedd87574f6435112cf4f456" prot="public" virt="non-virtual"><scope>graphene::protocol::calc_fee_visitor</scope><name>operator()</name></member>
      <member refid="structgraphene_1_1protocol_1_1calc__fee__visitor_1a7f81ba00224b207c58bfd5680d48b83d" prot="public" virt="non-virtual"><scope>graphene::protocol::calc_fee_visitor</scope><name>param</name></member>
      <member refid="structgraphene_1_1protocol_1_1calc__fee__visitor_1ab090ffa57172524a915bbf7e56ed65e0" prot="public" virt="non-virtual"><scope>graphene::protocol::calc_fee_visitor</scope><name>result_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
