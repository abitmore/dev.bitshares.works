<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structgraphene_1_1protocol_1_1asset__update__feed__producers__operation" kind="struct" language="C++" prot="public">
    <compoundname>graphene::protocol::asset_update_feed_producers_operation</compoundname>
    <basecompoundref refid="structgraphene_1_1protocol_1_1base__operation" prot="public" virt="non-virtual">graphene::protocol::base_operation</basecompoundref>
    <includes refid="asset__ops_8hpp" local="no">asset_ops.hpp</includes>
    <innerclass refid="structgraphene_1_1protocol_1_1asset__update__feed__producers__operation_1_1fee__parameters__type" prot="public">graphene::protocol::asset_update_feed_producers_operation::fee_parameters_type</innerclass>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1asset__update__feed__producers__operation_1a8be78e1bc4a182d1e9efc99013bd4587" prot="public" static="no" mutable="no">
        <type><ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref></type>
        <definition>asset graphene::protocol::asset_update_feed_producers_operation::fee</definition>
        <argsstring></argsstring>
        <name>fee</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="434" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset_ops.hpp" bodystart="434" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1asset__update__feed__producers__operation_1a7186d661ff1b328de9ff85aa3d098b13" prot="public" static="no" mutable="no">
        <type>account_id_type</type>
        <definition>account_id_type graphene::protocol::asset_update_feed_producers_operation::issuer</definition>
        <argsstring></argsstring>
        <name>issuer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="435" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset_ops.hpp" bodystart="435" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1asset__update__feed__producers__operation_1a4e9d53d9d0692af78a8bc193e5334e6e" prot="public" static="no" mutable="no">
        <type>asset_id_type</type>
        <definition>asset_id_type graphene::protocol::asset_update_feed_producers_operation::asset_to_update</definition>
        <argsstring></argsstring>
        <name>asset_to_update</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="436" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset_ops.hpp" bodystart="436" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1asset__update__feed__producers__operation_1ae1623b9f66cb2ef6d6a8134d8cc36592" prot="public" static="no" mutable="no">
        <type>flat_set&lt; account_id_type &gt;</type>
        <definition>flat_set&lt;account_id_type&gt; graphene::protocol::asset_update_feed_producers_operation::new_feed_producers</definition>
        <argsstring></argsstring>
        <name>new_feed_producers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="438" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset_ops.hpp" bodystart="438" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1asset__update__feed__producers__operation_1af5a0f2e5ca70f313cf258084e6b409fe" prot="public" static="no" mutable="no">
        <type><ref refid="group__operations_1gabaddcaf5bde76414891b4c29031d9288" kindref="member">extensions_type</ref></type>
        <definition>extensions_type graphene::protocol::asset_update_feed_producers_operation::extensions</definition>
        <argsstring></argsstring>
        <name>extensions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="439" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset_ops.hpp" bodystart="439" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1asset__update__feed__producers__operation_1a457541146da9753ac8b58021068edcc0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>account_id_type</type>
        <definition>account_id_type graphene::protocol::asset_update_feed_producers_operation::fee_payer</definition>
        <argsstring>() const</argsstring>
        <name>fee_payer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="441" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset_ops.hpp" bodystart="441" bodyend="441"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1asset__update__feed__producers__operation_1ad5b6dcabf0d43c6dd06fdaa32c4d7ecb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void graphene::protocol::asset_update_feed_producers_operation::validate</definition>
        <argsstring>() const</argsstring>
        <name>validate</name>
        <reimplements refid="structgraphene_1_1protocol_1_1base__operation_1a23d617a6fa0921d3f5b51dd5167e7a29">validate</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="442" column="1" bodyfile="libraries/protocol/asset_ops.cpp" bodystart="226" bodyend="229"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Update the set of feed-producing accounts for a BitAsset</para><para>BitAssets have price feeds selected by taking the median values of recommendations from a set of feed producers. This operation is used to specify which accounts may produce feeds for a given BitAsset. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="structgraphene_1_1protocol_1_1asset__update__feed__producers__operation_1a7186d661ff1b328de9ff85aa3d098b13" kindref="member">issuer</ref> MUST be an existing account, and MUST match asset_object::issuer on <ref refid="structgraphene_1_1protocol_1_1asset__update__feed__producers__operation_1a4e9d53d9d0692af78a8bc193e5334e6e" kindref="member">asset_to_update</ref> </para></simplesect>
<simplesect kind="pre"><para><ref refid="structgraphene_1_1protocol_1_1asset__update__feed__producers__operation_1a7186d661ff1b328de9ff85aa3d098b13" kindref="member">issuer</ref> MUST NOT be the committee account </para></simplesect>
<simplesect kind="pre"><para><ref refid="structgraphene_1_1protocol_1_1asset__update__feed__producers__operation_1a4e9d53d9d0692af78a8bc193e5334e6e" kindref="member">asset_to_update</ref> MUST be a BitAsset, i.e. <ref refid="classgraphene_1_1chain_1_1asset__object_1a5cd681e6cc216f87d99f60c1de63eba8" kindref="member">graphene::chain::asset_object::is_market_issued()</ref> returns true </para></simplesect>
<simplesect kind="pre"><para><ref refid="structgraphene_1_1protocol_1_1asset__update__feed__producers__operation_1a8be78e1bc4a182d1e9efc99013bd4587" kindref="member">fee</ref> MUST be nonnegative, and <ref refid="structgraphene_1_1protocol_1_1asset__update__feed__producers__operation_1a7186d661ff1b328de9ff85aa3d098b13" kindref="member">issuer</ref> MUST have a sufficient balance to pay it </para></simplesect>
<simplesect kind="pre"><para>Cardinality of <ref refid="structgraphene_1_1protocol_1_1asset__update__feed__producers__operation_1ae1623b9f66cb2ef6d6a8134d8cc36592" kindref="member">new_feed_producers</ref> MUST NOT exceed <ref refid="structgraphene_1_1protocol_1_1chain__parameters_1a9debd1b8f388b5e45642916a0d801309" kindref="member">chain_parameters::maximum_asset_feed_publishers</ref> </para></simplesect>
<simplesect kind="post"><para><ref refid="structgraphene_1_1protocol_1_1asset__update__feed__producers__operation_1a4e9d53d9d0692af78a8bc193e5334e6e" kindref="member">asset_to_update</ref> will have a set of feed producers matching <ref refid="structgraphene_1_1protocol_1_1asset__update__feed__producers__operation_1ae1623b9f66cb2ef6d6a8134d8cc36592" kindref="member">new_feed_producers</ref> </para></simplesect>
<simplesect kind="post"><para>All valid feeds supplied by feed producers in <ref refid="structgraphene_1_1protocol_1_1asset__update__feed__producers__operation_1ae1623b9f66cb2ef6d6a8134d8cc36592" kindref="member">new_feed_producers</ref>, which were already feed producers prior to execution of this operation, will be preserved </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="1559">
        <label>graphene::protocol::asset_update_feed_producers_operation</label>
        <link refid="structgraphene_1_1protocol_1_1asset__update__feed__producers__operation"/>
        <childnode refid="1560" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1560">
        <label>graphene::protocol::base_operation</label>
        <link refid="structgraphene_1_1protocol_1_1base__operation"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1561">
        <label>graphene::protocol::asset_update_feed_producers_operation</label>
        <link refid="structgraphene_1_1protocol_1_1asset__update__feed__producers__operation"/>
        <childnode refid="1562" relation="public-inheritance">
        </childnode>
        <childnode refid="1563" relation="usage">
          <edgelabel>fee</edgelabel>
        </childnode>
        <childnode refid="1565" relation="usage">
          <edgelabel>issuer</edgelabel>
        </childnode>
        <childnode refid="1566" relation="usage">
          <edgelabel>new_feed_producers</edgelabel>
        </childnode>
      </node>
      <node id="1565">
        <label>account_id_type</label>
      </node>
      <node id="1566">
        <label>flat_set&lt; account_id_type &gt;</label>
      </node>
      <node id="1564">
        <label>fc::safe&lt; int64_t &gt;</label>
        <link refid="structfc_1_1safe"/>
      </node>
      <node id="1562">
        <label>graphene::protocol::base_operation</label>
        <link refid="structgraphene_1_1protocol_1_1base__operation"/>
      </node>
      <node id="1563">
        <label>graphene::protocol::asset</label>
        <link refid="structgraphene_1_1protocol_1_1asset"/>
        <childnode refid="1564" relation="usage">
          <edgelabel>amount</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="431" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset_ops.hpp" bodystart="430" bodyend="443"/>
    <listofallmembers>
      <member refid="structgraphene_1_1protocol_1_1asset__update__feed__producers__operation_1a4e9d53d9d0692af78a8bc193e5334e6e" prot="public" virt="non-virtual"><scope>graphene::protocol::asset_update_feed_producers_operation</scope><name>asset_to_update</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1aaccb0fa71ee529cf62324baaa99988fe" prot="public" virt="non-virtual"><scope>graphene::protocol::asset_update_feed_producers_operation</scope><name>calculate_data_fee</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1a0be44badcee9a648413eb906dac1d3b3" prot="public" virt="non-virtual"><scope>graphene::protocol::asset_update_feed_producers_operation</scope><name>calculate_fee</name></member>
      <member refid="structgraphene_1_1protocol_1_1asset__update__feed__producers__operation_1af5a0f2e5ca70f313cf258084e6b409fe" prot="public" virt="non-virtual"><scope>graphene::protocol::asset_update_feed_producers_operation</scope><name>extensions</name></member>
      <member refid="structgraphene_1_1protocol_1_1asset__update__feed__producers__operation_1a8be78e1bc4a182d1e9efc99013bd4587" prot="public" virt="non-virtual"><scope>graphene::protocol::asset_update_feed_producers_operation</scope><name>fee</name></member>
      <member refid="structgraphene_1_1protocol_1_1asset__update__feed__producers__operation_1a457541146da9753ac8b58021068edcc0" prot="public" virt="non-virtual"><scope>graphene::protocol::asset_update_feed_producers_operation</scope><name>fee_payer</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1a89ed7c6e7da93cd99bb41bc8d7e2627b" prot="public" virt="virtual"><scope>graphene::protocol::asset_update_feed_producers_operation</scope><name>get_required_active_authorities</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1aabc48ce97877c67ff560b94284a7c0bb" prot="public" virt="virtual"><scope>graphene::protocol::asset_update_feed_producers_operation</scope><name>get_required_authorities</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1a3251978e7bd0bb2f2fa23bcea5dee95c" prot="public" virt="virtual"><scope>graphene::protocol::asset_update_feed_producers_operation</scope><name>get_required_owner_authorities</name></member>
      <member refid="structgraphene_1_1protocol_1_1asset__update__feed__producers__operation_1a7186d661ff1b328de9ff85aa3d098b13" prot="public" virt="non-virtual"><scope>graphene::protocol::asset_update_feed_producers_operation</scope><name>issuer</name></member>
      <member refid="structgraphene_1_1protocol_1_1asset__update__feed__producers__operation_1ae1623b9f66cb2ef6d6a8134d8cc36592" prot="public" virt="non-virtual"><scope>graphene::protocol::asset_update_feed_producers_operation</scope><name>new_feed_producers</name></member>
      <member refid="structgraphene_1_1protocol_1_1asset__update__feed__producers__operation_1ad5b6dcabf0d43c6dd06fdaa32c4d7ecb" prot="public" virt="virtual"><scope>graphene::protocol::asset_update_feed_producers_operation</scope><name>validate</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1a485f3d3b963ff4c081af85945cf27774" prot="public" virt="non-virtual"><scope>graphene::protocol::asset_update_feed_producers_operation</scope><name>validate_parallel</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1a04ac6688e2df1d511514e4fc1983b828" prot="public" virt="virtual"><scope>graphene::protocol::asset_update_feed_producers_operation</scope><name>~base_operation</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
