<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classgraphene_1_1app_1_1detail_1_1application__impl" kind="class" language="C++" prot="public">
    <compoundname>graphene::app::detail::application_impl</compoundname>
    <basecompoundref refid="classgraphene_1_1net_1_1node__delegate" prot="public" virt="non-virtual">graphene::net::node_delegate</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">std::enable_shared_from_this&lt; application_impl &gt;</basecompoundref>
    <includes refid="application__impl_8hxx" local="no">application_impl.hxx</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classgraphene_1_1app_1_1detail_1_1application__impl_1af07b5b8d6e16afe34208c9755f6416f5" prot="public" static="no" mutable="no">
        <type><ref refid="classfc_1_1optional" kindref="compound">fc::optional</ref>&lt; <ref refid="classfc_1_1temp__file" kindref="compound">fc::temp_file</ref> &gt;</type>
        <definition>fc::optional&lt;fc::temp_file&gt; graphene::app::detail::application_impl::_lock_file</definition>
        <argsstring></argsstring>
        <name>_lock_file</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="18" column="1" bodyfile="libraries/app/application_impl.hxx" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1detail_1_1application__impl_1a14c8a3eab603c26744a2ece452aa0bc7" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool graphene::app::detail::application_impl::_is_block_producer</definition>
        <argsstring></argsstring>
        <name>_is_block_producer</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="19" column="1" bodyfile="libraries/app/application_impl.hxx" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1detail_1_1application__impl_1ad6aadf4191041d2fa601241542256e40" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool graphene::app::detail::application_impl::_force_validate</definition>
        <argsstring></argsstring>
        <name>_force_validate</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="20" column="1" bodyfile="libraries/app/application_impl.hxx" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1detail_1_1application__impl_1a9f3e0210e9e170a068a4fe6bc4259cb6" prot="public" static="no" mutable="no">
        <type><ref refid="classgraphene_1_1app_1_1application__options" kindref="compound">application_options</ref></type>
        <definition>application_options graphene::app::detail::application_impl::_app_options</definition>
        <argsstring></argsstring>
        <name>_app_options</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="21" column="1" bodyfile="libraries/app/application_impl.hxx" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classgraphene_1_1app_1_1detail_1_1application__impl_1ae70923dc6efde4f0fa3c4fd312607cef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class graphene::app::application</definition>
        <argsstring></argsstring>
        <name>graphene::app::application</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="209" column="1" bodyfile="libraries/app/application_impl.hxx" bodystart="209" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classgraphene_1_1app_1_1detail_1_1application__impl_1a90968cffda63e3ab4a235caaf6747346" prot="private" static="no" mutable="no">
        <type><ref refid="classgraphene_1_1app_1_1application" kindref="compound">application</ref> &amp;</type>
        <definition>application&amp; graphene::app::detail::application_impl::_self</definition>
        <argsstring></argsstring>
        <name>_self</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="211" column="1" bodyfile="libraries/app/application_impl.hxx" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1detail_1_1application__impl_1a31f4ebabcfc8d3304706120af8ac74a5" prot="private" static="no" mutable="no">
        <type><ref refid="classfc_1_1path" kindref="compound">fc::path</ref></type>
        <definition>fc::path graphene::app::detail::application_impl::_data_dir</definition>
        <argsstring></argsstring>
        <name>_data_dir</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="213" column="1" bodyfile="libraries/app/application_impl.hxx" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1detail_1_1application__impl_1a126fc0265c39d4331edfa16e68476a64" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; boost::program_options::variables_map &gt;</type>
        <definition>std::shared_ptr&lt;boost::program_options::variables_map&gt; graphene::app::detail::application_impl::_options</definition>
        <argsstring></argsstring>
        <name>_options</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="214" column="1" bodyfile="libraries/app/application_impl.hxx" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1detail_1_1application__impl_1aaf6a8332d0bafd2d58acc8bca108fadf" prot="private" static="no" mutable="no">
        <type><ref refid="structgraphene_1_1app_1_1api__access" kindref="compound">api_access</ref></type>
        <definition>api_access graphene::app::detail::application_impl::_apiaccess</definition>
        <argsstring></argsstring>
        <name>_apiaccess</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="215" column="1" bodyfile="libraries/app/application_impl.hxx" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1detail_1_1application__impl_1ab81da4ed3068cb9e85380007471e2985" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classgraphene_1_1chain_1_1database" kindref="compound">graphene::chain::database</ref> &gt;</type>
        <definition>std::shared_ptr&lt;graphene::chain::database&gt; graphene::app::detail::application_impl::_chain_db</definition>
        <argsstring></argsstring>
        <name>_chain_db</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="217" column="1" bodyfile="libraries/app/application_impl.hxx" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1detail_1_1application__impl_1a0a00a599276f8d7d30910da38a27d9a4" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classgraphene_1_1net_1_1node" kindref="compound">graphene::net::node</ref> &gt;</type>
        <definition>std::shared_ptr&lt;graphene::net::node&gt; graphene::app::detail::application_impl::_p2p_network</definition>
        <argsstring></argsstring>
        <name>_p2p_network</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="218" column="1" bodyfile="libraries/app/application_impl.hxx" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1detail_1_1application__impl_1ae6447c7cc434945337456c18d0103ef1" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classfc_1_1http_1_1websocket__server" kindref="compound">fc::http::websocket_server</ref> &gt;</type>
        <definition>std::shared_ptr&lt;fc::http::websocket_server&gt; graphene::app::detail::application_impl::_websocket_server</definition>
        <argsstring></argsstring>
        <name>_websocket_server</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="219" column="1" bodyfile="libraries/app/application_impl.hxx" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1detail_1_1application__impl_1aca6d490958bb5748c84cb89488f0bb3e" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classfc_1_1http_1_1websocket__tls__server" kindref="compound">fc::http::websocket_tls_server</ref> &gt;</type>
        <definition>std::shared_ptr&lt;fc::http::websocket_tls_server&gt; graphene::app::detail::application_impl::_websocket_tls_server</definition>
        <argsstring></argsstring>
        <name>_websocket_tls_server</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="220" column="1" bodyfile="libraries/app/application_impl.hxx" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1detail_1_1application__impl_1a09eaa3fcdfaa628b3ab5746e9458ab5c" prot="private" static="no" mutable="no">
        <type>std::map&lt; string, std::shared_ptr&lt; <ref refid="classgraphene_1_1app_1_1abstract__plugin" kindref="compound">abstract_plugin</ref> &gt; &gt;</type>
        <definition>std::map&lt;string, std::shared_ptr&lt;abstract_plugin&gt; &gt; graphene::app::detail::application_impl::_active_plugins</definition>
        <argsstring></argsstring>
        <name>_active_plugins</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="222" column="1" bodyfile="libraries/app/application_impl.hxx" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1detail_1_1application__impl_1ab8cd0ea2d23d4575ec4bf679f2c939e9" prot="private" static="no" mutable="no">
        <type>std::map&lt; string, std::shared_ptr&lt; <ref refid="classgraphene_1_1app_1_1abstract__plugin" kindref="compound">abstract_plugin</ref> &gt; &gt;</type>
        <definition>std::map&lt;string, std::shared_ptr&lt;abstract_plugin&gt; &gt; graphene::app::detail::application_impl::_available_plugins</definition>
        <argsstring></argsstring>
        <name>_available_plugins</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="223" column="1" bodyfile="libraries/app/application_impl.hxx" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1detail_1_1application__impl_1a5109761c5258e4962c089d023a207a98" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool graphene::app::detail::application_impl::_is_finished_syncing</definition>
        <argsstring></argsstring>
        <name>_is_finished_syncing</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="225" column="1" bodyfile="libraries/app/application_impl.hxx" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1detail_1_1application__impl_1ac9a14b940dd6fc75021af5f0c2078b6e" prot="private" static="no" mutable="no">
        <type><ref refid="classfc_1_1serial__valve" kindref="compound">fc::serial_valve</ref></type>
        <definition>fc::serial_valve graphene::app::detail::application_impl::valve</definition>
        <argsstring></argsstring>
        <name>valve</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="227" column="1" bodyfile="libraries/app/application_impl.hxx" bodystart="227" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgraphene_1_1app_1_1detail_1_1application__impl_1a05f6b598c146b0707f86c2e46ccdeb58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::detail::application_impl::reset_p2p_node</definition>
        <argsstring>(const fc::path &amp;data_dir)</argsstring>
        <name>reset_p2p_node</name>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">fc::path</ref> &amp;</type>
          <declname>data_dir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="23" column="1" bodyfile="libraries/app/application.cpp" bodystart="122" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1detail_1_1application__impl_1a53299364447764a4628a0f2b9018871b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::detail::application_impl::new_connection</definition>
        <argsstring>(const fc::http::websocket_connection_ptr &amp;c)</argsstring>
        <name>new_connection</name>
        <param>
          <type>const <ref refid="namespacefc_1_1http_1a530cf9528ae810584e918888da48f53d" kindref="member">fc::http::websocket_connection_ptr</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="25" column="1" bodyfile="libraries/app/application.cpp" bodystart="163" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1detail_1_1application__impl_1aa0951d21a6e4640c78c8dba4dd53b6a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::detail::application_impl::reset_websocket_server</definition>
        <argsstring>()</argsstring>
        <name>reset_websocket_server</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="27" column="1" bodyfile="libraries/app/application.cpp" bodystart="195" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1detail_1_1application__impl_1a56d7b546e3625b57e88a6b414ea6abe1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::detail::application_impl::reset_websocket_tls_server</definition>
        <argsstring>()</argsstring>
        <name>reset_websocket_tls_server</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="29" column="1" bodyfile="libraries/app/application.cpp" bodystart="212" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1detail_1_1application__impl_1aed87d4f37d1f0fa52ed055bc4661a2f4" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>graphene::app::detail::application_impl::application_impl</definition>
        <argsstring>(application &amp;self)</argsstring>
        <name>application_impl</name>
        <param>
          <type><ref refid="classgraphene_1_1app_1_1application" kindref="compound">application</ref> &amp;</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="31" column="1" bodyfile="libraries/app/application_impl.hxx" bodystart="31" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1detail_1_1application__impl_1ab43ddaba8adc18948f6282c76cc2bb05" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>graphene::app::detail::application_impl::~application_impl</definition>
        <argsstring>()</argsstring>
        <name>~application_impl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="37" column="1" bodyfile="libraries/app/application.cpp" bodystart="117" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1detail_1_1application__impl_1a576f36443832ef1266cdaacb01ae4bb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::detail::application_impl::set_block_production</definition>
        <argsstring>(bool producing_blocks)</argsstring>
        <name>set_block_production</name>
        <param>
          <type>bool</type>
          <declname>producing_blocks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="39" column="1" bodyfile="libraries/app/application.cpp" bodystart="1112" bodyend="1115"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1detail_1_1application__impl_1a93839de48da01b3e3105e13321a1e8e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::detail::application_impl::set_api_limit</definition>
        <argsstring>()</argsstring>
        <name>set_api_limit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="41" column="1" bodyfile="libraries/app/application.cpp" bodystart="300" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1detail_1_1application__impl_1ad92bfa6480fd24d061d49a6f0959ebca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::detail::application_impl::initialize</definition>
        <argsstring>(const fc::path &amp;data_dir, std::shared_ptr&lt; boost::program_options::variables_map &gt; options)</argsstring>
        <name>initialize</name>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">fc::path</ref> &amp;</type>
          <declname>data_dir</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; boost::program_options::variables_map &gt;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="43" column="1" bodyfile="libraries/app/application.cpp" bodystart="237" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1detail_1_1application__impl_1a2367bb23a57aa6b4608e7176c63cd9f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::detail::application_impl::startup</definition>
        <argsstring>()</argsstring>
        <name>startup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="44" column="1" bodyfile="libraries/app/application.cpp" bodystart="557" bodyend="572"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1detail_1_1application__impl_1a1cd01553607a8c532a89f265412e6121" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1optional" kindref="compound">fc::optional</ref>&lt; <ref refid="structgraphene_1_1app_1_1api__access__info" kindref="compound">api_access_info</ref> &gt;</type>
        <definition>optional&lt; api_access_info &gt; graphene::app::detail::application_impl::get_api_access_info</definition>
        <argsstring>(const string &amp;username) const</argsstring>
        <name>get_api_access_info</name>
        <param>
          <type>const string &amp;</type>
          <declname>username</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="46" column="1" bodyfile="libraries/app/application.cpp" bodystart="574" bodyend="585"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1detail_1_1application__impl_1a87f3404e89bb5e4426986a7248ece785" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::detail::application_impl::set_api_access_info</definition>
        <argsstring>(const string &amp;username, api_access_info &amp;&amp;permissions)</argsstring>
        <name>set_api_access_info</name>
        <param>
          <type>const string &amp;</type>
          <declname>username</declname>
        </param>
        <param>
          <type><ref refid="structgraphene_1_1app_1_1api__access__info" kindref="compound">api_access_info</ref> &amp;&amp;</type>
          <declname>permissions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="48" column="1" bodyfile="libraries/app/application.cpp" bodystart="587" bodyend="590"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1detail_1_1application__impl_1a46e14a1b20cb3b78e93f8267af3028de" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool graphene::app::detail::application_impl::has_item</definition>
        <argsstring>(const net::item_id &amp;id) override</argsstring>
        <name>has_item</name>
        <reimplements refid="classgraphene_1_1net_1_1node__delegate_1ae73a8679f1f836d42e5ee06ae0951201">has_item</reimplements>
        <param>
          <type>const <ref refid="structgraphene_1_1net_1_1item__id" kindref="compound">net::item_id</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If delegate has the item, the network has no need to fetch it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="53" column="1" bodyfile="libraries/app/application.cpp" bodystart="600" bodyend="610"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1detail_1_1application__impl_1a65790e12393a5547a2f77fd139ccbe7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::app::detail::application_impl::handle_block</definition>
        <argsstring>(const graphene::net::block_message &amp;blk_msg, bool sync_mode, std::vector&lt; graphene::net::message_hash_type &gt; &amp;contained_transaction_msg_ids) override</argsstring>
        <name>handle_block</name>
        <param>
          <type>const <ref refid="structgraphene_1_1net_1_1block__message" kindref="compound">graphene::net::block_message</ref> &amp;</type>
          <declname>blk_msg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sync_mode</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespacegraphene_1_1net_1a117e4c633fce23eaae7824c20c947fd4" kindref="member">graphene::net::message_hash_type</ref> &gt; &amp;</type>
          <declname>contained_transaction_msg_ids</declname>
        </param>
        <briefdescription>
<para>allows the application to validate an item prior to broadcasting to peers. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>blk_msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message which contains the block </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sync_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>true if the message was fetched through the sync process, false during normal operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>contained_transaction_msg_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>container for the transactions to write back into </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if this message caused the blockchain to switch forks, false if it did not</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>exception</parametername>
</parameternamelist>
<parameterdescription>
<para>if error validating the item, otherwise the item is safe to broadcast on.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sync_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>true if the message was fetched through the sync process, false during normal operation </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if this message caused the blockchain to switch forks, false if it did not</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>exception</parametername>
</parameternamelist>
<parameterdescription>
<para>if error validating the item, otherwise the item is safe to broadcast on. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="65" column="1" bodyfile="libraries/app/application.cpp" bodystart="620" bodyend="691"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1detail_1_1application__impl_1a1957c5d15b2e71ffcdc8e3d26a81ef51" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void graphene::app::detail::application_impl::handle_transaction</definition>
        <argsstring>(const graphene::net::trx_message &amp;transaction_message) override</argsstring>
        <name>handle_transaction</name>
        <reimplements refid="classgraphene_1_1net_1_1node__delegate_1a012e220463b248980525219ae44ee0a3">handle_transaction</reimplements>
        <param>
          <type>const <ref refid="structgraphene_1_1net_1_1trx__message" kindref="compound">graphene::net::trx_message</ref> &amp;</type>
          <declname>trx_msg</declname>
        </param>
        <briefdescription>
<para>Called when a new transaction comes in from the network. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>exception</parametername>
</parameternamelist>
<parameterdescription>
<para>if error validating the item, otherwise the item is safe to broadcast on. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="68" column="1" bodyfile="libraries/app/application.cpp" bodystart="693" bodyend="707"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1detail_1_1application__impl_1a8dc565859e27afcfd6f3752bd4feea00" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void graphene::app::detail::application_impl::handle_message</definition>
        <argsstring>(const graphene::net::message &amp;message_to_process) override</argsstring>
        <name>handle_message</name>
        <reimplements refid="classgraphene_1_1net_1_1node__delegate_1a738c6181f8e461b147934d7b79e710f8">handle_message</reimplements>
        <param>
          <type>const <ref refid="structgraphene_1_1net_1_1message" kindref="compound">graphene::net::message</ref> &amp;</type>
          <declname>message_to_process</declname>
        </param>
        <briefdescription>
<para>Called when a new message comes in from the network other than a block or a transaction. Currently there are no other possible messages, so this should never be called. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>exception</parametername>
</parameternamelist>
<parameterdescription>
<para>if error validating the item, otherwise the item is safe to broadcast on. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="70" column="1" bodyfile="libraries/app/application.cpp" bodystart="709" bodyend="713"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1detail_1_1application__impl_1a5d67c953aa24b3c76b8f94502d2a004a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::app::detail::application_impl::is_included_block</definition>
        <argsstring>(const graphene::chain::block_id_type &amp;block_id)</argsstring>
        <name>is_included_block</name>
        <param>
          <type>const <ref refid="namespacegraphene_1_1protocol_1a32e784a8edceba5506db2c130ed9cb9c" kindref="member">graphene::chain::block_id_type</ref> &amp;</type>
          <declname>block_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="72" column="1" bodyfile="libraries/app/application.cpp" bodystart="715" bodyend="720"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1detail_1_1application__impl_1aa6e738ecab68c50c82c14f5797936194" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespacegraphene_1_1net_1ae6a74bd458bbef0d6d21dd35c74c6235" kindref="member">graphene::net::item_hash_t</ref> &gt;</type>
        <definition>std::vector&lt; item_hash_t &gt; graphene::app::detail::application_impl::get_block_ids</definition>
        <argsstring>(const std::vector&lt; graphene::net::item_hash_t &gt; &amp;blockchain_synopsis, uint32_t &amp;remaining_item_count, uint32_t limit) override</argsstring>
        <name>get_block_ids</name>
        <param>
          <type>const std::vector&lt; <ref refid="namespacegraphene_1_1net_1ae6a74bd458bbef0d6d21dd35c74c6235" kindref="member">graphene::net::item_hash_t</ref> &gt; &amp;</type>
          <declname>blockchain_synopsis</declname>
        </param>
        <param>
          <type>uint32_t &amp;</type>
          <declname>remaining_item_count</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assuming all data elements are ordered in some way, this method should return up to limit ids that occur <emphasis>after</emphasis> the last ID in synopsis that we recognize.</para><para>On return, remaining_item_count will be set to the number of items in our blockchain after the last item returned in the result, or 0 if the result contains the last item in the blockchain </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="83" column="1" bodyfile="libraries/app/application.cpp" bodystart="731" bodyend="777"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1detail_1_1application__impl_1aff166590e90eec9081d50a5d63fd97a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="structgraphene_1_1net_1_1message" kindref="compound">graphene::net::message</ref></type>
        <definition>message graphene::app::detail::application_impl::get_item</definition>
        <argsstring>(const graphene::net::item_id &amp;id) override</argsstring>
        <name>get_item</name>
        <reimplements refid="classgraphene_1_1net_1_1node__delegate_1ad45df7b4d849fa221356a266f408b617">get_item</reimplements>
        <param>
          <type>const <ref refid="structgraphene_1_1net_1_1item__id" kindref="compound">graphene::net::item_id</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Given the hash of the requested data, fetch the body. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="91" column="1" bodyfile="libraries/app/application.cpp" bodystart="782" bodyend="796"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1detail_1_1application__impl_1ae901d1ad1ef060f430822036fa152ff6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacegraphene_1_1protocol_1a56354f39ed89f6a0a13fe90ba8228809" kindref="member">graphene::chain::chain_id_type</ref></type>
        <definition>chain_id_type graphene::app::detail::application_impl::get_chain_id</definition>
        <argsstring>() const override</argsstring>
        <name>get_chain_id</name>
        <reimplements refid="classgraphene_1_1net_1_1node__delegate_1a6abb2ff8bf61ef04b31e1a3685dff950">get_chain_id</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="93" column="1" bodyfile="libraries/app/application.cpp" bodystart="798" bodyend="801"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1detail_1_1application__impl_1a2696bb9c0a104b9726f059bbd340a88d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; <ref refid="namespacegraphene_1_1net_1ae6a74bd458bbef0d6d21dd35c74c6235" kindref="member">graphene::net::item_hash_t</ref> &gt;</type>
        <definition>std::vector&lt; item_hash_t &gt; graphene::app::detail::application_impl::get_blockchain_synopsis</definition>
        <argsstring>(const graphene::net::item_hash_t &amp;reference_point, uint32_t number_of_blocks_after_reference_point) override</argsstring>
        <name>get_blockchain_synopsis</name>
        <reimplements refid="classgraphene_1_1net_1_1node__delegate_1a0f144d17fc3bd79ac59ef4f3372d406a">get_blockchain_synopsis</reimplements>
        <param>
          <type>const <ref refid="namespacegraphene_1_1net_1ae6a74bd458bbef0d6d21dd35c74c6235" kindref="member">graphene::net::item_hash_t</ref> &amp;</type>
          <declname>reference_point</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>number_of_blocks_after_reference_point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a synopsis of the blockchain used for syncing. This consists of a list of block hashes at intervals exponentially increasing towards the genesis block. When syncing to a peer, the peer uses this data to determine if we&apos;re on the same fork as they are, and if not, what blocks they need to send us to get us on their fork.</para><para>In the over-simplified case, this is a straighforward synopsis of our current preferred blockchain; when we first connect up to a peer, this is what we will be sending. It looks like this: If the blockchain is empty, it will return the empty list. If the blockchain has one block, it will return a list containing just that block. If it contains more than one block: the first element in the list will be the hash of the highest numbered block that we cannot undo the second element will be the hash of an item at the half way point in the undoable segment of the blockchain the third will be ~3/4 of the way through the undoable segment of the block chain the fourth will be at ~7/8... &amp;c. the last item in the list will be the hash of the most recent block on our preferred chain so if the blockchain had 26 blocks labeled a - z, the synopsis would be: a n u x z the idea being that by sending a small (&lt;30) number of block ids, we can summarize a huge blockchain. The block ids are more dense near the end of the chain where because we are more likely to be almost in sync when we first connect, and forks are likely to be short. If the peer we&apos;re syncing with in our example is on a fork that started at block &apos;v&apos;, then they will reply to our synopsis with a list of all blocks starting from block &apos;u&apos;, the last block they know that we had in common.</para><para>In the real code, there are several complications.</para><para>First, as an optimization, we don&apos;t usually send a synopsis of the entire blockchain, we send a synopsis of only the segment of the blockchain that we have undo data for. If their fork doesn&apos;t build off of something in our undo history, we would be unable to switch, so there&apos;s no reason to fetch the blocks.</para><para>Second, when a peer replies to our initial synopsis and gives us a list of the blocks they think we are missing, they only send a chunk of a few thousand blocks at once. After we get those block ids, we need to request more blocks by sending another synopsis (we can&apos;t just say &quot;send me
the next 2000 ids&quot; because they may have switched forks themselves and they don&apos;t track what they&apos;ve sent us). For faster performance, we want to get a fairly long list of block ids first, then start downloading the blocks. The peer doesn&apos;t handle these follow-up block id requests any different from the initial request; it treats the synopsis we send as our blockchain and bases its response entirely off that. So to get the response we want (the next chunk of block ids following the last one they sent us, or, failing that, the shortest fork off of the last list of block ids they sent), we need to construct a synopsis as if our blockchain was made up of:<orderedlist>
<listitem><para>the blocks in our block chain up to the fork point (if there is a fork) or the head block (if no fork)</para></listitem><listitem><para>the blocks we&apos;ve already pushed from their fork (if there&apos;s a fork)</para></listitem><listitem><para>the block ids they&apos;ve previously sent us Segment 3 is handled in the p2p code, it just tells us the number of blocks it has (in number_of_blocks_after_reference_point) so we can leave space in the synopsis for them. We&apos;re responsible for constructing the synopsis of Segments 1 and 2 from our active blockchain and fork database. The reference_point parameter is the last block from that peer that has been successfully pushed to the blockchain, so that tells us whether the peer is on a fork or on the main chain. </para></listitem></orderedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="153" column="1" bodyfile="libraries/app/application.cpp" bodystart="861" bodyend="979"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1detail_1_1application__impl_1a5eec95c126c0fd0e2e7d6cab4fa60e85" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void graphene::app::detail::application_impl::sync_status</definition>
        <argsstring>(uint32_t item_type, uint32_t item_count) override</argsstring>
        <name>sync_status</name>
        <reimplements refid="classgraphene_1_1net_1_1node__delegate_1a0f6d68640e7fca4c2f7effbcddcdd9f1">sync_status</reimplements>
        <param>
          <type>uint32_t</type>
          <declname>item_type</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>item_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Call this after the call to handle_message succeeds.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item_type</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the item we&apos;re synchronizing, will be the same as item passed to the sync_from() call </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item_count</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of items known to the node that haven&apos;t been sent to handle_item() yet. After <computeroutput>item_count</computeroutput> more calls to handle_item(), the node will be in sync </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="165" column="1" bodyfile="libraries/app/application.cpp" bodystart="988" bodyend="991"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1detail_1_1application__impl_1a01bbb97b242780b662ea626cf0636903" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void graphene::app::detail::application_impl::connection_count_changed</definition>
        <argsstring>(uint32_t c) override</argsstring>
        <name>connection_count_changed</name>
        <reimplements refid="classgraphene_1_1net_1_1node__delegate_1aeb54b89d68318b06a155f5eff640f2df">connection_count_changed</reimplements>
        <param>
          <type>uint32_t</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Call any time the number of connected peers changes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="170" column="1" bodyfile="libraries/app/application.cpp" bodystart="996" bodyend="999"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1detail_1_1application__impl_1a679ccffe63b7c317c4db783b04e8df25" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>uint32_t</type>
        <definition>uint32_t graphene::app::detail::application_impl::get_block_number</definition>
        <argsstring>(const graphene::net::item_hash_t &amp;block_id) override</argsstring>
        <name>get_block_number</name>
        <reimplements refid="classgraphene_1_1net_1_1node__delegate_1a8620fff6f74e76e5583f4046f7ca3b46">get_block_number</reimplements>
        <param>
          <type>const <ref refid="namespacegraphene_1_1net_1ae6a74bd458bbef0d6d21dd35c74c6235" kindref="member">graphene::net::item_hash_t</ref> &amp;</type>
          <declname>block_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="172" column="1" bodyfile="libraries/app/application.cpp" bodystart="1001" bodyend="1004"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1detail_1_1application__impl_1a6c811120f251bdf274099b988560768d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classfc_1_1time__point__sec" kindref="compound">fc::time_point_sec</ref></type>
        <definition>fc::time_point_sec graphene::app::detail::application_impl::get_block_time</definition>
        <argsstring>(const graphene::net::item_hash_t &amp;block_id) override</argsstring>
        <name>get_block_time</name>
        <reimplements refid="classgraphene_1_1net_1_1node__delegate_1a4795a26af1b8ac700479e7e0fd293bd0">get_block_time</reimplements>
        <param>
          <type>const <ref refid="namespacegraphene_1_1net_1ae6a74bd458bbef0d6d21dd35c74c6235" kindref="member">graphene::net::item_hash_t</ref> &amp;</type>
          <declname>block_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the time a block was produced (if block_id = 0, returns genesis time). If we don&apos;t know about the block, returns <ref refid="classfc_1_1time__point__sec_1a9e403874fef172903950ad8d0f3120c6" kindref="member">time_point_sec::min()</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="178" column="1" bodyfile="libraries/app/application.cpp" bodystart="1010" bodyend="1015"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1detail_1_1application__impl_1a169f751575f1c254aba4200fde31a879" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacegraphene_1_1net_1ae6a74bd458bbef0d6d21dd35c74c6235" kindref="member">graphene::net::item_hash_t</ref></type>
        <definition>item_hash_t graphene::app::detail::application_impl::get_head_block_id</definition>
        <argsstring>() const override</argsstring>
        <name>get_head_block_id</name>
        <reimplements refid="classgraphene_1_1net_1_1node__delegate_1ae9da839865d1ac8902096b65c7e13502">get_head_block_id</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="180" column="1" bodyfile="libraries/app/application.cpp" bodystart="1017" bodyend="1020"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1detail_1_1application__impl_1a6b0ee0db78442dc1b75de0acc634c12e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>uint32_t</type>
        <definition>uint32_t graphene::app::detail::application_impl::estimate_last_known_fork_from_git_revision_timestamp</definition>
        <argsstring>(uint32_t unix_timestamp) const override</argsstring>
        <name>estimate_last_known_fork_from_git_revision_timestamp</name>
        <reimplements refid="classgraphene_1_1net_1_1node__delegate_1ac9075e9cdef0eb9d3757ef375efcdff1">estimate_last_known_fork_from_git_revision_timestamp</reimplements>
        <param>
          <type>uint32_t</type>
          <declname>unix_timestamp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="182" column="1" bodyfile="libraries/app/application.cpp" bodystart="1022" bodyend="1025"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1detail_1_1application__impl_1a2a0e962fe925e8e987208e3dc6c21863" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void graphene::app::detail::application_impl::error_encountered</definition>
        <argsstring>(const std::string &amp;message, const fc::oexception &amp;error) override</argsstring>
        <name>error_encountered</name>
        <reimplements refid="classgraphene_1_1net_1_1node__delegate_1a1e4d4a7ce301380c67d2908c4d8e8aeb">error_encountered</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <param>
          <type>const <ref refid="namespacefc_1a16f272a3d05d2641cb2bf67bac4673dc" kindref="member">fc::oexception</ref> &amp;</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="184" column="1" bodyfile="libraries/app/application.cpp" bodystart="1027" bodyend="1030"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1detail_1_1application__impl_1a5a16866ca1ed46f734043f473fad7735" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>uint8_t</type>
        <definition>uint8_t graphene::app::detail::application_impl::get_current_block_interval_in_seconds</definition>
        <argsstring>() const override</argsstring>
        <name>get_current_block_interval_in_seconds</name>
        <reimplements refid="classgraphene_1_1net_1_1node__delegate_1a74351fae3daf10fcb9c5ae2505eeab19">get_current_block_interval_in_seconds</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="186" column="1" bodyfile="libraries/app/application.cpp" bodystart="1032" bodyend="1036"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1detail_1_1application__impl_1a4b7137392b03598540439e56e9eaaa1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::detail::application_impl::add_available_plugin</definition>
        <argsstring>(std::shared_ptr&lt; abstract_plugin &gt; p)</argsstring>
        <name>add_available_plugin</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classgraphene_1_1app_1_1abstract__plugin" kindref="compound">abstract_plugin</ref> &gt;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Add an available plugin. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="189" column="1" bodyfile="libraries/app/application.cpp" bodystart="1107" bodyend="1110"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1detail_1_1application__impl_1a4c2b1a7c7483912965b5c17cb5ed5a69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::detail::application_impl::enable_plugin</definition>
        <argsstring>(const string &amp;name)</argsstring>
        <name>enable_plugin</name>
        <param>
          <type>const string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Enables a plugin. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="192" column="1" bodyfile="libraries/app/application.cpp" bodystart="1071" bodyend="1075"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1detail_1_1application__impl_1aa26ba96daffb8444572453dc040abba7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::app::detail::application_impl::is_plugin_enabled</definition>
        <argsstring>(const string &amp;name) const</argsstring>
        <name>is_plugin_enabled</name>
        <param>
          <type>const string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Returns whether a plugin is enabled. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="195" column="1" bodyfile="libraries/app/application.cpp" bodystart="592" bodyend="595"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classgraphene_1_1app_1_1detail_1_1application__impl_1a1d18df146c7ac5d882a4e8192984eb50" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::detail::application_impl::shutdown</definition>
        <argsstring>()</argsstring>
        <name>shutdown</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="198" column="1" bodyfile="libraries/app/application.cpp" bodystart="1038" bodyend="1069"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1detail_1_1application__impl_1a5ae82997bc97d54d0108c0433df5df38" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::detail::application_impl::initialize_plugins</definition>
        <argsstring>() const</argsstring>
        <name>initialize_plugins</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="200" column="1" bodyfile="libraries/app/application.cpp" bodystart="1077" bodyend="1085"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1detail_1_1application__impl_1a07495a87480cfab3999b1ebd81730927" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::detail::application_impl::startup_plugins</definition>
        <argsstring>() const</argsstring>
        <name>startup_plugins</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="201" column="1" bodyfile="libraries/app/application.cpp" bodystart="1087" bodyend="1095"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1detail_1_1application__impl_1a3d518e5013bbc04c40aecaf97141b842" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::detail::application_impl::shutdown_plugins</definition>
        <argsstring>() const</argsstring>
        <name>shutdown_plugins</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="202" column="1" bodyfile="libraries/app/application.cpp" bodystart="1097" bodyend="1105"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1detail_1_1application__impl_1ae961b5631a9872054af61586a608afc0" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1chain_1_1genesis__state__type" kindref="compound">graphene::chain::genesis_state_type</ref></type>
        <definition>graphene::chain::genesis_state_type graphene::app::detail::application_impl::initialize_genesis_state</definition>
        <argsstring>() const</argsstring>
        <name>initialize_genesis_state</name>
        <briefdescription>
<para>Initialize genesis state. Called by open_chain_database(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="205" column="1" bodyfile="libraries/app/application.cpp" bodystart="439" bodyend="490"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1detail_1_1application__impl_1ac473884a3cce4756b334b795fd8b13f8" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::detail::application_impl::open_chain_database</definition>
        <argsstring>() const</argsstring>
        <name>open_chain_database</name>
        <briefdescription>
<para>Open the chain database. Called by <ref refid="classgraphene_1_1app_1_1detail_1_1application__impl_1a2367bb23a57aa6b4608e7176c63cd9f6" kindref="member">startup</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application_impl.hxx" line="207" column="1" bodyfile="libraries/app/application.cpp" bodystart="492" bodyend="555"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="533">
        <label>std::enable_shared_from_this&lt; application_impl &gt;</label>
      </node>
      <node id="531">
        <label>graphene::app::detail::application_impl</label>
        <link refid="classgraphene_1_1app_1_1detail_1_1application__impl"/>
        <childnode refid="532" relation="public-inheritance">
        </childnode>
        <childnode refid="533" relation="public-inheritance">
        </childnode>
      </node>
      <node id="532">
        <label>graphene::net::node_delegate</label>
        <link refid="classgraphene_1_1net_1_1node__delegate"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="536">
        <label>std::enable_shared_from_this&lt; application_impl &gt;</label>
      </node>
      <node id="534">
        <label>graphene::app::detail::application_impl</label>
        <link refid="classgraphene_1_1app_1_1detail_1_1application__impl"/>
        <childnode refid="535" relation="public-inheritance">
        </childnode>
        <childnode refid="536" relation="public-inheritance">
        </childnode>
        <childnode refid="537" relation="usage">
          <edgelabel>_app_options</edgelabel>
        </childnode>
        <childnode refid="538" relation="usage">
          <edgelabel>_lock_file</edgelabel>
        </childnode>
      </node>
      <node id="537">
        <label>graphene::app::application_options</label>
        <link refid="classgraphene_1_1app_1_1application__options"/>
      </node>
      <node id="535">
        <label>graphene::net::node_delegate</label>
        <link refid="classgraphene_1_1net_1_1node__delegate"/>
      </node>
      <node id="538">
        <label>fc::optional&lt; fc::temp_file &gt;</label>
        <link refid="classfc_1_1optional"/>
      </node>
    </collaborationgraph>
    <location file="libraries/app/application_impl.hxx" line="16" column="1" bodyfile="libraries/app/application_impl.hxx" bodystart="15" bodyend="228"/>
    <listofallmembers>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1a09eaa3fcdfaa628b3ab5746e9458ab5c" prot="private" virt="non-virtual"><scope>graphene::app::detail::application_impl</scope><name>_active_plugins</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1aaf6a8332d0bafd2d58acc8bca108fadf" prot="private" virt="non-virtual"><scope>graphene::app::detail::application_impl</scope><name>_apiaccess</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1a9f3e0210e9e170a068a4fe6bc4259cb6" prot="public" virt="non-virtual"><scope>graphene::app::detail::application_impl</scope><name>_app_options</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1ab8cd0ea2d23d4575ec4bf679f2c939e9" prot="private" virt="non-virtual"><scope>graphene::app::detail::application_impl</scope><name>_available_plugins</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1ab81da4ed3068cb9e85380007471e2985" prot="private" virt="non-virtual"><scope>graphene::app::detail::application_impl</scope><name>_chain_db</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1a31f4ebabcfc8d3304706120af8ac74a5" prot="private" virt="non-virtual"><scope>graphene::app::detail::application_impl</scope><name>_data_dir</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1ad6aadf4191041d2fa601241542256e40" prot="public" virt="non-virtual"><scope>graphene::app::detail::application_impl</scope><name>_force_validate</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1a14c8a3eab603c26744a2ece452aa0bc7" prot="public" virt="non-virtual"><scope>graphene::app::detail::application_impl</scope><name>_is_block_producer</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1a5109761c5258e4962c089d023a207a98" prot="private" virt="non-virtual"><scope>graphene::app::detail::application_impl</scope><name>_is_finished_syncing</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1af07b5b8d6e16afe34208c9755f6416f5" prot="public" virt="non-virtual"><scope>graphene::app::detail::application_impl</scope><name>_lock_file</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1a126fc0265c39d4331edfa16e68476a64" prot="private" virt="non-virtual"><scope>graphene::app::detail::application_impl</scope><name>_options</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1a0a00a599276f8d7d30910da38a27d9a4" prot="private" virt="non-virtual"><scope>graphene::app::detail::application_impl</scope><name>_p2p_network</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1a90968cffda63e3ab4a235caaf6747346" prot="private" virt="non-virtual"><scope>graphene::app::detail::application_impl</scope><name>_self</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1ae6447c7cc434945337456c18d0103ef1" prot="private" virt="non-virtual"><scope>graphene::app::detail::application_impl</scope><name>_websocket_server</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1aca6d490958bb5748c84cb89488f0bb3e" prot="private" virt="non-virtual"><scope>graphene::app::detail::application_impl</scope><name>_websocket_tls_server</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1a4b7137392b03598540439e56e9eaaa1a" prot="public" virt="non-virtual"><scope>graphene::app::detail::application_impl</scope><name>add_available_plugin</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1aed87d4f37d1f0fa52ed055bc4661a2f4" prot="public" virt="non-virtual"><scope>graphene::app::detail::application_impl</scope><name>application_impl</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1a01bbb97b242780b662ea626cf0636903" prot="public" virt="virtual"><scope>graphene::app::detail::application_impl</scope><name>connection_count_changed</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1a4c2b1a7c7483912965b5c17cb5ed5a69" prot="public" virt="non-virtual"><scope>graphene::app::detail::application_impl</scope><name>enable_plugin</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1a2a0e962fe925e8e987208e3dc6c21863" prot="public" virt="virtual"><scope>graphene::app::detail::application_impl</scope><name>error_encountered</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1a6b0ee0db78442dc1b75de0acc634c12e" prot="public" virt="virtual"><scope>graphene::app::detail::application_impl</scope><name>estimate_last_known_fork_from_git_revision_timestamp</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1a1cd01553607a8c532a89f265412e6121" prot="public" virt="non-virtual"><scope>graphene::app::detail::application_impl</scope><name>get_api_access_info</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1aa6e738ecab68c50c82c14f5797936194" prot="public" virt="non-virtual"><scope>graphene::app::detail::application_impl</scope><name>get_block_ids</name></member>
      <member refid="classgraphene_1_1net_1_1node__delegate_1a74b20c0bd09734e2e483809f0fb1d81a" prot="public" virt="pure-virtual" ambiguityscope="graphene::net::node_delegate::"><scope>graphene::app::detail::application_impl</scope><name>get_block_ids</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1a679ccffe63b7c317c4db783b04e8df25" prot="public" virt="virtual"><scope>graphene::app::detail::application_impl</scope><name>get_block_number</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1a6c811120f251bdf274099b988560768d" prot="public" virt="virtual"><scope>graphene::app::detail::application_impl</scope><name>get_block_time</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1a2696bb9c0a104b9726f059bbd340a88d" prot="public" virt="virtual"><scope>graphene::app::detail::application_impl</scope><name>get_blockchain_synopsis</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1ae901d1ad1ef060f430822036fa152ff6" prot="public" virt="virtual"><scope>graphene::app::detail::application_impl</scope><name>get_chain_id</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1a5a16866ca1ed46f734043f473fad7735" prot="public" virt="virtual"><scope>graphene::app::detail::application_impl</scope><name>get_current_block_interval_in_seconds</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1a169f751575f1c254aba4200fde31a879" prot="public" virt="virtual"><scope>graphene::app::detail::application_impl</scope><name>get_head_block_id</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1aff166590e90eec9081d50a5d63fd97a8" prot="public" virt="virtual"><scope>graphene::app::detail::application_impl</scope><name>get_item</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1ae70923dc6efde4f0fa3c4fd312607cef" prot="public" virt="non-virtual"><scope>graphene::app::detail::application_impl</scope><name>graphene::app::application</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1a65790e12393a5547a2f77fd139ccbe7e" prot="public" virt="non-virtual"><scope>graphene::app::detail::application_impl</scope><name>handle_block</name></member>
      <member refid="classgraphene_1_1net_1_1node__delegate_1a8813881e942d58cb1fa424bbf331a983" prot="public" virt="pure-virtual" ambiguityscope="graphene::net::node_delegate::"><scope>graphene::app::detail::application_impl</scope><name>handle_block</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1a8dc565859e27afcfd6f3752bd4feea00" prot="public" virt="virtual"><scope>graphene::app::detail::application_impl</scope><name>handle_message</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1a1957c5d15b2e71ffcdc8e3d26a81ef51" prot="public" virt="virtual"><scope>graphene::app::detail::application_impl</scope><name>handle_transaction</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1a46e14a1b20cb3b78e93f8267af3028de" prot="public" virt="virtual"><scope>graphene::app::detail::application_impl</scope><name>has_item</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1ad92bfa6480fd24d061d49a6f0959ebca" prot="public" virt="non-virtual"><scope>graphene::app::detail::application_impl</scope><name>initialize</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1ae961b5631a9872054af61586a608afc0" prot="private" virt="non-virtual"><scope>graphene::app::detail::application_impl</scope><name>initialize_genesis_state</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1a5ae82997bc97d54d0108c0433df5df38" prot="private" virt="non-virtual"><scope>graphene::app::detail::application_impl</scope><name>initialize_plugins</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1a5d67c953aa24b3c76b8f94502d2a004a" prot="public" virt="non-virtual"><scope>graphene::app::detail::application_impl</scope><name>is_included_block</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1aa26ba96daffb8444572453dc040abba7" prot="public" virt="non-virtual"><scope>graphene::app::detail::application_impl</scope><name>is_plugin_enabled</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1a53299364447764a4628a0f2b9018871b" prot="public" virt="non-virtual"><scope>graphene::app::detail::application_impl</scope><name>new_connection</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1ac473884a3cce4756b334b795fd8b13f8" prot="private" virt="non-virtual"><scope>graphene::app::detail::application_impl</scope><name>open_chain_database</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1a05f6b598c146b0707f86c2e46ccdeb58" prot="public" virt="non-virtual"><scope>graphene::app::detail::application_impl</scope><name>reset_p2p_node</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1aa0951d21a6e4640c78c8dba4dd53b6a8" prot="public" virt="non-virtual"><scope>graphene::app::detail::application_impl</scope><name>reset_websocket_server</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1a56d7b546e3625b57e88a6b414ea6abe1" prot="public" virt="non-virtual"><scope>graphene::app::detail::application_impl</scope><name>reset_websocket_tls_server</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1a87f3404e89bb5e4426986a7248ece785" prot="public" virt="non-virtual"><scope>graphene::app::detail::application_impl</scope><name>set_api_access_info</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1a93839de48da01b3e3105e13321a1e8e9" prot="public" virt="non-virtual"><scope>graphene::app::detail::application_impl</scope><name>set_api_limit</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1a576f36443832ef1266cdaacb01ae4bb6" prot="public" virt="non-virtual"><scope>graphene::app::detail::application_impl</scope><name>set_block_production</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1a1d18df146c7ac5d882a4e8192984eb50" prot="private" virt="non-virtual"><scope>graphene::app::detail::application_impl</scope><name>shutdown</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1a3d518e5013bbc04c40aecaf97141b842" prot="private" virt="non-virtual"><scope>graphene::app::detail::application_impl</scope><name>shutdown_plugins</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1a2367bb23a57aa6b4608e7176c63cd9f6" prot="public" virt="non-virtual"><scope>graphene::app::detail::application_impl</scope><name>startup</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1a07495a87480cfab3999b1ebd81730927" prot="private" virt="non-virtual"><scope>graphene::app::detail::application_impl</scope><name>startup_plugins</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1a5eec95c126c0fd0e2e7d6cab4fa60e85" prot="public" virt="virtual"><scope>graphene::app::detail::application_impl</scope><name>sync_status</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1ac9a14b940dd6fc75021af5f0c2078b6e" prot="private" virt="non-virtual"><scope>graphene::app::detail::application_impl</scope><name>valve</name></member>
      <member refid="classgraphene_1_1app_1_1detail_1_1application__impl_1ab43ddaba8adc18948f6282c76cc2bb05" prot="public" virt="virtual"><scope>graphene::app::detail::application_impl</scope><name>~application_impl</name></member>
      <member refid="classgraphene_1_1net_1_1node__delegate_1a9c17b7796f2f106c161e2cf0c9c6b66b" prot="public" virt="virtual"><scope>graphene::app::detail::application_impl</scope><name>~node_delegate</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
