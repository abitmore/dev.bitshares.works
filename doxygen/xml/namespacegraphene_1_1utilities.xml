<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacegraphene_1_1utilities" kind="namespace" language="C++">
    <compoundname>graphene::utilities</compoundname>
    <innerclass refid="classgraphene_1_1utilities_1_1_curl_request" prot="public">graphene::utilities::CurlRequest</innerclass>
    <innerclass refid="classgraphene_1_1utilities_1_1_e_s" prot="public">graphene::utilities::ES</innerclass>
    <innerclass refid="classgraphene_1_1utilities_1_1padding__ostream" prot="public">graphene::utilities::padding_ostream</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacegraphene_1_1utilities_1a4da7b598aa6b523b3cb9545bd51159c6" prot="public" static="no" mutable="no">
        <type>const char *const</type>
        <definition>const char* const graphene::utilities::git_revision_sha</definition>
        <argsstring></argsstring>
        <name>git_revision_sha</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/utilities/include/graphene/utilities/git_revision.hpp" line="29" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacegraphene_1_1utilities_1ab693ad99c775928737dbcceec4d101bc" prot="public" static="no" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t graphene::utilities::git_revision_unix_timestamp</definition>
        <argsstring></argsstring>
        <name>git_revision_unix_timestamp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/utilities/include/graphene/utilities/git_revision.hpp" line="30" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacegraphene_1_1utilities_1a64ad8e1791fa4c7e0a6a803505467ad2" prot="public" static="no" mutable="no">
        <type>const char *const</type>
        <definition>const char* const graphene::utilities::git_revision_description</definition>
        <argsstring></argsstring>
        <name>git_revision_description</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/utilities/include/graphene/utilities/git_revision.hpp" line="31" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacegraphene_1_1utilities_1a344fd9252a509bfe40d5279595174660" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::utilities::checkES</definition>
        <argsstring>(ES &amp;es)</argsstring>
        <name>checkES</name>
        <param>
          <type><ref refid="classgraphene_1_1utilities_1_1_e_s" kindref="compound">ES</ref> &amp;</type>
          <declname>es</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/utilities/elasticsearch.cpp" line="39" column="1" bodyfile="libraries/utilities/elasticsearch.cpp" bodystart="39" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1utilities_1ab52d6a4cd60cbe22dc55148f28941ae9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string</type>
        <definition>const std::string graphene::utilities::simpleQuery</definition>
        <argsstring>(ES &amp;es)</argsstring>
        <name>simpleQuery</name>
        <param>
          <type><ref refid="classgraphene_1_1utilities_1_1_e_s" kindref="compound">ES</ref> &amp;</type>
          <declname>es</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/utilities/elasticsearch.cpp" line="52" column="1" bodyfile="libraries/utilities/elasticsearch.cpp" bodystart="52" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1utilities_1ad979680c6278d161e1273f0ade452551" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::utilities::SendBulk</definition>
        <argsstring>(ES &amp;&amp;es)</argsstring>
        <name>SendBulk</name>
        <param>
          <type><ref refid="classgraphene_1_1utilities_1_1_e_s" kindref="compound">ES</ref> &amp;&amp;</type>
          <declname>es</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/utilities/elasticsearch.cpp" line="64" column="1" bodyfile="libraries/utilities/elasticsearch.cpp" bodystart="64" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1utilities_1ac351ff97ae9fa3896b62edf737efda13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string</type>
        <definition>const std::string graphene::utilities::joinBulkLines</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;bulk)</argsstring>
        <name>joinBulkLines</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>bulk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/utilities/elasticsearch.cpp" line="82" column="1" bodyfile="libraries/utilities/elasticsearch.cpp" bodystart="82" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1utilities_1a1a4654603153b4d5898a32c1debab131" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long graphene::utilities::getResponseCode</definition>
        <argsstring>(CURL *handler)</argsstring>
        <name>getResponseCode</name>
        <param>
          <type>CURL *</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/utilities/elasticsearch.cpp" line="89" column="1" bodyfile="libraries/utilities/elasticsearch.cpp" bodystart="89" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1utilities_1ac1e0a5db1e9d97647d405d272f9ba015" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::utilities::handleBulkResponse</definition>
        <argsstring>(long http_code, const std::string &amp;CurlReadBuffer)</argsstring>
        <name>handleBulkResponse</name>
        <param>
          <type>long</type>
          <declname>http_code</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>CurlReadBuffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/utilities/elasticsearch.cpp" line="96" column="1" bodyfile="libraries/utilities/elasticsearch.cpp" bodystart="96" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1utilities_1afaa7ede46f3e4e7293c94bea00121ed9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; std::string &gt;</type>
        <definition>const std::vector&lt; std::string &gt; graphene::utilities::createBulk</definition>
        <argsstring>(const fc::mutable_variant_object &amp;bulk_header, std::string &amp;&amp;data)</argsstring>
        <name>createBulk</name>
        <param>
          <type>const <ref refid="classfc_1_1mutable__variant__object" kindref="compound">fc::mutable_variant_object</ref> &amp;</type>
          <declname>bulk_header</declname>
        </param>
        <param>
          <type>std::string &amp;&amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/utilities/elasticsearch.cpp" line="122" column="1" bodyfile="libraries/utilities/elasticsearch.cpp" bodystart="122" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1utilities_1a8838f6e46f53ced3a25bad077df72146" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::utilities::deleteAll</definition>
        <argsstring>(ES &amp;es)</argsstring>
        <name>deleteAll</name>
        <param>
          <type><ref refid="classgraphene_1_1utilities_1_1_e_s" kindref="compound">ES</ref> &amp;</type>
          <declname>es</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/utilities/elasticsearch.cpp" line="133" column="1" bodyfile="libraries/utilities/elasticsearch.cpp" bodystart="133" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1utilities_1a5df9c27edc8f6f4a42ed57d9740eb24c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string</type>
        <definition>const std::string graphene::utilities::getEndPoint</definition>
        <argsstring>(ES &amp;es)</argsstring>
        <name>getEndPoint</name>
        <param>
          <type><ref refid="classgraphene_1_1utilities_1_1_e_s" kindref="compound">ES</ref> &amp;</type>
          <declname>es</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/utilities/elasticsearch.cpp" line="147" column="1" bodyfile="libraries/utilities/elasticsearch.cpp" bodystart="147" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1utilities_1a21890442aceec251bb81143af7d13385" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string</type>
        <definition>const std::string graphene::utilities::generateIndexName</definition>
        <argsstring>(const fc::time_point_sec &amp;block_date, const std::string &amp;_elasticsearch_index_prefix)</argsstring>
        <name>generateIndexName</name>
        <param>
          <type>const <ref refid="classfc_1_1time__point__sec" kindref="compound">fc::time_point_sec</ref> &amp;</type>
          <declname>block_date</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>_elasticsearch_index_prefix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/utilities/elasticsearch.cpp" line="158" column="1" bodyfile="libraries/utilities/elasticsearch.cpp" bodystart="158" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1utilities_1a2c2bf8b3151c59bccb60621d753d86a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string</type>
        <definition>const std::string graphene::utilities::doCurl</definition>
        <argsstring>(CurlRequest &amp;curl)</argsstring>
        <name>doCurl</name>
        <param>
          <type><ref refid="classgraphene_1_1utilities_1_1_curl_request" kindref="compound">CurlRequest</ref> &amp;</type>
          <declname>curl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/utilities/elasticsearch.cpp" line="167" column="1" bodyfile="libraries/utilities/elasticsearch.cpp" bodystart="167" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1utilities_1a33f09d0c0f741c8375082b6932bcdc58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string graphene::utilities::key_to_wif</definition>
        <argsstring>(const fc::sha256 &amp;private_secret)</argsstring>
        <name>key_to_wif</name>
        <param>
          <type>const <ref refid="classfc_1_1sha256" kindref="compound">fc::sha256</ref> &amp;</type>
          <declname>private_secret</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/utilities/include/graphene/utilities/key_conversion.hpp" line="32" column="1" bodyfile="libraries/utilities/key_conversion.cpp" bodystart="30" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1utilities_1a01120dd3238ef646221bba49465a8acc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string graphene::utilities::key_to_wif</definition>
        <argsstring>(const fc::ecc::private_key &amp;key)</argsstring>
        <name>key_to_wif</name>
        <param>
          <type>const <ref refid="classfc_1_1ecc_1_1private__key" kindref="compound">fc::ecc::private_key</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/utilities/include/graphene/utilities/key_conversion.hpp" line="33" column="1" bodyfile="libraries/utilities/key_conversion.cpp" bodystart="42" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1utilities_1a4734611d6f868ab8bebb86622e918dd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1optional" kindref="compound">fc::optional</ref>&lt; <ref refid="classfc_1_1ecc_1_1private__key" kindref="compound">fc::ecc::private_key</ref> &gt;</type>
        <definition>fc::optional&lt; fc::ecc::private_key &gt; graphene::utilities::wif_to_key</definition>
        <argsstring>(const std::string &amp;wif_key)</argsstring>
        <name>wif_to_key</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>wif_key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/utilities/include/graphene/utilities/key_conversion.hpp" line="34" column="1" bodyfile="libraries/utilities/key_conversion.cpp" bodystart="47" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1utilities_1aaa11e0000f7a698827216eba26390ebc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string graphene::utilities::escape_string_for_c_source_code</definition>
        <argsstring>(const std::string &amp;input)</argsstring>
        <name>escape_string_for_c_source_code</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/utilities/include/graphene/utilities/string_escape.hpp" line="30" column="1" bodyfile="libraries/utilities/string_escape.cpp" bodystart="29" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1utilities_1adb696ba556b0db4d1d78173585ac6122" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1path" kindref="compound">fc::path</ref></type>
        <definition>fc::path graphene::utilities::temp_directory_path</definition>
        <argsstring>()</argsstring>
        <name>temp_directory_path</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/utilities/include/graphene/utilities/tempdir.hpp" line="32" column="1" bodyfile="libraries/utilities/tempdir.cpp" bodystart="31" bodyend="37"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/utilities/elasticsearch.cpp" line="37" column="1"/>
  </compounddef>
</doxygen>
