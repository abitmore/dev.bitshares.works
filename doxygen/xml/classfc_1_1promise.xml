<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classfc_1_1promise" kind="class" language="C++" prot="public">
    <compoundname>fc::promise</compoundname>
    <basecompoundref refid="classfc_1_1promise__base" prot="public" virt="virtual">fc::promise_base</basecompoundref>
    <includes refid="future_8hpp" local="no">future.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
        <defval>void</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classfc_1_1promise_1acc7690253b934c2eacb95037f4d49e1b" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classfc_1_1promise" kindref="compound">promise</ref>&lt; T &gt; &gt;</type>
        <definition>typedef std::shared_ptr&lt; promise&lt;T&gt; &gt; fc::promise&lt; T &gt;::ptr</definition>
        <argsstring></argsstring>
        <name>ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/future.hpp" line="111" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="111" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classfc_1_1promise_1a4f890afd6fb589d0e76359d71182166a" prot="protected" static="no" mutable="no">
        <type><ref refid="classfc_1_1optional" kindref="compound">optional</ref>&lt; T &gt;</type>
        <definition>optional&lt;T&gt; fc::promise&lt; T &gt;::result</definition>
        <argsstring></argsstring>
        <name>result</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/future.hpp" line="155" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="155" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classfc_1_1promise_1a521ecf999c9954b2e9d30e5d4850bf8a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual fc::promise&lt; T &gt;::~promise</definition>
        <argsstring>()</argsstring>
        <name>~promise</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/future.hpp" line="112" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="112" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1promise_1a1a4717cfbf9cce193fe2813cb0800a29" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; fc::promise&lt; T &gt;::wait</definition>
        <argsstring>(const microseconds &amp;timeout=microseconds::maximum())</argsstring>
        <name>wait</name>
        <param>
          <type>const <ref refid="classfc_1_1microseconds" kindref="compound">microseconds</ref> &amp;</type>
          <declname>timeout</declname>
          <defval><ref refid="classfc_1_1microseconds_1a83490e326e43e94a2b9f2d23b5645455" kindref="member">microseconds::maximum</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/future.hpp" line="127" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="127" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1promise_1a703194a66c51cf4cbd5ab06b64d9f20a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; fc::promise&lt; T &gt;::wait_until</definition>
        <argsstring>(const time_point &amp;tp)</argsstring>
        <name>wait_until</name>
        <param>
          <type>const <ref refid="classfc_1_1time__point" kindref="compound">time_point</ref> &amp;</type>
          <declname>tp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/future.hpp" line="131" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="131" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1promise_1a49310e3ebfedef61b19309c2af3a13da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void fc::promise&lt; T &gt;::set_value</definition>
        <argsstring>(const T &amp;v)</argsstring>
        <name>set_value</name>
        <param>
          <type>const T &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/future.hpp" line="136" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="136" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1promise_1a48db53880b5b7e93e41f1670f181965d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void fc::promise&lt; T &gt;::set_value</definition>
        <argsstring>(T &amp;&amp;v)</argsstring>
        <name>set_value</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/future.hpp" line="141" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="141" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1promise_1a0006a67d05e17baf042e25b08889541f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CompletionHandler</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::promise&lt; T &gt;::on_complete</definition>
        <argsstring>(CompletionHandler &amp;&amp;c)</argsstring>
        <name>on_complete</name>
        <param>
          <type>CompletionHandler &amp;&amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/future.hpp" line="147" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="147" bodyend="149"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classfc_1_1promise_1aea1eedc4d2baf928b35a69eba569cdd2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfc_1_1promise__base_1a981f5f6eb5de005018991933ca06580d" kindref="member">ptr</ref></type>
        <definition>static ptr fc::promise&lt; T &gt;::create</definition>
        <argsstring>(const char *desc FC_TASK_NAME_DEFAULT_ARG)</argsstring>
        <name>create</name>
        <param>
          <type>const char *desc</type>
          <declname>FC_TASK_NAME_DEFAULT_ARG</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/future.hpp" line="114" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="114" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1promise_1a312c47f89eaaabe5737b89efd5ee87e2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfc_1_1promise__base_1a981f5f6eb5de005018991933ca06580d" kindref="member">ptr</ref></type>
        <definition>static ptr fc::promise&lt; T &gt;::create</definition>
        <argsstring>(const T &amp;val)</argsstring>
        <name>create</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/future.hpp" line="118" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="118" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1promise_1a45f8130cf579b72aa9236b728e6dbcb4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfc_1_1promise__base_1a981f5f6eb5de005018991933ca06580d" kindref="member">ptr</ref></type>
        <definition>static ptr fc::promise&lt; T &gt;::create</definition>
        <argsstring>(T &amp;&amp;val)</argsstring>
        <name>create</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/future.hpp" line="122" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="122" bodyend="125"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classfc_1_1promise_1a86646178b0df4d22b81a8e1b326a8173" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>fc::promise&lt; T &gt;::promise</definition>
        <argsstring>(const char *desc)</argsstring>
        <name>promise</name>
        <param>
          <type>const char *</type>
          <declname>desc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/future.hpp" line="151" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="151" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1promise_1a62f3f34ae0f91fa866889ecfc90152e6" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>fc::promise&lt; T &gt;::promise</definition>
        <argsstring>(const T &amp;val)</argsstring>
        <name>promise</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/future.hpp" line="152" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="152" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1promise_1af12b943b41091c5282c4015bb7cd0014" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>fc::promise&lt; T &gt;::promise</definition>
        <argsstring>(T &amp;&amp;val)</argsstring>
        <name>promise</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/future.hpp" line="153" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="153" bodyend="153"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="6511">
        <label>std::enable_shared_from_this&lt; promise_base &gt;</label>
      </node>
      <node id="6509">
        <label>fc::promise&lt; T &gt;</label>
        <link refid="classfc_1_1promise"/>
        <childnode refid="6510" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6510">
        <label>fc::promise_base</label>
        <link refid="classfc_1_1promise__base"/>
        <childnode refid="6511" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6514">
        <label>std::enable_shared_from_this&lt; promise_base &gt;</label>
      </node>
      <node id="6512">
        <label>fc::promise&lt; T &gt;</label>
        <link refid="classfc_1_1promise"/>
        <childnode refid="6513" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6513">
        <label>fc::promise_base</label>
        <link refid="classfc_1_1promise__base"/>
        <childnode refid="6514" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="libraries/fc/include/fc/thread/future.hpp" line="109" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="109" bodyend="156"/>
    <listofallmembers>
      <member refid="classfc_1_1promise__base_1a11f63028c05408c07cd9281171af6001" prot="protected" virt="non-virtual"><scope>fc::promise</scope><name>_cancellation_reason</name></member>
      <member refid="classfc_1_1promise__base_1a320d282323c9805b6387a7b7ea6dcd79" prot="protected" virt="non-virtual"><scope>fc::promise</scope><name>_notify</name></member>
      <member refid="classfc_1_1promise__base_1ab0d96cf4e63f9ede926e779149c16d1e" prot="protected" virt="non-virtual"><scope>fc::promise</scope><name>_on_complete</name></member>
      <member refid="classfc_1_1promise__base_1af1b26ac27dbdfe255b4d44c98ac0bde8" prot="protected" virt="non-virtual"><scope>fc::promise</scope><name>_set_value</name></member>
      <member refid="classfc_1_1promise__base_1a75479ef52e8d8e2a6770bef9b4b281dc" prot="protected" virt="non-virtual"><scope>fc::promise</scope><name>_wait</name></member>
      <member refid="classfc_1_1promise__base_1a4a2aa31afeaf26faaff3d1799435f4d4" prot="protected" virt="non-virtual"><scope>fc::promise</scope><name>_wait_until</name></member>
      <member refid="classfc_1_1promise__base_1a5d2719d4d2948d8e1e600ec88af91e91" prot="public" virt="virtual"><scope>fc::promise</scope><name>cancel</name></member>
      <member refid="classfc_1_1promise__base_1aa2defa3c6bb9cf9a6f0a1e38b1b8a475" prot="public" virt="non-virtual"><scope>fc::promise</scope><name>canceled</name></member>
      <member refid="classfc_1_1promise_1aea1eedc4d2baf928b35a69eba569cdd2" prot="public" virt="non-virtual"><scope>fc::promise</scope><name>create</name></member>
      <member refid="classfc_1_1promise_1a312c47f89eaaabe5737b89efd5ee87e2" prot="public" virt="non-virtual"><scope>fc::promise</scope><name>create</name></member>
      <member refid="classfc_1_1promise_1a45f8130cf579b72aa9236b728e6dbcb4" prot="public" virt="non-virtual"><scope>fc::promise</scope><name>create</name></member>
      <member refid="classfc_1_1promise__base_1a169688ce87883c5483c5d6e0d7ae84d0" prot="public" virt="non-virtual"><scope>fc::promise</scope><name>error</name></member>
      <member refid="classfc_1_1promise__base_1ae2f98357966b2fbecbf35736ef904bea" prot="public" virt="non-virtual"><scope>fc::promise</scope><name>get_desc</name></member>
      <member refid="classfc_1_1promise_1a0006a67d05e17baf042e25b08889541f" prot="public" virt="non-virtual"><scope>fc::promise</scope><name>on_complete</name></member>
      <member refid="classfc_1_1promise_1a86646178b0df4d22b81a8e1b326a8173" prot="protected" virt="non-virtual"><scope>fc::promise</scope><name>promise</name></member>
      <member refid="classfc_1_1promise_1a62f3f34ae0f91fa866889ecfc90152e6" prot="protected" virt="non-virtual"><scope>fc::promise</scope><name>promise</name></member>
      <member refid="classfc_1_1promise_1af12b943b41091c5282c4015bb7cd0014" prot="protected" virt="non-virtual"><scope>fc::promise</scope><name>promise</name></member>
      <member refid="classfc_1_1promise__base_1adea93b6fbaa0f0e832d331bde7314bea" prot="protected" virt="non-virtual"><scope>fc::promise</scope><name>promise_base</name></member>
      <member refid="classfc_1_1promise_1acc7690253b934c2eacb95037f4d49e1b" prot="public" virt="non-virtual"><scope>fc::promise</scope><name>ptr</name></member>
      <member refid="classfc_1_1promise__base_1a6090bb47228cded5eb9319b7e81726b3" prot="public" virt="non-virtual"><scope>fc::promise</scope><name>ready</name></member>
      <member refid="classfc_1_1promise_1a4f890afd6fb589d0e76359d71182166a" prot="protected" virt="non-virtual"><scope>fc::promise</scope><name>result</name></member>
      <member refid="classfc_1_1promise__base_1a3119bcaac019e31280151b19c3f6aa72" prot="public" virt="non-virtual"><scope>fc::promise</scope><name>set_exception</name></member>
      <member refid="classfc_1_1promise_1a49310e3ebfedef61b19309c2af3a13da" prot="public" virt="non-virtual"><scope>fc::promise</scope><name>set_value</name></member>
      <member refid="classfc_1_1promise_1a48db53880b5b7e93e41f1670f181965d" prot="public" virt="non-virtual"><scope>fc::promise</scope><name>set_value</name></member>
      <member refid="classfc_1_1promise_1a1a4717cfbf9cce193fe2813cb0800a29" prot="public" virt="non-virtual"><scope>fc::promise</scope><name>wait</name></member>
      <member refid="classfc_1_1promise_1a703194a66c51cf4cbd5ab06b64d9f20a" prot="public" virt="non-virtual"><scope>fc::promise</scope><name>wait_until</name></member>
      <member refid="classfc_1_1promise_1a521ecf999c9954b2e9d30e5d4850bf8a" prot="public" virt="virtual"><scope>fc::promise</scope><name>~promise</name></member>
      <member refid="classfc_1_1promise__base_1ac9c941e4d650683268f8a12ec13edc86" prot="public" virt="virtual"><scope>fc::promise</scope><name>~promise_base</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
