<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structfc_1_1identity__member__with__optionals" kind="struct" language="C++" prot="public">
    <compoundname>fc::identity_member_with_optionals</compoundname>
    <includes refid="fc_2include_2fc_2api_8hpp" local="no">api.hpp</includes>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structfc_1_1identity__member__with__optionals_1a28c72e51f720c203222bc0802e177bcb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename R</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>typename P</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structfc_1_1detail_1_1optionals__callable" kindref="compound">detail::optionals_callable</ref>&lt; R, Args... &gt;</type>
        <definition>static detail::optionals_callable&lt;R, Args...&gt; fc::identity_member_with_optionals::functor</definition>
        <argsstring>(P &amp;&amp;p, R(C::*mem_func)(Args...))</argsstring>
        <name>functor</name>
        <param>
          <type>P &amp;&amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>R(C::*)(Args...)</type>
          <declname>mem_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/api.hpp" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structfc_1_1identity__member__with__optionals_1ad9f7638fb2e5c79eeccd3ac004c13dd8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename R</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>typename P</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structfc_1_1detail_1_1optionals__callable" kindref="compound">detail::optionals_callable</ref>&lt; R, Args... &gt;</type>
        <definition>static detail::optionals_callable&lt;R, Args...&gt; fc::identity_member_with_optionals::functor</definition>
        <argsstring>(P &amp;&amp;p, R(C::*mem_func)(Args...) const)</argsstring>
        <name>functor</name>
        <param>
          <type>P &amp;&amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>R(C::*)(Args...) const</type>
          <declname>mem_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/api.hpp" line="98" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Used as the Transform template parameter for APIs, this type has two main purposes: first, it reads the argument list and return type of a method into template parameters; and second, it uses those types in conjunction with the optionals_callable template above to create a function pointer which supports optional arguments. </para>    </detaileddescription>
    <location file="libraries/fc/include/fc/api.hpp" line="94" column="1" bodyfile="libraries/fc/include/fc/api.hpp" bodystart="94" bodyend="99"/>
    <listofallmembers>
      <member refid="structfc_1_1identity__member__with__optionals_1a28c72e51f720c203222bc0802e177bcb" prot="public" virt="non-virtual"><scope>fc::identity_member_with_optionals</scope><name>functor</name></member>
      <member refid="structfc_1_1identity__member__with__optionals_1ad9f7638fb2e5c79eeccd3ac004c13dd8" prot="public" virt="non-virtual"><scope>fc::identity_member_with_optionals</scope><name>functor</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
