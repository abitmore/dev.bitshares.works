<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classfc_1_1ip_1_1address" kind="class" language="C++" prot="public">
    <compoundname>fc::ip::address</compoundname>
    <includes refid="ip_8hpp" local="no">ip.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classfc_1_1ip_1_1address_1a8b962b1461e2ed185919b0205aaec1dd" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t fc::ip::address::_ip</definition>
        <argsstring></argsstring>
        <name>_ip</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/ip.hpp" line="40" column="1" bodyfile="libraries/fc/include/fc/network/ip.hpp" bodystart="40" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classfc_1_1ip_1_1address_1aebc2d2f9bc831e6ad04399c9bd8406db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::ip::address::address</definition>
        <argsstring>(uint32_t _ip=0)</argsstring>
        <name>address</name>
        <param>
          <type>uint32_t</type>
          <declname>_ip</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/ip.hpp" line="12" column="1" bodyfile="libraries/fc/src/network/ip.cpp" bodystart="10" bodyend="11"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ip_1_1address_1a67719952ff11c422be011eb0d7b762a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::ip::address::address</definition>
        <argsstring>(const std::string &amp;s)</argsstring>
        <name>address</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/ip.hpp" line="13" column="1" bodyfile="libraries/fc/src/network/ip.cpp" bodystart="13" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ip_1_1address_1a6d4bf277281f2a36130ac492a26b6939" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ip_1_1address" kindref="compound">address</ref> &amp;</type>
        <definition>address &amp; fc::ip::address::operator=</definition>
        <argsstring>(const std::string &amp;s)</argsstring>
        <name>operator=</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/ip.hpp" line="15" column="1" bodyfile="libraries/fc/src/network/ip.cpp" bodystart="29" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ip_1_1address_1ac3699fa4f12c5a8aefb3c8d3d58a442f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::ip::address::operator std::string</definition>
        <argsstring>() const</argsstring>
        <name>operator std::string</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/ip.hpp" line="16" column="1" bodyfile="libraries/fc/src/network/ip.cpp" bodystart="39" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ip_1_1address_1a705d307a09a6f079579933fa1cf54cdb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::ip::address::operator uint32_t</definition>
        <argsstring>() const</argsstring>
        <name>operator uint32_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/ip.hpp" line="17" column="1" bodyfile="libraries/fc/src/network/ip.cpp" bodystart="47" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ip_1_1address_1a0fd7da64e9de2fc54b5dc537dad7aee2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::ip::address::is_private_address</definition>
        <argsstring>() const</argsstring>
        <name>is_private_address</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the ip is in the following ranges:</para></simplesect>
10.0.0.0 to 10.255.255.255 172.16.0.0 to 172.31.255.255 192.168.0.0 to 192.168.255.255 169.254.0.0 to 169.254.255.255 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/ip.hpp" line="31" column="1" bodyfile="libraries/fc/src/network/ip.cpp" bodystart="105" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ip_1_1address_1a7365faef59d2df42310b3d68f62f61e4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::ip::address::is_multicast_address</definition>
        <argsstring>() const</argsstring>
        <name>is_multicast_address</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>224.0.0.0 to 239.255.255.255 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/ip.hpp" line="35" column="1" bodyfile="libraries/fc/src/network/ip.cpp" bodystart="125" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ip_1_1address_1a1481a21df38961dfc3c7eea41b1f79a7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::ip::address::is_public_address</definition>
        <argsstring>() const</argsstring>
        <name>is_public_address</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>!private &amp; !multicast </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/ip.hpp" line="38" column="1" bodyfile="libraries/fc/src/network/ip.cpp" bodystart="133" bodyend="136"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classfc_1_1ip_1_1address_1aa0feacee1993c1338d13ea41f236d660" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const address &amp;a, const address &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classfc_1_1ip_1_1address" kindref="compound">address</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1ip_1_1address" kindref="compound">address</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/ip.hpp" line="19" column="1" bodyfile="libraries/fc/src/network/ip.cpp" bodystart="22" bodyend="24"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1ip_1_1address_1a259e8078e0b2dc8015bf497b96c2a1a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const address &amp;a, const address &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classfc_1_1ip_1_1address" kindref="compound">address</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1ip_1_1address" kindref="compound">address</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/ip.hpp" line="20" column="1" bodyfile="libraries/fc/src/network/ip.cpp" bodystart="25" bodyend="27"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/fc/include/fc/network/ip.hpp" line="10" column="1" bodyfile="libraries/fc/include/fc/network/ip.hpp" bodystart="10" bodyend="41"/>
    <listofallmembers>
      <member refid="classfc_1_1ip_1_1address_1a8b962b1461e2ed185919b0205aaec1dd" prot="private" virt="non-virtual"><scope>fc::ip::address</scope><name>_ip</name></member>
      <member refid="classfc_1_1ip_1_1address_1aebc2d2f9bc831e6ad04399c9bd8406db" prot="public" virt="non-virtual"><scope>fc::ip::address</scope><name>address</name></member>
      <member refid="classfc_1_1ip_1_1address_1a67719952ff11c422be011eb0d7b762a4" prot="public" virt="non-virtual"><scope>fc::ip::address</scope><name>address</name></member>
      <member refid="classfc_1_1ip_1_1address_1a7365faef59d2df42310b3d68f62f61e4" prot="public" virt="non-virtual"><scope>fc::ip::address</scope><name>is_multicast_address</name></member>
      <member refid="classfc_1_1ip_1_1address_1a0fd7da64e9de2fc54b5dc537dad7aee2" prot="public" virt="non-virtual"><scope>fc::ip::address</scope><name>is_private_address</name></member>
      <member refid="classfc_1_1ip_1_1address_1a1481a21df38961dfc3c7eea41b1f79a7" prot="public" virt="non-virtual"><scope>fc::ip::address</scope><name>is_public_address</name></member>
      <member refid="classfc_1_1ip_1_1address_1ac3699fa4f12c5a8aefb3c8d3d58a442f" prot="public" virt="non-virtual"><scope>fc::ip::address</scope><name>operator std::string</name></member>
      <member refid="classfc_1_1ip_1_1address_1a705d307a09a6f079579933fa1cf54cdb" prot="public" virt="non-virtual"><scope>fc::ip::address</scope><name>operator uint32_t</name></member>
      <member refid="classfc_1_1ip_1_1address_1a259e8078e0b2dc8015bf497b96c2a1a2" prot="public" virt="non-virtual"><scope>fc::ip::address</scope><name>operator!=</name></member>
      <member refid="classfc_1_1ip_1_1address_1a6d4bf277281f2a36130ac492a26b6939" prot="public" virt="non-virtual"><scope>fc::ip::address</scope><name>operator=</name></member>
      <member refid="classfc_1_1ip_1_1address_1aa0feacee1993c1338d13ea41f236d660" prot="public" virt="non-virtual"><scope>fc::ip::address</scope><name>operator==</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
