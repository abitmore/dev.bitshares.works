<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classfc_1_1promise_3_01void_01_4" kind="class" language="C++" prot="public">
    <compoundname>fc::promise&lt; void &gt;</compoundname>
    <basecompoundref refid="classfc_1_1promise__base" prot="public" virt="virtual">fc::promise_base</basecompoundref>
    <derivedcompoundref refid="classfc_1_1task_3_01void_00_01_functor_size_01_4" prot="public" virt="non-virtual">fc::task&lt; void, FunctorSize &gt;</derivedcompoundref>
    <includes refid="future_8hpp" local="no">future.hpp</includes>
    <templateparamlist>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classfc_1_1promise_3_01void_01_4_1ab0d524d00e80d5f6091a3068cc74a77c" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classfc_1_1promise" kindref="compound">promise</ref>&lt; void &gt; &gt;</type>
        <definition>typedef std::shared_ptr&lt; promise&lt;void&gt; &gt; fc::promise&lt; void &gt;::ptr</definition>
        <argsstring></argsstring>
        <name>ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/future.hpp" line="161" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="161" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classfc_1_1promise_3_01void_01_4_1a4c2f2c1c91991cf1110ff48f50175b87" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual fc::promise&lt; void &gt;::~promise</definition>
        <argsstring>()</argsstring>
        <name>~promise</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/future.hpp" line="163" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="163" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1promise_3_01void_01_4_1ac97349f50b464157ca92f9cd42a7f707" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void fc::promise&lt; void &gt;::wait</definition>
        <argsstring>(const microseconds &amp;timeout=microseconds::maximum())</argsstring>
        <name>wait</name>
        <param>
          <type>const <ref refid="classfc_1_1microseconds" kindref="compound">microseconds</ref> &amp;</type>
          <declname>timeout</declname>
          <defval><ref refid="classfc_1_1microseconds_1a83490e326e43e94a2b9f2d23b5645455" kindref="member">microseconds::maximum</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/future.hpp" line="174" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="174" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1promise_3_01void_01_4_1a0ef5cdd2ad707387effea35419d03695" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void fc::promise&lt; void &gt;::wait_until</definition>
        <argsstring>(const time_point &amp;tp)</argsstring>
        <name>wait_until</name>
        <param>
          <type>const <ref refid="classfc_1_1time__point" kindref="compound">time_point</ref> &amp;</type>
          <declname>tp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/future.hpp" line="177" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="177" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1promise_3_01void_01_4_1ae128aa7f88248d58f0cfcd5b976c375d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void fc::promise&lt; void &gt;::set_value</definition>
        <argsstring>()</argsstring>
        <name>set_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/future.hpp" line="181" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="181" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1promise_3_01void_01_4_1a25aa79b82e8f50212cb28a9f7cec7e81" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void fc::promise&lt; void &gt;::set_value</definition>
        <argsstring>(const void_t &amp;)</argsstring>
        <name>set_value</name>
        <param>
          <type>const <ref refid="structfc_1_1void__t" kindref="compound">void_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/future.hpp" line="182" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="182" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1promise_3_01void_01_4_1a3740bccd020ad35b5da175325b4088f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CompletionHandler</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::promise&lt; void &gt;::on_complete</definition>
        <argsstring>(CompletionHandler &amp;&amp;c)</argsstring>
        <name>on_complete</name>
        <param>
          <type>CompletionHandler &amp;&amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/future.hpp" line="185" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="185" bodyend="187"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classfc_1_1promise_3_01void_01_4_1a398b075be8e23f588cf292acbea4f203" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfc_1_1promise__base_1a981f5f6eb5de005018991933ca06580d" kindref="member">ptr</ref></type>
        <definition>static ptr fc::promise&lt; void &gt;::create</definition>
        <argsstring>(const char *desc FC_TASK_NAME_DEFAULT_ARG)</argsstring>
        <name>create</name>
        <param>
          <type>const char *desc</type>
          <declname>FC_TASK_NAME_DEFAULT_ARG</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/future.hpp" line="165" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="165" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1promise_3_01void_01_4_1a8a80df6e6f426be5d5f82fd5ef6cbf82" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfc_1_1promise__base_1a981f5f6eb5de005018991933ca06580d" kindref="member">ptr</ref></type>
        <definition>static ptr fc::promise&lt; void &gt;::create</definition>
        <argsstring>(bool fulfilled, const char *desc FC_TASK_NAME_DEFAULT_ARG)</argsstring>
        <name>create</name>
        <param>
          <type>bool</type>
          <declname>fulfilled</declname>
        </param>
        <param>
          <type>const char *desc</type>
          <declname>FC_TASK_NAME_DEFAULT_ARG</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/future.hpp" line="169" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="169" bodyend="172"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classfc_1_1promise_3_01void_01_4_1a84e2bcbc76156f09281dfd182aeb2227" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>fc::promise&lt; void &gt;::promise</definition>
        <argsstring>(const char *desc)</argsstring>
        <name>promise</name>
        <param>
          <type>const char *</type>
          <declname>desc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/future.hpp" line="189" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="189" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1promise_3_01void_01_4_1a8d75f6c8aae354b885ae3fb5a11c7300" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>fc::promise&lt; void &gt;::promise</definition>
        <argsstring>(bool fulfilled, const char *desc)</argsstring>
        <name>promise</name>
        <param>
          <type>bool</type>
          <declname>fulfilled</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>desc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/future.hpp" line="190" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="190" bodyend="192"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="6118">
        <label>fc::promise&lt; void &gt;</label>
        <link refid="classfc_1_1promise_3_01void_01_4"/>
        <childnode refid="6119" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6121">
        <label>fc::task&lt; void, FunctorSize &gt;</label>
        <link refid="classfc_1_1task_3_01void_00_01_functor_size_01_4"/>
        <childnode refid="6118" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6120">
        <label>std::enable_shared_from_this&lt; promise_base &gt;</label>
      </node>
      <node id="6119">
        <label>fc::promise_base</label>
        <link refid="classfc_1_1promise__base"/>
        <childnode refid="6120" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6122">
        <label>fc::promise&lt; void &gt;</label>
        <link refid="classfc_1_1promise_3_01void_01_4"/>
        <childnode refid="6123" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6124">
        <label>std::enable_shared_from_this&lt; promise_base &gt;</label>
      </node>
      <node id="6123">
        <label>fc::promise_base</label>
        <link refid="classfc_1_1promise__base"/>
        <childnode refid="6124" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="libraries/fc/include/fc/thread/future.hpp" line="159" column="1" bodyfile="libraries/fc/include/fc/thread/future.hpp" bodystart="159" bodyend="193"/>
    <listofallmembers>
      <member refid="classfc_1_1promise__base_1a11f63028c05408c07cd9281171af6001" prot="protected" virt="non-virtual"><scope>fc::promise&lt; void &gt;</scope><name>_cancellation_reason</name></member>
      <member refid="classfc_1_1promise__base_1a320d282323c9805b6387a7b7ea6dcd79" prot="protected" virt="non-virtual"><scope>fc::promise&lt; void &gt;</scope><name>_notify</name></member>
      <member refid="classfc_1_1promise__base_1ab0d96cf4e63f9ede926e779149c16d1e" prot="protected" virt="non-virtual"><scope>fc::promise&lt; void &gt;</scope><name>_on_complete</name></member>
      <member refid="classfc_1_1promise__base_1af1b26ac27dbdfe255b4d44c98ac0bde8" prot="protected" virt="non-virtual"><scope>fc::promise&lt; void &gt;</scope><name>_set_value</name></member>
      <member refid="classfc_1_1promise__base_1a75479ef52e8d8e2a6770bef9b4b281dc" prot="protected" virt="non-virtual"><scope>fc::promise&lt; void &gt;</scope><name>_wait</name></member>
      <member refid="classfc_1_1promise__base_1a4a2aa31afeaf26faaff3d1799435f4d4" prot="protected" virt="non-virtual"><scope>fc::promise&lt; void &gt;</scope><name>_wait_until</name></member>
      <member refid="classfc_1_1promise__base_1a5d2719d4d2948d8e1e600ec88af91e91" prot="public" virt="virtual"><scope>fc::promise&lt; void &gt;</scope><name>cancel</name></member>
      <member refid="classfc_1_1promise__base_1aa2defa3c6bb9cf9a6f0a1e38b1b8a475" prot="public" virt="non-virtual"><scope>fc::promise&lt; void &gt;</scope><name>canceled</name></member>
      <member refid="classfc_1_1promise_3_01void_01_4_1a398b075be8e23f588cf292acbea4f203" prot="public" virt="non-virtual"><scope>fc::promise&lt; void &gt;</scope><name>create</name></member>
      <member refid="classfc_1_1promise_3_01void_01_4_1a8a80df6e6f426be5d5f82fd5ef6cbf82" prot="public" virt="non-virtual"><scope>fc::promise&lt; void &gt;</scope><name>create</name></member>
      <member refid="classfc_1_1promise__base_1a169688ce87883c5483c5d6e0d7ae84d0" prot="public" virt="non-virtual"><scope>fc::promise&lt; void &gt;</scope><name>error</name></member>
      <member refid="classfc_1_1promise__base_1ae2f98357966b2fbecbf35736ef904bea" prot="public" virt="non-virtual"><scope>fc::promise&lt; void &gt;</scope><name>get_desc</name></member>
      <member refid="classfc_1_1promise_3_01void_01_4_1a3740bccd020ad35b5da175325b4088f7" prot="public" virt="non-virtual"><scope>fc::promise&lt; void &gt;</scope><name>on_complete</name></member>
      <member refid="classfc_1_1promise_3_01void_01_4_1a84e2bcbc76156f09281dfd182aeb2227" prot="protected" virt="non-virtual"><scope>fc::promise&lt; void &gt;</scope><name>promise</name></member>
      <member refid="classfc_1_1promise_3_01void_01_4_1a8d75f6c8aae354b885ae3fb5a11c7300" prot="protected" virt="non-virtual"><scope>fc::promise&lt; void &gt;</scope><name>promise</name></member>
      <member refid="classfc_1_1promise__base_1adea93b6fbaa0f0e832d331bde7314bea" prot="protected" virt="non-virtual"><scope>fc::promise&lt; void &gt;</scope><name>promise_base</name></member>
      <member refid="classfc_1_1promise_3_01void_01_4_1ab0d524d00e80d5f6091a3068cc74a77c" prot="public" virt="non-virtual"><scope>fc::promise&lt; void &gt;</scope><name>ptr</name></member>
      <member refid="classfc_1_1promise__base_1a6090bb47228cded5eb9319b7e81726b3" prot="public" virt="non-virtual"><scope>fc::promise&lt; void &gt;</scope><name>ready</name></member>
      <member refid="classfc_1_1promise__base_1a3119bcaac019e31280151b19c3f6aa72" prot="public" virt="non-virtual"><scope>fc::promise&lt; void &gt;</scope><name>set_exception</name></member>
      <member refid="classfc_1_1promise_3_01void_01_4_1ae128aa7f88248d58f0cfcd5b976c375d" prot="public" virt="non-virtual"><scope>fc::promise&lt; void &gt;</scope><name>set_value</name></member>
      <member refid="classfc_1_1promise_3_01void_01_4_1a25aa79b82e8f50212cb28a9f7cec7e81" prot="public" virt="non-virtual"><scope>fc::promise&lt; void &gt;</scope><name>set_value</name></member>
      <member refid="classfc_1_1promise_3_01void_01_4_1ac97349f50b464157ca92f9cd42a7f707" prot="public" virt="non-virtual"><scope>fc::promise&lt; void &gt;</scope><name>wait</name></member>
      <member refid="classfc_1_1promise_3_01void_01_4_1a0ef5cdd2ad707387effea35419d03695" prot="public" virt="non-virtual"><scope>fc::promise&lt; void &gt;</scope><name>wait_until</name></member>
      <member refid="classfc_1_1promise_3_01void_01_4_1a4c2f2c1c91991cf1110ff48f50175b87" prot="public" virt="virtual"><scope>fc::promise&lt; void &gt;</scope><name>~promise</name></member>
      <member refid="classfc_1_1promise__base_1ac9c941e4d650683268f8a12ec13edc86" prot="public" virt="virtual"><scope>fc::promise&lt; void &gt;</scope><name>~promise_base</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
