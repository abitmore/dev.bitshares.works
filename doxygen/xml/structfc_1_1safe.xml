<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structfc_1_1safe" kind="struct" language="C++" prot="public">
    <compoundname>fc::safe</compoundname>
    <basecompoundref refid="structfc_1_1safe__base" prot="public" virt="non-virtual">fc::safe_base&lt; T &gt;</basecompoundref>
    <includes refid="safe_8hpp" local="no">safe.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structfc_1_1safe_1a6bb99e2058adab1fef1f6b9df91006c9" prot="public" static="no" mutable="no">
        <type>T</type>
        <definition>T fc::safe&lt; T &gt;::value</definition>
        <argsstring></argsstring>
        <name>value</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="28" column="9" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structfc_1_1safe_1aaf3331456912ffa2afc8f24dbbfe437e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::safe&lt; T &gt;::safe</definition>
        <argsstring>()=default</argsstring>
        <name>safe</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="30" column="7"/>
      </memberdef>
      <memberdef kind="function" id="structfc_1_1safe_1a56d9d7d5d9adff217ce548b80dd4efb5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>fc::safe&lt; T &gt;::safe</definition>
        <argsstring>(V v)</argsstring>
        <name>safe</name>
        <param>
          <type>V</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="89" column="7" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="89" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="structfc_1_1safe_1a46c3e2b112a3ff380950ae72b9884451" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type><ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
        <definition>safe&amp; fc::safe&lt; T &gt;::operator=</definition>
        <argsstring>(V v)</argsstring>
        <name>operator=</name>
        <param>
          <type>V</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="95" column="12" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="95" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="structfc_1_1safe_1aa8a8f8129dc815b7a5cde65dabd3a2b5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Dummy</declname>
            <defname>Dummy</defname>
          </param>
          <param>
            <type>typename X</type>
            <defval>T</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_signed&lt; X &gt;::<ref refid="structfc_1_1safe_1a6bb99e2058adab1fef1f6b9df91006c9" kindref="member">value</ref>, bool &gt;</type>
            <defval>true</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structfc_1_1safe" kindref="compound">safe</ref></type>
        <definition>safe fc::safe&lt; T &gt;::operator-</definition>
        <argsstring>() const</argsstring>
        <name>operator-</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="204" column="12" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="204" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="structfc_1_1safe_1aa8a8f8129dc815b7a5cde65dabd3a2b5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Dummy</declname>
            <defname>Dummy</defname>
          </param>
          <param>
            <type>typename X</type>
            <defval>T</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_unsigned&lt; X &gt;::<ref refid="structfc_1_1safe_1a6bb99e2058adab1fef1f6b9df91006c9" kindref="member">value</ref>, bool &gt;</type>
            <defval>true</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structfc_1_1safe" kindref="compound">safe</ref></type>
        <definition>safe fc::safe&lt; T &gt;::operator-</definition>
        <argsstring>() const</argsstring>
        <name>operator-</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="213" column="12" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="213" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="structfc_1_1safe_1a25e4c7a4c87c1186e0032541f223aeb4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
        <definition>safe&amp; fc::safe&lt; T &gt;::operator+=</definition>
        <argsstring>(const safe &amp;b)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="220" column="12" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="220" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="structfc_1_1safe_1a1494539bb9d6fa9204d38b776a36fe07" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
        <definition>safe&amp; fc::safe&lt; T &gt;::operator-=</definition>
        <argsstring>(const safe &amp;b)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="225" column="12" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="225" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="structfc_1_1safe_1a0657fe2766175a3bebdce27df39d05b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
        <definition>safe&amp; fc::safe&lt; T &gt;::operator*=</definition>
        <argsstring>(const safe &amp;b)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="230" column="12" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="230" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="structfc_1_1safe_1af4e60fa3a585c1dcb5dd96b43d09dc01" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
        <definition>safe&amp; fc::safe&lt; T &gt;::operator/=</definition>
        <argsstring>(const safe &amp;b)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="235" column="12" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="235" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="structfc_1_1safe_1aa7cbd15964373b0131abf421074cbd71" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
        <definition>safe&amp; fc::safe&lt; T &gt;::operator%=</definition>
        <argsstring>(const safe &amp;b)</argsstring>
        <name>operator%=</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="240" column="12" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="240" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="structfc_1_1safe_1af1c879152b3d86f7e30a706555268b2c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
        <definition>safe&amp; fc::safe&lt; T &gt;::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="246" column="12" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="246" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="structfc_1_1safe_1afb19032269d97385e234e770939508b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfc_1_1safe" kindref="compound">safe</ref></type>
        <definition>safe fc::safe&lt; T &gt;::operator++</definition>
        <argsstring>(int)</argsstring>
        <name>operator++</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="251" column="12" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="251" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="structfc_1_1safe_1a05d910ac6feda1016cfa2f98edc0ee00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
        <definition>safe&amp; fc::safe&lt; T &gt;::operator--</definition>
        <argsstring>()</argsstring>
        <name>operator--</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="258" column="12" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="258" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="structfc_1_1safe_1a9a4c3650a4eb50d58381a1b23d66ff8f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfc_1_1safe" kindref="compound">safe</ref></type>
        <definition>safe fc::safe&lt; T &gt;::operator--</definition>
        <argsstring>(int)</argsstring>
        <name>operator--</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="263" column="12" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="263" bodyend="268"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structfc_1_1safe_1a13202811a1d35e266eb0c33ed8afa392" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename V</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Dummy</declname>
            <defname>Dummy</defname>
          </param>
          <param>
            <type>typename X</type>
            <defval>T</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_signed&lt; X &gt;::<ref refid="structfc_1_1safe_1a6bb99e2058adab1fef1f6b9df91006c9" kindref="member">value</ref>, bool &gt;</type>
            <defval>true</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_integral&lt; V &gt;::<ref refid="structfc_1_1safe_1a6bb99e2058adab1fef1f6b9df91006c9" kindref="member">value</ref>, bool &gt;</type>
            <defval>true</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_signed&lt; V &gt;::<ref refid="structfc_1_1safe_1a6bb99e2058adab1fef1f6b9df91006c9" kindref="member">value</ref>, bool &gt;</type>
            <defval>true</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>static T fc::safe&lt; T &gt;::check</definition>
        <argsstring>(V v)</argsstring>
        <name>check</name>
        <param>
          <type>V</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="37" column="16" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="37" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="structfc_1_1safe_1a13202811a1d35e266eb0c33ed8afa392" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename V</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Dummy</declname>
            <defname>Dummy</defname>
          </param>
          <param>
            <type>typename X</type>
            <defval>T</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_unsigned&lt; X &gt;::<ref refid="structfc_1_1safe_1a6bb99e2058adab1fef1f6b9df91006c9" kindref="member">value</ref>, bool &gt;</type>
            <defval>true</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_integral&lt; V &gt;::<ref refid="structfc_1_1safe_1a6bb99e2058adab1fef1f6b9df91006c9" kindref="member">value</ref>, bool &gt;</type>
            <defval>true</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_unsigned&lt; V &gt;::<ref refid="structfc_1_1safe_1a6bb99e2058adab1fef1f6b9df91006c9" kindref="member">value</ref>, bool &gt;</type>
            <defval>true</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>static T fc::safe&lt; T &gt;::check</definition>
        <argsstring>(V v)</argsstring>
        <name>check</name>
        <param>
          <type>V</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="52" column="16" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="52" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="structfc_1_1safe_1a13202811a1d35e266eb0c33ed8afa392" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename V</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Dummy</declname>
            <defname>Dummy</defname>
          </param>
          <param>
            <type>typename X</type>
            <defval>T</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_unsigned&lt; X &gt;::<ref refid="structfc_1_1safe_1a6bb99e2058adab1fef1f6b9df91006c9" kindref="member">value</ref>, bool &gt;</type>
            <defval>true</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_integral&lt; V &gt;::<ref refid="structfc_1_1safe_1a6bb99e2058adab1fef1f6b9df91006c9" kindref="member">value</ref>, bool &gt;</type>
            <defval>true</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_signed&lt; V &gt;::<ref refid="structfc_1_1safe_1a6bb99e2058adab1fef1f6b9df91006c9" kindref="member">value</ref>, bool &gt;</type>
            <defval>true</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>static T fc::safe&lt; T &gt;::check</definition>
        <argsstring>(V v)</argsstring>
        <name>check</name>
        <param>
          <type>V</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="65" column="16" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="65" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="structfc_1_1safe_1a13202811a1d35e266eb0c33ed8afa392" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename V</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Dummy</declname>
            <defname>Dummy</defname>
          </param>
          <param>
            <type>typename X</type>
            <defval>T</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_signed&lt; X &gt;::<ref refid="structfc_1_1safe_1a6bb99e2058adab1fef1f6b9df91006c9" kindref="member">value</ref>, bool &gt;</type>
            <defval>true</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_integral&lt; V &gt;::<ref refid="structfc_1_1safe_1a6bb99e2058adab1fef1f6b9df91006c9" kindref="member">value</ref>, bool &gt;</type>
            <defval>true</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_unsigned&lt; V &gt;::<ref refid="structfc_1_1safe_1a6bb99e2058adab1fef1f6b9df91006c9" kindref="member">value</ref>, bool &gt;</type>
            <defval>true</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>static T fc::safe&lt; T &gt;::check</definition>
        <argsstring>(V v)</argsstring>
        <name>check</name>
        <param>
          <type>V</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="80" column="16" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="80" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="structfc_1_1safe_1a3eafe53e9cd7ec5000330daf0fbe1bf1" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structfc_1_1safe" kindref="compound">safe</ref></type>
        <definition>static constexpr safe fc::safe&lt; T &gt;::min</definition>
        <argsstring>()</argsstring>
        <name>min</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="101" column="29" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="101" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="structfc_1_1safe_1a85ed8df0fb161bec11e6c374bc1cb702" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structfc_1_1safe" kindref="compound">safe</ref></type>
        <definition>static constexpr safe fc::safe&lt; T &gt;::max</definition>
        <argsstring>()</argsstring>
        <name>max</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="105" column="29" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="105" bodyend="108"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structfc_1_1safe_1a73925fc0d0bee9b4c5e5120c38105aa9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="structfc_1_1safe" kindref="compound">safe</ref></type>
        <definition>safe operator+</definition>
        <argsstring>(const safe &amp;a, const safe &amp;b)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="110" column="19" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="110" bodyend="117"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1a207f3bc22ef71357cec46322252fd35c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="structfc_1_1safe" kindref="compound">safe</ref></type>
        <definition>safe operator-</definition>
        <argsstring>(const safe &amp;a, const safe &amp;b)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="118" column="19" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="118" bodyend="125"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1a2bcc04a45f973728648f7e774338372a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="structfc_1_1safe" kindref="compound">safe</ref></type>
        <definition>safe operator*</definition>
        <argsstring>(const safe &amp;a, const safe &amp;b)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="127" column="19" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="127" bodyend="157"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1af98c54bed90329b6ed7390a4470e8856" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Dummy</declname>
            <defname>Dummy</defname>
          </param>
          <param>
            <type>typename X</type>
            <defval>T</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_signed&lt; X &gt;::<ref refid="structfc_1_1safe_1a6bb99e2058adab1fef1f6b9df91006c9" kindref="member">value</ref>, bool &gt;</type>
            <defval>true</defval>
          </param>
        </templateparamlist>
        <type>friend <ref refid="structfc_1_1safe" kindref="compound">safe</ref></type>
        <definition>safe operator/</definition>
        <argsstring>(const safe &amp;a, const safe &amp;b)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="162" column="19" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="162" bodyend="169"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1af98c54bed90329b6ed7390a4470e8856" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Dummy</declname>
            <defname>Dummy</defname>
          </param>
          <param>
            <type>typename X</type>
            <defval>T</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_unsigned&lt; X &gt;::<ref refid="structfc_1_1safe_1a6bb99e2058adab1fef1f6b9df91006c9" kindref="member">value</ref>, bool &gt;</type>
            <defval>true</defval>
          </param>
        </templateparamlist>
        <type>friend <ref refid="structfc_1_1safe" kindref="compound">safe</ref></type>
        <definition>safe operator/</definition>
        <argsstring>(const safe &amp;a, const safe &amp;b)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="173" column="19" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="173" bodyend="178"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1a210fd7feb990ca60c62b48b6767934b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Dummy</declname>
            <defname>Dummy</defname>
          </param>
          <param>
            <type>typename X</type>
            <defval>T</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_signed&lt; X &gt;::<ref refid="structfc_1_1safe_1a6bb99e2058adab1fef1f6b9df91006c9" kindref="member">value</ref>, bool &gt;</type>
            <defval>true</defval>
          </param>
        </templateparamlist>
        <type>friend <ref refid="structfc_1_1safe" kindref="compound">safe</ref></type>
        <definition>safe operator%</definition>
        <argsstring>(const safe &amp;a, const safe &amp;b)</argsstring>
        <name>operator%</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="183" column="19" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="183" bodyend="190"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1a210fd7feb990ca60c62b48b6767934b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Dummy</declname>
            <defname>Dummy</defname>
          </param>
          <param>
            <type>typename X</type>
            <defval>T</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_unsigned&lt; X &gt;::<ref refid="structfc_1_1safe_1a6bb99e2058adab1fef1f6b9df91006c9" kindref="member">value</ref>, bool &gt;</type>
            <defval>true</defval>
          </param>
        </templateparamlist>
        <type>friend <ref refid="structfc_1_1safe" kindref="compound">safe</ref></type>
        <definition>safe operator%</definition>
        <argsstring>(const safe &amp;a, const safe &amp;b)</argsstring>
        <name>operator%</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="194" column="19" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="194" bodyend="199"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1a2c9bfcc98dc3983a839601190a4c9290" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const safe &amp;a, const safe &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="270" column="19" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="270" bodyend="273"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1aca1feec6eb2122b912f8699800182ec6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const safe &amp;a, T b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="274" column="19" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="274" bodyend="277"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1a8995a2ceee0c88727af2933e13dc209a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(T a, const safe &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="278" column="19" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="278" bodyend="281"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1aa9804000cf7ba52e2de6a3ead10ac2bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const safe &amp;a, const safe &amp;b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="283" column="14" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="283" bodyend="286"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1ad75dfda911e8721f5ca98f4dc93fc6f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const safe &amp;a, T b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="287" column="14" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="287" bodyend="290"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1a0c08376f1e02c288ae1c9730ec234911" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(T a, const safe &amp;b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="291" column="14" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="291" bodyend="294"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1a1ef40780fa4629bc15d048bb49dba951" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const safe &amp;a, const safe &amp;b)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="296" column="19" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="296" bodyend="299"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1abf00c6c3e24c1c037103689c5765b2b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const safe &amp;a, T b)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="300" column="19" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="300" bodyend="303"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1a1681c7824a74a277f26b1fd1903935fc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(T a, const safe &amp;b)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="304" column="19" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="304" bodyend="307"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1a3981463f6c2ca6ae699a2dca23d05124" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const safe &amp;a, const safe &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="309" column="19" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="309" bodyend="312"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1a369551ebdb97e9e14c49fd4dfe521614" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const safe &amp;a, T b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="313" column="19" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="313" bodyend="316"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1a46c923b7bb7f70331b3e96ced73a472c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(T a, const safe &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="317" column="19" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="317" bodyend="320"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1ad6e5d8dbdd72dd886d8f3d443d609da2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const safe &amp;a, const safe &amp;b)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="322" column="14" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="322" bodyend="325"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1ac6d21b21fb8f627b5200bfb3da55a00f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const safe &amp;a, T b)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="326" column="14" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="326" bodyend="329"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1ae4068de9078c4585127de64cacc92b31" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(T a, const safe &amp;b)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="330" column="14" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="330" bodyend="333"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1a67037c5c209828dc12e923644d4d2e03" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const safe &amp;a, const safe &amp;b)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="335" column="19" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="335" bodyend="338"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1a1ab207afafd1b6cdc90d9a39ec3317e4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const safe &amp;a, T b)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="339" column="19" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="339" bodyend="342"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1acb9bbe4c0b1825556908e903f53c2030" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(T a, const safe &amp;b)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="343" column="19" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="343" bodyend="346"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This type is designed to provide automatic checks for integer overflow and default initialization. It will throw an exception on overflow conditions.</para>
<para>It can only be used on built-in types.</para>
<para>Implemented using spec from: <ulink url="https://www.securecoding.cert.org/confluence/display/c/INT32-C.+Ensure+that+operations+on+signed+integers+do+not+result+in+overflow">https://www.securecoding.cert.org/confluence/display/c/INT32-C.+Ensure+that+operations+on+signed+integers+do+not+result+in+overflow</ulink> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>fc::safe&lt; T &gt;</label>
        <link refid="structfc_1_1safe"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>fc::safe_base&lt; T &gt;</label>
        <link refid="structfc_1_1safe__base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>fc::safe&lt; T &gt;</label>
        <link refid="structfc_1_1safe"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>fc::safe_base&lt; T &gt;</label>
        <link refid="structfc_1_1safe__base"/>
      </node>
    </collaborationgraph>
    <location file="libraries/fc/include/fc/safe.hpp" line="27" column="1" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="26" bodyend="347"/>
    <listofallmembers>
      <member refid="structfc_1_1safe_1a13202811a1d35e266eb0c33ed8afa392" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>check</name></member>
      <member refid="structfc_1_1safe_1a13202811a1d35e266eb0c33ed8afa392" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>check</name></member>
      <member refid="structfc_1_1safe_1a13202811a1d35e266eb0c33ed8afa392" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>check</name></member>
      <member refid="structfc_1_1safe_1a13202811a1d35e266eb0c33ed8afa392" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>check</name></member>
      <member refid="structfc_1_1safe_1a85ed8df0fb161bec11e6c374bc1cb702" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>max</name></member>
      <member refid="structfc_1_1safe_1a3eafe53e9cd7ec5000330daf0fbe1bf1" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>min</name></member>
      <member refid="structfc_1_1safe_1a3981463f6c2ca6ae699a2dca23d05124" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator!=</name></member>
      <member refid="structfc_1_1safe_1a369551ebdb97e9e14c49fd4dfe521614" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator!=</name></member>
      <member refid="structfc_1_1safe_1a46c923b7bb7f70331b3e96ced73a472c" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator!=</name></member>
      <member refid="structfc_1_1safe_1a210fd7feb990ca60c62b48b6767934b1" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator%</name></member>
      <member refid="structfc_1_1safe_1a210fd7feb990ca60c62b48b6767934b1" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator%</name></member>
      <member refid="structfc_1_1safe_1aa7cbd15964373b0131abf421074cbd71" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator%=</name></member>
      <member refid="structfc_1_1safe_1a2bcc04a45f973728648f7e774338372a" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator*</name></member>
      <member refid="structfc_1_1safe_1a0657fe2766175a3bebdce27df39d05b3" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator*=</name></member>
      <member refid="structfc_1_1safe_1a73925fc0d0bee9b4c5e5120c38105aa9" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator+</name></member>
      <member refid="structfc_1_1safe_1af1c879152b3d86f7e30a706555268b2c" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator++</name></member>
      <member refid="structfc_1_1safe_1afb19032269d97385e234e770939508b8" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator++</name></member>
      <member refid="structfc_1_1safe_1a25e4c7a4c87c1186e0032541f223aeb4" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator+=</name></member>
      <member refid="structfc_1_1safe_1a207f3bc22ef71357cec46322252fd35c" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator-</name></member>
      <member refid="structfc_1_1safe_1aa8a8f8129dc815b7a5cde65dabd3a2b5" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator-</name></member>
      <member refid="structfc_1_1safe_1aa8a8f8129dc815b7a5cde65dabd3a2b5" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator-</name></member>
      <member refid="structfc_1_1safe_1a05d910ac6feda1016cfa2f98edc0ee00" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator--</name></member>
      <member refid="structfc_1_1safe_1a9a4c3650a4eb50d58381a1b23d66ff8f" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator--</name></member>
      <member refid="structfc_1_1safe_1a1494539bb9d6fa9204d38b776a36fe07" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator-=</name></member>
      <member refid="structfc_1_1safe_1af98c54bed90329b6ed7390a4470e8856" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator/</name></member>
      <member refid="structfc_1_1safe_1af98c54bed90329b6ed7390a4470e8856" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator/</name></member>
      <member refid="structfc_1_1safe_1af4e60fa3a585c1dcb5dd96b43d09dc01" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator/=</name></member>
      <member refid="structfc_1_1safe_1aa9804000cf7ba52e2de6a3ead10ac2bf" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator&lt;</name></member>
      <member refid="structfc_1_1safe_1ad75dfda911e8721f5ca98f4dc93fc6f4" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator&lt;</name></member>
      <member refid="structfc_1_1safe_1a0c08376f1e02c288ae1c9730ec234911" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator&lt;</name></member>
      <member refid="structfc_1_1safe_1ad6e5d8dbdd72dd886d8f3d443d609da2" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator&lt;=</name></member>
      <member refid="structfc_1_1safe_1ac6d21b21fb8f627b5200bfb3da55a00f" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator&lt;=</name></member>
      <member refid="structfc_1_1safe_1ae4068de9078c4585127de64cacc92b31" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator&lt;=</name></member>
      <member refid="structfc_1_1safe_1a46c3e2b112a3ff380950ae72b9884451" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator=</name></member>
      <member refid="structfc_1_1safe_1a2c9bfcc98dc3983a839601190a4c9290" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator==</name></member>
      <member refid="structfc_1_1safe_1aca1feec6eb2122b912f8699800182ec6" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator==</name></member>
      <member refid="structfc_1_1safe_1a8995a2ceee0c88727af2933e13dc209a" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator==</name></member>
      <member refid="structfc_1_1safe_1a1ef40780fa4629bc15d048bb49dba951" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator&gt;</name></member>
      <member refid="structfc_1_1safe_1abf00c6c3e24c1c037103689c5765b2b8" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator&gt;</name></member>
      <member refid="structfc_1_1safe_1a1681c7824a74a277f26b1fd1903935fc" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator&gt;</name></member>
      <member refid="structfc_1_1safe_1a67037c5c209828dc12e923644d4d2e03" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator&gt;=</name></member>
      <member refid="structfc_1_1safe_1a1ab207afafd1b6cdc90d9a39ec3317e4" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator&gt;=</name></member>
      <member refid="structfc_1_1safe_1acb9bbe4c0b1825556908e903f53c2030" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator&gt;=</name></member>
      <member refid="structfc_1_1safe_1aaf3331456912ffa2afc8f24dbbfe437e" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>safe</name></member>
      <member refid="structfc_1_1safe_1a56d9d7d5d9adff217ce548b80dd4efb5" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>safe</name></member>
      <member refid="structfc_1_1safe_1a6bb99e2058adab1fef1f6b9df91006c9" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>value</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
