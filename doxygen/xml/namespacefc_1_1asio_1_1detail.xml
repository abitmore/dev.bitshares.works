<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacefc_1_1asio_1_1detail" kind="namespace" language="C++">
    <compoundname>fc::asio::detail</compoundname>
    <innerclass refid="structfc_1_1asio_1_1detail_1_1non__blocking" prot="public">fc::asio::detail::non_blocking</innerclass>
    <innerclass refid="classfc_1_1asio_1_1detail_1_1read__write__handler" prot="public">fc::asio::detail::read_write_handler</innerclass>
    <innerclass refid="classfc_1_1asio_1_1detail_1_1read__write__handler__with__buffer" prot="public">fc::asio::detail::read_write_handler_with_buffer</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacefc_1_1asio_1_1detail_1a5ef0612e54718620c2822656d192c190" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::asio::detail::read_write_handler_ec</definition>
        <argsstring>(promise&lt; size_t &gt; *p, boost::system::error_code *oec, const boost::system::error_code &amp;ec, size_t bytes_transferred)</argsstring>
        <name>read_write_handler_ec</name>
        <param>
          <type><ref refid="classfc_1_1promise" kindref="compound">promise</ref>&lt; size_t &gt; *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>boost::system::error_code *</type>
          <declname>oec</declname>
        </param>
        <param>
          <type>const boost::system::error_code &amp;</type>
          <declname>ec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bytes_transferred</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/asio.hpp" line="45" column="1" bodyfile="libraries/fc/src/asio.cpp" bodystart="44" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1_1asio_1_1detail_1a0d0350ddbfbf7e9037aef055cd6a1be3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::asio::detail::error_handler</definition>
        <argsstring>(const promise&lt; void &gt;::ptr &amp;p, const boost::system::error_code &amp;ec)</argsstring>
        <name>error_handler</name>
        <param>
          <type>const <ref refid="classfc_1_1promise" kindref="compound">promise</ref>&lt; void &gt;::ptr &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const boost::system::error_code &amp;</type>
          <declname>ec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/asio.hpp" line="49" column="1" bodyfile="libraries/fc/src/asio.cpp" bodystart="48" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1_1asio_1_1detail_1aa168aa14365fa76463267d64f18f1288" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::asio::detail::error_handler_ec</definition>
        <argsstring>(promise&lt; boost::system::error_code &gt; *p, const boost::system::error_code &amp;ec)</argsstring>
        <name>error_handler_ec</name>
        <param>
          <type><ref refid="classfc_1_1promise" kindref="compound">promise</ref>&lt; boost::system::error_code &gt; *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const boost::system::error_code &amp;</type>
          <declname>ec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/asio.hpp" line="51" column="1" bodyfile="libraries/fc/src/asio.cpp" bodystart="67" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1_1asio_1_1detail_1a0f08c523fc946acdc3ed0913b4f77dae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EndpointType</type>
          </param>
          <param>
            <type>typename IteratorType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::asio::detail::resolve_handler</definition>
        <argsstring>(const typename promise&lt; std::vector&lt; EndpointType &gt; &gt;::ptr &amp;p, const boost::system::error_code &amp;ec, IteratorType itr)</argsstring>
        <name>resolve_handler</name>
        <param>
          <type>const typename <ref refid="classfc_1_1promise" kindref="compound">promise</ref>&lt; std::vector&lt; EndpointType &gt; &gt;::ptr &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const boost::system::error_code &amp;</type>
          <declname>ec</declname>
        </param>
        <param>
          <type>IteratorType</type>
          <declname>itr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/asio.cpp" line="73" column="1" bodyfile="libraries/fc/src/asio.cpp" bodystart="73" bodyend="90"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>internal implementation types/methods for <ref refid="namespacefc_1_1asio" kindref="compound">fc::asio</ref> </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/fc/include/fc/asio.hpp" line="20" column="1"/>
  </compounddef>
</doxygen>
