<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classgraphene_1_1net_1_1peer__database" kind="class" language="C++" prot="public">
    <compoundname>graphene::net::peer_database</compoundname>
    <includes refid="peer__database_8hpp" local="no">peer_database.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classgraphene_1_1net_1_1peer__database_1ad21b8f485342a226c59accca6b410b42" prot="public" static="no">
        <type><ref refid="classgraphene_1_1net_1_1detail_1_1peer__database__iterator" kindref="compound">detail::peer_database_iterator</ref></type>
        <definition>using graphene::net::peer_database::iterator =  detail::peer_database_iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/peer_database.hpp" line="112" column="1" bodyfile="libraries/net/include/graphene/net/peer_database.hpp" bodystart="112" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classgraphene_1_1net_1_1peer__database_1add57f35b7efda564262368cfb330f10c" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classgraphene_1_1net_1_1detail_1_1peer__database__impl" kindref="compound">detail::peer_database_impl</ref> &gt;</type>
        <definition>std::unique_ptr&lt;detail::peer_database_impl&gt; graphene::net::peer_database::my</definition>
        <argsstring></argsstring>
        <name>my</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/peer_database.hpp" line="117" column="1" bodyfile="libraries/net/include/graphene/net/peer_database.hpp" bodystart="117" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgraphene_1_1net_1_1peer__database_1afc67730edb750a2147e9d3b67328728d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::net::peer_database::peer_database</definition>
        <argsstring>()</argsstring>
        <name>peer_database</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/peer_database.hpp" line="99" column="1" bodyfile="libraries/net/peer_database.cpp" bodystart="221" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1peer__database_1a83cb76415f753a6fca380620513b1ec8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>graphene::net::peer_database::~peer_database</definition>
        <argsstring>()</argsstring>
        <name>~peer_database</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/peer_database.hpp" line="100" column="1" bodyfile="libraries/net/peer_database.cpp" bodystart="226" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1peer__database_1aa1425218b142d5d38faa6618e2dd0632" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::peer_database::open</definition>
        <argsstring>(const fc::path &amp;databaseFilename)</argsstring>
        <name>open</name>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">fc::path</ref> &amp;</type>
          <declname>databaseFilename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/peer_database.hpp" line="102" column="1" bodyfile="libraries/net/peer_database.cpp" bodystart="229" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1peer__database_1ad8223c9113c2678e86fd3324a3973bb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::peer_database::close</definition>
        <argsstring>()</argsstring>
        <name>close</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/peer_database.hpp" line="103" column="1" bodyfile="libraries/net/peer_database.cpp" bodystart="234" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1peer__database_1a1eb162c7285ff10b3a23b4a92d01447a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::peer_database::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/peer_database.hpp" line="104" column="1" bodyfile="libraries/net/peer_database.cpp" bodystart="239" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1peer__database_1a78e6fca3f97c21e1e43862e5748a92fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::peer_database::erase</definition>
        <argsstring>(const fc::ip::endpoint &amp;endpointToErase)</argsstring>
        <name>erase</name>
        <param>
          <type>const <ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">fc::ip::endpoint</ref> &amp;</type>
          <declname>endpointToErase</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/peer_database.hpp" line="106" column="1" bodyfile="libraries/net/peer_database.cpp" bodystart="244" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1peer__database_1aac4ced3eaae8d87d1a93dd40cbacc4ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::peer_database::update_entry</definition>
        <argsstring>(const potential_peer_record &amp;updatedRecord)</argsstring>
        <name>update_entry</name>
        <param>
          <type>const <ref refid="structgraphene_1_1net_1_1potential__peer__record" kindref="compound">potential_peer_record</ref> &amp;</type>
          <declname>updatedRecord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/peer_database.hpp" line="108" column="1" bodyfile="libraries/net/peer_database.cpp" bodystart="249" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1peer__database_1aac277a2bd9e2a11f80c5ccd81911984e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1net_1_1potential__peer__record" kindref="compound">potential_peer_record</ref></type>
        <definition>potential_peer_record graphene::net::peer_database::lookup_or_create_entry_for_endpoint</definition>
        <argsstring>(const fc::ip::endpoint &amp;endpointToLookup)</argsstring>
        <name>lookup_or_create_entry_for_endpoint</name>
        <param>
          <type>const <ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">fc::ip::endpoint</ref> &amp;</type>
          <declname>endpointToLookup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/peer_database.hpp" line="109" column="1" bodyfile="libraries/net/peer_database.cpp" bodystart="254" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1peer__database_1a48d703c0997c18a87deeeed39b4dd64e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1optional" kindref="compound">fc::optional</ref>&lt; <ref refid="structgraphene_1_1net_1_1potential__peer__record" kindref="compound">potential_peer_record</ref> &gt;</type>
        <definition>fc::optional&lt; potential_peer_record &gt; graphene::net::peer_database::lookup_entry_for_endpoint</definition>
        <argsstring>(const fc::ip::endpoint &amp;endpointToLookup)</argsstring>
        <name>lookup_entry_for_endpoint</name>
        <param>
          <type>const <ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">fc::ip::endpoint</ref> &amp;</type>
          <declname>endpointToLookup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/peer_database.hpp" line="110" column="1" bodyfile="libraries/net/peer_database.cpp" bodystart="259" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1peer__database_1a74ccefbc284cf778a6ac941adf7f07d8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgraphene_1_1net_1_1peer__database_1ad21b8f485342a226c59accca6b410b42" kindref="member">iterator</ref></type>
        <definition>peer_database::iterator graphene::net::peer_database::begin</definition>
        <argsstring>() const </argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/peer_database.hpp" line="113" column="1" bodyfile="libraries/net/peer_database.cpp" bodystart="264" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1peer__database_1a44aa8fbda6eb87a572e169f13c7991f1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgraphene_1_1net_1_1peer__database_1ad21b8f485342a226c59accca6b410b42" kindref="member">iterator</ref></type>
        <definition>peer_database::iterator graphene::net::peer_database::end</definition>
        <argsstring>() const </argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/peer_database.hpp" line="114" column="1" bodyfile="libraries/net/peer_database.cpp" bodystart="269" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1peer__database_1a42b4d3074210bfeddbe023bc5a132c84" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t graphene::net::peer_database::size</definition>
        <argsstring>() const </argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/peer_database.hpp" line="115" column="1" bodyfile="libraries/net/peer_database.cpp" bodystart="274" bodyend="277"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/net/include/graphene/net/peer_database.hpp" line="97" column="1" bodyfile="libraries/net/include/graphene/net/peer_database.hpp" bodystart="96" bodyend="118"/>
    <listofallmembers>
      <member refid="classgraphene_1_1net_1_1peer__database_1a74ccefbc284cf778a6ac941adf7f07d8" prot="public" virt="non-virtual"><scope>graphene::net::peer_database</scope><name>begin</name></member>
      <member refid="classgraphene_1_1net_1_1peer__database_1a1eb162c7285ff10b3a23b4a92d01447a" prot="public" virt="non-virtual"><scope>graphene::net::peer_database</scope><name>clear</name></member>
      <member refid="classgraphene_1_1net_1_1peer__database_1ad8223c9113c2678e86fd3324a3973bb6" prot="public" virt="non-virtual"><scope>graphene::net::peer_database</scope><name>close</name></member>
      <member refid="classgraphene_1_1net_1_1peer__database_1a44aa8fbda6eb87a572e169f13c7991f1" prot="public" virt="non-virtual"><scope>graphene::net::peer_database</scope><name>end</name></member>
      <member refid="classgraphene_1_1net_1_1peer__database_1a78e6fca3f97c21e1e43862e5748a92fd" prot="public" virt="non-virtual"><scope>graphene::net::peer_database</scope><name>erase</name></member>
      <member refid="classgraphene_1_1net_1_1peer__database_1ad21b8f485342a226c59accca6b410b42" prot="public" virt="non-virtual"><scope>graphene::net::peer_database</scope><name>iterator</name></member>
      <member refid="classgraphene_1_1net_1_1peer__database_1a48d703c0997c18a87deeeed39b4dd64e" prot="public" virt="non-virtual"><scope>graphene::net::peer_database</scope><name>lookup_entry_for_endpoint</name></member>
      <member refid="classgraphene_1_1net_1_1peer__database_1aac277a2bd9e2a11f80c5ccd81911984e" prot="public" virt="non-virtual"><scope>graphene::net::peer_database</scope><name>lookup_or_create_entry_for_endpoint</name></member>
      <member refid="classgraphene_1_1net_1_1peer__database_1add57f35b7efda564262368cfb330f10c" prot="private" virt="non-virtual"><scope>graphene::net::peer_database</scope><name>my</name></member>
      <member refid="classgraphene_1_1net_1_1peer__database_1aa1425218b142d5d38faa6618e2dd0632" prot="public" virt="non-virtual"><scope>graphene::net::peer_database</scope><name>open</name></member>
      <member refid="classgraphene_1_1net_1_1peer__database_1afc67730edb750a2147e9d3b67328728d" prot="public" virt="non-virtual"><scope>graphene::net::peer_database</scope><name>peer_database</name></member>
      <member refid="classgraphene_1_1net_1_1peer__database_1a42b4d3074210bfeddbe023bc5a132c84" prot="public" virt="non-virtual"><scope>graphene::net::peer_database</scope><name>size</name></member>
      <member refid="classgraphene_1_1net_1_1peer__database_1aac4ced3eaae8d87d1a93dd40cbacc4ac" prot="public" virt="non-virtual"><scope>graphene::net::peer_database</scope><name>update_entry</name></member>
      <member refid="classgraphene_1_1net_1_1peer__database_1a83cb76415f753a6fca380620513b1ec8" prot="public" virt="virtual"><scope>graphene::net::peer_database</scope><name>~peer_database</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
