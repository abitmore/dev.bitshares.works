<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classfc_1_1api" kind="class" language="C++" prot="public">
    <compoundname>fc::api</compoundname>
    <includes refid="fc_2include_2fc_2api_8hpp" local="no">api.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename Interface</type>
      </param>
      <param>
        <type>typename Transform</type>
        <defval><ref refid="structfc_1_1identity__member__with__optionals" kindref="compound">identity_member_with_optionals</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classfc_1_1api_1a11b72f22d33b7b21a6e3768f2f5876a2" prot="public" static="no">
        <type><ref refid="structfc_1_1vtable" kindref="compound">vtable</ref>&lt; Interface, Transform &gt;</type>
        <definition>typedef vtable&lt;Interface,Transform&gt; fc::api&lt; Interface, Transform &gt;::vtable_type</definition>
        <argsstring></argsstring>
        <name>vtable_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/api.hpp" line="147" column="22" bodyfile="libraries/fc/include/fc/api.hpp" bodystart="147" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classfc_1_1api_1ad1617b790322c5a8e41f2af06c88c0e6" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classfc_1_1api_1a11b72f22d33b7b21a6e3768f2f5876a2" kindref="member">vtable_type</ref> &gt;</type>
        <definition>std::shared_ptr&lt;vtable_type&gt; fc::api&lt; Interface, Transform &gt;::_vtable</definition>
        <argsstring></argsstring>
        <name>_vtable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/api.hpp" line="175" column="26" bodyfile="libraries/fc/include/fc/api.hpp" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classfc_1_1api_1a4ef1f7c0fd610facd5734152f7436c7f" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; boost::any &gt;</type>
        <definition>std::shared_ptr&lt;boost::any&gt; fc::api&lt; Interface, Transform &gt;::_data</definition>
        <argsstring></argsstring>
        <name>_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/api.hpp" line="176" column="27" bodyfile="libraries/fc/include/fc/api.hpp" bodystart="176" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classfc_1_1api_1a255981b8f6e5350f515a81b4ade179cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>fc::api&lt; Interface, Transform &gt;::api</definition>
        <argsstring>()</argsstring>
        <name>api</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/api.hpp" line="149" column="7" bodyfile="libraries/fc/include/fc/api.hpp" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1api_1aa98da82a201c30c8efd4cad46c878a8b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>fc::api&lt; Interface, Transform &gt;::api</definition>
        <argsstring>(const T &amp;p)</argsstring>
        <name>api</name>
        <param>
          <type>const T &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>T is anything with pointer semantics </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/api.hpp" line="153" column="7" bodyfile="libraries/fc/include/fc/api.hpp" bodystart="153" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1api_1a6c20ba1caacd7897d0d0579df8a6ba1a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>fc::api&lt; Interface, Transform &gt;::api</definition>
        <argsstring>(const api &amp;cpy)</argsstring>
        <name>api</name>
        <param>
          <type>const <ref refid="classfc_1_1api" kindref="compound">api</ref> &amp;</type>
          <declname>cpy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/api.hpp" line="163" column="7" bodyfile="libraries/fc/include/fc/api.hpp" bodystart="163" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1api_1a14db4007b51ba85ba8d8e34009997299" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual fc::api&lt; Interface, Transform &gt;::~api</definition>
        <argsstring>()</argsstring>
        <name>~api</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/api.hpp" line="164" column="15" bodyfile="libraries/fc/include/fc/api.hpp" bodystart="164" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1api_1a3a8b466e0de4641b7afec6cf846492c5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>uint64_t</type>
        <definition>virtual uint64_t fc::api&lt; Interface, Transform &gt;::get_handle</definition>
        <argsstring>() const override</argsstring>
        <name>get_handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/api.hpp" line="168" column="24" bodyfile="libraries/fc/include/fc/api.hpp" bodystart="168" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1api_1a0fc48f47c158c42785ac9a7b21bf8788" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacefc_1a18e9e0bd9c0a52896425ae1172bc4e2b" kindref="member">api_id_type</ref></type>
        <definition>api_id_type fc::api&lt; Interface, Transform &gt;::register_api</definition>
        <argsstring>(api_connection &amp;conn) const override</argsstring>
        <name>register_api</name>
        <param>
          <type><ref refid="classfc_1_1api__connection" kindref="compound">api_connection</ref> &amp;</type>
          <declname>conn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>It is slightly unclean tight coupling to have this method in the api class. It breaks encapsulation by requiring an api class method to have a pointer to an <ref refid="classfc_1_1api__connection" kindref="compound">api_connection</ref>. The reason this is necessary is we have a goal of being able to call <ref refid="classfc_1_1api_1a0fc48f47c158c42785ac9a7b21bf8788" kindref="member">register_api()</ref> on an api&lt;T&gt; through its base class <ref refid="classfc_1_1api__base" kindref="compound">api_base</ref>. But <ref refid="classfc_1_1api_1a0fc48f47c158c42785ac9a7b21bf8788" kindref="member">register_api()</ref> must know the template parameters!</para>
<para>The only reasonable way to achieve the goal is to implement <ref refid="classfc_1_1api_1a0fc48f47c158c42785ac9a7b21bf8788" kindref="member">register_api()</ref> as a method in api&lt;T&gt; (which obviously knows the template parameter T), then make the implementation accessible through the base class (by making it a pure virtual method in the base class which is overridden by the subclass&apos;s implementation). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/api.hpp" line="169" column="27" bodyfile="libraries/fc/include/fc/rpc/api_connection.hpp" bodystart="508" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1api_1a5340a6682e5f47f2e0a6761fb126391f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfc_1_1api_1a11b72f22d33b7b21a6e3768f2f5876a2" kindref="member">vtable_type</ref> &amp;</type>
        <definition>vtable_type&amp; fc::api&lt; Interface, Transform &gt;::operator*</definition>
        <argsstring>() const</argsstring>
        <name>operator*</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/api.hpp" line="171" column="19" bodyfile="libraries/fc/include/fc/api.hpp" bodystart="171" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1api_1a0e0506ac81fd37177b65e4ed9633a360" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfc_1_1api_1a11b72f22d33b7b21a6e3768f2f5876a2" kindref="member">vtable_type</ref> *</type>
        <definition>vtable_type* fc::api&lt; Interface, Transform &gt;::operator-&gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/api.hpp" line="172" column="19" bodyfile="libraries/fc/include/fc/api.hpp" bodystart="172" bodyend="172"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classfc_1_1api_1a200d5382cff45db8633a0fc427650338" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const api &amp;a, const api &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classfc_1_1api" kindref="compound">api</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1api" kindref="compound">api</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/api.hpp" line="166" column="19" bodyfile="libraries/fc/include/fc/api.hpp" bodystart="166" bodyend="166"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1api_1abc65e9cb0c531a4fe0ba91ee2eea6644" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const api &amp;a, const api &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classfc_1_1api" kindref="compound">api</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1api" kindref="compound">api</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/api.hpp" line="167" column="19" bodyfile="libraries/fc/include/fc/api.hpp" bodystart="167" bodyend="167"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/fc/include/fc/api.hpp" line="120" column="3" bodyfile="libraries/fc/include/fc/api.hpp" bodystart="120" bodyend="-1"/>
    <listofallmembers>
      <member refid="classfc_1_1api_1a4ef1f7c0fd610facd5734152f7436c7f" prot="protected" virt="non-virtual"><scope>fc::api</scope><name>_data</name></member>
      <member refid="classfc_1_1api_1ad1617b790322c5a8e41f2af06c88c0e6" prot="protected" virt="non-virtual"><scope>fc::api</scope><name>_vtable</name></member>
      <member refid="classfc_1_1api_1a255981b8f6e5350f515a81b4ade179cf" prot="public" virt="non-virtual"><scope>fc::api</scope><name>api</name></member>
      <member refid="classfc_1_1api_1aa98da82a201c30c8efd4cad46c878a8b" prot="public" virt="non-virtual"><scope>fc::api</scope><name>api</name></member>
      <member refid="classfc_1_1api_1a6c20ba1caacd7897d0d0579df8a6ba1a" prot="public" virt="non-virtual"><scope>fc::api</scope><name>api</name></member>
      <member refid="classfc_1_1api_1a3a8b466e0de4641b7afec6cf846492c5" prot="public" virt="virtual"><scope>fc::api</scope><name>get_handle</name></member>
      <member refid="classfc_1_1api_1abc65e9cb0c531a4fe0ba91ee2eea6644" prot="public" virt="non-virtual"><scope>fc::api</scope><name>operator!=</name></member>
      <member refid="classfc_1_1api_1a5340a6682e5f47f2e0a6761fb126391f" prot="public" virt="non-virtual"><scope>fc::api</scope><name>operator*</name></member>
      <member refid="classfc_1_1api_1a0e0506ac81fd37177b65e4ed9633a360" prot="public" virt="non-virtual"><scope>fc::api</scope><name>operator-&gt;</name></member>
      <member refid="classfc_1_1api_1a200d5382cff45db8633a0fc427650338" prot="public" virt="non-virtual"><scope>fc::api</scope><name>operator==</name></member>
      <member refid="classfc_1_1api_1a0fc48f47c158c42785ac9a7b21bf8788" prot="public" virt="virtual"><scope>fc::api</scope><name>register_api</name></member>
      <member refid="classfc_1_1api_1a11b72f22d33b7b21a6e3768f2f5876a2" prot="public" virt="non-virtual"><scope>fc::api</scope><name>vtable_type</name></member>
      <member refid="classfc_1_1api_1a14db4007b51ba85ba8d8e34009997299" prot="public" virt="virtual"><scope>fc::api</scope><name>~api</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
