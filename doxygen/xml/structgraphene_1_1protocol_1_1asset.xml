<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structgraphene_1_1protocol_1_1asset" kind="struct" language="C++" prot="public">
    <compoundname>graphene::protocol::asset</compoundname>
    <includes refid="asset_8hpp" local="no">asset.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1asset_1abe4689b3272c57a26b2ea62ea95be825" prot="public" static="no" mutable="no">
        <type><ref refid="namespacegraphene_1_1protocol_1a69b2104c1c11eed2d17bd29b86713347" kindref="member">share_type</ref></type>
        <definition>share_type graphene::protocol::asset::amount</definition>
        <argsstring></argsstring>
        <name>amount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="36" column="21" bodyfile="libraries/protocol/include/graphene/protocol/asset.hpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1asset_1a9b5ac16b4c73a2f9ff07914c33df0d64" prot="public" static="no" mutable="no">
        <type>asset_id_type</type>
        <definition>asset_id_type graphene::protocol::asset::asset_id</definition>
        <argsstring></argsstring>
        <name>asset_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="37" column="21" bodyfile="libraries/protocol/include/graphene/protocol/asset.hpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1asset_1a29e7740506e2a9b589962babe4a2a546" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>graphene::protocol::asset::asset</definition>
        <argsstring>(share_type a=0, asset_id_type id=asset_id_type())</argsstring>
        <name>asset</name>
        <param>
          <type><ref refid="namespacegraphene_1_1protocol_1a69b2104c1c11eed2d17bd29b86713347" kindref="member">share_type</ref></type>
          <declname>a</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>asset_id_type</type>
          <declname>id</declname>
          <defval>asset_id_type()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="33" column="7" bodyfile="libraries/protocol/include/graphene/protocol/asset.hpp" bodystart="33" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1asset_1aaeb8509d5eb67653f62217e1da0c5837" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
        <definition>asset&amp; graphene::protocol::asset::operator+=</definition>
        <argsstring>(const asset &amp;o)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="39" column="13" bodyfile="libraries/protocol/include/graphene/protocol/asset.hpp" bodystart="39" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1asset_1aab0c149346cea2c3ae79d25dce1d91ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
        <definition>asset&amp; graphene::protocol::asset::operator-=</definition>
        <argsstring>(const asset &amp;o)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="45" column="13" bodyfile="libraries/protocol/include/graphene/protocol/asset.hpp" bodystart="45" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1asset_1a81b9a894f29048a5646c6d69b3bd8f1d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref></type>
        <definition>asset graphene::protocol::asset::operator-</definition>
        <argsstring>() const</argsstring>
        <name>operator-</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="51" column="13" bodyfile="libraries/protocol/include/graphene/protocol/asset.hpp" bodystart="51" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1asset_1a9a383b36e2b18050fdf330c0f0173e24" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref></type>
        <definition>asset graphene::protocol::asset::multiply_and_round_up</definition>
        <argsstring>(const price &amp;p) const</argsstring>
        <name>multiply_and_round_up</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Multiply and round up. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="93" column="13" bodyfile="libraries/protocol/asset.cpp" bodystart="77" bodyend="98"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structgraphene_1_1protocol_1_1asset_1a8c79ce3d3e367c6345a8c5cb75bab48d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const asset &amp;a, const asset &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="53" column="19" bodyfile="libraries/protocol/include/graphene/protocol/asset.hpp" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="friend" id="structgraphene_1_1protocol_1_1asset_1a4c5d8977b23e534426a070f568524d02" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const asset &amp;a, const asset &amp;b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="57" column="14" bodyfile="libraries/protocol/include/graphene/protocol/asset.hpp" bodystart="57" bodyend="61"/>
      </memberdef>
      <memberdef kind="friend" id="structgraphene_1_1protocol_1_1asset_1a9d586e9b54232432779a91e2d6d8b78e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const asset &amp;a, const asset &amp;b)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="62" column="21" bodyfile="libraries/protocol/include/graphene/protocol/asset.hpp" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="friend" id="structgraphene_1_1protocol_1_1asset_1adb0577649f2f48023169390b0b78e234" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const asset &amp;a, const asset &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="67" column="26" bodyfile="libraries/protocol/include/graphene/protocol/asset.hpp" bodystart="67" bodyend="70"/>
      </memberdef>
      <memberdef kind="friend" id="structgraphene_1_1protocol_1_1asset_1a88d1352c1cf2b7377292377449a4ced8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const asset &amp;a, const asset &amp;b)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="71" column="26" bodyfile="libraries/protocol/include/graphene/protocol/asset.hpp" bodystart="71" bodyend="74"/>
      </memberdef>
      <memberdef kind="friend" id="structgraphene_1_1protocol_1_1asset_1aa5ae6feb2c7097211820fc31cf24b5f5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const asset &amp;a, const asset &amp;b)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="75" column="26" bodyfile="libraries/protocol/include/graphene/protocol/asset.hpp" bodystart="75" bodyend="78"/>
      </memberdef>
      <memberdef kind="friend" id="structgraphene_1_1protocol_1_1asset_1a101f03e631cf8c72d8094b91a5524207" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref></type>
        <definition>asset operator-</definition>
        <argsstring>(const asset &amp;a, const asset &amp;b)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="80" column="20" bodyfile="libraries/protocol/include/graphene/protocol/asset.hpp" bodystart="80" bodyend="84"/>
      </memberdef>
      <memberdef kind="friend" id="structgraphene_1_1protocol_1_1asset_1a606c72fe4e28b359ba977a6043f56300" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref></type>
        <definition>asset operator+</definition>
        <argsstring>(const asset &amp;a, const asset &amp;b)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="85" column="20" bodyfile="libraries/protocol/include/graphene/protocol/asset.hpp" bodystart="85" bodyend="89"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1asset_1a9dd2c55dfa12b1208a398b211b301221" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegraphene_1_1protocol_1a69b2104c1c11eed2d17bd29b86713347" kindref="member">share_type</ref></type>
        <definition>share_type graphene::protocol::asset::scaled_precision</definition>
        <argsstring>(uint8_t precision)</argsstring>
        <name>scaled_precision</name>
        <param>
          <type>uint8_t</type>
          <declname>precision</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="91" column="25" bodyfile="libraries/protocol/asset.cpp" bodystart="363" bodyend="376"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="3">
        <label>fc::safe_base&lt; int64_t &gt;</label>
        <link refid="structfc_1_1safe__base"/>
      </node>
      <node id="2">
        <label>fc::safe&lt; int64_t &gt;</label>
        <link refid="structfc_1_1safe"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>graphene::protocol::asset</label>
        <link refid="structgraphene_1_1protocol_1_1asset"/>
        <childnode refid="2" relation="usage">
          <edgelabel>amount</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="32" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset.hpp" bodystart="31" bodyend="94"/>
    <listofallmembers>
      <member refid="structgraphene_1_1protocol_1_1asset_1abe4689b3272c57a26b2ea62ea95be825" prot="public" virt="non-virtual"><scope>graphene::protocol::asset</scope><name>amount</name></member>
      <member refid="structgraphene_1_1protocol_1_1asset_1a29e7740506e2a9b589962babe4a2a546" prot="public" virt="non-virtual"><scope>graphene::protocol::asset</scope><name>asset</name></member>
      <member refid="structgraphene_1_1protocol_1_1asset_1a9b5ac16b4c73a2f9ff07914c33df0d64" prot="public" virt="non-virtual"><scope>graphene::protocol::asset</scope><name>asset_id</name></member>
      <member refid="structgraphene_1_1protocol_1_1asset_1a9a383b36e2b18050fdf330c0f0173e24" prot="public" virt="non-virtual"><scope>graphene::protocol::asset</scope><name>multiply_and_round_up</name></member>
      <member refid="structgraphene_1_1protocol_1_1asset_1adb0577649f2f48023169390b0b78e234" prot="public" virt="non-virtual"><scope>graphene::protocol::asset</scope><name>operator!=</name></member>
      <member refid="structgraphene_1_1protocol_1_1asset_1a606c72fe4e28b359ba977a6043f56300" prot="public" virt="non-virtual"><scope>graphene::protocol::asset</scope><name>operator+</name></member>
      <member refid="structgraphene_1_1protocol_1_1asset_1aaeb8509d5eb67653f62217e1da0c5837" prot="public" virt="non-virtual"><scope>graphene::protocol::asset</scope><name>operator+=</name></member>
      <member refid="structgraphene_1_1protocol_1_1asset_1a81b9a894f29048a5646c6d69b3bd8f1d" prot="public" virt="non-virtual"><scope>graphene::protocol::asset</scope><name>operator-</name></member>
      <member refid="structgraphene_1_1protocol_1_1asset_1a101f03e631cf8c72d8094b91a5524207" prot="public" virt="non-virtual"><scope>graphene::protocol::asset</scope><name>operator-</name></member>
      <member refid="structgraphene_1_1protocol_1_1asset_1aab0c149346cea2c3ae79d25dce1d91ab" prot="public" virt="non-virtual"><scope>graphene::protocol::asset</scope><name>operator-=</name></member>
      <member refid="structgraphene_1_1protocol_1_1asset_1a4c5d8977b23e534426a070f568524d02" prot="public" virt="non-virtual"><scope>graphene::protocol::asset</scope><name>operator&lt;</name></member>
      <member refid="structgraphene_1_1protocol_1_1asset_1a9d586e9b54232432779a91e2d6d8b78e" prot="public" virt="non-virtual"><scope>graphene::protocol::asset</scope><name>operator&lt;=</name></member>
      <member refid="structgraphene_1_1protocol_1_1asset_1a8c79ce3d3e367c6345a8c5cb75bab48d" prot="public" virt="non-virtual"><scope>graphene::protocol::asset</scope><name>operator==</name></member>
      <member refid="structgraphene_1_1protocol_1_1asset_1a88d1352c1cf2b7377292377449a4ced8" prot="public" virt="non-virtual"><scope>graphene::protocol::asset</scope><name>operator&gt;</name></member>
      <member refid="structgraphene_1_1protocol_1_1asset_1aa5ae6feb2c7097211820fc31cf24b5f5" prot="public" virt="non-virtual"><scope>graphene::protocol::asset</scope><name>operator&gt;=</name></member>
      <member refid="structgraphene_1_1protocol_1_1asset_1a9dd2c55dfa12b1208a398b211b301221" prot="public" virt="non-virtual"><scope>graphene::protocol::asset</scope><name>scaled_precision</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
