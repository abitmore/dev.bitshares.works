<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classfc_1_1sha1" kind="class" language="C++" prot="public">
    <compoundname>fc::sha1</compoundname>
    <includes refid="sha1_8hpp" local="no">sha1.hpp</includes>
    <innerclass refid="classfc_1_1sha1_1_1encoder" prot="public">fc::sha1::encoder</innerclass>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classfc_1_1sha1_1ad12fcc4801ac46daa07c47fea25ed85e" prot="public" static="no" mutable="no">
        <type>boost::endian::little_uint32_buf_t</type>
        <definition>boost::endian::little_uint32_buf_t fc::sha1::_hash[5]</definition>
        <argsstring>[5]</argsstring>
        <name>_hash</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/sha1.hpp" line="68" column="1" bodyfile="libraries/fc/include/fc/crypto/sha1.hpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classfc_1_1sha1_1abeafa42dce486001a3d483ac01a59a15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::sha1::sha1</definition>
        <argsstring>()</argsstring>
        <name>sha1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/sha1.hpp" line="13" column="1" bodyfile="libraries/fc/src/crypto/sha1.cpp" bodystart="13" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1sha1_1a5e39dc410352e1f72efb40dbc43f7cf6" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::sha1::sha1</definition>
        <argsstring>(const std::string &amp;hex_str)</argsstring>
        <name>sha1</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>hex_str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/sha1.hpp" line="14" column="1" bodyfile="libraries/fc/src/crypto/sha1.cpp" bodystart="14" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1sha1_1ad4958485fe7f4888c5305f5608692e81" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>string fc::sha1::str</definition>
        <argsstring>() const</argsstring>
        <name>str</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/sha1.hpp" line="16" column="1" bodyfile="libraries/fc/src/crypto/sha1.cpp" bodystart="18" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1sha1_1ab1189afaf89ed46c7465b11cd4b12df1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::sha1::operator std::string</definition>
        <argsstring>() const</argsstring>
        <name>operator std::string</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/sha1.hpp" line="17" column="1" bodyfile="libraries/fc/src/crypto/sha1.cpp" bodystart="21" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1sha1_1a0f0c56ec4e140dd939ae815ae19d5daa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * fc::sha1::data</definition>
        <argsstring>() const</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/sha1.hpp" line="19" column="1" bodyfile="libraries/fc/src/crypto/sha1.cpp" bodystart="23" bodyend="23"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classfc_1_1sha1_1a803a49ecfbbe03d959eeb328ca588a2f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr size_t</type>
        <definition>static constexpr size_t fc::sha1::data_size</definition>
        <argsstring>()</argsstring>
        <name>data_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/sha1.hpp" line="20" column="1" bodyfile="libraries/fc/include/fc/crypto/sha1.hpp" bodystart="20" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1sha1_1ae2b17c52fe5c1bb6a91325decc3b8f7c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1sha1" kindref="compound">sha1</ref></type>
        <definition>sha1 fc::sha1::hash</definition>
        <argsstring>(const char *d, uint32_t dlen)</argsstring>
        <name>hash</name>
        <param>
          <type>const char *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>dlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/sha1.hpp" line="22" column="1" bodyfile="libraries/fc/src/crypto/sha1.cpp" bodystart="35" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1sha1_1abc31d554a5b1b33ef2eb34ce56a017ea" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1sha1" kindref="compound">sha1</ref></type>
        <definition>sha1 fc::sha1::hash</definition>
        <argsstring>(const std::string &amp;)</argsstring>
        <name>hash</name>
        <param>
          <type>const std::string &amp;</type>
          <defname>s</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/sha1.hpp" line="23" column="1" bodyfile="libraries/fc/src/crypto/sha1.cpp" bodystart="40" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1sha1_1a8be36f5b5ea215d0a66915c0253cf4ae" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classfc_1_1sha1" kindref="compound">sha1</ref></type>
        <definition>static sha1 fc::sha1::hash</definition>
        <argsstring>(const T &amp;t)</argsstring>
        <name>hash</name>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/sha1.hpp" line="26" column="1" bodyfile="libraries/fc/include/fc/crypto/sha1.hpp" bodystart="26" bodyend="31"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classfc_1_1sha1_1ac685065417ff085f1017dc4467388e40" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>friend T &amp;</type>
        <definition>T&amp; operator&lt;&lt;</definition>
        <argsstring>(T &amp;ds, const sha1 &amp;ep)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>T &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1sha1" kindref="compound">sha1</ref> &amp;</type>
          <declname>ep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/sha1.hpp" line="50" column="1" bodyfile="libraries/fc/include/fc/crypto/sha1.hpp" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1sha1_1a3d5b190f2ef8f6b5bad4f7337cbe67c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>friend T &amp;</type>
        <definition>T&amp; operator&gt;&gt;</definition>
        <argsstring>(T &amp;ds, sha1 &amp;ep)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>T &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1sha1" kindref="compound">sha1</ref> &amp;</type>
          <declname>ep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/sha1.hpp" line="56" column="1" bodyfile="libraries/fc/include/fc/crypto/sha1.hpp" bodystart="56" bodyend="59"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1sha1_1a8e87d2be9b06c7113b57a2b8455fdc22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classfc_1_1sha1" kindref="compound">sha1</ref></type>
        <definition>sha1 operator&lt;&lt;</definition>
        <argsstring>(const sha1 &amp;h1, uint32_t i)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const <ref refid="classfc_1_1sha1" kindref="compound">sha1</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/sha1.hpp" line="60" column="1" bodyfile="libraries/fc/src/crypto/sha1.cpp" bodystart="56" bodyend="60"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1sha1_1a6fd867d656b30cba0f59d8add436aa1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const sha1 &amp;h1, const sha1 &amp;h2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classfc_1_1sha1" kindref="compound">sha1</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1sha1" kindref="compound">sha1</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/sha1.hpp" line="61" column="1" bodyfile="libraries/fc/src/crypto/sha1.cpp" bodystart="82" bodyend="84"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1sha1_1ae8f29de32bb50a15b7d68b60d1b4f4f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const sha1 &amp;h1, const sha1 &amp;h2)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classfc_1_1sha1" kindref="compound">sha1</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1sha1" kindref="compound">sha1</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/sha1.hpp" line="62" column="1" bodyfile="libraries/fc/src/crypto/sha1.cpp" bodystart="79" bodyend="81"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1sha1_1a469c70d7922485f27bb811490ad334c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classfc_1_1sha1" kindref="compound">sha1</ref></type>
        <definition>sha1 operator^</definition>
        <argsstring>(const sha1 &amp;h1, const sha1 &amp;h2)</argsstring>
        <name>operator^</name>
        <param>
          <type>const <ref refid="classfc_1_1sha1" kindref="compound">sha1</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1sha1" kindref="compound">sha1</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/sha1.hpp" line="63" column="1" bodyfile="libraries/fc/src/crypto/sha1.cpp" bodystart="61" bodyend="69"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1sha1_1ab3447989e7212b65729eab352397eb55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const sha1 &amp;h1, const sha1 &amp;h2)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classfc_1_1sha1" kindref="compound">sha1</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1sha1" kindref="compound">sha1</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/sha1.hpp" line="64" column="1" bodyfile="libraries/fc/src/crypto/sha1.cpp" bodystart="70" bodyend="72"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1sha1_1a678374e9b6c8bf5549fde635f45ca8da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const sha1 &amp;h1, const sha1 &amp;h2)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classfc_1_1sha1" kindref="compound">sha1</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1sha1" kindref="compound">sha1</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/sha1.hpp" line="65" column="1" bodyfile="libraries/fc/src/crypto/sha1.cpp" bodystart="73" bodyend="75"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1sha1_1a6c29b9daf163c2bc1541ffdbcce454f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const sha1 &amp;h1, const sha1 &amp;h2)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classfc_1_1sha1" kindref="compound">sha1</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1sha1" kindref="compound">sha1</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/sha1.hpp" line="66" column="1" bodyfile="libraries/fc/src/crypto/sha1.cpp" bodystart="76" bodyend="78"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/fc/include/fc/crypto/sha1.hpp" line="11" column="1" bodyfile="libraries/fc/include/fc/crypto/sha1.hpp" bodystart="10" bodyend="69"/>
    <listofallmembers>
      <member refid="classfc_1_1sha1_1ad12fcc4801ac46daa07c47fea25ed85e" prot="public" virt="non-virtual"><scope>fc::sha1</scope><name>_hash</name></member>
      <member refid="classfc_1_1sha1_1a0f0c56ec4e140dd939ae815ae19d5daa" prot="public" virt="non-virtual"><scope>fc::sha1</scope><name>data</name></member>
      <member refid="classfc_1_1sha1_1a803a49ecfbbe03d959eeb328ca588a2f" prot="public" virt="non-virtual"><scope>fc::sha1</scope><name>data_size</name></member>
      <member refid="classfc_1_1sha1_1ae2b17c52fe5c1bb6a91325decc3b8f7c" prot="public" virt="non-virtual"><scope>fc::sha1</scope><name>hash</name></member>
      <member refid="classfc_1_1sha1_1abc31d554a5b1b33ef2eb34ce56a017ea" prot="public" virt="non-virtual"><scope>fc::sha1</scope><name>hash</name></member>
      <member refid="classfc_1_1sha1_1a8be36f5b5ea215d0a66915c0253cf4ae" prot="public" virt="non-virtual"><scope>fc::sha1</scope><name>hash</name></member>
      <member refid="classfc_1_1sha1_1ab1189afaf89ed46c7465b11cd4b12df1" prot="public" virt="non-virtual"><scope>fc::sha1</scope><name>operator std::string</name></member>
      <member refid="classfc_1_1sha1_1ae8f29de32bb50a15b7d68b60d1b4f4f7" prot="public" virt="non-virtual"><scope>fc::sha1</scope><name>operator!=</name></member>
      <member refid="classfc_1_1sha1_1a6c29b9daf163c2bc1541ffdbcce454f5" prot="public" virt="non-virtual"><scope>fc::sha1</scope><name>operator&lt;</name></member>
      <member refid="classfc_1_1sha1_1ac685065417ff085f1017dc4467388e40" prot="public" virt="non-virtual"><scope>fc::sha1</scope><name>operator&lt;&lt;</name></member>
      <member refid="classfc_1_1sha1_1a8e87d2be9b06c7113b57a2b8455fdc22" prot="public" virt="non-virtual"><scope>fc::sha1</scope><name>operator&lt;&lt;</name></member>
      <member refid="classfc_1_1sha1_1a6fd867d656b30cba0f59d8add436aa1a" prot="public" virt="non-virtual"><scope>fc::sha1</scope><name>operator==</name></member>
      <member refid="classfc_1_1sha1_1a678374e9b6c8bf5549fde635f45ca8da" prot="public" virt="non-virtual"><scope>fc::sha1</scope><name>operator&gt;</name></member>
      <member refid="classfc_1_1sha1_1ab3447989e7212b65729eab352397eb55" prot="public" virt="non-virtual"><scope>fc::sha1</scope><name>operator&gt;=</name></member>
      <member refid="classfc_1_1sha1_1a3d5b190f2ef8f6b5bad4f7337cbe67c8" prot="public" virt="non-virtual"><scope>fc::sha1</scope><name>operator&gt;&gt;</name></member>
      <member refid="classfc_1_1sha1_1a469c70d7922485f27bb811490ad334c6" prot="public" virt="non-virtual"><scope>fc::sha1</scope><name>operator^</name></member>
      <member refid="classfc_1_1sha1_1abeafa42dce486001a3d483ac01a59a15" prot="public" virt="non-virtual"><scope>fc::sha1</scope><name>sha1</name></member>
      <member refid="classfc_1_1sha1_1a5e39dc410352e1f72efb40dbc43f7cf6" prot="public" virt="non-virtual"><scope>fc::sha1</scope><name>sha1</name></member>
      <member refid="classfc_1_1sha1_1ad4958485fe7f4888c5305f5608692e81" prot="public" virt="non-virtual"><scope>fc::sha1</scope><name>str</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
