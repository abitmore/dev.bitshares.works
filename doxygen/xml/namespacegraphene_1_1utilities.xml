<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespacegraphene_1_1utilities" kind="namespace" language="C++">
    <compoundname>graphene::utilities</compoundname>
    <innerclass refid="classgraphene_1_1utilities_1_1curl__wrapper" prot="public">graphene::utilities::curl_wrapper</innerclass>
    <innerclass refid="classgraphene_1_1utilities_1_1es__client" prot="public">graphene::utilities::es_client</innerclass>
    <innerclass refid="structgraphene_1_1utilities_1_1es__data__adaptor" prot="public">graphene::utilities::es_data_adaptor</innerclass>
    <innerclass refid="classgraphene_1_1utilities_1_1padding__ostream" prot="public">graphene::utilities::padding_ostream</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacegraphene_1_1utilities_1a4da7b598aa6b523b3cb9545bd51159c6" prot="public" static="no" mutable="no">
        <type>const char *const</type>
        <definition>const char* const graphene::utilities::git_revision_sha</definition>
        <argsstring></argsstring>
        <name>git_revision_sha</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/utilities/include/graphene/utilities/git_revision.hpp" line="29" column="25" declfile="libraries/utilities/include/graphene/utilities/git_revision.hpp" declline="29" declcolumn="25"/>
      </memberdef>
      <memberdef kind="variable" id="namespacegraphene_1_1utilities_1ab693ad99c775928737dbcceec4d101bc" prot="public" static="no" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t graphene::utilities::git_revision_unix_timestamp</definition>
        <argsstring></argsstring>
        <name>git_revision_unix_timestamp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/utilities/include/graphene/utilities/git_revision.hpp" line="30" column="23" declfile="libraries/utilities/include/graphene/utilities/git_revision.hpp" declline="30" declcolumn="23"/>
      </memberdef>
      <memberdef kind="variable" id="namespacegraphene_1_1utilities_1a64ad8e1791fa4c7e0a6a803505467ad2" prot="public" static="no" mutable="no">
        <type>const char *const</type>
        <definition>const char* const graphene::utilities::git_revision_description</definition>
        <argsstring></argsstring>
        <name>git_revision_description</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/utilities/include/graphene/utilities/git_revision.hpp" line="31" column="25" declfile="libraries/utilities/include/graphene/utilities/git_revision.hpp" declline="31" declcolumn="25"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacegraphene_1_1utilities_1ad1cdca5c6b54f39c98d6e9bd8cd2137d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool graphene::utilities::handle_bulk_response</definition>
        <argsstring>(uint16_t http_code, const std::string &amp;curl_read_buffer)</argsstring>
        <name>handle_bulk_response</name>
        <param>
          <type>uint16_t</type>
          <declname>http_code</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>curl_read_buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/utilities/elasticsearch.cpp" line="39" column="13" bodyfile="libraries/utilities/elasticsearch.cpp" bodystart="39" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1utilities_1adbb8c9cf86f637a5b99e7a19a764b2a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; graphene::utilities::createBulk</definition>
        <argsstring>(const fc::mutable_variant_object &amp;bulk_header, std::string &amp;&amp;data)</argsstring>
        <name>createBulk</name>
        <param>
          <type>const <ref refid="classfc_1_1mutable__variant__object" kindref="compound">fc::mutable_variant_object</ref> &amp;</type>
          <declname>bulk_header</declname>
        </param>
        <param>
          <type>std::string &amp;&amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/utilities/elasticsearch.cpp" line="69" column="13" bodyfile="libraries/utilities/elasticsearch.cpp" bodystart="69" bodyend="78" declfile="libraries/utilities/include/graphene/utilities/elasticsearch.hpp" declline="117" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1utilities_1ac124673ffe94cef23f313045010aeacb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void graphene::utilities::get_program_option</definition>
        <argsstring>(const boost::program_options::variables_map &amp;from, const std::string &amp;key, T &amp;to)</argsstring>
        <name>get_program_option</name>
        <param>
          <type>const boost::program_options::variables_map &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/utilities/include/graphene/utilities/boost_program_options.hpp" line="30" column="6" bodyfile="libraries/utilities/include/graphene/utilities/boost_program_options.hpp" bodystart="30" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1utilities_1a33f09d0c0f741c8375082b6932bcdc58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string graphene::utilities::key_to_wif</definition>
        <argsstring>(const fc::sha256 &amp;private_secret)</argsstring>
        <name>key_to_wif</name>
        <param>
          <type>const <ref refid="classfc_1_1sha256" kindref="compound">fc::sha256</ref> &amp;</type>
          <declname>private_secret</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/utilities/key_conversion.cpp" line="30" column="13" bodyfile="libraries/utilities/key_conversion.cpp" bodystart="30" bodyend="41" declfile="libraries/utilities/include/graphene/utilities/key_conversion.hpp" declline="32" declcolumn="36"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1utilities_1a01120dd3238ef646221bba49465a8acc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string graphene::utilities::key_to_wif</definition>
        <argsstring>(const fc::ecc::private_key &amp;key)</argsstring>
        <name>key_to_wif</name>
        <param>
          <type>const <ref refid="classfc_1_1ecc_1_1private__key" kindref="compound">fc::ecc::private_key</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/utilities/key_conversion.cpp" line="42" column="13" bodyfile="libraries/utilities/key_conversion.cpp" bodystart="42" bodyend="45" declfile="libraries/utilities/include/graphene/utilities/key_conversion.hpp" declline="33" declcolumn="36"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1utilities_1a4734611d6f868ab8bebb86622e918dd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1optional" kindref="compound">fc::optional</ref>&lt; <ref refid="classfc_1_1ecc_1_1private__key" kindref="compound">fc::ecc::private_key</ref> &gt;</type>
        <definition>fc::optional&lt; fc::ecc::private_key &gt; graphene::utilities::wif_to_key</definition>
        <argsstring>(const std::string &amp;wif_key)</argsstring>
        <name>wif_to_key</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>wif_key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/utilities/key_conversion.cpp" line="47" column="14" bodyfile="libraries/utilities/key_conversion.cpp" bodystart="47" bodyend="70" declfile="libraries/utilities/include/graphene/utilities/key_conversion.hpp" declline="34" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1utilities_1aaa11e0000f7a698827216eba26390ebc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string graphene::utilities::escape_string_for_c_source_code</definition>
        <argsstring>(const std::string &amp;input)</argsstring>
        <name>escape_string_for_c_source_code</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/utilities/string_escape.cpp" line="29" column="15" bodyfile="libraries/utilities/string_escape.cpp" bodystart="29" bodyend="70" declfile="libraries/utilities/include/graphene/utilities/string_escape.hpp" declline="30" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1utilities_1adb696ba556b0db4d1d78173585ac6122" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1path" kindref="compound">fc::path</ref></type>
        <definition>fc::path graphene::utilities::temp_directory_path</definition>
        <argsstring>()</argsstring>
        <name>temp_directory_path</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/utilities/tempdir.cpp" line="31" column="10" bodyfile="libraries/utilities/tempdir.cpp" bodystart="31" bodyend="37" declfile="libraries/utilities/include/graphene/utilities/tempdir.hpp" declline="32" declcolumn="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/utilities/elasticsearch.cpp" line="37" column="36"/>
  </compounddef>
</doxygen>
