<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structfc_1_1field__reflection" kind="struct" language="C++" prot="public">
    <compoundname>fc::field_reflection</compoundname>
    <includes refid="reflect_8hpp" local="no">reflect.hpp</includes>
    <templateparamlist>
      <param>
        <type>std::size_t</type>
        <declname>Index</declname>
        <defname>Index</defname>
      </param>
      <param>
        <type>typename Container</type>
      </param>
      <param>
        <type>typename Member</type>
      </param>
      <param>
        <type>Member Container::*</type>
        <declname>field</declname>
        <defname>field</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structfc_1_1field__reflection_1a2dc137a38c86e83f8e1ba12af137d6cd" prot="public" static="no">
        <type>Container</type>
        <definition>using fc::field_reflection&lt; Index, Container, Member, field &gt;::container =  Container</definition>
        <argsstring></argsstring>
        <name>container</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/reflect/reflect.hpp" line="42" column="1" bodyfile="libraries/fc/include/fc/reflect/reflect.hpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structfc_1_1field__reflection_1a8ec00bc10be9b4afff31d37da1564b18" prot="public" static="no">
        <type>Member</type>
        <definition>using fc::field_reflection&lt; Index, Container, Member, field &gt;::type =  Member</definition>
        <argsstring></argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/reflect/reflect.hpp" line="43" column="1" bodyfile="libraries/fc/include/fc/reflect/reflect.hpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structfc_1_1field__reflection_1adbbd9188ee358a22d833f8edbd68674d" prot="public" static="no">
        <type><ref refid="structfc_1_1reflector" kindref="compound">fc::reflector</ref>&lt; <ref refid="structfc_1_1field__reflection_1a8ec00bc10be9b4afff31d37da1564b18" kindref="member">type</ref> &gt;</type>
        <definition>using fc::field_reflection&lt; Index, Container, Member, field &gt;::reflector =  fc::reflector&lt;type&gt;</definition>
        <argsstring></argsstring>
        <name>reflector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/reflect/reflect.hpp" line="44" column="1" bodyfile="libraries/fc/include/fc/reflect/reflect.hpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="structfc_1_1field__reflection_1aba3901adf29f9e523b120e650a0f8cd2" prot="public" static="yes" mutable="no">
        <type>constexpr std::size_t</type>
        <definition>constexpr std::size_t fc::field_reflection&lt; Index, Container, Member, field &gt;::index</definition>
        <argsstring></argsstring>
        <name>index</name>
        <initializer>= Index</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/reflect/reflect.hpp" line="45" column="1" bodyfile="libraries/fc/include/fc/reflect/reflect.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfc_1_1field__reflection_1a8e0c9b3b739b687b89914b91c2d1a146" prot="public" static="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool fc::field_reflection&lt; Index, Container, Member, field &gt;::is_derived</definition>
        <argsstring></argsstring>
        <name>is_derived</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/reflect/reflect.hpp" line="46" column="1" bodyfile="libraries/fc/include/fc/reflect/reflect.hpp" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfc_1_1field__reflection_1a8ab8233658dd81307e91a1fad45e0d51" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="structfc_1_1field__reflection_1a8ec00bc10be9b4afff31d37da1564b18" kindref="member">type</ref> container::*</type>
        <definition>constexpr type container::* fc::field_reflection&lt; Index, Container, Member, field &gt;::pointer</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <initializer>= field</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/reflect/reflect.hpp" line="47" column="1" bodyfile="libraries/fc/include/fc/reflect/reflect.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structfc_1_1field__reflection_1a68255e0629133fcfff32e6c66374ac1b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfc_1_1field__reflection_1a8ec00bc10be9b4afff31d37da1564b18" kindref="member">type</ref> &amp;</type>
        <definition>static type&amp; fc::field_reflection&lt; Index, Container, Member, field &gt;::get</definition>
        <argsstring>(container &amp;c)</argsstring>
        <name>get</name>
        <param>
          <type><ref refid="structfc_1_1field__reflection_1a2dc137a38c86e83f8e1ba12af137d6cd" kindref="member">container</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Given a reference to the container type, get a reference to the field. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/reflect/reflect.hpp" line="50" column="1" bodyfile="libraries/fc/include/fc/reflect/reflect.hpp" bodystart="50" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="structfc_1_1field__reflection_1a7c0d73eb0e09e955049467b15020fb73" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structfc_1_1field__reflection_1a8ec00bc10be9b4afff31d37da1564b18" kindref="member">type</ref> &amp;</type>
        <definition>static const type&amp; fc::field_reflection&lt; Index, Container, Member, field &gt;::get</definition>
        <argsstring>(const container &amp;c)</argsstring>
        <name>get</name>
        <param>
          <type>const <ref refid="structfc_1_1field__reflection_1a2dc137a38c86e83f8e1ba12af137d6cd" kindref="member">container</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/reflect/reflect.hpp" line="51" column="1" bodyfile="libraries/fc/include/fc/reflect/reflect.hpp" bodystart="51" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="structfc_1_1field__reflection_1a767621909603c226eb7b56418f9f0287" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char* fc::field_reflection&lt; Index, Container, Member, field &gt;::get_name</definition>
        <argsstring>()</argsstring>
        <name>get_name</name>
        <briefdescription>
<para>Get the name of the field. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/reflect/reflect.hpp" line="53" column="1" bodyfile="libraries/fc/include/fc/reflect/reflect.hpp" bodystart="53" bodyend="53"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A template to store compile-time information about a field in a reflected struct. </para>    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Container</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the struct or class containing the field </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Member</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the field </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer-to-member for the reflected field </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <location file="libraries/fc/include/fc/reflect/reflect.hpp" line="41" column="1" bodyfile="libraries/fc/include/fc/reflect/reflect.hpp" bodystart="41" bodyend="54"/>
    <listofallmembers>
      <member refid="structfc_1_1field__reflection_1a2dc137a38c86e83f8e1ba12af137d6cd" prot="public" virt="non-virtual"><scope>fc::field_reflection</scope><name>container</name></member>
      <member refid="structfc_1_1field__reflection_1a68255e0629133fcfff32e6c66374ac1b" prot="public" virt="non-virtual"><scope>fc::field_reflection</scope><name>get</name></member>
      <member refid="structfc_1_1field__reflection_1a7c0d73eb0e09e955049467b15020fb73" prot="public" virt="non-virtual"><scope>fc::field_reflection</scope><name>get</name></member>
      <member refid="structfc_1_1field__reflection_1a767621909603c226eb7b56418f9f0287" prot="public" virt="non-virtual"><scope>fc::field_reflection</scope><name>get_name</name></member>
      <member refid="structfc_1_1field__reflection_1aba3901adf29f9e523b120e650a0f8cd2" prot="public" virt="non-virtual"><scope>fc::field_reflection</scope><name>index</name></member>
      <member refid="structfc_1_1field__reflection_1a8e0c9b3b739b687b89914b91c2d1a146" prot="public" virt="non-virtual"><scope>fc::field_reflection</scope><name>is_derived</name></member>
      <member refid="structfc_1_1field__reflection_1a8ab8233658dd81307e91a1fad45e0d51" prot="public" virt="non-virtual"><scope>fc::field_reflection</scope><name>pointer</name></member>
      <member refid="structfc_1_1field__reflection_1adbbd9188ee358a22d833f8edbd68674d" prot="public" virt="non-virtual"><scope>fc::field_reflection</scope><name>reflector</name></member>
      <member refid="structfc_1_1field__reflection_1a8ec00bc10be9b4afff31d37da1564b18" prot="public" virt="non-virtual"><scope>fc::field_reflection</scope><name>type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
