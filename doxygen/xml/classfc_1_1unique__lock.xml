<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classfc_1_1unique__lock" kind="class" language="C++" prot="public">
    <compoundname>fc::unique_lock</compoundname>
    <includes refid="unique__lock_8hpp" local="no">unique_lock.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classfc_1_1unique__lock_1ae08bad7019b074c35a8a1fb26db6dea4" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool fc::unique_lock&lt; T &gt;::_locked</definition>
        <argsstring></argsstring>
        <name>_locked</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/unique_lock.hpp" line="25" column="1" bodyfile="libraries/fc/include/fc/thread/unique_lock.hpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classfc_1_1unique__lock_1a1adb50eb1da551e67d9e8171054fa5b2" prot="private" static="no" mutable="no">
        <type>T &amp;</type>
        <definition>T&amp; fc::unique_lock&lt; T &gt;::_lock</definition>
        <argsstring></argsstring>
        <name>_lock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/unique_lock.hpp" line="26" column="1" bodyfile="libraries/fc/include/fc/thread/unique_lock.hpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classfc_1_1unique__lock_1a79efa8d968dcc96feb8cd71273d97e13" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>fc::unique_lock&lt; T &gt;::unique_lock</definition>
        <argsstring>(T &amp;l, const fc::time_point &amp;abs)</argsstring>
        <name>unique_lock</name>
        <param>
          <type>T &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1time__point" kindref="compound">fc::time_point</ref> &amp;</type>
          <declname>abs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/unique_lock.hpp" line="15" column="1" bodyfile="libraries/fc/include/fc/thread/unique_lock.hpp" bodystart="15" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1unique__lock_1adc9c8efa3bf59120421ee872600f001b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>fc::unique_lock&lt; T &gt;::unique_lock</definition>
        <argsstring>(T &amp;l, try_to_lock_t)</argsstring>
        <name>unique_lock</name>
        <param>
          <type>T &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type><ref refid="structfc_1_1try__to__lock__t" kindref="compound">try_to_lock_t</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/unique_lock.hpp" line="16" column="1" bodyfile="libraries/fc/include/fc/thread/unique_lock.hpp" bodystart="16" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1unique__lock_1acc3f12d80935ca8e747b6896d6edea7e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>fc::unique_lock&lt; T &gt;::unique_lock</definition>
        <argsstring>(T &amp;l)</argsstring>
        <name>unique_lock</name>
        <param>
          <type>T &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/unique_lock.hpp" line="17" column="1" bodyfile="libraries/fc/include/fc/thread/unique_lock.hpp" bodystart="17" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1unique__lock_1a5813904bca27e8fc4c7ad46937015197" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>fc::unique_lock&lt; T &gt;::~unique_lock</definition>
        <argsstring>()</argsstring>
        <name>~unique_lock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/unique_lock.hpp" line="18" column="1" bodyfile="libraries/fc/include/fc/thread/unique_lock.hpp" bodystart="18" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1unique__lock_1a8d594c1520df4eddadd042e926517041" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>fc::unique_lock&lt; T &gt;::operator bool</definition>
        <argsstring>() const</argsstring>
        <name>operator bool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/unique_lock.hpp" line="19" column="1" bodyfile="libraries/fc/include/fc/thread/unique_lock.hpp" bodystart="19" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1unique__lock_1adba107b3df79e49b2850a84e657c1f28" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void fc::unique_lock&lt; T &gt;::unlock</definition>
        <argsstring>()</argsstring>
        <name>unlock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/unique_lock.hpp" line="20" column="1" bodyfile="libraries/fc/include/fc/thread/unique_lock.hpp" bodystart="20" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1unique__lock_1abda2bf6246d8d1c6e9aa1e05f2b31259" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void fc::unique_lock&lt; T &gt;::lock</definition>
        <argsstring>()</argsstring>
        <name>lock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/unique_lock.hpp" line="21" column="1" bodyfile="libraries/fc/include/fc/thread/unique_lock.hpp" bodystart="21" bodyend="21"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classfc_1_1unique__lock_1a31e647110e6eef8e230cd86b4f0d5422" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::unique_lock&lt; T &gt;::unique_lock</definition>
        <argsstring>(const unique_lock &amp;)</argsstring>
        <name>unique_lock</name>
        <param>
          <type>const <ref refid="classfc_1_1unique__lock" kindref="compound">unique_lock</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/unique_lock.hpp" line="23" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1unique__lock_1aa7fd7885f504f54795f61220278f8245" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1unique__lock" kindref="compound">unique_lock</ref> &amp;</type>
        <definition>unique_lock&amp; fc::unique_lock&lt; T &gt;::operator=</definition>
        <argsstring>(const unique_lock &amp;)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classfc_1_1unique__lock" kindref="compound">unique_lock</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/unique_lock.hpp" line="24" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Including Boost&apos;s unique lock drastically increases compile times for something that is this trivial! </para>    </detaileddescription>
    <location file="libraries/fc/include/fc/thread/unique_lock.hpp" line="13" column="1" bodyfile="libraries/fc/include/fc/thread/unique_lock.hpp" bodystart="13" bodyend="27"/>
    <listofallmembers>
      <member refid="classfc_1_1unique__lock_1a1adb50eb1da551e67d9e8171054fa5b2" prot="private" virt="non-virtual"><scope>fc::unique_lock</scope><name>_lock</name></member>
      <member refid="classfc_1_1unique__lock_1ae08bad7019b074c35a8a1fb26db6dea4" prot="private" virt="non-virtual"><scope>fc::unique_lock</scope><name>_locked</name></member>
      <member refid="classfc_1_1unique__lock_1abda2bf6246d8d1c6e9aa1e05f2b31259" prot="public" virt="non-virtual"><scope>fc::unique_lock</scope><name>lock</name></member>
      <member refid="classfc_1_1unique__lock_1a8d594c1520df4eddadd042e926517041" prot="public" virt="non-virtual"><scope>fc::unique_lock</scope><name>operator bool</name></member>
      <member refid="classfc_1_1unique__lock_1aa7fd7885f504f54795f61220278f8245" prot="private" virt="non-virtual"><scope>fc::unique_lock</scope><name>operator=</name></member>
      <member refid="classfc_1_1unique__lock_1a79efa8d968dcc96feb8cd71273d97e13" prot="public" virt="non-virtual"><scope>fc::unique_lock</scope><name>unique_lock</name></member>
      <member refid="classfc_1_1unique__lock_1adc9c8efa3bf59120421ee872600f001b" prot="public" virt="non-virtual"><scope>fc::unique_lock</scope><name>unique_lock</name></member>
      <member refid="classfc_1_1unique__lock_1acc3f12d80935ca8e747b6896d6edea7e" prot="public" virt="non-virtual"><scope>fc::unique_lock</scope><name>unique_lock</name></member>
      <member refid="classfc_1_1unique__lock_1a31e647110e6eef8e230cd86b4f0d5422" prot="private" virt="non-virtual"><scope>fc::unique_lock</scope><name>unique_lock</name></member>
      <member refid="classfc_1_1unique__lock_1adba107b3df79e49b2850a84e657c1f28" prot="public" virt="non-virtual"><scope>fc::unique_lock</scope><name>unlock</name></member>
      <member refid="classfc_1_1unique__lock_1a5813904bca27e8fc4c7ad46937015197" prot="public" virt="non-virtual"><scope>fc::unique_lock</scope><name>~unique_lock</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
