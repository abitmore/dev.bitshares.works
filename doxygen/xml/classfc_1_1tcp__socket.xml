<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classfc_1_1tcp__socket" kind="class" language="C++" prot="public">
    <compoundname>fc::tcp_socket</compoundname>
    <basecompoundref refid="classfc_1_1iostream" prot="public" virt="virtual">fc::iostream</basecompoundref>
    <includes refid="tcp__socket_8hpp" local="no">tcp_socket.hpp</includes>
    <innerclass refid="classfc_1_1tcp__socket_1_1impl" prot="public">fc::tcp_socket::impl</innerclass>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classfc_1_1tcp__socket_1a2c785e6f21f4383a47bcc1ed15eae71d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t fc::tcp_socket::readsome</definition>
        <argsstring>(char *buffer, size_t max)</argsstring>
        <name>readsome</name>
        <reimplements refid="classfc_1_1istream_1a2d8500cfafdd8ee8134a6dbe30ffbc57">readsome</reimplements>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>istream interface </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/tcp_socket.hpp" line="39" column="1" bodyfile="libraries/fc/src/network/tcp_socket.cpp" bodystart="147" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1tcp__socket_1a37ab772f32325bbd3dde8854bb2a0ce2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t fc::tcp_socket::readsome</definition>
        <argsstring>(const std::shared_ptr&lt; char &gt; &amp;buffer, size_t max, size_t offset)</argsstring>
        <name>readsome</name>
        <reimplements refid="classfc_1_1istream_1a1480e604a53bd3f92f44c217a472fed0">readsome</reimplements>
        <param>
          <type>const std::shared_ptr&lt; char &gt; &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/tcp_socket.hpp" line="40" column="1" bodyfile="libraries/fc/src/network/tcp_socket.cpp" bodystart="152" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1tcp__socket_1aa27165aa22fa12c4fcfde6fc1bbfdcdc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool fc::tcp_socket::eof</definition>
        <argsstring>() const</argsstring>
        <name>eof</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/tcp_socket.hpp" line="41" column="1" bodyfile="libraries/fc/src/network/tcp_socket.cpp" bodystart="112" bodyend="114"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classfc_1_1tcp__socket_1a6fbf4730c000aabb7561d4949326a15f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t fc::tcp_socket::writesome</definition>
        <argsstring>(const char *buffer, size_t len)</argsstring>
        <name>writesome</name>
        <reimplements refid="classfc_1_1ostream_1aac50b472ffc544ec0b171c5df21f4505">writesome</reimplements>
        <param>
          <type>const char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ostream interface </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/tcp_socket.hpp" line="46" column="1" bodyfile="libraries/fc/src/network/tcp_socket.cpp" bodystart="116" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1tcp__socket_1acfb04324bc5242efb4460d86e57b548a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t fc::tcp_socket::writesome</definition>
        <argsstring>(const std::shared_ptr&lt; const char &gt; &amp;buffer, size_t len, size_t offset)</argsstring>
        <name>writesome</name>
        <reimplements refid="classfc_1_1ostream_1acb234eb77ec18eef2c2aeef8f645a862">writesome</reimplements>
        <param>
          <type>const std::shared_ptr&lt; const char &gt; &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/tcp_socket.hpp" line="47" column="1" bodyfile="libraries/fc/src/network/tcp_socket.cpp" bodystart="121" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1tcp__socket_1a3acfc3a542cb75331d9f3965b56bde1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void fc::tcp_socket::flush</definition>
        <argsstring>()</argsstring>
        <name>flush</name>
        <reimplements refid="classfc_1_1ostream_1af0a9d82410120b00b036462594f05549">flush</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/tcp_socket.hpp" line="48" column="1" bodyfile="libraries/fc/src/network/tcp_socket.cpp" bodystart="102" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1tcp__socket_1ab53327ffea0f6db061b0c33e3ea29674" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void fc::tcp_socket::close</definition>
        <argsstring>()</argsstring>
        <name>close</name>
        <reimplements refid="classfc_1_1ostream_1ab0055550951d519b5cf95c2f4d07379c">close</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/tcp_socket.hpp" line="49" column="1" bodyfile="libraries/fc/src/network/tcp_socket.cpp" bodystart="103" bodyend="110"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classfc_1_1tcp__socket_1a558f654c6aca96275de770a1e31e8eff" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class tcp_server</definition>
        <argsstring></argsstring>
        <name>tcp_server</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/tcp_socket.hpp" line="56" column="1" bodyfile="libraries/fc/include/fc/network/tcp_socket.hpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classfc_1_1tcp__socket_1a3336c115c1415d678e262adbd3b81429" prot="private" static="no" mutable="no">
        <type><ref refid="classfc_1_1fwd" kindref="compound">fc::fwd</ref>&lt; <ref refid="classfc_1_1tcp__socket_1_1impl" kindref="compound">impl</ref>, sizeof(void *)+sizeof(<ref refid="classfc_1_1future" kindref="compound">fc::future</ref>&lt; size_t &gt;)+sizeof(<ref refid="classfc_1_1future" kindref="compound">fc::future</ref>&lt; size_t &gt;)+sizeof(boost::asio::ip::tcp::socket)+sizeof(<ref refid="classfc_1_1tcp__socket__io__hooks" kindref="compound">tcp_socket_io_hooks</ref> *) &gt;</type>
        <definition>fc::fwd&lt;impl, sizeof(void* ) + sizeof(fc::future&lt;size_t&gt;) + sizeof(fc::future&lt;size_t&gt;) + sizeof(boost::asio::ip::tcp::socket) + sizeof(tcp_socket_io_hooks*) &gt; fc::tcp_socket::my</definition>
        <argsstring></argsstring>
        <name>my</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/tcp_socket.hpp" line="64" column="1" bodyfile="libraries/fc/include/fc/network/tcp_socket.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classfc_1_1tcp__socket_1ab8b08c17782191132bad7e3f5c3e4dea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::tcp_socket::tcp_socket</definition>
        <argsstring>()</argsstring>
        <name>tcp_socket</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/tcp_socket.hpp" line="17" column="1" bodyfile="libraries/fc/src/network/tcp_socket.cpp" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1tcp__socket_1a1629968ce241660d3043901cb81f6754" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::tcp_socket::tcp_socket</definition>
        <argsstring>(tcp_socket &amp;copy)=delete</argsstring>
        <name>tcp_socket</name>
        <param>
          <type><ref refid="classfc_1_1tcp__socket" kindref="compound">tcp_socket</ref> &amp;</type>
          <declname>copy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/tcp_socket.hpp" line="18" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1tcp__socket_1a47df82ae5250008e9b3565840862268f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::tcp_socket::~tcp_socket</definition>
        <argsstring>()</argsstring>
        <name>~tcp_socket</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/tcp_socket.hpp" line="19" column="1" bodyfile="libraries/fc/src/network/tcp_socket.cpp" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1tcp__socket_1a1f9851ce8c4958506b2995f195d82e16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1tcp__socket" kindref="compound">tcp_socket</ref> &amp;</type>
        <definition>tcp_socket&amp; fc::tcp_socket::operator=</definition>
        <argsstring>(tcp_socket &amp;copy)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classfc_1_1tcp__socket" kindref="compound">tcp_socket</ref> &amp;</type>
          <declname>copy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/tcp_socket.hpp" line="20" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1tcp__socket_1a949e343c2577fda54cc0a28dd9c4510f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::tcp_socket::connect_to</definition>
        <argsstring>(const fc::ip::endpoint &amp;remote_endpoint)</argsstring>
        <name>connect_to</name>
        <param>
          <type>const <ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">fc::ip::endpoint</ref> &amp;</type>
          <declname>remote_endpoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/tcp_socket.hpp" line="22" column="1" bodyfile="libraries/fc/src/network/tcp_socket.cpp" bodystart="156" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1tcp__socket_1a88459b8e8555d9b83f2b1eea70f49a6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::tcp_socket::bind</definition>
        <argsstring>(const fc::ip::endpoint &amp;local_endpoint)</argsstring>
        <name>bind</name>
        <param>
          <type>const <ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">fc::ip::endpoint</ref> &amp;</type>
          <declname>local_endpoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/tcp_socket.hpp" line="23" column="1" bodyfile="libraries/fc/src/network/tcp_socket.cpp" bodystart="160" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1tcp__socket_1a47056945b38796e5ce9424cb5313755a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::tcp_socket::enable_keep_alives</definition>
        <argsstring>(const fc::microseconds &amp;interval)</argsstring>
        <name>enable_keep_alives</name>
        <param>
          <type>const <ref refid="classfc_1_1microseconds" kindref="compound">fc::microseconds</ref> &amp;</type>
          <declname>interval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/tcp_socket.hpp" line="24" column="1" bodyfile="libraries/fc/src/network/tcp_socket.cpp" bodystart="174" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1tcp__socket_1a027b8f2e3423e9f4798a4638a91f9513" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::tcp_socket::set_io_hooks</definition>
        <argsstring>(tcp_socket_io_hooks *new_hooks)</argsstring>
        <name>set_io_hooks</name>
        <param>
          <type><ref refid="classfc_1_1tcp__socket__io__hooks" kindref="compound">tcp_socket_io_hooks</ref> *</type>
          <declname>new_hooks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/tcp_socket.hpp" line="25" column="1" bodyfile="libraries/fc/src/network/tcp_socket.cpp" bodystart="236" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1tcp__socket_1ae37e6762913f82ec1e828980d0cf15a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::tcp_socket::set_reuse_address</definition>
        <argsstring>(bool enable=true)</argsstring>
        <name>set_reuse_address</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/tcp_socket.hpp" line="26" column="1" bodyfile="libraries/fc/src/network/tcp_socket.cpp" bodystart="241" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1tcp__socket_1a54d51605ea957955061db0003652ff3c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">fc::ip::endpoint</ref></type>
        <definition>fc::ip::endpoint fc::tcp_socket::remote_endpoint</definition>
        <argsstring>() const</argsstring>
        <name>remote_endpoint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/tcp_socket.hpp" line="27" column="1" bodyfile="libraries/fc/src/network/tcp_socket.cpp" bodystart="126" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1tcp__socket_1a35f88e73b23481eb7090b8a6a6a3aa04" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">fc::ip::endpoint</ref></type>
        <definition>fc::ip::endpoint fc::tcp_socket::local_endpoint</definition>
        <argsstring>() const</argsstring>
        <name>local_endpoint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/tcp_socket.hpp" line="28" column="1" bodyfile="libraries/fc/src/network/tcp_socket.cpp" bodystart="137" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1tcp__socket_1a734163dc6f2f5a7ac40098e199c8cfa6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void fc::tcp_socket::get</definition>
        <argsstring>(char &amp;c)</argsstring>
        <name>get</name>
        <param>
          <type>char &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/tcp_socket.hpp" line="31" column="1" bodyfile="libraries/fc/include/fc/network/tcp_socket.hpp" bodystart="31" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1tcp__socket_1adf8fd15b0e9efa616bcae32d8313d8de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::tcp_socket::open</definition>
        <argsstring>()</argsstring>
        <name>open</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/tcp_socket.hpp" line="52" column="1" bodyfile="libraries/fc/src/network/tcp_socket.cpp" bodystart="89" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1tcp__socket_1a51e5c9ef6f784d4f5ce9cba553cdbd64" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::tcp_socket::is_open</definition>
        <argsstring>() const</argsstring>
        <name>is_open</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/tcp_socket.hpp" line="53" column="1" bodyfile="libraries/fc/src/network/tcp_socket.cpp" bodystart="94" bodyend="96"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="7499">
        <label>fc::tcp_socket</label>
        <link refid="classfc_1_1tcp__socket"/>
        <childnode refid="7500" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7502">
        <label>fc::istream</label>
        <link refid="classfc_1_1istream"/>
      </node>
      <node id="7500">
        <label>fc::iostream</label>
        <link refid="classfc_1_1iostream"/>
        <childnode refid="7501" relation="public-inheritance">
        </childnode>
        <childnode refid="7502" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7501">
        <label>fc::ostream</label>
        <link refid="classfc_1_1ostream"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7503">
        <label>fc::tcp_socket</label>
        <link refid="classfc_1_1tcp__socket"/>
        <childnode refid="7504" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7506">
        <label>fc::istream</label>
        <link refid="classfc_1_1istream"/>
      </node>
      <node id="7504">
        <label>fc::iostream</label>
        <link refid="classfc_1_1iostream"/>
        <childnode refid="7505" relation="public-inheritance">
        </childnode>
        <childnode refid="7506" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7505">
        <label>fc::ostream</label>
        <link refid="classfc_1_1ostream"/>
      </node>
    </collaborationgraph>
    <location file="libraries/fc/include/fc/network/tcp_socket.hpp" line="15" column="1" bodyfile="libraries/fc/include/fc/network/tcp_socket.hpp" bodystart="14" bodyend="66"/>
    <listofallmembers>
      <member refid="classfc_1_1tcp__socket_1a88459b8e8555d9b83f2b1eea70f49a6b" prot="public" virt="non-virtual"><scope>fc::tcp_socket</scope><name>bind</name></member>
      <member refid="classfc_1_1tcp__socket_1ab53327ffea0f6db061b0c33e3ea29674" prot="public" virt="virtual"><scope>fc::tcp_socket</scope><name>close</name></member>
      <member refid="classfc_1_1tcp__socket_1a949e343c2577fda54cc0a28dd9c4510f" prot="public" virt="non-virtual"><scope>fc::tcp_socket</scope><name>connect_to</name></member>
      <member refid="classfc_1_1tcp__socket_1a47056945b38796e5ce9424cb5313755a" prot="public" virt="non-virtual"><scope>fc::tcp_socket</scope><name>enable_keep_alives</name></member>
      <member refid="classfc_1_1tcp__socket_1aa27165aa22fa12c4fcfde6fc1bbfdcdc" prot="public" virt="virtual"><scope>fc::tcp_socket</scope><name>eof</name></member>
      <member refid="classfc_1_1tcp__socket_1a3acfc3a542cb75331d9f3965b56bde1a" prot="public" virt="virtual"><scope>fc::tcp_socket</scope><name>flush</name></member>
      <member refid="classfc_1_1tcp__socket_1a734163dc6f2f5a7ac40098e199c8cfa6" prot="public" virt="non-virtual"><scope>fc::tcp_socket</scope><name>get</name></member>
      <member refid="classfc_1_1istream_1ac217a213d8fe2554eaba25b7daf6c9b2" prot="public" virt="virtual" ambiguityscope="fc::iostream::"><scope>fc::tcp_socket</scope><name>get</name></member>
      <member refid="classfc_1_1tcp__socket_1a51e5c9ef6f784d4f5ce9cba553cdbd64" prot="public" virt="non-virtual"><scope>fc::tcp_socket</scope><name>is_open</name></member>
      <member refid="classfc_1_1tcp__socket_1a35f88e73b23481eb7090b8a6a6a3aa04" prot="public" virt="non-virtual"><scope>fc::tcp_socket</scope><name>local_endpoint</name></member>
      <member refid="classfc_1_1tcp__socket_1a3336c115c1415d678e262adbd3b81429" prot="private" virt="non-virtual"><scope>fc::tcp_socket</scope><name>my</name></member>
      <member refid="classfc_1_1tcp__socket_1adf8fd15b0e9efa616bcae32d8313d8de" prot="public" virt="non-virtual"><scope>fc::tcp_socket</scope><name>open</name></member>
      <member refid="classfc_1_1tcp__socket_1a1f9851ce8c4958506b2995f195d82e16" prot="public" virt="non-virtual"><scope>fc::tcp_socket</scope><name>operator=</name></member>
      <member refid="classfc_1_1ostream_1a5eb546403297f3a0124af202d9544fc4" prot="public" virt="non-virtual"><scope>fc::tcp_socket</scope><name>put</name></member>
      <member refid="classfc_1_1istream_1ad7f71af193e4aa4c2efaab0ca22b1b86" prot="public" virt="non-virtual"><scope>fc::tcp_socket</scope><name>read</name></member>
      <member refid="classfc_1_1istream_1a94e767f126e952db54be791ee0cc6d1e" prot="public" virt="non-virtual"><scope>fc::tcp_socket</scope><name>read</name></member>
      <member refid="classfc_1_1tcp__socket_1a2c785e6f21f4383a47bcc1ed15eae71d" prot="public" virt="virtual"><scope>fc::tcp_socket</scope><name>readsome</name></member>
      <member refid="classfc_1_1tcp__socket_1a37ab772f32325bbd3dde8854bb2a0ce2" prot="public" virt="virtual"><scope>fc::tcp_socket</scope><name>readsome</name></member>
      <member refid="classfc_1_1tcp__socket_1a54d51605ea957955061db0003652ff3c" prot="public" virt="non-virtual"><scope>fc::tcp_socket</scope><name>remote_endpoint</name></member>
      <member refid="classfc_1_1tcp__socket_1a027b8f2e3423e9f4798a4638a91f9513" prot="public" virt="non-virtual"><scope>fc::tcp_socket</scope><name>set_io_hooks</name></member>
      <member refid="classfc_1_1tcp__socket_1ae37e6762913f82ec1e828980d0cf15a6" prot="public" virt="non-virtual"><scope>fc::tcp_socket</scope><name>set_reuse_address</name></member>
      <member refid="classfc_1_1tcp__socket_1a558f654c6aca96275de770a1e31e8eff" prot="private" virt="non-virtual"><scope>fc::tcp_socket</scope><name>tcp_server</name></member>
      <member refid="classfc_1_1tcp__socket_1ab8b08c17782191132bad7e3f5c3e4dea" prot="public" virt="non-virtual"><scope>fc::tcp_socket</scope><name>tcp_socket</name></member>
      <member refid="classfc_1_1tcp__socket_1a1629968ce241660d3043901cb81f6754" prot="public" virt="non-virtual"><scope>fc::tcp_socket</scope><name>tcp_socket</name></member>
      <member refid="classfc_1_1ostream_1a8abbd25d7d136527d1bb36c1ca24427e" prot="public" virt="non-virtual"><scope>fc::tcp_socket</scope><name>write</name></member>
      <member refid="classfc_1_1ostream_1afa09d563e34c1e16aee4709d4a47483a" prot="public" virt="non-virtual"><scope>fc::tcp_socket</scope><name>write</name></member>
      <member refid="classfc_1_1tcp__socket_1a6fbf4730c000aabb7561d4949326a15f" prot="public" virt="virtual"><scope>fc::tcp_socket</scope><name>writesome</name></member>
      <member refid="classfc_1_1tcp__socket_1acfb04324bc5242efb4460d86e57b548a" prot="public" virt="virtual"><scope>fc::tcp_socket</scope><name>writesome</name></member>
      <member refid="classfc_1_1istream_1a3d6f017f2fbcead4c7213618b5a21d36" prot="public" virt="virtual"><scope>fc::tcp_socket</scope><name>~istream</name></member>
      <member refid="classfc_1_1ostream_1aa2ed925328be7251755abfb9ca5f01d2" prot="public" virt="virtual"><scope>fc::tcp_socket</scope><name>~ostream</name></member>
      <member refid="classfc_1_1tcp__socket_1a47df82ae5250008e9b3565840862268f" prot="public" virt="non-virtual"><scope>fc::tcp_socket</scope><name>~tcp_socket</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
