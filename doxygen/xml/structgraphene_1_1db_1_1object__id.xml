<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="structgraphene_1_1db_1_1object__id" kind="struct" language="C++" prot="public">
    <compoundname>graphene::db::object_id</compoundname>
    <includes refid="object__id_8hpp" local="no">object_id.hpp</includes>
    <templateparamlist>
      <param>
        <type>uint8_t</type>
        <declname>SpaceID</declname>
        <defname>SpaceID</defname>
      </param>
      <param>
        <type>uint8_t</type>
        <declname>TypeID</declname>
        <defname>TypeID</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="structgraphene_1_1db_1_1object__id_1af2acbad0bbf47bab71417ee49a774917" prot="public" static="yes" mutable="no">
        <type>constexpr uint8_t</type>
        <definition>constexpr uint8_t graphene::db::object_id&lt; SpaceID, TypeID &gt;::space_id</definition>
        <argsstring></argsstring>
        <name>space_id</name>
        <initializer>= SpaceID</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/object_id.hpp" line="110" column="1" bodyfile="libraries/protocol/include/graphene/protocol/object_id.hpp" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1db_1_1object__id_1a05e977a498b0bf18ce72e9d13a3ab76e" prot="public" static="yes" mutable="no">
        <type>constexpr uint8_t</type>
        <definition>constexpr uint8_t graphene::db::object_id&lt; SpaceID, TypeID &gt;::type_id</definition>
        <argsstring></argsstring>
        <name>type_id</name>
        <initializer>= TypeID</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/object_id.hpp" line="111" column="1" bodyfile="libraries/protocol/include/graphene/protocol/object_id.hpp" bodystart="111" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structgraphene_1_1db_1_1object__id_1a53a17baa085becb05f84b6d0d4bbe6bb" prot="public" static="no" mutable="no">
        <type><ref refid="structfc_1_1unsigned__int" kindref="compound">unsigned_int</ref></type>
        <definition>unsigned_int graphene::db::object_id&lt; SpaceID, TypeID &gt;::instance</definition>
        <argsstring></argsstring>
        <name>instance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/object_id.hpp" line="148" column="1" bodyfile="libraries/protocol/include/graphene/protocol/object_id.hpp" bodystart="148" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structgraphene_1_1db_1_1object__id_1a0400f4c7262bcc18db2540e772575688" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::db::object_id&lt; SpaceID, TypeID &gt;::object_id</definition>
        <argsstring>()=default</argsstring>
        <name>object_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/object_id.hpp" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1db_1_1object__id_1ad5943d0bd30b5d9f076512cd4e57c6b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>graphene::db::object_id&lt; SpaceID, TypeID &gt;::object_id</definition>
        <argsstring>(unsigned_int i)</argsstring>
        <name>object_id</name>
        <param>
          <type><ref refid="structfc_1_1unsigned__int" kindref="compound">unsigned_int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/object_id.hpp" line="114" column="1" bodyfile="libraries/protocol/include/graphene/protocol/object_id.hpp" bodystart="114" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1db_1_1object__id_1a895631113eb336e17c90dc93cc3e3daa" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>graphene::db::object_id&lt; SpaceID, TypeID &gt;::object_id</definition>
        <argsstring>(uint64_t i)</argsstring>
        <name>object_id</name>
        <param>
          <type>uint64_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/object_id.hpp" line="115" column="1" bodyfile="libraries/protocol/include/graphene/protocol/object_id.hpp" bodystart="115" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1db_1_1object__id_1ac809dee8a18e715f93ac8b2a7da98933" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>graphene::db::object_id&lt; SpaceID, TypeID &gt;::object_id</definition>
        <argsstring>(object_id_type id)</argsstring>
        <name>object_id</name>
        <param>
          <type><ref refid="structgraphene_1_1db_1_1object__id__type" kindref="compound">object_id_type</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/object_id.hpp" line="119" column="1" bodyfile="libraries/protocol/include/graphene/protocol/object_id.hpp" bodystart="119" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1db_1_1object__id_1a8df9301d9a67076441193ab27d25c553" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>graphene::db::object_id&lt; SpaceID, TypeID &gt;::operator object_id_type</definition>
        <argsstring>() const </argsstring>
        <name>operator object_id_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/object_id.hpp" line="126" column="1" bodyfile="libraries/protocol/include/graphene/protocol/object_id.hpp" bodystart="126" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1db_1_1object__id_1a23637857483ec1f3298d88e05ba59216" prot="public" static="no" const="yes" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>graphene::db::object_id&lt; SpaceID, TypeID &gt;::operator uint64_t</definition>
        <argsstring>() const </argsstring>
        <name>operator uint64_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/object_id.hpp" line="127" column="1" bodyfile="libraries/protocol/include/graphene/protocol/object_id.hpp" bodystart="127" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1db_1_1object__id_1a0bea414b63c8fce930285cea4ebfff6f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DB</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto graphene::db::object_id&lt; SpaceID, TypeID &gt;::operator()</definition>
        <argsstring>(const DB &amp;db) const -&gt; const decltype(db.get(*this))&amp;</argsstring>
        <name>operator()</name>
        <param>
          <type>const DB &amp;</type>
          <declname>db</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/object_id.hpp" line="130" column="1" bodyfile="libraries/protocol/include/graphene/protocol/object_id.hpp" bodystart="130" bodyend="130"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structgraphene_1_1db_1_1object__id_1aad102997c355554fc0a4a8f838545e70" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="structgraphene_1_1db_1_1object__id" kindref="compound">object_id</ref></type>
        <definition>object_id operator+</definition>
        <argsstring>(const object_id a, int64_t delta)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structgraphene_1_1db_1_1object__id" kindref="compound">object_id</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/object_id.hpp" line="123" column="1" bodyfile="libraries/protocol/include/graphene/protocol/object_id.hpp" bodystart="123" bodyend="123"/>
      </memberdef>
      <memberdef kind="friend" id="structgraphene_1_1db_1_1object__id_1a77a5c326c5581fc1a330a52930c05bf4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="structgraphene_1_1db_1_1object__id" kindref="compound">object_id</ref></type>
        <definition>object_id operator+</definition>
        <argsstring>(const object_id a, int delta)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structgraphene_1_1db_1_1object__id" kindref="compound">object_id</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/object_id.hpp" line="124" column="1" bodyfile="libraries/protocol/include/graphene/protocol/object_id.hpp" bodystart="124" bodyend="124"/>
      </memberdef>
      <memberdef kind="friend" id="structgraphene_1_1db_1_1object__id_1aebba02f184be13c3c9d546a52905019d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const object_id &amp;a, const object_id &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structgraphene_1_1db_1_1object__id" kindref="compound">object_id</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1db_1_1object__id" kindref="compound">object_id</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/object_id.hpp" line="132" column="1" bodyfile="libraries/protocol/include/graphene/protocol/object_id.hpp" bodystart="132" bodyend="132"/>
      </memberdef>
      <memberdef kind="friend" id="structgraphene_1_1db_1_1object__id_1a2646ece2da1f0354b4676a2f4278a808" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const object_id &amp;a, const object_id &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structgraphene_1_1db_1_1object__id" kindref="compound">object_id</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1db_1_1object__id" kindref="compound">object_id</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/object_id.hpp" line="133" column="1" bodyfile="libraries/protocol/include/graphene/protocol/object_id.hpp" bodystart="133" bodyend="133"/>
      </memberdef>
      <memberdef kind="friend" id="structgraphene_1_1db_1_1object__id_1a7e09aa7e3c6853b66d32f85b54ee7917" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const object_id_type &amp;a, const object_id &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structgraphene_1_1db_1_1object__id__type" kindref="compound">object_id_type</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1db_1_1object__id" kindref="compound">object_id</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/object_id.hpp" line="134" column="1" bodyfile="libraries/protocol/include/graphene/protocol/object_id.hpp" bodystart="134" bodyend="134"/>
      </memberdef>
      <memberdef kind="friend" id="structgraphene_1_1db_1_1object__id_1a76f95dba42e9e8b7a15f280431f1e5c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const object_id_type &amp;a, const object_id &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structgraphene_1_1db_1_1object__id__type" kindref="compound">object_id_type</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1db_1_1object__id" kindref="compound">object_id</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/object_id.hpp" line="135" column="1" bodyfile="libraries/protocol/include/graphene/protocol/object_id.hpp" bodystart="135" bodyend="135"/>
      </memberdef>
      <memberdef kind="friend" id="structgraphene_1_1db_1_1object__id_1a135eb0e47e9feea559c581590b7027fa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const object_id &amp;a, const object_id_type &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structgraphene_1_1db_1_1object__id" kindref="compound">object_id</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1db_1_1object__id__type" kindref="compound">object_id_type</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/object_id.hpp" line="136" column="1" bodyfile="libraries/protocol/include/graphene/protocol/object_id.hpp" bodystart="136" bodyend="136"/>
      </memberdef>
      <memberdef kind="friend" id="structgraphene_1_1db_1_1object__id_1a3076a00151da1b3a54bbf8af6e1554b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const object_id &amp;a, const object_id_type &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structgraphene_1_1db_1_1object__id" kindref="compound">object_id</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1db_1_1object__id__type" kindref="compound">object_id_type</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/object_id.hpp" line="137" column="1" bodyfile="libraries/protocol/include/graphene/protocol/object_id.hpp" bodystart="137" bodyend="137"/>
      </memberdef>
      <memberdef kind="friend" id="structgraphene_1_1db_1_1object__id_1ad501d74f98506763cfc3417279bf3fb9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const object_id &amp;a, const fc::unsigned_int &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structgraphene_1_1db_1_1object__id" kindref="compound">object_id</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfc_1_1unsigned__int" kindref="compound">fc::unsigned_int</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/object_id.hpp" line="138" column="1" bodyfile="libraries/protocol/include/graphene/protocol/object_id.hpp" bodystart="138" bodyend="138"/>
      </memberdef>
      <memberdef kind="friend" id="structgraphene_1_1db_1_1object__id_1a8807102f694ab6021fdff2f84be49979" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const object_id &amp;a, const fc::unsigned_int &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structgraphene_1_1db_1_1object__id" kindref="compound">object_id</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfc_1_1unsigned__int" kindref="compound">fc::unsigned_int</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/object_id.hpp" line="139" column="1" bodyfile="libraries/protocol/include/graphene/protocol/object_id.hpp" bodystart="139" bodyend="139"/>
      </memberdef>
      <memberdef kind="friend" id="structgraphene_1_1db_1_1object__id_1a3078f680620f65221bcd99cb4c1f4d3c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const fc::unsigned_int &amp;a, const object_id &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structfc_1_1unsigned__int" kindref="compound">fc::unsigned_int</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1db_1_1object__id" kindref="compound">object_id</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/object_id.hpp" line="140" column="1" bodyfile="libraries/protocol/include/graphene/protocol/object_id.hpp" bodystart="140" bodyend="140"/>
      </memberdef>
      <memberdef kind="friend" id="structgraphene_1_1db_1_1object__id_1aa7905ce0d9109236c8600dd6db15bf1b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const fc::unsigned_int &amp;a, const object_id &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structfc_1_1unsigned__int" kindref="compound">fc::unsigned_int</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1db_1_1object__id" kindref="compound">object_id</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/object_id.hpp" line="141" column="1" bodyfile="libraries/protocol/include/graphene/protocol/object_id.hpp" bodystart="141" bodyend="141"/>
      </memberdef>
      <memberdef kind="friend" id="structgraphene_1_1db_1_1object__id_1a62b36919a827bb8fee7435c602eae0ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const object_id &amp;a, const object_id &amp;b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="structgraphene_1_1db_1_1object__id" kindref="compound">object_id</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1db_1_1object__id" kindref="compound">object_id</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/object_id.hpp" line="143" column="1" bodyfile="libraries/protocol/include/graphene/protocol/object_id.hpp" bodystart="143" bodyend="143"/>
      </memberdef>
      <memberdef kind="friend" id="structgraphene_1_1db_1_1object__id_1adeaa6563b141bebb9045147876c68eb0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const object_id &amp;a, const object_id &amp;b)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="structgraphene_1_1db_1_1object__id" kindref="compound">object_id</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1db_1_1object__id" kindref="compound">object_id</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/object_id.hpp" line="144" column="1" bodyfile="libraries/protocol/include/graphene/protocol/object_id.hpp" bodystart="144" bodyend="144"/>
      </memberdef>
      <memberdef kind="friend" id="structgraphene_1_1db_1_1object__id_1ab3d40a0856870104fdfe009c1ce9dcc0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend size_t</type>
        <definition>size_t hash_value</definition>
        <argsstring>(object_id v)</argsstring>
        <name>hash_value</name>
        <param>
          <type><ref refid="structgraphene_1_1db_1_1object__id" kindref="compound">object_id</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/object_id.hpp" line="146" column="1" bodyfile="libraries/protocol/include/graphene/protocol/object_id.hpp" bodystart="146" bodyend="146"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="5190">
        <label>graphene::db::object_id&lt; SpaceID, TypeID &gt;</label>
        <link refid="structgraphene_1_1db_1_1object__id"/>
        <childnode refid="5191" relation="usage">
          <edgelabel>instance</edgelabel>
        </childnode>
      </node>
      <node id="5191">
        <label>fc::unsigned_int</label>
        <link refid="structfc_1_1unsigned__int"/>
      </node>
    </collaborationgraph>
    <location file="libraries/protocol/include/graphene/protocol/object_id.hpp" line="109" column="1" bodyfile="libraries/protocol/include/graphene/protocol/object_id.hpp" bodystart="108" bodyend="149"/>
    <listofallmembers>
      <member refid="structgraphene_1_1db_1_1object__id_1ab3d40a0856870104fdfe009c1ce9dcc0" prot="public" virt="non-virtual"><scope>graphene::db::object_id</scope><name>hash_value</name></member>
      <member refid="structgraphene_1_1db_1_1object__id_1a53a17baa085becb05f84b6d0d4bbe6bb" prot="public" virt="non-virtual"><scope>graphene::db::object_id</scope><name>instance</name></member>
      <member refid="structgraphene_1_1db_1_1object__id_1a0400f4c7262bcc18db2540e772575688" prot="public" virt="non-virtual"><scope>graphene::db::object_id</scope><name>object_id</name></member>
      <member refid="structgraphene_1_1db_1_1object__id_1ad5943d0bd30b5d9f076512cd4e57c6b6" prot="public" virt="non-virtual"><scope>graphene::db::object_id</scope><name>object_id</name></member>
      <member refid="structgraphene_1_1db_1_1object__id_1a895631113eb336e17c90dc93cc3e3daa" prot="public" virt="non-virtual"><scope>graphene::db::object_id</scope><name>object_id</name></member>
      <member refid="structgraphene_1_1db_1_1object__id_1ac809dee8a18e715f93ac8b2a7da98933" prot="public" virt="non-virtual"><scope>graphene::db::object_id</scope><name>object_id</name></member>
      <member refid="structgraphene_1_1db_1_1object__id_1a8df9301d9a67076441193ab27d25c553" prot="public" virt="non-virtual"><scope>graphene::db::object_id</scope><name>operator object_id_type</name></member>
      <member refid="structgraphene_1_1db_1_1object__id_1a23637857483ec1f3298d88e05ba59216" prot="public" virt="non-virtual"><scope>graphene::db::object_id</scope><name>operator uint64_t</name></member>
      <member refid="structgraphene_1_1db_1_1object__id_1a2646ece2da1f0354b4676a2f4278a808" prot="public" virt="non-virtual"><scope>graphene::db::object_id</scope><name>operator!=</name></member>
      <member refid="structgraphene_1_1db_1_1object__id_1a76f95dba42e9e8b7a15f280431f1e5c5" prot="public" virt="non-virtual"><scope>graphene::db::object_id</scope><name>operator!=</name></member>
      <member refid="structgraphene_1_1db_1_1object__id_1a3076a00151da1b3a54bbf8af6e1554b0" prot="public" virt="non-virtual"><scope>graphene::db::object_id</scope><name>operator!=</name></member>
      <member refid="structgraphene_1_1db_1_1object__id_1a8807102f694ab6021fdff2f84be49979" prot="public" virt="non-virtual"><scope>graphene::db::object_id</scope><name>operator!=</name></member>
      <member refid="structgraphene_1_1db_1_1object__id_1aa7905ce0d9109236c8600dd6db15bf1b" prot="public" virt="non-virtual"><scope>graphene::db::object_id</scope><name>operator!=</name></member>
      <member refid="structgraphene_1_1db_1_1object__id_1a0bea414b63c8fce930285cea4ebfff6f" prot="public" virt="non-virtual"><scope>graphene::db::object_id</scope><name>operator()</name></member>
      <member refid="structgraphene_1_1db_1_1object__id_1aad102997c355554fc0a4a8f838545e70" prot="public" virt="non-virtual"><scope>graphene::db::object_id</scope><name>operator+</name></member>
      <member refid="structgraphene_1_1db_1_1object__id_1a77a5c326c5581fc1a330a52930c05bf4" prot="public" virt="non-virtual"><scope>graphene::db::object_id</scope><name>operator+</name></member>
      <member refid="structgraphene_1_1db_1_1object__id_1a62b36919a827bb8fee7435c602eae0ae" prot="public" virt="non-virtual"><scope>graphene::db::object_id</scope><name>operator&lt;</name></member>
      <member refid="structgraphene_1_1db_1_1object__id_1aebba02f184be13c3c9d546a52905019d" prot="public" virt="non-virtual"><scope>graphene::db::object_id</scope><name>operator==</name></member>
      <member refid="structgraphene_1_1db_1_1object__id_1a7e09aa7e3c6853b66d32f85b54ee7917" prot="public" virt="non-virtual"><scope>graphene::db::object_id</scope><name>operator==</name></member>
      <member refid="structgraphene_1_1db_1_1object__id_1a135eb0e47e9feea559c581590b7027fa" prot="public" virt="non-virtual"><scope>graphene::db::object_id</scope><name>operator==</name></member>
      <member refid="structgraphene_1_1db_1_1object__id_1ad501d74f98506763cfc3417279bf3fb9" prot="public" virt="non-virtual"><scope>graphene::db::object_id</scope><name>operator==</name></member>
      <member refid="structgraphene_1_1db_1_1object__id_1a3078f680620f65221bcd99cb4c1f4d3c" prot="public" virt="non-virtual"><scope>graphene::db::object_id</scope><name>operator==</name></member>
      <member refid="structgraphene_1_1db_1_1object__id_1adeaa6563b141bebb9045147876c68eb0" prot="public" virt="non-virtual"><scope>graphene::db::object_id</scope><name>operator&gt;</name></member>
      <member refid="structgraphene_1_1db_1_1object__id_1af2acbad0bbf47bab71417ee49a774917" prot="public" virt="non-virtual"><scope>graphene::db::object_id</scope><name>space_id</name></member>
      <member refid="structgraphene_1_1db_1_1object__id_1a05e977a498b0bf18ce72e9d13a3ab76e" prot="public" virt="non-virtual"><scope>graphene::db::object_id</scope><name>type_id</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
