<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structfc_1_1safe" kind="struct" language="C++" prot="public">
    <compoundname>fc::safe</compoundname>
    <includes refid="safe_8hpp" local="no">safe.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structfc_1_1safe_1a6bb99e2058adab1fef1f6b9df91006c9" prot="public" static="no" mutable="no">
        <type>T</type>
        <definition>T fc::safe&lt; T &gt;::value</definition>
        <argsstring></argsstring>
        <name>value</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="22" column="1" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structfc_1_1safe_1a3368d162e9ba745605f74388dcd09221" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename O</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>fc::safe&lt; T &gt;::safe</definition>
        <argsstring>(O o)</argsstring>
        <name>safe</name>
        <param>
          <type>O</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="25" column="1" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="25" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="structfc_1_1safe_1a0b51e416de36642cc04f6bca6ea87f67" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>fc::safe&lt; T &gt;::safe</definition>
        <argsstring>()</argsstring>
        <name>safe</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="26" column="1" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="26" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="structfc_1_1safe_1a64f665fd326571b5276dec9f57766da6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>fc::safe&lt; T &gt;::safe</definition>
        <argsstring>(const safe &amp;o)</argsstring>
        <name>safe</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="27" column="1" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="27" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="structfc_1_1safe_1a616c63b4c91c615a74c1d545d6b20a56" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfc_1_1safe" kindref="compound">safe</ref></type>
        <definition>safe fc::safe&lt; T &gt;::operator-</definition>
        <argsstring>() const</argsstring>
        <name>operator-</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="92" column="1" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="92" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="structfc_1_1safe_1a25e4c7a4c87c1186e0032541f223aeb4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
        <definition>safe&amp; fc::safe&lt; T &gt;::operator+=</definition>
        <argsstring>(const safe &amp;b)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="98" column="1" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="98" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="structfc_1_1safe_1a1494539bb9d6fa9204d38b776a36fe07" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
        <definition>safe&amp; fc::safe&lt; T &gt;::operator-=</definition>
        <argsstring>(const safe &amp;b)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="103" column="1" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="103" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="structfc_1_1safe_1a0657fe2766175a3bebdce27df39d05b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
        <definition>safe&amp; fc::safe&lt; T &gt;::operator*=</definition>
        <argsstring>(const safe &amp;b)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="108" column="1" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="108" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="structfc_1_1safe_1af4e60fa3a585c1dcb5dd96b43d09dc01" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
        <definition>safe&amp; fc::safe&lt; T &gt;::operator/=</definition>
        <argsstring>(const safe &amp;b)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="113" column="1" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="113" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="structfc_1_1safe_1aa7cbd15964373b0131abf421074cbd71" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
        <definition>safe&amp; fc::safe&lt; T &gt;::operator%=</definition>
        <argsstring>(const safe &amp;b)</argsstring>
        <name>operator%=</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="118" column="1" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="118" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="structfc_1_1safe_1af1c879152b3d86f7e30a706555268b2c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
        <definition>safe&amp; fc::safe&lt; T &gt;::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="124" column="1" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="124" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="structfc_1_1safe_1afb19032269d97385e234e770939508b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfc_1_1safe" kindref="compound">safe</ref></type>
        <definition>safe fc::safe&lt; T &gt;::operator++</definition>
        <argsstring>(int)</argsstring>
        <name>operator++</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="129" column="1" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="129" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="structfc_1_1safe_1a05d910ac6feda1016cfa2f98edc0ee00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
        <definition>safe&amp; fc::safe&lt; T &gt;::operator--</definition>
        <argsstring>()</argsstring>
        <name>operator--</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="136" column="1" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="136" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="structfc_1_1safe_1a9a4c3650a4eb50d58381a1b23d66ff8f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfc_1_1safe" kindref="compound">safe</ref></type>
        <definition>safe fc::safe&lt; T &gt;::operator--</definition>
        <argsstring>(int)</argsstring>
        <name>operator--</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="141" column="1" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="141" bodyend="146"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structfc_1_1safe_1a3eafe53e9cd7ec5000330daf0fbe1bf1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structfc_1_1safe" kindref="compound">safe</ref></type>
        <definition>static constexpr safe fc::safe&lt; T &gt;::min</definition>
        <argsstring>()</argsstring>
        <name>min</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="29" column="1" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="29" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="structfc_1_1safe_1a85ed8df0fb161bec11e6c374bc1cb702" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structfc_1_1safe" kindref="compound">safe</ref></type>
        <definition>static constexpr safe fc::safe&lt; T &gt;::max</definition>
        <argsstring>()</argsstring>
        <name>max</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="33" column="1" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="33" bodyend="36"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structfc_1_1safe_1a73925fc0d0bee9b4c5e5120c38105aa9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="structfc_1_1safe" kindref="compound">safe</ref></type>
        <definition>safe operator+</definition>
        <argsstring>(const safe &amp;a, const safe &amp;b)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="38" column="1" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="38" bodyend="43"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1a207f3bc22ef71357cec46322252fd35c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="structfc_1_1safe" kindref="compound">safe</ref></type>
        <definition>safe operator-</definition>
        <argsstring>(const safe &amp;a, const safe &amp;b)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="44" column="1" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="44" bodyend="49"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1a2bcc04a45f973728648f7e774338372a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="structfc_1_1safe" kindref="compound">safe</ref></type>
        <definition>safe operator*</definition>
        <argsstring>(const safe &amp;a, const safe &amp;b)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="51" column="1" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="51" bodyend="77"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1ae2d595f8e0727205d2bf1de5a3794d84" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="structfc_1_1safe" kindref="compound">safe</ref></type>
        <definition>safe operator/</definition>
        <argsstring>(const safe &amp;a, const safe &amp;b)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="79" column="1" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="79" bodyend="84"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1a1719fbdac240b537e660a085dc1b5a16" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="structfc_1_1safe" kindref="compound">safe</ref></type>
        <definition>safe operator%</definition>
        <argsstring>(const safe &amp;a, const safe &amp;b)</argsstring>
        <name>operator%</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="85" column="1" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="85" bodyend="90"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1a2c9bfcc98dc3983a839601190a4c9290" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const safe &amp;a, const safe &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="148" column="1" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="148" bodyend="151"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1a7b18b4c7d028784540c51a35b996e710" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const safe &amp;a, const T &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="152" column="1" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="152" bodyend="155"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1a3aa839b75f9862a37cf951b1376eed31" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const T &amp;a, const safe &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="156" column="1" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="156" bodyend="159"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1aa9804000cf7ba52e2de6a3ead10ac2bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const safe &amp;a, const safe &amp;b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="161" column="1" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="161" bodyend="164"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1a89778e64dffc568b1a8f9cb11777666c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const safe &amp;a, const T &amp;b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="165" column="1" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="165" bodyend="168"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1a4ba7542d3ea31c786a4899c03bfdfb44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const T &amp;a, const safe &amp;b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="169" column="1" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="169" bodyend="172"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1a1ef40780fa4629bc15d048bb49dba951" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const safe &amp;a, const safe &amp;b)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="174" column="1" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="174" bodyend="177"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1a4dca5b6d2ee3378f122fd138bbbb3dce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const safe &amp;a, const T &amp;b)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="178" column="1" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="178" bodyend="181"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1a2513bbb42989b9f231585c66954d9c8d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const T &amp;a, const safe &amp;b)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="182" column="1" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="182" bodyend="185"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1a3981463f6c2ca6ae699a2dca23d05124" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const safe &amp;a, const safe &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="187" column="1" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="187" bodyend="190"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1aaf714ca3359bd958c5e8ced42261367b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const safe &amp;a, const T &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="191" column="1" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="191" bodyend="194"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1abc6a80900d34d01237b981ea976c94a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const T &amp;a, const safe &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="195" column="1" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="195" bodyend="198"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1ad6e5d8dbdd72dd886d8f3d443d609da2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const safe &amp;a, const safe &amp;b)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="200" column="1" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="200" bodyend="203"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1ac87420c99a5943becf8d87698d66d098" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const safe &amp;a, const T &amp;b)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="204" column="1" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="204" bodyend="207"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1ab81d1595f3d294ba014c1e2f7aead60a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const T &amp;a, const safe &amp;b)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="208" column="1" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="208" bodyend="211"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1a67037c5c209828dc12e923644d4d2e03" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const safe &amp;a, const safe &amp;b)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="213" column="1" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="213" bodyend="216"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1ae7ccb784e35f52b730c30e1cf843568a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const safe &amp;a, const T &amp;b)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="217" column="1" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="217" bodyend="220"/>
      </memberdef>
      <memberdef kind="friend" id="structfc_1_1safe_1a2e44c2248e439e3566908ae7c5898b86" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const T &amp;a, const safe &amp;b)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/safe.hpp" line="221" column="1" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="221" bodyend="224"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This type is designed to provide automatic checks for integer overflow and default initialization. It will throw an exception on overflow conditions.</para><para>It can only be used on built-in types.</para><para>Implemented using spec from: <ulink url="https://www.securecoding.cert.org/confluence/display/c/INT32-C.+Ensure+that+operations+on+signed+integers+do+not+result+in+overflow">https://www.securecoding.cert.org/confluence/display/c/INT32-C.+Ensure+that+operations+on+signed+integers+do+not+result+in+overflow</ulink> </para>    </detaileddescription>
    <collaborationgraph>
      <node id="6891">
        <label>T</label>
      </node>
      <node id="6890">
        <label>fc::safe&lt; T &gt;</label>
        <link refid="structfc_1_1safe"/>
        <childnode refid="6891" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="libraries/fc/include/fc/safe.hpp" line="21" column="1" bodyfile="libraries/fc/include/fc/safe.hpp" bodystart="20" bodyend="225"/>
    <listofallmembers>
      <member refid="structfc_1_1safe_1a85ed8df0fb161bec11e6c374bc1cb702" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>max</name></member>
      <member refid="structfc_1_1safe_1a3eafe53e9cd7ec5000330daf0fbe1bf1" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>min</name></member>
      <member refid="structfc_1_1safe_1a3981463f6c2ca6ae699a2dca23d05124" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator!=</name></member>
      <member refid="structfc_1_1safe_1aaf714ca3359bd958c5e8ced42261367b" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator!=</name></member>
      <member refid="structfc_1_1safe_1abc6a80900d34d01237b981ea976c94a8" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator!=</name></member>
      <member refid="structfc_1_1safe_1a1719fbdac240b537e660a085dc1b5a16" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator%</name></member>
      <member refid="structfc_1_1safe_1aa7cbd15964373b0131abf421074cbd71" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator%=</name></member>
      <member refid="structfc_1_1safe_1a2bcc04a45f973728648f7e774338372a" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator*</name></member>
      <member refid="structfc_1_1safe_1a0657fe2766175a3bebdce27df39d05b3" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator*=</name></member>
      <member refid="structfc_1_1safe_1a73925fc0d0bee9b4c5e5120c38105aa9" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator+</name></member>
      <member refid="structfc_1_1safe_1af1c879152b3d86f7e30a706555268b2c" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator++</name></member>
      <member refid="structfc_1_1safe_1afb19032269d97385e234e770939508b8" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator++</name></member>
      <member refid="structfc_1_1safe_1a25e4c7a4c87c1186e0032541f223aeb4" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator+=</name></member>
      <member refid="structfc_1_1safe_1a207f3bc22ef71357cec46322252fd35c" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator-</name></member>
      <member refid="structfc_1_1safe_1a616c63b4c91c615a74c1d545d6b20a56" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator-</name></member>
      <member refid="structfc_1_1safe_1a05d910ac6feda1016cfa2f98edc0ee00" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator--</name></member>
      <member refid="structfc_1_1safe_1a9a4c3650a4eb50d58381a1b23d66ff8f" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator--</name></member>
      <member refid="structfc_1_1safe_1a1494539bb9d6fa9204d38b776a36fe07" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator-=</name></member>
      <member refid="structfc_1_1safe_1ae2d595f8e0727205d2bf1de5a3794d84" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator/</name></member>
      <member refid="structfc_1_1safe_1af4e60fa3a585c1dcb5dd96b43d09dc01" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator/=</name></member>
      <member refid="structfc_1_1safe_1aa9804000cf7ba52e2de6a3ead10ac2bf" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator&lt;</name></member>
      <member refid="structfc_1_1safe_1a89778e64dffc568b1a8f9cb11777666c" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator&lt;</name></member>
      <member refid="structfc_1_1safe_1a4ba7542d3ea31c786a4899c03bfdfb44" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator&lt;</name></member>
      <member refid="structfc_1_1safe_1ad6e5d8dbdd72dd886d8f3d443d609da2" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator&lt;=</name></member>
      <member refid="structfc_1_1safe_1ac87420c99a5943becf8d87698d66d098" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator&lt;=</name></member>
      <member refid="structfc_1_1safe_1ab81d1595f3d294ba014c1e2f7aead60a" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator&lt;=</name></member>
      <member refid="structfc_1_1safe_1a2c9bfcc98dc3983a839601190a4c9290" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator==</name></member>
      <member refid="structfc_1_1safe_1a7b18b4c7d028784540c51a35b996e710" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator==</name></member>
      <member refid="structfc_1_1safe_1a3aa839b75f9862a37cf951b1376eed31" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator==</name></member>
      <member refid="structfc_1_1safe_1a1ef40780fa4629bc15d048bb49dba951" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator&gt;</name></member>
      <member refid="structfc_1_1safe_1a4dca5b6d2ee3378f122fd138bbbb3dce" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator&gt;</name></member>
      <member refid="structfc_1_1safe_1a2513bbb42989b9f231585c66954d9c8d" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator&gt;</name></member>
      <member refid="structfc_1_1safe_1a67037c5c209828dc12e923644d4d2e03" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator&gt;=</name></member>
      <member refid="structfc_1_1safe_1ae7ccb784e35f52b730c30e1cf843568a" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator&gt;=</name></member>
      <member refid="structfc_1_1safe_1a2e44c2248e439e3566908ae7c5898b86" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>operator&gt;=</name></member>
      <member refid="structfc_1_1safe_1a3368d162e9ba745605f74388dcd09221" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>safe</name></member>
      <member refid="structfc_1_1safe_1a0b51e416de36642cc04f6bca6ea87f67" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>safe</name></member>
      <member refid="structfc_1_1safe_1a64f665fd326571b5276dec9f57766da6" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>safe</name></member>
      <member refid="structfc_1_1safe_1a6bb99e2058adab1fef1f6b9df91006c9" prot="public" virt="non-virtual"><scope>fc::safe</scope><name>value</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
