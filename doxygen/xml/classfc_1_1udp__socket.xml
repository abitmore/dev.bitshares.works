<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classfc_1_1udp__socket" kind="class" language="C++" prot="public">
    <compoundname>fc::udp_socket</compoundname>
    <includes refid="udp__socket_8hpp" local="no">udp_socket.hpp</includes>
    <innerclass refid="classfc_1_1udp__socket_1_1impl" prot="public">fc::udp_socket::impl</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classfc_1_1udp__socket_1a7c80aaacff781bc9ed10819267a84a92" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classfc_1_1udp__socket_1_1impl" kindref="compound">impl</ref> &gt;</type>
        <definition>std::shared_ptr&lt;impl&gt; fc::udp_socket::my</definition>
        <argsstring></argsstring>
        <name>my</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/udp_socket.hpp" line="38" column="1" bodyfile="libraries/fc/include/fc/network/udp_socket.hpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classfc_1_1udp__socket_1a2df5a8406c77e5e10e102b47eff97038" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::udp_socket::udp_socket</definition>
        <argsstring>()</argsstring>
        <name>udp_socket</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/udp_socket.hpp" line="16" column="1" bodyfile="libraries/fc/src/network/udp_socket.cpp" bodystart="26" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1udp__socket_1a9ff80cf2ec65a3c887f8e00e79cf8f98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::udp_socket::udp_socket</definition>
        <argsstring>(const udp_socket &amp;s)</argsstring>
        <name>udp_socket</name>
        <param>
          <type>const <ref refid="classfc_1_1udp__socket" kindref="compound">udp_socket</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/udp_socket.hpp" line="17" column="1" bodyfile="libraries/fc/src/network/udp_socket.cpp" bodystart="31" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1udp__socket_1af8942060d2c3b249d63c93d56ba7d6d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::udp_socket::~udp_socket</definition>
        <argsstring>()</argsstring>
        <name>~udp_socket</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/udp_socket.hpp" line="18" column="1" bodyfile="libraries/fc/src/network/udp_socket.cpp" bodystart="36" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1udp__socket_1ae38731361b74a2841f4691066ac31d86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::udp_socket::open</definition>
        <argsstring>()</argsstring>
        <name>open</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/udp_socket.hpp" line="20" column="1" bodyfile="libraries/fc/src/network/udp_socket.cpp" bodystart="86" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1udp__socket_1afc2448acb1b90f15e1298e0e009f94c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::udp_socket::set_receive_buffer_size</definition>
        <argsstring>(size_t s)</argsstring>
        <name>set_receive_buffer_size</name>
        <param>
          <type>size_t</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/udp_socket.hpp" line="21" column="1" bodyfile="libraries/fc/src/network/udp_socket.cpp" bodystart="90" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1udp__socket_1ace137ccd6a7ac2a371e0281bfd71a1f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::udp_socket::bind</definition>
        <argsstring>(const fc::ip::endpoint &amp;)</argsstring>
        <name>bind</name>
        <param>
          <type>const <ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">fc::ip::endpoint</ref> &amp;</type>
          <defname>e</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/udp_socket.hpp" line="22" column="1" bodyfile="libraries/fc/src/network/udp_socket.cpp" bodystart="93" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1udp__socket_1adfd1af34d787f25c015d6c4ce86b87a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t fc::udp_socket::receive_from</definition>
        <argsstring>(char *b, size_t l, fc::ip::endpoint &amp;from)</argsstring>
        <name>receive_from</name>
        <param>
          <type>char *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>l</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">fc::ip::endpoint</ref> &amp;</type>
          <declname>from</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/udp_socket.hpp" line="23" column="1" bodyfile="libraries/fc/src/network/udp_socket.cpp" bodystart="123" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1udp__socket_1a588bdafaf59724e214f52a2eaa248562" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t fc::udp_socket::receive_from</definition>
        <argsstring>(const std::shared_ptr&lt; char &gt; &amp;b, size_t l, fc::ip::endpoint &amp;from)</argsstring>
        <name>receive_from</name>
        <param>
          <type>const std::shared_ptr&lt; char &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>l</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">fc::ip::endpoint</ref> &amp;</type>
          <declname>from</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/udp_socket.hpp" line="24" column="1" bodyfile="libraries/fc/src/network/udp_socket.cpp" bodystart="97" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1udp__socket_1ab7cd06061f0aa4169408a7c5e3823f71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t fc::udp_socket::send_to</definition>
        <argsstring>(const char *b, size_t l, const fc::ip::endpoint &amp;to)</argsstring>
        <name>send_to</name>
        <param>
          <type>const char *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">fc::ip::endpoint</ref> &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/udp_socket.hpp" line="25" column="1" bodyfile="libraries/fc/src/network/udp_socket.cpp" bodystart="47" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1udp__socket_1a8db81615815d39c2eccce14f6d3529e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t fc::udp_socket::send_to</definition>
        <argsstring>(const std::shared_ptr&lt; const char &gt; &amp;b, size_t l, const fc::ip::endpoint &amp;to)</argsstring>
        <name>send_to</name>
        <param>
          <type>const std::shared_ptr&lt; const char &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">fc::ip::endpoint</ref> &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/udp_socket.hpp" line="26" column="1" bodyfile="libraries/fc/src/network/udp_socket.cpp" bodystart="66" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1udp__socket_1a7be64e6fda2524b07192ca354559bbcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::udp_socket::close</definition>
        <argsstring>()</argsstring>
        <name>close</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/udp_socket.hpp" line="27" column="1" bodyfile="libraries/fc/src/network/udp_socket.cpp" bodystart="148" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1udp__socket_1af659dd96c75553d1d2005f41a678ac52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::udp_socket::set_multicast_enable_loopback</definition>
        <argsstring>(bool)</argsstring>
        <name>set_multicast_enable_loopback</name>
        <param>
          <type>bool</type>
          <defname>s</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/udp_socket.hpp" line="29" column="1" bodyfile="libraries/fc/src/network/udp_socket.cpp" bodystart="160" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1udp__socket_1a65856d35d2beda8da40ab9f916705f21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::udp_socket::set_reuse_address</definition>
        <argsstring>(bool)</argsstring>
        <name>set_reuse_address</name>
        <param>
          <type>bool</type>
          <defname>s</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/udp_socket.hpp" line="30" column="1" bodyfile="libraries/fc/src/network/udp_socket.cpp" bodystart="164" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1udp__socket_1ae7240295b2b6eaad34f1d60fce441291" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::udp_socket::join_multicast_group</definition>
        <argsstring>(const fc::ip::address &amp;a)</argsstring>
        <name>join_multicast_group</name>
        <param>
          <type>const <ref refid="classfc_1_1ip_1_1address" kindref="compound">fc::ip::address</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/udp_socket.hpp" line="31" column="1" bodyfile="libraries/fc/src/network/udp_socket.cpp" bodystart="168" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1udp__socket_1a4b075eefe239086d4900d38aad6b631c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::udp_socket::connect</definition>
        <argsstring>(const fc::ip::endpoint &amp;e)</argsstring>
        <name>connect</name>
        <param>
          <type>const <ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">fc::ip::endpoint</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/udp_socket.hpp" line="33" column="1" bodyfile="libraries/fc/src/network/udp_socket.cpp" bodystart="156" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1udp__socket_1a588c953196ccceab9347d62f1ea6ae8f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">fc::ip::endpoint</ref></type>
        <definition>fc::ip::endpoint fc::udp_socket::local_endpoint</definition>
        <argsstring>() const</argsstring>
        <name>local_endpoint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/udp_socket.hpp" line="34" column="1" bodyfile="libraries/fc/src/network/udp_socket.cpp" bodystart="153" bodyend="155"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="classfc_1_1udp__socket" kindref="compound">udp_socket</ref> class has reference semantics, all copies will refer to the same underlying socket. </para>    </detaileddescription>
    <location file="libraries/fc/include/fc/network/udp_socket.hpp" line="14" column="1" bodyfile="libraries/fc/include/fc/network/udp_socket.hpp" bodystart="14" bodyend="39"/>
    <listofallmembers>
      <member refid="classfc_1_1udp__socket_1ace137ccd6a7ac2a371e0281bfd71a1f7" prot="public" virt="non-virtual"><scope>fc::udp_socket</scope><name>bind</name></member>
      <member refid="classfc_1_1udp__socket_1a7be64e6fda2524b07192ca354559bbcd" prot="public" virt="non-virtual"><scope>fc::udp_socket</scope><name>close</name></member>
      <member refid="classfc_1_1udp__socket_1a4b075eefe239086d4900d38aad6b631c" prot="public" virt="non-virtual"><scope>fc::udp_socket</scope><name>connect</name></member>
      <member refid="classfc_1_1udp__socket_1ae7240295b2b6eaad34f1d60fce441291" prot="public" virt="non-virtual"><scope>fc::udp_socket</scope><name>join_multicast_group</name></member>
      <member refid="classfc_1_1udp__socket_1a588c953196ccceab9347d62f1ea6ae8f" prot="public" virt="non-virtual"><scope>fc::udp_socket</scope><name>local_endpoint</name></member>
      <member refid="classfc_1_1udp__socket_1a7c80aaacff781bc9ed10819267a84a92" prot="private" virt="non-virtual"><scope>fc::udp_socket</scope><name>my</name></member>
      <member refid="classfc_1_1udp__socket_1ae38731361b74a2841f4691066ac31d86" prot="public" virt="non-virtual"><scope>fc::udp_socket</scope><name>open</name></member>
      <member refid="classfc_1_1udp__socket_1adfd1af34d787f25c015d6c4ce86b87a9" prot="public" virt="non-virtual"><scope>fc::udp_socket</scope><name>receive_from</name></member>
      <member refid="classfc_1_1udp__socket_1a588bdafaf59724e214f52a2eaa248562" prot="public" virt="non-virtual"><scope>fc::udp_socket</scope><name>receive_from</name></member>
      <member refid="classfc_1_1udp__socket_1ab7cd06061f0aa4169408a7c5e3823f71" prot="public" virt="non-virtual"><scope>fc::udp_socket</scope><name>send_to</name></member>
      <member refid="classfc_1_1udp__socket_1a8db81615815d39c2eccce14f6d3529e8" prot="public" virt="non-virtual"><scope>fc::udp_socket</scope><name>send_to</name></member>
      <member refid="classfc_1_1udp__socket_1af659dd96c75553d1d2005f41a678ac52" prot="public" virt="non-virtual"><scope>fc::udp_socket</scope><name>set_multicast_enable_loopback</name></member>
      <member refid="classfc_1_1udp__socket_1afc2448acb1b90f15e1298e0e009f94c1" prot="public" virt="non-virtual"><scope>fc::udp_socket</scope><name>set_receive_buffer_size</name></member>
      <member refid="classfc_1_1udp__socket_1a65856d35d2beda8da40ab9f916705f21" prot="public" virt="non-virtual"><scope>fc::udp_socket</scope><name>set_reuse_address</name></member>
      <member refid="classfc_1_1udp__socket_1a2df5a8406c77e5e10e102b47eff97038" prot="public" virt="non-virtual"><scope>fc::udp_socket</scope><name>udp_socket</name></member>
      <member refid="classfc_1_1udp__socket_1a9ff80cf2ec65a3c887f8e00e79cf8f98" prot="public" virt="non-virtual"><scope>fc::udp_socket</scope><name>udp_socket</name></member>
      <member refid="classfc_1_1udp__socket_1af8942060d2c3b249d63c93d56ba7d6d8" prot="public" virt="non-virtual"><scope>fc::udp_socket</scope><name>~udp_socket</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
