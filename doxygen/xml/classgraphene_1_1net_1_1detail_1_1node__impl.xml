<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classgraphene_1_1net_1_1detail_1_1node__impl" kind="class" language="C++" prot="public">
    <compoundname>graphene::net::detail::node_impl</compoundname>
    <basecompoundref refid="classgraphene_1_1net_1_1peer__connection__delegate" prot="public" virt="non-virtual">graphene::net::peer_connection_delegate</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">std::enable_shared_from_this&lt; node_impl &gt;</basecompoundref>
    <includes refid="node__impl_8hxx" local="no">node_impl.hxx</includes>
    <innerclass refid="classgraphene_1_1net_1_1detail_1_1node__impl_1_1address__builder" prot="public">graphene::net::detail::node_impl::address_builder</innerclass>
    <innerclass refid="structgraphene_1_1net_1_1detail_1_1node__impl_1_1item__id__index" prot="public">graphene::net::detail::node_impl::item_id_index</innerclass>
      <sectiondef kind="user-defined">
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1ac09b1d2d1c41d8bb1ca3be00472d64aa" prot="public" static="no" mutable="no">
        <type>std::list&lt; <ref refid="structgraphene_1_1net_1_1potential__peer__record" kindref="compound">potential_peer_record</ref> &gt;</type>
        <definition>std::list&lt;potential_peer_record&gt; graphene::net::detail::node_impl::_add_once_node_list</definition>
        <argsstring></argsstring>
        <name>_add_once_node_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Used by the task that manages connecting to peers</para><para>List of peers we want to connect to as soon as possible </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="444" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="444" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1aa8ada12cb58e5daf25f602460d43fff8" prot="public" static="no" mutable="no">
        <type><ref refid="classgraphene_1_1net_1_1peer__database" kindref="compound">peer_database</ref></type>
        <definition>peer_database graphene::net::detail::node_impl::_potential_peer_db</definition>
        <argsstring></argsstring>
        <name>_potential_peer_db</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="446" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="446" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a476a6cef3af0bfe3c6167b0353dda5fc" prot="public" static="no" mutable="no">
        <type><ref refid="classfc_1_1promise" kindref="compound">fc::promise</ref>&lt; void &gt;::ptr</type>
        <definition>fc::promise&lt;void&gt;::ptr graphene::net::detail::node_impl::_retrigger_connect_loop_promise</definition>
        <argsstring></argsstring>
        <name>_retrigger_connect_loop_promise</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="447" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="447" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a7eb7f04fb025395c3d4a999c34578628" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool graphene::net::detail::node_impl::_potential_peer_db_updated</definition>
        <argsstring></argsstring>
        <name>_potential_peer_db_updated</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="448" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="448" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1ae106eda08a4cd7724c61cfaffe534ced" prot="public" static="no" mutable="no">
        <type><ref refid="classfc_1_1future" kindref="compound">fc::future</ref>&lt; void &gt;</type>
        <definition>fc::future&lt;void&gt; graphene::net::detail::node_impl::_p2p_network_connect_loop_done</definition>
        <argsstring></argsstring>
        <name>_p2p_network_connect_loop_done</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="449" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="449" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="typedef" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a95cf3699ddb09456c2f97341fabd3f3b" prot="public" static="no">
        <type>std::unordered_map&lt; graphene::net::block_id_type, <ref refid="classfc_1_1time__point" kindref="compound">fc::time_point</ref> &gt;</type>
        <definition>typedef std::unordered_map&lt;graphene::net::block_id_type, fc::time_point&gt; graphene::net::detail::node_impl::active_sync_requests_map</definition>
        <argsstring></argsstring>
        <name>active_sync_requests_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="458" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="458" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a9083ede1dad0660dd71549d42b5bd692" prot="public" static="no" mutable="no">
        <type><ref refid="classfc_1_1promise" kindref="compound">fc::promise</ref>&lt; void &gt;::ptr</type>
        <definition>fc::promise&lt;void&gt;::ptr graphene::net::detail::node_impl::_retrigger_fetch_sync_items_loop_promise</definition>
        <argsstring></argsstring>
        <name>_retrigger_fetch_sync_items_loop_promise</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Used by the task that fetches sync items during synchronization </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="454" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="454" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1ae39b32fdf34c5134299e1a875fa8f515" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool graphene::net::detail::node_impl::_sync_items_to_fetch_updated</definition>
        <argsstring></argsstring>
        <name>_sync_items_to_fetch_updated</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="455" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="455" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a2694634b1402b197a5a35c87aae32337" prot="public" static="no" mutable="no">
        <type><ref refid="classfc_1_1future" kindref="compound">fc::future</ref>&lt; void &gt;</type>
        <definition>fc::future&lt;void&gt; graphene::net::detail::node_impl::_fetch_sync_items_loop_done</definition>
        <argsstring></argsstring>
        <name>_fetch_sync_items_loop_done</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="456" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="456" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a6392d132d20a0c642b5c7a081b331cac" prot="public" static="no" mutable="no">
        <type><ref refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a95cf3699ddb09456c2f97341fabd3f3b" kindref="member">active_sync_requests_map</ref></type>
        <definition>active_sync_requests_map graphene::net::detail::node_impl::_active_sync_requests</definition>
        <argsstring></argsstring>
        <name>_active_sync_requests</name>
        <briefdescription>
<para>List of sync blocks we&apos;ve asked for from peers but have not yet received. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="461" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="461" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a4b12d39e53e183ac0b85cfffa0a50cc4" prot="public" static="no" mutable="no">
        <type>std::list&lt; <ref refid="structgraphene_1_1net_1_1block__message" kindref="compound">graphene::net::block_message</ref> &gt;</type>
        <definition>std::list&lt;graphene::net::block_message&gt; graphene::net::detail::node_impl::_new_received_sync_items</definition>
        <argsstring></argsstring>
        <name>_new_received_sync_items</name>
        <briefdescription>
<para>List of sync blocks we&apos;ve just received but haven&apos;t yet tried to process. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="463" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="463" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a010080d2736788010acacfeee2ebfebe" prot="public" static="no" mutable="no">
        <type>std::list&lt; <ref refid="structgraphene_1_1net_1_1block__message" kindref="compound">graphene::net::block_message</ref> &gt;</type>
        <definition>std::list&lt;graphene::net::block_message&gt; graphene::net::detail::node_impl::_received_sync_items</definition>
        <argsstring></argsstring>
        <name>_received_sync_items</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>List of sync blocks we&apos;ve received, but can&apos;t yet process because we are still missing blocks that come earlier in the chain </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="466" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="466" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="typedef" id="classgraphene_1_1net_1_1detail_1_1node__impl_1afb490eae8b2d5c08e089f4ef803d1671" prot="public" static="no">
        <type>boost::multi_index_container&lt; <ref refid="structgraphene_1_1net_1_1detail_1_1prioritized__item__id" kindref="compound">prioritized_item_id</ref>, boost::multi_index::indexed_by&lt; boost::multi_index::ordered_unique&lt; boost::multi_index::identity&lt; <ref refid="structgraphene_1_1net_1_1detail_1_1prioritized__item__id" kindref="compound">prioritized_item_id</ref> &gt; &gt;, boost::multi_index::hashed_unique&lt; boost::multi_index::tag&lt; <ref refid="structgraphene_1_1net_1_1detail_1_1node__impl_1_1item__id__index" kindref="compound">item_id_index</ref> &gt;, boost::multi_index::member&lt; <ref refid="structgraphene_1_1net_1_1detail_1_1prioritized__item__id" kindref="compound">prioritized_item_id</ref>, <ref refid="structgraphene_1_1net_1_1item__id" kindref="compound">item_id</ref>, &amp;<ref refid="structgraphene_1_1net_1_1detail_1_1prioritized__item__id_1a3451668a3006b9b82f7ce026558756b7" kindref="member">prioritized_item_id::item</ref> &gt;, std::hash&lt; <ref refid="structgraphene_1_1net_1_1item__id" kindref="compound">item_id</ref> &gt; &gt; &gt; &gt;</type>
        <definition>using graphene::net::detail::node_impl::items_to_fetch_set_type =  boost::multi_index_container&lt; prioritized_item_id, boost::multi_index::indexed_by&lt; boost::multi_index::ordered_unique&lt; boost::multi_index::identity&lt;prioritized_item_id&gt; &gt;, boost::multi_index::hashed_unique&lt; boost::multi_index::tag&lt;item_id_index&gt;, boost::multi_index::member&lt;prioritized_item_id, item_id, &amp;prioritized_item_id::item&gt;, std::hash&lt;item_id&gt; &gt; &gt; &gt;</definition>
        <argsstring></argsstring>
        <name>items_to_fetch_set_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="479" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="488" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a781288bfdcf6a2d64100e93600612562" prot="public" static="no" mutable="no">
        <type><ref refid="classfc_1_1promise" kindref="compound">fc::promise</ref>&lt; void &gt;::ptr</type>
        <definition>fc::promise&lt;void&gt;::ptr graphene::net::detail::node_impl::_retrigger_fetch_item_loop_promise</definition>
        <argsstring></argsstring>
        <name>_retrigger_fetch_item_loop_promise</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Used by the task that fetches items during normal operation </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="474" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="474" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1ae050214bfabea62b48dae210663f7f35" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool graphene::net::detail::node_impl::_items_to_fetch_updated</definition>
        <argsstring></argsstring>
        <name>_items_to_fetch_updated</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="475" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="475" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1ae2776e349a9de8e05bdc7520ddce3aca" prot="public" static="no" mutable="no">
        <type><ref refid="classfc_1_1future" kindref="compound">fc::future</ref>&lt; void &gt;</type>
        <definition>fc::future&lt;void&gt; graphene::net::detail::node_impl::_fetch_item_loop_done</definition>
        <argsstring></argsstring>
        <name>_fetch_item_loop_done</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="476" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="476" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1ae92ea0d9127d65f30c70f7f0c1848b44" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t graphene::net::detail::node_impl::_items_to_fetch_seq_counter</definition>
        <argsstring></argsstring>
        <name>_items_to_fetch_seq_counter</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Items to fetch sequence counter. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="490" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="490" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a4352626fa1fb641c37930315e2419104" prot="public" static="no" mutable="no">
        <type><ref refid="classgraphene_1_1net_1_1detail_1_1node__impl_1afb490eae8b2d5c08e089f4ef803d1671" kindref="member">items_to_fetch_set_type</ref></type>
        <definition>items_to_fetch_set_type graphene::net::detail::node_impl::_items_to_fetch</definition>
        <argsstring></argsstring>
        <name>_items_to_fetch</name>
        <briefdescription>
<para>List of items we know another peer has and we want. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="492" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="492" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a48507b4391a98bbe42edf9a1402465e9" prot="public" static="no" mutable="no">
        <type><ref refid="classgraphene_1_1net_1_1peer__connection_1adfbfaaccd42ac5fb5e713acbeb34724b" kindref="member">peer_connection::timestamped_items_set_type</ref></type>
        <definition>peer_connection::timestamped_items_set_type graphene::net::detail::node_impl::_recently_failed_items</definition>
        <argsstring></argsstring>
        <name>_recently_failed_items</name>
        <briefdescription>
<para>List of transactions we&apos;ve recently pushed and had rejected by the delegate. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="494" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="494" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1aba8b13750ecf3d248932422873b5c870" prot="public" static="no" mutable="no">
        <type><ref refid="classfc_1_1promise" kindref="compound">fc::promise</ref>&lt; void &gt;::ptr</type>
        <definition>fc::promise&lt;void&gt;::ptr graphene::net::detail::node_impl::_retrigger_advertise_inventory_loop_promise</definition>
        <argsstring></argsstring>
        <name>_retrigger_advertise_inventory_loop_promise</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Used by the task that advertises inventory during normal operation </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="499" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="499" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1ae3bcc0b745f57413121feb7a9c1840f4" prot="public" static="no" mutable="no">
        <type><ref refid="classfc_1_1future" kindref="compound">fc::future</ref>&lt; void &gt;</type>
        <definition>fc::future&lt;void&gt; graphene::net::detail::node_impl::_advertise_inventory_loop_done</definition>
        <argsstring></argsstring>
        <name>_advertise_inventory_loop_done</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="500" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="500" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a0199eaeda5e5eb69cb86b6e0cf847e95" prot="public" static="no" mutable="no">
        <type><ref refid="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set" kindref="compound">concurrent_unordered_set</ref>&lt; <ref refid="structgraphene_1_1net_1_1item__id" kindref="compound">item_id</ref> &gt;</type>
        <definition>concurrent_unordered_set&lt;item_id&gt; graphene::net::detail::node_impl::_new_inventory</definition>
        <argsstring></argsstring>
        <name>_new_inventory</name>
        <briefdescription>
<para>List of items we have received but not yet advertised to our peers. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="502" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="502" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a11d658fe10e652b500028650ba63d661" prot="public" static="no" mutable="no">
        <type>std::list&lt; <ref refid="namespacegraphene_1_1net_1a7c2063384e09cb0fc4191590fa004b89" kindref="member">peer_connection_ptr</ref> &gt;</type>
        <definition>std::list&lt;peer_connection_ptr&gt; graphene::net::detail::node_impl::_peers_to_delete</definition>
        <argsstring></argsstring>
        <name>_peers_to_delete</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>We have two alternate paths through the schedule_peer_for_deletion code <ndash/> one that uses a mutex to prevent one fiber from adding items to the queue while another is deleting items from it, and one that doesn&apos;t. The one that doesn&apos;t is simpler and more efficient code, but we&apos;re keeping around the version that uses the mutex because it crashes, and this crash probably indicates a bug in our underlying threading code that needs fixing. To produce the bug, define USE_PEERS_TO_DELETE_MUTEX and then connect up to the network and set your desired/max connection counts high </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="607" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="607" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a101c8283b3eff4041d0178d32669f06c" prot="public" static="no" mutable="no">
        <type><ref refid="classfc_1_1future" kindref="compound">fc::future</ref>&lt; void &gt;</type>
        <definition>fc::future&lt;void&gt; graphene::net::detail::node_impl::_delayed_peer_deletion_task_done</definition>
        <argsstring></argsstring>
        <name>_delayed_peer_deletion_task_done</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="608" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="608" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1afe91354984598ce79b0a0b3559563a5e" prot="public" static="no" mutable="no">
        <type>boost::container::flat_set&lt; std::string &gt;</type>
        <definition>boost::container::flat_set&lt;std::string&gt; graphene::net::detail::node_impl::_seed_nodes</definition>
        <argsstring></argsstring>
        <name>_seed_nodes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Used by the task that checks whether addresses of seed nodes have been updated </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="632" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="632" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a5267c092c2f62c1569feae4a671ad735" prot="public" static="no" mutable="no">
        <type><ref refid="classfc_1_1future" kindref="compound">fc::future</ref>&lt; void &gt;</type>
        <definition>fc::future&lt;void&gt; graphene::net::detail::node_impl::_update_seed_nodes_loop_done</definition>
        <argsstring></argsstring>
        <name>_update_seed_nodes_loop_done</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="633" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="633" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a0a6c388af167a25f6615b56a0bc2c878" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::update_seed_nodes_task</definition>
        <argsstring>()</argsstring>
        <name>update_seed_nodes_task</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="634" column="1" bodyfile="libraries/net/node.cpp" bodystart="467" bodyend="488"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a5ab1674decd3f32846ef4fcb8afcfb69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::schedule_next_update_seed_nodes_task</definition>
        <argsstring>()</argsstring>
        <name>schedule_next_update_seed_nodes_task</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="635" column="1" bodyfile="libraries/net/node.cpp" bodystart="490" bodyend="505"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1ac16b8e9e3afe8665ea5b1e0f0d92c2aa" prot="public" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classfc_1_1thread" kindref="compound">fc::thread</ref> &gt;</type>
        <definition>std::shared_ptr&lt;fc::thread&gt; graphene::net::detail::node_impl::_thread</definition>
        <argsstring></argsstring>
        <name>_thread</name>
        <initializer>= std::make_shared&lt;<ref refid="classfc_1_1thread" kindref="compound">fc::thread</ref>&gt;(&quot;p2p&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="423" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="423" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1ab44f89069cd9bf0e1d18dcacc0a9cda1" prot="public" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper" kindref="compound">statistics_gathering_node_delegate_wrapper</ref> &gt;</type>
        <definition>std::unique_ptr&lt;statistics_gathering_node_delegate_wrapper&gt; graphene::net::detail::node_impl::_delegate</definition>
        <argsstring></argsstring>
        <name>_delegate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="426" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="426" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1ad06e6b509fdb51a7d4b022b206a83701" prot="public" static="no" mutable="no">
        <type><ref refid="classfc_1_1sha256" kindref="compound">fc::sha256</ref></type>
        <definition>fc::sha256 graphene::net::detail::node_impl::_chain_id</definition>
        <argsstring></argsstring>
        <name>_chain_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="427" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="427" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1aab143f54b34718e71d55f8cc98c435a9" prot="public" static="no" mutable="no">
        <type><ref refid="classfc_1_1path" kindref="compound">fc::path</ref></type>
        <definition>fc::path graphene::net::detail::node_impl::_node_configuration_directory</definition>
        <argsstring></argsstring>
        <name>_node_configuration_directory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="431" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="431" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1ae64f7b5034a5ae908231270e5a0d2956" prot="public" static="no" mutable="no">
        <type><ref refid="structgraphene_1_1net_1_1detail_1_1node__configuration" kindref="compound">node_configuration</ref></type>
        <definition>node_configuration graphene::net::detail::node_impl::_node_configuration</definition>
        <argsstring></argsstring>
        <name>_node_configuration</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="432" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="432" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1aa08bf13496add1306a07b9a6ceb83990" prot="public" static="no" mutable="no">
        <type><ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">fc::ip::endpoint</ref></type>
        <definition>fc::ip::endpoint graphene::net::detail::node_impl::_actual_listening_endpoint</definition>
        <argsstring></argsstring>
        <name>_actual_listening_endpoint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Stores the endpoint we&apos;re listening on. This will be the same as _node_configuration.listen_endpoint, unless that endpoint was already in use. This will be 0.0.0.0:0 if the node is configured to not listen. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="439" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="439" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a5d6393b83975ab365b42786f0b7e876c" prot="public" static="no" mutable="no">
        <type><ref refid="classfc_1_1future" kindref="compound">fc::future</ref>&lt; void &gt;</type>
        <definition>fc::future&lt;void&gt; graphene::net::detail::node_impl::_process_backlog_of_sync_blocks_done</definition>
        <argsstring></argsstring>
        <name>_process_backlog_of_sync_blocks_done</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="469" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="469" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a1f16ff1dca2f349049b1095d63abb348" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool graphene::net::detail::node_impl::_suspend_fetching_sync_blocks</definition>
        <argsstring></argsstring>
        <name>_suspend_fetching_sync_blocks</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="470" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="470" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1ac0e74a035c75d26583f47d286d237083" prot="public" static="no" mutable="no">
        <type><ref refid="classfc_1_1future" kindref="compound">fc::future</ref>&lt; void &gt;</type>
        <definition>fc::future&lt;void&gt; graphene::net::detail::node_impl::_kill_inactive_conns_loop_done</definition>
        <argsstring></argsstring>
        <name>_kill_inactive_conns_loop_done</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="505" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="505" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a452892e6ffdcc5fb860a79b62b5a0f8b" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t graphene::net::detail::node_impl::_recent_block_interval_seconds</definition>
        <argsstring></argsstring>
        <name>_recent_block_interval_seconds</name>
        <initializer>= <ref refid="protocol_2include_2graphene_2protocol_2config_8hpp_1ac51c8ffb601fd8abac147ae87ab93dbb" kindref="member">GRAPHENE_MAX_BLOCK_INTERVAL</ref></initializer>
        <briefdescription>
<para>A cached copy of the block interval, to avoid a thread hop to the blockchain to get the current value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="507" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="507" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a8ddd39c24d1a3592064433caa15d8415" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string graphene::net::detail::node_impl::_user_agent_string</definition>
        <argsstring></argsstring>
        <name>_user_agent_string</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="509" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="509" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a1151426538eeba6f25dfa3bfc6b0ce37" prot="public" static="no" mutable="no">
        <type><ref refid="namespacegraphene_1_1net_1a557da170930e273d5a42e3541bd768e0" kindref="member">node_id_t</ref></type>
        <definition>node_id_t graphene::net::detail::node_impl::_node_public_key</definition>
        <argsstring></argsstring>
        <name>_node_public_key</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A key automatically generated when the client is first run, stored in node_config.json. It doesn&apos;t really have much of a purpose yet, there was just some thought that we might someday have a use for nodes having a private key (sent in hello messages) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="515" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="515" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1ab6a80c17fb51ca20256526753a061900" prot="public" static="no" mutable="no">
        <type><ref refid="namespacegraphene_1_1net_1a557da170930e273d5a42e3541bd768e0" kindref="member">node_id_t</ref></type>
        <definition>node_id_t graphene::net::detail::node_impl::_node_id</definition>
        <argsstring></argsstring>
        <name>_node_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A random number generated each time the client is launched, used to prevent us from connecting to the same client multiple times (sent in hello messages). Since this was introduced after the <ref refid="structgraphene_1_1net_1_1hello__message" kindref="compound">hello_message</ref> was finalized, this is sent in the user_data field. While this shares the same underlying type as a public key, it is really just a random number. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="524" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="524" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a7bc25e848a44aacc9a2cf901e7829325" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t graphene::net::detail::node_impl::_desired_number_of_connections</definition>
        <argsstring></argsstring>
        <name>_desired_number_of_connections</name>
        <initializer>= <ref refid="net_2include_2graphene_2net_2config_8hpp_1a3df76a17b439723371d7168cff7a45ed" kindref="member">GRAPHENE_NET_DEFAULT_DESIRED_CONNECTIONS</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If we have less than <computeroutput>_desired_number_of_connections</computeroutput>, we will try to connect with more nodes </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="527" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="527" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1ab2fa964881abb331ef5356d5c1c19253" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t graphene::net::detail::node_impl::_maximum_number_of_connections</definition>
        <argsstring></argsstring>
        <name>_maximum_number_of_connections</name>
        <initializer>= <ref refid="net_2include_2graphene_2net_2config_8hpp_1a8eee1d07fb3b69b5dc26292f97ffd1e1" kindref="member">GRAPHENE_NET_DEFAULT_MAX_CONNECTIONS</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If we have _maximum_number_of_connections or more, we will refuse any inbound connections </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="529" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="529" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1ad58f3750f2dda46c9f30e255835be655" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t graphene::net::detail::node_impl::_peer_connection_retry_timeout</definition>
        <argsstring></argsstring>
        <name>_peer_connection_retry_timeout</name>
        <initializer>= <ref refid="net_2include_2graphene_2net_2config_8hpp_1ad0fb65f6e4d1bd7707af7444f016c2f1" kindref="member">GRAPHENE_NET_DEFAULT_PEER_CONNECTION_RETRY_TIME</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retry connections to peers that have failed or rejected us this often, in seconds </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="531" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="531" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a370282f75438e905b33207bf997ad620" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t graphene::net::detail::node_impl::_peer_inactivity_timeout</definition>
        <argsstring></argsstring>
        <name>_peer_inactivity_timeout</name>
        <initializer>= <ref refid="net_2include_2graphene_2net_2config_8hpp_1a6026aa9aa286c0f3ed3196fcaf54d078" kindref="member">GRAPHENE_NET_PEER_HANDSHAKE_INACTIVITY_TIMEOUT</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>How many seconds of inactivity are permitted before disconnecting a peer </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="533" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="533" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1ad1436849e3948d5cc0964f6fb2715841" prot="public" static="no" mutable="no">
        <type><ref refid="classfc_1_1tcp__server" kindref="compound">fc::tcp_server</ref></type>
        <definition>fc::tcp_server graphene::net::detail::node_impl::_tcp_server</definition>
        <argsstring></argsstring>
        <name>_tcp_server</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="535" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="535" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a6205fc50153e90224d87a9483340e27d" prot="public" static="no" mutable="no">
        <type><ref refid="classfc_1_1future" kindref="compound">fc::future</ref>&lt; void &gt;</type>
        <definition>fc::future&lt;void&gt; graphene::net::detail::node_impl::_accept_loop_complete</definition>
        <argsstring></argsstring>
        <name>_accept_loop_complete</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="536" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="536" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a69141b54099ab6ca8145f9e309bbf1fd" prot="public" static="no" mutable="no">
        <type><ref refid="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set" kindref="compound">concurrent_unordered_set</ref>&lt; <ref refid="namespacegraphene_1_1net_1a7c2063384e09cb0fc4191590fa004b89" kindref="member">graphene::net::peer_connection_ptr</ref> &gt;</type>
        <definition>concurrent_unordered_set&lt;graphene::net::peer_connection_ptr&gt; graphene::net::detail::node_impl::_handshaking_connections</definition>
        <argsstring></argsstring>
        <name>_handshaking_connections</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Stores all connections which have not yet finished key exchange or are still sending initial handshaking messages back and forth (not yet ready to initiate syncing) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="540" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="540" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a7399d608a96b2fd0eb660696055247c9" prot="public" static="no" mutable="no">
        <type><ref refid="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set" kindref="compound">concurrent_unordered_set</ref>&lt; <ref refid="namespacegraphene_1_1net_1a7c2063384e09cb0fc4191590fa004b89" kindref="member">graphene::net::peer_connection_ptr</ref> &gt;</type>
        <definition>concurrent_unordered_set&lt;graphene::net::peer_connection_ptr&gt; graphene::net::detail::node_impl::_active_connections</definition>
        <argsstring></argsstring>
        <name>_active_connections</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Stores fully established connections we&apos;re either syncing with or in normal operation with </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="542" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="542" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1aa6cb6c012db19622d548125352da3cd6" prot="public" static="no" mutable="no">
        <type><ref refid="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set" kindref="compound">concurrent_unordered_set</ref>&lt; <ref refid="namespacegraphene_1_1net_1a7c2063384e09cb0fc4191590fa004b89" kindref="member">graphene::net::peer_connection_ptr</ref> &gt;</type>
        <definition>concurrent_unordered_set&lt;graphene::net::peer_connection_ptr&gt; graphene::net::detail::node_impl::_closing_connections</definition>
        <argsstring></argsstring>
        <name>_closing_connections</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Stores connections we&apos;ve closed (sent closing message, not actually closed), but are still waiting for the remote end to close before we delete them </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="545" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="545" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a40b19046083164f45066458f19413ebb" prot="public" static="no" mutable="no">
        <type><ref refid="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set" kindref="compound">concurrent_unordered_set</ref>&lt; <ref refid="namespacegraphene_1_1net_1a7c2063384e09cb0fc4191590fa004b89" kindref="member">graphene::net::peer_connection_ptr</ref> &gt;</type>
        <definition>concurrent_unordered_set&lt;graphene::net::peer_connection_ptr&gt; graphene::net::detail::node_impl::_terminating_connections</definition>
        <argsstring></argsstring>
        <name>_terminating_connections</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Stores connections we&apos;ve closed, but are still waiting for the OS to notify us that the socket is really closed </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="548" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="548" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a4fff1320239ff1c975178420bca2230f" prot="public" static="no" mutable="no">
        <type>boost::circular_buffer&lt; <ref refid="namespacegraphene_1_1net_1ae6a74bd458bbef0d6d21dd35c74c6235" kindref="member">item_hash_t</ref> &gt;</type>
        <definition>boost::circular_buffer&lt;item_hash_t&gt; graphene::net::detail::node_impl::_most_recent_blocks_accepted</definition>
        <argsstring></argsstring>
        <name>_most_recent_blocks_accepted</name>
        <initializer>{ <ref refid="classgraphene_1_1net_1_1detail_1_1node__impl_1ab2fa964881abb331ef5356d5c1c19253" kindref="member">_maximum_number_of_connections</ref> }</initializer>
        <briefdescription>
<para>The /n/ most recent blocks we&apos;ve accepted (currently tuned to the max number of connections) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="551" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="551" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a105452882f9d161214d1f3289c298cca" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t graphene::net::detail::node_impl::_sync_item_type</definition>
        <argsstring></argsstring>
        <name>_sync_item_type</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="553" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="553" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1aa40d0c9eab74c3e12ca3bd9453801df4" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t graphene::net::detail::node_impl::_total_num_of_unfetched_items</definition>
        <argsstring></argsstring>
        <name>_total_num_of_unfetched_items</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>The number of items we still need to fetch while syncing. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="555" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="555" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a658cefdb0f4330c7534c663f93c1ae9e" prot="public" static="no" mutable="no">
        <type>std::vector&lt; uint32_t &gt;</type>
        <definition>std::vector&lt;uint32_t&gt; graphene::net::detail::node_impl::_hard_fork_block_numbers</definition>
        <argsstring></argsstring>
        <name>_hard_fork_block_numbers</name>
        <briefdescription>
<para>List of all block numbers where there are hard forks. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="557" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="557" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a57e78dd53b91b110b663163e74214ba3" prot="public" static="no" mutable="no">
        <type><ref refid="classgraphene_1_1net_1_1detail_1_1blockchain__tied__message__cache" kindref="compound">blockchain_tied_message_cache</ref></type>
        <definition>blockchain_tied_message_cache graphene::net::detail::node_impl::_message_cache</definition>
        <argsstring></argsstring>
        <name>_message_cache</name>
        <briefdescription>
<para>Cache message we have received and might be required to provide to other peers via inventory requests. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="560" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="560" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a2d9b181fb8a6f1d8c5ab566942a1bb56" prot="public" static="no" mutable="no">
        <type><ref refid="classfc_1_1rate__limiting__group" kindref="compound">fc::rate_limiting_group</ref></type>
        <definition>fc::rate_limiting_group graphene::net::detail::node_impl::_rate_limiter</definition>
        <argsstring></argsstring>
        <name>_rate_limiter</name>
        <initializer>{ 0, 0 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="562" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="562" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a6c6016b06ebe49b1415c566ec07bc1ab" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t graphene::net::detail::node_impl::_last_reported_number_of_conns</definition>
        <argsstring></argsstring>
        <name>_last_reported_number_of_conns</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Number of connections last reported to the client (to avoid sending duplicate messages) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="565" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="565" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1aa7d0f5e9b3267e6a4e61bd1cb1f04f53" prot="public" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classgraphene_1_1net_1_1detail_1_1node__impl_1_1address__builder" kindref="compound">address_builder</ref> &gt;</type>
        <definition>std::shared_ptr&lt;address_builder&gt; graphene::net::detail::node_impl::_address_builder</definition>
        <argsstring></argsstring>
        <name>_address_builder</name>
        <initializer>= <ref refid="classgraphene_1_1net_1_1detail_1_1node__impl_1_1address__builder_1a6841489a03f21223a7423efd033ee96c" kindref="member">address_builder::create_default_address_builder</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="567" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="567" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a0defb3da9cac53cca601813aba6aeafa" prot="public" static="no" mutable="no">
        <type><ref refid="classfc_1_1future" kindref="compound">fc::future</ref>&lt; void &gt;</type>
        <definition>fc::future&lt;void&gt; graphene::net::detail::node_impl::_fetch_updated_peer_lists_loop_done</definition>
        <argsstring></argsstring>
        <name>_fetch_updated_peer_lists_loop_done</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="569" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="569" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1ab0bfc977849349637f713fb5713eae0a" prot="public" static="no" mutable="no">
        <type>boost::circular_buffer&lt; uint32_t &gt;</type>
        <definition>boost::circular_buffer&lt;uint32_t&gt; graphene::net::detail::node_impl::_avg_net_read_speed_seconds</definition>
        <argsstring></argsstring>
        <name>_avg_net_read_speed_seconds</name>
        <initializer>{ 60 }</initializer>
        <briefdescription>
<para>Average network read speed in the past seconds. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="572" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="572" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a850670ee1a34e1cb76c5c2e6964ce8f4" prot="public" static="no" mutable="no">
        <type>boost::circular_buffer&lt; uint32_t &gt;</type>
        <definition>boost::circular_buffer&lt;uint32_t&gt; graphene::net::detail::node_impl::_avg_net_write_speed_seconds</definition>
        <argsstring></argsstring>
        <name>_avg_net_write_speed_seconds</name>
        <initializer>{ 60 }</initializer>
        <briefdescription>
<para>Average network write speed in the past seconds. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="574" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="574" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a13157cd37d66f45e83d4d95d6f39fd73" prot="public" static="no" mutable="no">
        <type>boost::circular_buffer&lt; uint32_t &gt;</type>
        <definition>boost::circular_buffer&lt;uint32_t&gt; graphene::net::detail::node_impl::_avg_net_read_speed_minutes</definition>
        <argsstring></argsstring>
        <name>_avg_net_read_speed_minutes</name>
        <initializer>{ 60 }</initializer>
        <briefdescription>
<para>Average network read speed in the past minutes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="576" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="576" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1aa529f9841b0f686ab6641e0a4479a661" prot="public" static="no" mutable="no">
        <type>boost::circular_buffer&lt; uint32_t &gt;</type>
        <definition>boost::circular_buffer&lt;uint32_t&gt; graphene::net::detail::node_impl::_avg_net_write_speed_minutes</definition>
        <argsstring></argsstring>
        <name>_avg_net_write_speed_minutes</name>
        <initializer>{ 60 }</initializer>
        <briefdescription>
<para>Average network write speed in the past minutes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="578" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="578" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1aac608bcdf6311d324768a3422dc5f919" prot="public" static="no" mutable="no">
        <type>boost::circular_buffer&lt; uint32_t &gt;</type>
        <definition>boost::circular_buffer&lt;uint32_t&gt; graphene::net::detail::node_impl::_avg_net_read_speed_hours</definition>
        <argsstring></argsstring>
        <name>_avg_net_read_speed_hours</name>
        <initializer>{ 72 }</initializer>
        <briefdescription>
<para>Average network read speed in the past hours. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="580" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="580" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a1d92304bf6e93afb250ead625a8eb5b9" prot="public" static="no" mutable="no">
        <type>boost::circular_buffer&lt; uint32_t &gt;</type>
        <definition>boost::circular_buffer&lt;uint32_t&gt; graphene::net::detail::node_impl::_avg_net_write_speed_hours</definition>
        <argsstring></argsstring>
        <name>_avg_net_write_speed_hours</name>
        <initializer>{ 72 }</initializer>
        <briefdescription>
<para>Average network write speed in the past hours. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="582" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="582" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1ac1bc80da72b75957fb9d5f98b7d5834e" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t graphene::net::detail::node_impl::_avg_net_usage_second_counter</definition>
        <argsstring></argsstring>
        <name>_avg_net_usage_second_counter</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Average network usage second counter. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="584" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="584" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a312f7a2517347b576bd016f08c6c8714" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t graphene::net::detail::node_impl::_avg_net_usage_minute_counter</definition>
        <argsstring></argsstring>
        <name>_avg_net_usage_minute_counter</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Average network usage minute counter. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="586" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="586" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1ab2cc8fff85b80254ad2d028a50bef55c" prot="public" static="no" mutable="no">
        <type><ref refid="classfc_1_1time__point__sec" kindref="compound">fc::time_point_sec</ref></type>
        <definition>fc::time_point_sec graphene::net::detail::node_impl::_bandwidth_monitor_last_update_time</definition>
        <argsstring></argsstring>
        <name>_bandwidth_monitor_last_update_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="588" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="588" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a0ffe792c9015ec55ae83400c695722df" prot="public" static="no" mutable="no">
        <type><ref refid="classfc_1_1future" kindref="compound">fc::future</ref>&lt; void &gt;</type>
        <definition>fc::future&lt;void&gt; graphene::net::detail::node_impl::_bandwidth_monitor_loop_done</definition>
        <argsstring></argsstring>
        <name>_bandwidth_monitor_loop_done</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="589" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="589" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a125eef5969fb21f2f6c8b2d247a9d0f9" prot="public" static="no" mutable="no">
        <type><ref refid="classfc_1_1future" kindref="compound">fc::future</ref>&lt; void &gt;</type>
        <definition>fc::future&lt;void&gt; graphene::net::detail::node_impl::_dump_node_status_task_done</definition>
        <argsstring></argsstring>
        <name>_dump_node_status_task_done</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="591" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="591" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a89d3db1eafa447e9dcfb04a699d2c166" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool graphene::net::detail::node_impl::_node_is_shutting_down</definition>
        <argsstring></argsstring>
        <name>_node_is_shutting_down</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set to true when we begin our destructor, used to prevent us from starting new tasks while we&apos;re shutting down </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="617" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="617" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a0ffb4ae32bbf9904b60da3818f6aeac5" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t graphene::net::detail::node_impl::_max_addrs_to_handle_at_once</definition>
        <argsstring></argsstring>
        <name>_max_addrs_to_handle_at_once</name>
        <initializer>= <ref refid="net_2include_2graphene_2net_2config_8hpp_1a80668264c50947edb95c00702fa25076" kindref="member">MAX_ADDRESSES_TO_HANDLE_AT_ONCE</ref></initializer>
        <briefdescription>
<para>Maximum number of addresses to handle at one time. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="620" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="620" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a71fd2b3bada7cef2f76d361f49b01d93" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t graphene::net::detail::node_impl::_max_blocks_to_handle_at_once</definition>
        <argsstring></argsstring>
        <name>_max_blocks_to_handle_at_once</name>
        <initializer>= <ref refid="net_2include_2graphene_2net_2config_8hpp_1ad6ee838682c64c9cf02a214487d46644" kindref="member">MAX_BLOCKS_TO_HANDLE_AT_ONCE</ref></initializer>
        <briefdescription>
<para>Maximum number of blocks to handle at one time. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="622" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="622" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a0ca534987a41c00f7abf282897e6292f" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t graphene::net::detail::node_impl::_max_sync_blocks_to_prefetch</definition>
        <argsstring></argsstring>
        <name>_max_sync_blocks_to_prefetch</name>
        <initializer>= <ref refid="net_2include_2graphene_2net_2config_8hpp_1adab464a6116943f9e1f152d58b2d45bf" kindref="member">MAX_SYNC_BLOCKS_TO_PREFETCH</ref></initializer>
        <briefdescription>
<para>Maximum number of sync blocks to prefetch. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="624" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="624" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1aeb2f4146f318ec132022005480bc7579" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t graphene::net::detail::node_impl::_max_sync_blocks_per_peer</definition>
        <argsstring></argsstring>
        <name>_max_sync_blocks_per_peer</name>
        <initializer>= <ref refid="net_2include_2graphene_2net_2config_8hpp_1ab1a582a402adc14b8a4f76deba6306c8" kindref="member">GRAPHENE_NET_MAX_BLOCKS_PER_PEER_DURING_SYNCING</ref></initializer>
        <briefdescription>
<para>Maximum number of blocks per peer during syncing. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="626" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="626" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1node__impl_1aa08c712bd961b94b7a0d76fd4a53129c" prot="public" static="no" mutable="no">
        <type>std::list&lt; <ref refid="classfc_1_1future" kindref="compound">fc::future</ref>&lt; void &gt; &gt;</type>
        <definition>std::list&lt;fc::future&lt;void&gt; &gt; graphene::net::detail::node_impl::_handle_message_calls_in_progress</definition>
        <argsstring></argsstring>
        <name>_handle_message_calls_in_progress</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="628" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="628" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a58838c214d10b8bee6673baef1664421" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classfc_1_1thread" kindref="compound">fc::thread</ref> &gt;</type>
        <definition>std::shared_ptr&lt;fc::thread&gt; graphene::net::detail::node_impl::get_thread</definition>
        <argsstring>() const</argsstring>
        <name>get_thread</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="424" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="424" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a68dddde5aeba5b61e35278744060dcde" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::net::detail::node_impl::node_impl</definition>
        <argsstring>(const std::string &amp;user_agent)</argsstring>
        <name>node_impl</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>user_agent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="638" column="1" bodyfile="libraries/net/node.cpp" bodystart="302" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a60aab40765e324b787435e0743e97b67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::net::detail::node_impl::~node_impl</definition>
        <argsstring>() override</argsstring>
        <name>~node_impl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="639" column="1" bodyfile="libraries/net/node.cpp" bodystart="310" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a8b12b5c2b6e73b8a411aa05b234c1311" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::save_node_configuration</definition>
        <argsstring>()</argsstring>
        <name>save_node_configuration</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="641" column="1" bodyfile="libraries/net/node.cpp" bodystart="336" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a7444e97191c02389b3d80d67d90e48e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::p2p_network_connect_loop</definition>
        <argsstring>()</argsstring>
        <name>p2p_network_connect_loop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="643" column="1" bodyfile="libraries/net/node.cpp" bodystart="359" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a990060245a7b82a2f3ece96f2f8bd531" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::trigger_p2p_network_connect_loop</definition>
        <argsstring>()</argsstring>
        <name>trigger_p2p_network_connect_loop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="644" column="1" bodyfile="libraries/net/node.cpp" bodystart="458" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a4f9da514b6d20fc893a9900f37c2f42e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::net::detail::node_impl::have_already_received_sync_item</definition>
        <argsstring>(const item_hash_t &amp;item_hash)</argsstring>
        <name>have_already_received_sync_item</name>
        <param>
          <type>const <ref refid="namespacegraphene_1_1net_1ae6a74bd458bbef0d6d21dd35c74c6235" kindref="member">item_hash_t</ref> &amp;</type>
          <declname>item_hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="646" column="1" bodyfile="libraries/net/node.cpp" bodystart="507" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a237ff586325e634cc03a717899299499" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::request_sync_item_from_peer</definition>
        <argsstring>(const peer_connection_ptr &amp;peer, const item_hash_t &amp;item_to_request)</argsstring>
        <name>request_sync_item_from_peer</name>
        <param>
          <type>const <ref refid="namespacegraphene_1_1net_1a7c2063384e09cb0fc4191590fa004b89" kindref="member">peer_connection_ptr</ref> &amp;</type>
          <declname>peer</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegraphene_1_1net_1ae6a74bd458bbef0d6d21dd35c74c6235" kindref="member">item_hash_t</ref> &amp;</type>
          <declname>item_to_request</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="647" column="1" bodyfile="libraries/net/node.cpp" bodystart="516" bodyend="525"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a0b085ce0ef7e89e40c8100322c4ee155" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::request_sync_items_from_peer</definition>
        <argsstring>(const peer_connection_ptr &amp;peer, const std::vector&lt; item_hash_t &gt; &amp;items_to_request)</argsstring>
        <name>request_sync_items_from_peer</name>
        <param>
          <type>const <ref refid="namespacegraphene_1_1net_1a7c2063384e09cb0fc4191590fa004b89" kindref="member">peer_connection_ptr</ref> &amp;</type>
          <declname>peer</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespacegraphene_1_1net_1ae6a74bd458bbef0d6d21dd35c74c6235" kindref="member">item_hash_t</ref> &gt; &amp;</type>
          <declname>items_to_request</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="648" column="1" bodyfile="libraries/net/node.cpp" bodystart="527" bodyend="539"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a6f539ab9acfec574a2921923117a91b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::fetch_sync_items_loop</definition>
        <argsstring>()</argsstring>
        <name>fetch_sync_items_loop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="649" column="1" bodyfile="libraries/net/node.cpp" bodystart="541" bodyend="608"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1aade8dd172809deb094c6d8c496311b3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::trigger_fetch_sync_items_loop</definition>
        <argsstring>()</argsstring>
        <name>trigger_fetch_sync_items_loop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="650" column="1" bodyfile="libraries/net/node.cpp" bodystart="610" bodyend="617"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1ae2dc67a2f9569c0226d2a5dfec801fca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::net::detail::node_impl::is_item_in_any_peers_inventory</definition>
        <argsstring>(const item_id &amp;item) const</argsstring>
        <name>is_item_in_any_peers_inventory</name>
        <param>
          <type>const <ref refid="structgraphene_1_1net_1_1item__id" kindref="compound">item_id</ref> &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="652" column="1" bodyfile="libraries/net/node.cpp" bodystart="619" bodyend="628"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a918d1b9b18bdf9251ba35663998b9aa6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::fetch_items_loop</definition>
        <argsstring>()</argsstring>
        <name>fetch_items_loop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="653" column="1" bodyfile="libraries/net/node.cpp" bodystart="630" bodyend="757"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a425ebde39646aadd068982e5b21eea0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::trigger_fetch_items_loop</definition>
        <argsstring>()</argsstring>
        <name>trigger_fetch_items_loop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="654" column="1" bodyfile="libraries/net/node.cpp" bodystart="759" bodyend="765"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1aab7e405680b68473595a37c559f1e648" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::advertise_inventory_loop</definition>
        <argsstring>()</argsstring>
        <name>advertise_inventory_loop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="656" column="1" bodyfile="libraries/net/node.cpp" bodystart="767" bodyend="849"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a463205d75b58f2658334715daf3e0c79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::trigger_advertise_inventory_loop</definition>
        <argsstring>()</argsstring>
        <name>trigger_advertise_inventory_loop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="657" column="1" bodyfile="libraries/net/node.cpp" bodystart="851" bodyend="856"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1ac13e0ae88719a2045a2fcb6e6318b89c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::kill_inactive_conns_loop</definition>
        <argsstring>(node_impl_ptr self)</argsstring>
        <name>kill_inactive_conns_loop</name>
        <param>
          <type><ref refid="namespacegraphene_1_1net_1a7b290bc6b0c3a9980345c3782507fbe5" kindref="member">node_impl_ptr</ref></type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="659" column="1" bodyfile="libraries/net/node.cpp" bodystart="858" bodyend="1093"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a6febfea9c41ef09cf78a5e64ff948ca7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::fetch_updated_peer_lists_loop</definition>
        <argsstring>()</argsstring>
        <name>fetch_updated_peer_lists_loop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="661" column="1" bodyfile="libraries/net/node.cpp" bodystart="1095" bodyend="1134"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a06a97a071e8e0e13d40e227b33cd5fe5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::update_bandwidth_data</definition>
        <argsstring>(uint32_t bytes_read_this_second, uint32_t bytes_written_this_second)</argsstring>
        <name>update_bandwidth_data</name>
        <param>
          <type>uint32_t</type>
          <declname>bytes_read_this_second</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>bytes_written_this_second</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="662" column="1" bodyfile="libraries/net/node.cpp" bodystart="1135" bodyend="1164"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a982268cb032b1012d51c6e1efa41368f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::bandwidth_monitor_loop</definition>
        <argsstring>()</argsstring>
        <name>bandwidth_monitor_loop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="663" column="1" bodyfile="libraries/net/node.cpp" bodystart="1165" bodyend="1187"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a1a0fea6e1c256af4a1aafcbf15ed0a47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::dump_node_status_task</definition>
        <argsstring>()</argsstring>
        <name>dump_node_status_task</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="664" column="1" bodyfile="libraries/net/node.cpp" bodystart="1189" bodyend="1197"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1ab0582d9a1383544566d4199a4eab6bb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::net::detail::node_impl::is_accepting_new_connections</definition>
        <argsstring>()</argsstring>
        <name>is_accepting_new_connections</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="666" column="1" bodyfile="libraries/net/node.cpp" bodystart="1269" bodyend="1274"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a54227d4af466c367d6988a2492654cb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::net::detail::node_impl::is_wanting_new_connections</definition>
        <argsstring>()</argsstring>
        <name>is_wanting_new_connections</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="667" column="1" bodyfile="libraries/net/node.cpp" bodystart="1276" bodyend="1281"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a1bc0355291ce6b8aecd2b4f7f4791125" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t graphene::net::detail::node_impl::get_number_of_connections</definition>
        <argsstring>()</argsstring>
        <name>get_number_of_connections</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="668" column="1" bodyfile="libraries/net/node.cpp" bodystart="1283" bodyend="1287"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a37a8aad5469e11db473511c8c6a5f4a1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegraphene_1_1net_1a7c2063384e09cb0fc4191590fa004b89" kindref="member">peer_connection_ptr</ref></type>
        <definition>peer_connection_ptr graphene::net::detail::node_impl::get_peer_by_node_id</definition>
        <argsstring>(const node_id_t &amp;id) const</argsstring>
        <name>get_peer_by_node_id</name>
        <param>
          <type>const <ref refid="namespacegraphene_1_1net_1a557da170930e273d5a42e3541bd768e0" kindref="member">node_id_t</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="669" column="1" bodyfile="libraries/net/node.cpp" bodystart="1289" bodyend="1305"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1adef64c9e51b2c5e98decc7a69d6512c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::net::detail::node_impl::merge_address_info_with_potential_peer_database</definition>
        <argsstring>(const std::vector&lt; address_info &gt; addresses)</argsstring>
        <name>merge_address_info_with_potential_peer_database</name>
        <param>
          <type>const std::vector&lt; <ref refid="structgraphene_1_1net_1_1address__info" kindref="compound">address_info</ref> &gt;</type>
          <declname>addresses</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="671" column="1" bodyfile="libraries/net/node.cpp" bodystart="1308" bodyend="1336"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a8f923259168d30786da31f289c0ab172" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::display_current_connections</definition>
        <argsstring>()</argsstring>
        <name>display_current_connections</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="672" column="1" bodyfile="libraries/net/node.cpp" bodystart="1338" bodyend="1367"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a4a9a2f58bf2d3a8556a5182e00e25f3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t graphene::net::detail::node_impl::calculate_unsynced_block_count_from_all_peers</definition>
        <argsstring>()</argsstring>
        <name>calculate_unsynced_block_count_from_all_peers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="673" column="1" bodyfile="libraries/net/node.cpp" bodystart="2230" bodyend="2243"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1ad1a727ecd0ade790a08abcf17a7b026e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespacegraphene_1_1net_1ae6a74bd458bbef0d6d21dd35c74c6235" kindref="member">item_hash_t</ref> &gt;</type>
        <definition>std::vector&lt; item_hash_t &gt; graphene::net::detail::node_impl::create_blockchain_synopsis_for_peer</definition>
        <argsstring>(const peer_connection *peer)</argsstring>
        <name>create_blockchain_synopsis_for_peer</name>
        <param>
          <type>const <ref refid="classgraphene_1_1net_1_1peer__connection" kindref="compound">peer_connection</ref> *</type>
          <declname>peer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="674" column="1" bodyfile="libraries/net/node.cpp" bodystart="2249" bodyend="2298"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1ae66669e58608d2a43bde3b57c5ab3bb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::fetch_next_batch_of_item_ids_from_peer</definition>
        <argsstring>(peer_connection *peer, bool reset_fork_tracking_data_for_peer=false)</argsstring>
        <name>fetch_next_batch_of_item_ids_from_peer</name>
        <param>
          <type><ref refid="classgraphene_1_1net_1_1peer__connection" kindref="compound">peer_connection</ref> *</type>
          <declname>peer</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reset_fork_tracking_data_for_peer</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="675" column="1" bodyfile="libraries/net/node.cpp" bodystart="2300" bodyend="2329"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a57157a9220ee9aa6ab3d778068bd3750" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1variant__object" kindref="compound">fc::variant_object</ref></type>
        <definition>fc::variant_object graphene::net::detail::node_impl::generate_hello_user_data</definition>
        <argsstring>()</argsstring>
        <name>generate_hello_user_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="677" column="1" bodyfile="libraries/net/node.cpp" bodystart="1454" bodyend="1488"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a65f94e606b1a775deaa77750ff41bb8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::parse_hello_user_data_for_peer</definition>
        <argsstring>(peer_connection *originating_peer, const fc::variant_object &amp;user_data)</argsstring>
        <name>parse_hello_user_data_for_peer</name>
        <param>
          <type><ref refid="classgraphene_1_1net_1_1peer__connection" kindref="compound">peer_connection</ref> *</type>
          <declname>originating_peer</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1variant__object" kindref="compound">fc::variant_object</ref> &amp;</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="678" column="1" bodyfile="libraries/net/node.cpp" bodystart="1489" bodyend="1511"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1af36524135d300ed3222ebbf3751d300f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::on_message</definition>
        <argsstring>(peer_connection *originating_peer, const message &amp;received_message) override</argsstring>
        <name>on_message</name>
        <reimplements refid="classgraphene_1_1net_1_1peer__connection__delegate_1a9075116c55b168c7b49a84e79960cf09">on_message</reimplements>
        <param>
          <type><ref refid="classgraphene_1_1net_1_1peer__connection" kindref="compound">peer_connection</ref> *</type>
          <declname>originating_peer</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1net_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>received_message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="680" column="1" bodyfile="libraries/net/node.cpp" bodystart="1369" bodyend="1451"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1aff36d66edd2ec2aec2a4369dcaee9e12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::on_hello_message</definition>
        <argsstring>(peer_connection *originating_peer, const hello_message &amp;hello_message_received)</argsstring>
        <name>on_hello_message</name>
        <param>
          <type><ref refid="classgraphene_1_1net_1_1peer__connection" kindref="compound">peer_connection</ref> *</type>
          <declname>originating_peer</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1net_1_1hello__message" kindref="compound">hello_message</ref> &amp;</type>
          <declname>hello_message_received</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="683" column="1" bodyfile="libraries/net/node.cpp" bodystart="1513" bodyend="1882"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a0cd18827934e8f3b5e17b1bace929131" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::on_connection_accepted_message</definition>
        <argsstring>(peer_connection *originating_peer, const connection_accepted_message &amp;) const</argsstring>
        <name>on_connection_accepted_message</name>
        <param>
          <type><ref refid="classgraphene_1_1net_1_1peer__connection" kindref="compound">peer_connection</ref> *</type>
          <declname>originating_peer</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1net_1_1connection__accepted__message" kindref="compound">connection_accepted_message</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="686" column="1" bodyfile="libraries/net/node.cpp" bodystart="1884" bodyend="1904"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a79e65bc0bc4e058c05cd6c76ab2fe142" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::on_connection_rejected_message</definition>
        <argsstring>(peer_connection *originating_peer, const connection_rejected_message &amp;connection_rejected_message_received)</argsstring>
        <name>on_connection_rejected_message</name>
        <param>
          <type><ref refid="classgraphene_1_1net_1_1peer__connection" kindref="compound">peer_connection</ref> *</type>
          <declname>originating_peer</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1net_1_1connection__rejected__message" kindref="compound">connection_rejected_message</ref> &amp;</type>
          <declname>connection_rejected_message_received</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="689" column="1" bodyfile="libraries/net/node.cpp" bodystart="1906" bodyend="1970"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a30ee420970dce4966a9821f253189ab4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::on_address_request_message</definition>
        <argsstring>(peer_connection *originating_peer, const address_request_message &amp;)</argsstring>
        <name>on_address_request_message</name>
        <param>
          <type><ref refid="classgraphene_1_1net_1_1peer__connection" kindref="compound">peer_connection</ref> *</type>
          <declname>originating_peer</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1net_1_1address__request__message" kindref="compound">address_request_message</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="692" column="1" bodyfile="libraries/net/node.cpp" bodystart="1972" bodyend="1999"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a4a4118f53a2756094b9671ce0949b510" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::on_address_message</definition>
        <argsstring>(peer_connection *originating_peer, const address_message &amp;address_message_received)</argsstring>
        <name>on_address_message</name>
        <param>
          <type><ref refid="classgraphene_1_1net_1_1peer__connection" kindref="compound">peer_connection</ref> *</type>
          <declname>originating_peer</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1net_1_1address__message" kindref="compound">address_message</ref> &amp;</type>
          <declname>address_message_received</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="694" column="1" bodyfile="libraries/net/node.cpp" bodystart="2021" bodyend="2102"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1aa27add1a01bbb87626386fec496ff60f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::on_fetch_blockchain_item_ids_message</definition>
        <argsstring>(peer_connection *originating_peer, const fetch_blockchain_item_ids_message &amp;fetch_blockchain_item_ids_message_received)</argsstring>
        <name>on_fetch_blockchain_item_ids_message</name>
        <param>
          <type><ref refid="classgraphene_1_1net_1_1peer__connection" kindref="compound">peer_connection</ref> *</type>
          <declname>originating_peer</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1net_1_1fetch__blockchain__item__ids__message" kindref="compound">fetch_blockchain_item_ids_message</ref> &amp;</type>
          <declname>fetch_blockchain_item_ids_message_received</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="697" column="1" bodyfile="libraries/net/node.cpp" bodystart="2104" bodyend="2228"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a160de3da1e512097a629ff159758eec9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::on_blockchain_item_ids_inventory_message</definition>
        <argsstring>(peer_connection *originating_peer, const blockchain_item_ids_inventory_message &amp;blockchain_item_ids_inventory_message_received)</argsstring>
        <name>on_blockchain_item_ids_inventory_message</name>
        <param>
          <type><ref refid="classgraphene_1_1net_1_1peer__connection" kindref="compound">peer_connection</ref> *</type>
          <declname>originating_peer</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1net_1_1blockchain__item__ids__inventory__message" kindref="compound">blockchain_item_ids_inventory_message</ref> &amp;</type>
          <declname>blockchain_item_ids_inventory_message_received</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="700" column="1" bodyfile="libraries/net/node.cpp" bodystart="2331" bodyend="2628"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1ac60f3771b9c021dc1f6e3051af7cb50e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::on_fetch_items_message</definition>
        <argsstring>(peer_connection *originating_peer, const fetch_items_message &amp;fetch_items_message_received)</argsstring>
        <name>on_fetch_items_message</name>
        <param>
          <type><ref refid="classgraphene_1_1net_1_1peer__connection" kindref="compound">peer_connection</ref> *</type>
          <declname>originating_peer</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1net_1_1fetch__items__message" kindref="compound">fetch_items_message</ref> &amp;</type>
          <declname>fetch_items_message_received</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="703" column="1" bodyfile="libraries/net/node.cpp" bodystart="2647" bodyend="2722"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1aacef8c55523e25690cab0900c5b217bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::on_item_not_available_message</definition>
        <argsstring>(peer_connection *originating_peer, const item_not_available_message &amp;item_not_available_message_received)</argsstring>
        <name>on_item_not_available_message</name>
        <param>
          <type><ref refid="classgraphene_1_1net_1_1peer__connection" kindref="compound">peer_connection</ref> *</type>
          <declname>originating_peer</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1net_1_1item__not__available__message" kindref="compound">item_not_available_message</ref> &amp;</type>
          <declname>item_not_available_message_received</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="706" column="1" bodyfile="libraries/net/node.cpp" bodystart="2724" bodyend="2765"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1ad65a90e2fa88dbe04511bf8760f8d922" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::on_item_ids_inventory_message</definition>
        <argsstring>(peer_connection *originating_peer, const item_ids_inventory_message &amp;item_ids_inventory_message_received)</argsstring>
        <name>on_item_ids_inventory_message</name>
        <param>
          <type><ref refid="classgraphene_1_1net_1_1peer__connection" kindref="compound">peer_connection</ref> *</type>
          <declname>originating_peer</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1net_1_1item__ids__inventory__message" kindref="compound">item_ids_inventory_message</ref> &amp;</type>
          <declname>item_ids_inventory_message_received</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="709" column="1" bodyfile="libraries/net/node.cpp" bodystart="2767" bodyend="2847"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a2be50c8371065160e4e47472b8a57d63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::on_closing_connection_message</definition>
        <argsstring>(peer_connection *originating_peer, const closing_connection_message &amp;closing_connection_message_received)</argsstring>
        <name>on_closing_connection_message</name>
        <param>
          <type><ref refid="classgraphene_1_1net_1_1peer__connection" kindref="compound">peer_connection</ref> *</type>
          <declname>originating_peer</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1net_1_1closing__connection__message" kindref="compound">closing_connection_message</ref> &amp;</type>
          <declname>closing_connection_message_received</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="712" column="1" bodyfile="libraries/net/node.cpp" bodystart="2849" bodyend="2881"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a70acfdec32ffb018126a2622a930a74d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::on_current_time_request_message</definition>
        <argsstring>(peer_connection *originating_peer, const current_time_request_message &amp;current_time_request_message_received)</argsstring>
        <name>on_current_time_request_message</name>
        <param>
          <type><ref refid="classgraphene_1_1net_1_1peer__connection" kindref="compound">peer_connection</ref> *</type>
          <declname>originating_peer</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1net_1_1current__time__request__message" kindref="compound">current_time_request_message</ref> &amp;</type>
          <declname>current_time_request_message_received</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="715" column="1" bodyfile="libraries/net/node.cpp" bodystart="3545" bodyend="3553"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a9884c88c47903bf7ca1d53900bd09ca2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::on_current_time_reply_message</definition>
        <argsstring>(peer_connection *originating_peer, const current_time_reply_message &amp;current_time_reply_message_received)</argsstring>
        <name>on_current_time_reply_message</name>
        <param>
          <type><ref refid="classgraphene_1_1net_1_1peer__connection" kindref="compound">peer_connection</ref> *</type>
          <declname>originating_peer</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1net_1_1current__time__reply__message" kindref="compound">current_time_reply_message</ref> &amp;</type>
          <declname>current_time_reply_message_received</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="718" column="1" bodyfile="libraries/net/node.cpp" bodystart="3555" bodyend="3569"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1aa4b92bf370f9b6eb35d5ac2b1b7509f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::on_connection_closed</definition>
        <argsstring>(peer_connection *originating_peer) override</argsstring>
        <name>on_connection_closed</name>
        <reimplements refid="classgraphene_1_1net_1_1peer__connection__delegate_1a6d47e4587eff65009547eae6fe5c8c0b">on_connection_closed</reimplements>
        <param>
          <type><ref refid="classgraphene_1_1net_1_1peer__connection" kindref="compound">peer_connection</ref> *</type>
          <declname>originating_peer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="721" column="1" bodyfile="libraries/net/node.cpp" bodystart="2883" bodyend="2949"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a2fdf2597351186b6658ca88eed34b464" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::send_sync_block_to_node_delegate</definition>
        <argsstring>(const graphene::net::block_message &amp;block_message_to_send)</argsstring>
        <name>send_sync_block_to_node_delegate</name>
        <param>
          <type>const <ref refid="structgraphene_1_1net_1_1block__message" kindref="compound">graphene::net::block_message</ref> &amp;</type>
          <declname>block_message_to_send</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="723" column="1" bodyfile="libraries/net/node.cpp" bodystart="2951" bodyend="3134"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1ab7324cb162b6a7be394f5338384d34bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::process_backlog_of_sync_blocks</definition>
        <argsstring>()</argsstring>
        <name>process_backlog_of_sync_blocks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="724" column="1" bodyfile="libraries/net/node.cpp" bodystart="3136" bodyend="3279"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a962515376e4e8bafcdf2c14d4da0fe22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::trigger_process_backlog_of_sync_blocks</definition>
        <argsstring>()</argsstring>
        <name>trigger_process_backlog_of_sync_blocks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="725" column="1" bodyfile="libraries/net/node.cpp" bodystart="3281" bodyend="3287"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a298c3c376b520b444c94391f49db7d33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::process_block_during_syncing</definition>
        <argsstring>(peer_connection *originating_peer, const graphene::net::block_message &amp;block_message, const message_hash_type &amp;message_hash)</argsstring>
        <name>process_block_during_syncing</name>
        <param>
          <type><ref refid="classgraphene_1_1net_1_1peer__connection" kindref="compound">peer_connection</ref> *</type>
          <declname>originating_peer</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1net_1_1block__message" kindref="compound">graphene::net::block_message</ref> &amp;</type>
          <declname>block_message</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegraphene_1_1net_1a117e4c633fce23eaae7824c20c947fd4" kindref="member">message_hash_type</ref> &amp;</type>
          <declname>message_hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="726" column="1" bodyfile="libraries/net/node.cpp" bodystart="3289" bodyend="3300"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1ab57b84d34a28ba677fd46d2608e10349" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::process_block_when_in_sync</definition>
        <argsstring>(peer_connection *originating_peer, const graphene::net::block_message &amp;block_message, const message_hash_type &amp;message_hash)</argsstring>
        <name>process_block_when_in_sync</name>
        <param>
          <type><ref refid="classgraphene_1_1net_1_1peer__connection" kindref="compound">peer_connection</ref> *</type>
          <declname>originating_peer</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1net_1_1block__message" kindref="compound">graphene::net::block_message</ref> &amp;</type>
          <declname>block_message</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegraphene_1_1net_1a117e4c633fce23eaae7824c20c947fd4" kindref="member">message_hash_type</ref> &amp;</type>
          <declname>message_hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="730" column="1" bodyfile="libraries/net/node.cpp" bodystart="3302" bodyend="3463"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a8de1d629cde314f87c0b7cf972e2f052" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::process_block_message</definition>
        <argsstring>(peer_connection *originating_peer, const message &amp;message_to_process, const message_hash_type &amp;message_hash)</argsstring>
        <name>process_block_message</name>
        <param>
          <type><ref refid="classgraphene_1_1net_1_1peer__connection" kindref="compound">peer_connection</ref> *</type>
          <declname>originating_peer</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1net_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>message_to_process</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegraphene_1_1net_1a117e4c633fce23eaae7824c20c947fd4" kindref="member">message_hash_type</ref> &amp;</type>
          <declname>message_hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="734" column="1" bodyfile="libraries/net/node.cpp" bodystart="3464" bodyend="3543"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a56cba5611498cf5938e353ff5f4bce5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::process_ordinary_message</definition>
        <argsstring>(peer_connection *originating_peer, const message &amp;message_to_process, const message_hash_type &amp;message_hash)</argsstring>
        <name>process_ordinary_message</name>
        <param>
          <type><ref refid="classgraphene_1_1net_1_1peer__connection" kindref="compound">peer_connection</ref> *</type>
          <declname>originating_peer</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1net_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>message_to_process</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegraphene_1_1net_1a117e4c633fce23eaae7824c20c947fd4" kindref="member">message_hash_type</ref> &amp;</type>
          <declname>message_hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="739" column="1" bodyfile="libraries/net/node.cpp" bodystart="3576" bodyend="3656"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a6d23d622c27e04d2079bd4979d231119" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::start_synchronizing</definition>
        <argsstring>()</argsstring>
        <name>start_synchronizing</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="744" column="1" bodyfile="libraries/net/node.cpp" bodystart="3670" bodyend="3675"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a770c46a530023ae2b96ea8ac42edae77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::start_synchronizing_with_peer</definition>
        <argsstring>(const peer_connection_ptr &amp;peer)</argsstring>
        <name>start_synchronizing_with_peer</name>
        <param>
          <type>const <ref refid="namespacegraphene_1_1net_1a7c2063384e09cb0fc4191590fa004b89" kindref="member">peer_connection_ptr</ref> &amp;</type>
          <declname>peer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="745" column="1" bodyfile="libraries/net/node.cpp" bodystart="3658" bodyend="3668"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a93895908e6afe7b5ac6287f49c4fa05d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::new_peer_just_added</definition>
        <argsstring>(const peer_connection_ptr &amp;peer)</argsstring>
        <name>new_peer_just_added</name>
        <param>
          <type>const <ref refid="namespacegraphene_1_1net_1a7c2063384e09cb0fc4191590fa004b89" kindref="member">peer_connection_ptr</ref> &amp;</type>
          <declname>peer</declname>
        </param>
        <briefdescription>
<para>Called after a peer finishes handshaking, kicks off syncing. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="748" column="1" bodyfile="libraries/net/node.cpp" bodystart="3677" bodyend="3694"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1afb067749224cc7c562a3f66d58aa6ab9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::close</definition>
        <argsstring>()</argsstring>
        <name>close</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="750" column="1" bodyfile="libraries/net/node.cpp" bodystart="3696" bodyend="4011"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1af0a396abffd315313d53d04d98da788c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::accept_connection_task</definition>
        <argsstring>(peer_connection_ptr new_peer)</argsstring>
        <name>accept_connection_task</name>
        <param>
          <type><ref refid="namespacegraphene_1_1net_1a7c2063384e09cb0fc4191590fa004b89" kindref="member">peer_connection_ptr</ref></type>
          <declname>new_peer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="752" column="1" bodyfile="libraries/net/node.cpp" bodystart="4013" bodyend="4018"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a7319714563d5bfb1b698929147a2ce6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::accept_loop</definition>
        <argsstring>()</argsstring>
        <name>accept_loop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="753" column="1" bodyfile="libraries/net/node.cpp" bodystart="4020" bodyend="4050"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a7935f875342c14bd0cf08c003a5f2d1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::send_hello_message</definition>
        <argsstring>(const peer_connection_ptr &amp;peer)</argsstring>
        <name>send_hello_message</name>
        <param>
          <type>const <ref refid="namespacegraphene_1_1net_1a7c2063384e09cb0fc4191590fa004b89" kindref="member">peer_connection_ptr</ref> &amp;</type>
          <declname>peer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="754" column="1" bodyfile="libraries/net/node.cpp" bodystart="4052" bodyend="4107"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a33ffea48a4c2a5dda0882b07ee911e58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::connect_to_task</definition>
        <argsstring>(peer_connection_ptr new_peer, const fc::ip::endpoint &amp;remote_endpoint)</argsstring>
        <name>connect_to_task</name>
        <param>
          <type><ref refid="namespacegraphene_1_1net_1a7c2063384e09cb0fc4191590fa004b89" kindref="member">peer_connection_ptr</ref></type>
          <declname>new_peer</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">fc::ip::endpoint</ref> &amp;</type>
          <declname>remote_endpoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="755" column="1" bodyfile="libraries/net/node.cpp" bodystart="4109" bodyend="4187"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a420ac386d304a5b8869a22721480e59a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::net::detail::node_impl::is_connected_to_endpoint</definition>
        <argsstring>(const fc::ip::endpoint &amp;remote_endpoint) const</argsstring>
        <name>is_connected_to_endpoint</name>
        <param>
          <type>const <ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">fc::ip::endpoint</ref> &amp;</type>
          <declname>remote_endpoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="756" column="1" bodyfile="libraries/net/node.cpp" bodystart="4584" bodyend="4588"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a79d87e24390857ca464a04666fc83c6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::move_peer_to_active_list</definition>
        <argsstring>(const peer_connection_ptr &amp;peer)</argsstring>
        <name>move_peer_to_active_list</name>
        <param>
          <type>const <ref refid="namespacegraphene_1_1net_1a7c2063384e09cb0fc4191590fa004b89" kindref="member">peer_connection_ptr</ref> &amp;</type>
          <declname>peer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="758" column="1" bodyfile="libraries/net/node.cpp" bodystart="4590" bodyend="4597"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a050f187b95f8fc586ec30744fcc15229" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::move_peer_to_closing_list</definition>
        <argsstring>(const peer_connection_ptr &amp;peer)</argsstring>
        <name>move_peer_to_closing_list</name>
        <param>
          <type>const <ref refid="namespacegraphene_1_1net_1a7c2063384e09cb0fc4191590fa004b89" kindref="member">peer_connection_ptr</ref> &amp;</type>
          <declname>peer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="759" column="1" bodyfile="libraries/net/node.cpp" bodystart="4599" bodyend="4606"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a77b752dffd3f09f74bd19801ac64c07f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::move_peer_to_terminating_list</definition>
        <argsstring>(const peer_connection_ptr &amp;peer)</argsstring>
        <name>move_peer_to_terminating_list</name>
        <param>
          <type>const <ref refid="namespacegraphene_1_1net_1a7c2063384e09cb0fc4191590fa004b89" kindref="member">peer_connection_ptr</ref> &amp;</type>
          <declname>peer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="760" column="1" bodyfile="libraries/net/node.cpp" bodystart="4608" bodyend="4615"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a1cb64f4ff5a6638fca2e530a8670dd2c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegraphene_1_1net_1a7c2063384e09cb0fc4191590fa004b89" kindref="member">peer_connection_ptr</ref></type>
        <definition>peer_connection_ptr graphene::net::detail::node_impl::get_active_conn_for_endpoint</definition>
        <argsstring>(const fc::ip::endpoint &amp;remote_endpoint) const</argsstring>
        <name>get_active_conn_for_endpoint</name>
        <param>
          <type>const <ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">fc::ip::endpoint</ref> &amp;</type>
          <declname>remote_endpoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="767" column="1" bodyfile="libraries/net/node.cpp" bodystart="4534" bodyend="4558"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a16bd57477c874a66062d5ccb9c3ebb70" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegraphene_1_1net_1a7c2063384e09cb0fc4191590fa004b89" kindref="member">peer_connection_ptr</ref></type>
        <definition>peer_connection_ptr graphene::net::detail::node_impl::get_connection_for_endpoint</definition>
        <argsstring>(const fc::ip::endpoint &amp;remote_endpoint) const</argsstring>
        <name>get_connection_for_endpoint</name>
        <param>
          <type>const <ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">fc::ip::endpoint</ref> &amp;</type>
          <declname>remote_endpoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="773" column="1" bodyfile="libraries/net/node.cpp" bodystart="4560" bodyend="4582"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a849e1fc04d0e9b477c2f6e1142729126" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::dump_node_status</definition>
        <argsstring>()</argsstring>
        <name>dump_node_status</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="775" column="1" bodyfile="libraries/net/node.cpp" bodystart="4617" bodyend="4675"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1abf44a212fc6cea37e70265c682bb5f3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::delayed_peer_deletion_task</definition>
        <argsstring>()</argsstring>
        <name>delayed_peer_deletion_task</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="777" column="1" bodyfile="libraries/net/node.cpp" bodystart="1199" bodyend="1217"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1aed0609e62434404c2131f9074c51f3e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::schedule_peer_for_deletion</definition>
        <argsstring>(const peer_connection_ptr &amp;peer_to_delete)</argsstring>
        <name>schedule_peer_for_deletion</name>
        <param>
          <type>const <ref refid="namespacegraphene_1_1net_1a7c2063384e09cb0fc4191590fa004b89" kindref="member">peer_connection_ptr</ref> &amp;</type>
          <declname>peer_to_delete</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="778" column="1" bodyfile="libraries/net/node.cpp" bodystart="1219" bodyend="1267"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a3315f7ce2f61bf6f53cb97acd6f28cf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::disconnect_from_peer</definition>
        <argsstring>(peer_connection *originating_peer, const std::string &amp;reason_for_disconnect, bool caused_by_error=false, const fc::oexception &amp;additional_data=fc::oexception())</argsstring>
        <name>disconnect_from_peer</name>
        <param>
          <type><ref refid="classgraphene_1_1net_1_1peer__connection" kindref="compound">peer_connection</ref> *</type>
          <declname>originating_peer</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reason_for_disconnect</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>caused_by_error</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const <ref refid="namespacefc_1a16f272a3d05d2641cb2bf67bac4673dc" kindref="member">fc::oexception</ref> &amp;</type>
          <declname>additional_data</declname>
          <defval><ref refid="namespacefc_1a16f272a3d05d2641cb2bf67bac4673dc" kindref="member">fc::oexception</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="780" column="1" bodyfile="libraries/net/node.cpp" bodystart="4677" bodyend="4734"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a7e72b1f05f18690600a1b93c0ea890b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::set_node_delegate</definition>
        <argsstring>(std::shared_ptr&lt; node_delegate &gt; del, fc::thread *thread_for_delegate_calls)</argsstring>
        <name>set_node_delegate</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classgraphene_1_1net_1_1node__delegate" kindref="compound">node_delegate</ref> &gt;</type>
          <declname>del</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1thread" kindref="compound">fc::thread</ref> *</type>
          <declname>thread_for_delegate_calls</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="786" column="1" bodyfile="libraries/net/node.cpp" bodystart="4190" bodyend="4198"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a52a8e52fff2d7c8d5d446a7352f1d8d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::load_configuration</definition>
        <argsstring>(const fc::path &amp;configuration_directory)</argsstring>
        <name>load_configuration</name>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">fc::path</ref> &amp;</type>
          <declname>configuration_directory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="787" column="1" bodyfile="libraries/net/node.cpp" bodystart="4200" bodyend="4276"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a3117b63faecf76536c9d22ea95d39e04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::listen_to_p2p_network</definition>
        <argsstring>()</argsstring>
        <name>listen_to_p2p_network</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="788" column="1" bodyfile="libraries/net/node.cpp" bodystart="4278" bodyend="4376"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1ad205a6a0dbad9504fdf2356bb3777c33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::connect_to_p2p_network</definition>
        <argsstring>(node_impl_ptr self)</argsstring>
        <name>connect_to_p2p_network</name>
        <param>
          <type><ref refid="namespacegraphene_1_1net_1a7b290bc6b0c3a9980345c3782507fbe5" kindref="member">node_impl_ptr</ref></type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="789" column="1" bodyfile="libraries/net/node.cpp" bodystart="4378" bodyend="4409"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a08fdc2f28e30407cc3676b8479f8195b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::add_node</definition>
        <argsstring>(const fc::ip::endpoint &amp;ep)</argsstring>
        <name>add_node</name>
        <param>
          <type>const <ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">fc::ip::endpoint</ref> &amp;</type>
          <declname>ep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="790" column="1" bodyfile="libraries/net/node.cpp" bodystart="4411" bodyend="4433"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1acb493cb698bcd9f4044565b31cdef8ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::set_advertise_algorithm</definition>
        <argsstring>(const std::string &amp;algo, const std::vector&lt; std::string &gt; &amp;advertise_or_exclude_list)</argsstring>
        <name>set_advertise_algorithm</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>algo</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>advertise_or_exclude_list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="791" column="1" bodyfile="libraries/net/node.cpp" bodystart="2001" bodyend="2019"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a71fc89b7e0267664735ed06efcabac67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::add_seed_node</definition>
        <argsstring>(const std::string &amp;seed_string)</argsstring>
        <name>add_seed_node</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>seed_string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="793" column="1" bodyfile="libraries/net/node.cpp" bodystart="4435" bodyend="4440"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a4259ad558d7422376b6c603bc25c1f9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::resolve_seed_node_and_add</definition>
        <argsstring>(const std::string &amp;seed_string)</argsstring>
        <name>resolve_seed_node_and_add</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>seed_string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="794" column="1" bodyfile="libraries/net/node.cpp" bodystart="4480" bodyend="4498"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a51ebd01a4198ce012aeedf783f4dd44b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::initiate_connect_to</definition>
        <argsstring>(const peer_connection_ptr &amp;peer)</argsstring>
        <name>initiate_connect_to</name>
        <param>
          <type>const <ref refid="namespacegraphene_1_1net_1a7c2063384e09cb0fc4191590fa004b89" kindref="member">peer_connection_ptr</ref> &amp;</type>
          <declname>peer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="795" column="1" bodyfile="libraries/net/node.cpp" bodystart="4500" bodyend="4519"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a755019f341d8eeaff540d4140f6dea2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::connect_to_endpoint</definition>
        <argsstring>(const fc::ip::endpoint &amp;ep)</argsstring>
        <name>connect_to_endpoint</name>
        <param>
          <type>const <ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">fc::ip::endpoint</ref> &amp;</type>
          <declname>ep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="796" column="1" bodyfile="libraries/net/node.cpp" bodystart="4521" bodyend="4532"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a5d8a24b5d08d0fe3e5774f3002ecabed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::set_listen_endpoint</definition>
        <argsstring>(const fc::ip::endpoint &amp;ep, bool wait_if_not_available)</argsstring>
        <name>set_listen_endpoint</name>
        <param>
          <type>const <ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">fc::ip::endpoint</ref> &amp;</type>
          <declname>ep</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>wait_if_not_available</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="797" column="1" bodyfile="libraries/net/node.cpp" bodystart="4736" bodyend="4742"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a965d0e37052ff3cb1a44b062dcf82f80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::set_inbound_endpoint</definition>
        <argsstring>(const fc::ip::endpoint &amp;ep)</argsstring>
        <name>set_inbound_endpoint</name>
        <param>
          <type>const <ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">fc::ip::endpoint</ref> &amp;</type>
          <declname>ep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="798" column="1" bodyfile="libraries/net/node.cpp" bodystart="4744" bodyend="4749"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a3c644869b38831bddb8bad4e874ce42d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::set_accept_incoming_connections</definition>
        <argsstring>(bool accept)</argsstring>
        <name>set_accept_incoming_connections</name>
        <param>
          <type>bool</type>
          <declname>accept</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="799" column="1" bodyfile="libraries/net/node.cpp" bodystart="4751" bodyend="4756"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a537e6e2c60c7f4b1da5f67e320816029" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::set_connect_to_new_peers</definition>
        <argsstring>(bool connect)</argsstring>
        <name>set_connect_to_new_peers</name>
        <param>
          <type>bool</type>
          <declname>connect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="800" column="1" bodyfile="libraries/net/node.cpp" bodystart="4758" bodyend="4763"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a345bcb4255a7691114c0459352a209be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">fc::ip::endpoint</ref></type>
        <definition>fc::ip::endpoint graphene::net::detail::node_impl::get_actual_listening_endpoint</definition>
        <argsstring>() const</argsstring>
        <name>get_actual_listening_endpoint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="802" column="1" bodyfile="libraries/net/node.cpp" bodystart="4765" bodyend="4769"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1ab4c751e4aa1d4b7888ae476b4546e715" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structgraphene_1_1net_1_1peer__status" kindref="compound">peer_status</ref> &gt;</type>
        <definition>std::vector&lt; peer_status &gt; graphene::net::detail::node_impl::get_connected_peers</definition>
        <argsstring>() const</argsstring>
        <name>get_connected_peers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="803" column="1" bodyfile="libraries/net/node.cpp" bodystart="4771" bodyend="4842"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a8f6fb32abaab39bc0e009ea14d74de2b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t graphene::net::detail::node_impl::get_connection_count</definition>
        <argsstring>() const</argsstring>
        <name>get_connection_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="804" column="1" bodyfile="libraries/net/node.cpp" bodystart="4844" bodyend="4848"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a9ac2076c068f4e29996cddee1874e72f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::broadcast</definition>
        <argsstring>(const message &amp;item_to_broadcast, const message_propagation_data &amp;propagation_data)</argsstring>
        <name>broadcast</name>
        <param>
          <type>const <ref refid="structgraphene_1_1net_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>item_to_broadcast</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1net_1_1message__propagation__data" kindref="compound">message_propagation_data</ref> &amp;</type>
          <declname>propagation_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="806" column="1" bodyfile="libraries/net/node.cpp" bodystart="4850" bodyend="4871"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a2980565c34592b67133d97922aa68602" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::broadcast</definition>
        <argsstring>(const message &amp;item_to_broadcast)</argsstring>
        <name>broadcast</name>
        <param>
          <type>const <ref refid="structgraphene_1_1net_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>item_to_broadcast</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="807" column="1" bodyfile="libraries/net/node.cpp" bodystart="4873" bodyend="4879"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a75d6874ea26b3a7ee0fe5027d2851706" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::sync_from</definition>
        <argsstring>(const item_id &amp;current_head_block, const std::vector&lt; uint32_t &gt; &amp;hard_fork_block_numbers)</argsstring>
        <name>sync_from</name>
        <param>
          <type>const <ref refid="structgraphene_1_1net_1_1item__id" kindref="compound">item_id</ref> &amp;</type>
          <declname>current_head_block</declname>
        </param>
        <param>
          <type>const std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>hard_fork_block_numbers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="808" column="1" bodyfile="libraries/net/node.cpp" bodystart="4881" bodyend="4888"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1af7250538e61d83065d131b05a8e4d9dd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::net::detail::node_impl::is_connected</definition>
        <argsstring>() const</argsstring>
        <name>is_connected</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="809" column="1" bodyfile="libraries/net/node.cpp" bodystart="4890" bodyend="4894"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a75201dcc4d6a250e098607184892e329" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structgraphene_1_1net_1_1potential__peer__record" kindref="compound">potential_peer_record</ref> &gt;</type>
        <definition>std::vector&lt; potential_peer_record &gt; graphene::net::detail::node_impl::get_potential_peers</definition>
        <argsstring>() const</argsstring>
        <name>get_potential_peers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="810" column="1" bodyfile="libraries/net/node.cpp" bodystart="4896" bodyend="4904"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1ad73e30a01a5d5271d83ee45d01b1d7a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::set_advanced_node_parameters</definition>
        <argsstring>(const fc::variant_object &amp;params)</argsstring>
        <name>set_advanced_node_parameters</name>
        <param>
          <type>const <ref refid="classfc_1_1variant__object" kindref="compound">fc::variant_object</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="811" column="1" bodyfile="libraries/net/node.cpp" bodystart="4906" bodyend="4930"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a6de5a882c60b3fad99c0cd393fff68be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1variant__object" kindref="compound">fc::variant_object</ref></type>
        <definition>fc::variant_object graphene::net::detail::node_impl::get_advanced_node_parameters</definition>
        <argsstring>()</argsstring>
        <name>get_advanced_node_parameters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="813" column="1" bodyfile="libraries/net/node.cpp" bodystart="4932" bodyend="4944"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a315e454cef0dcb7a22466c808b87719c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1net_1_1message__propagation__data" kindref="compound">message_propagation_data</ref></type>
        <definition>message_propagation_data graphene::net::detail::node_impl::get_tx_propagation_data</definition>
        <argsstring>(const graphene::net::transaction_id_type &amp;transaction_id) const</argsstring>
        <name>get_tx_propagation_data</name>
        <param>
          <type>const graphene::net::transaction_id_type &amp;</type>
          <declname>transaction_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="814" column="1" bodyfile="libraries/net/node.cpp" bodystart="4946" bodyend="4951"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a1da250f102584e9db464a3a624f9cb4f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1net_1_1message__propagation__data" kindref="compound">message_propagation_data</ref></type>
        <definition>message_propagation_data graphene::net::detail::node_impl::get_block_propagation_data</definition>
        <argsstring>(const graphene::net::block_id_type &amp;block_id) const</argsstring>
        <name>get_block_propagation_data</name>
        <param>
          <type>const graphene::net::block_id_type &amp;</type>
          <declname>block_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="816" column="1" bodyfile="libraries/net/node.cpp" bodystart="4953" bodyend="4958"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1aea59aa4f1ee95b852f66932acdedfb21" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegraphene_1_1net_1a557da170930e273d5a42e3541bd768e0" kindref="member">node_id_t</ref></type>
        <definition>node_id_t graphene::net::detail::node_impl::get_node_id</definition>
        <argsstring>() const</argsstring>
        <name>get_node_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="818" column="1" bodyfile="libraries/net/node.cpp" bodystart="4960" bodyend="4964"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1acf20c4560e6546e492dafed57b3e4d36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::set_allowed_peers</definition>
        <argsstring>(const std::vector&lt; node_id_t &gt; &amp;allowed_peers)</argsstring>
        <name>set_allowed_peers</name>
        <param>
          <type>const std::vector&lt; <ref refid="namespacegraphene_1_1net_1a557da170930e273d5a42e3541bd768e0" kindref="member">node_id_t</ref> &gt; &amp;</type>
          <declname>allowed_peers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="819" column="1" bodyfile="libraries/net/node.cpp" bodystart="4965" bodyend="4982"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a039c41617cdee0e42043232178681b7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::clear_peer_database</definition>
        <argsstring>()</argsstring>
        <name>clear_peer_database</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="820" column="1" bodyfile="libraries/net/node.cpp" bodystart="4983" bodyend="4987"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a77e70b8873030f95022dd99642235a40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::node_impl::set_total_bandwidth_limit</definition>
        <argsstring>(uint32_t upload_bytes_per_second, uint32_t download_bytes_per_second)</argsstring>
        <name>set_total_bandwidth_limit</name>
        <param>
          <type>uint32_t</type>
          <declname>upload_bytes_per_second</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>download_bytes_per_second</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="821" column="1" bodyfile="libraries/net/node.cpp" bodystart="4989" bodyend="4994"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1aa91bea6216835f63b22b32ed1ef9f00a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1variant__object" kindref="compound">fc::variant_object</ref></type>
        <definition>fc::variant_object graphene::net::detail::node_impl::get_call_statistics</definition>
        <argsstring>() const</argsstring>
        <name>get_call_statistics</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="823" column="1" bodyfile="libraries/net/node.cpp" bodystart="4996" bodyend="5000"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a772ee570d804d7cc376815678f09835d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="structgraphene_1_1net_1_1message" kindref="compound">graphene::net::message</ref></type>
        <definition>graphene::net::message graphene::net::detail::node_impl::get_message_for_item</definition>
        <argsstring>(const item_id &amp;item) override</argsstring>
        <name>get_message_for_item</name>
        <reimplements refid="classgraphene_1_1net_1_1peer__connection__delegate_1af7fd99643f7f6f4861280c051a91adc7">get_message_for_item</reimplements>
        <param>
          <type>const <ref refid="structgraphene_1_1net_1_1item__id" kindref="compound">item_id</ref> &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="824" column="1" bodyfile="libraries/net/node.cpp" bodystart="2630" bodyend="2645"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1af05bcfe58a09781a0bd2cad7faa3a6ea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1variant__object" kindref="compound">fc::variant_object</ref></type>
        <definition>fc::variant_object graphene::net::detail::node_impl::network_get_info</definition>
        <argsstring>() const</argsstring>
        <name>network_get_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="826" column="1" bodyfile="libraries/net/node.cpp" bodystart="5002" bodyend="5010"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1aed886a8b1cd639ead05921b17a33bc6c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1variant__object" kindref="compound">fc::variant_object</ref></type>
        <definition>fc::variant_object graphene::net::detail::node_impl::network_get_usage_stats</definition>
        <argsstring>() const</argsstring>
        <name>network_get_usage_stats</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="827" column="1" bodyfile="libraries/net/node.cpp" bodystart="5011" bodyend="5040"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a15be3b444b10a5591d96e7b2aed6ffe7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::net::detail::node_impl::is_hard_fork_block</definition>
        <argsstring>(uint32_t block_number) const</argsstring>
        <name>is_hard_fork_block</name>
        <param>
          <type>uint32_t</type>
          <declname>block_number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="829" column="1" bodyfile="libraries/net/node.cpp" bodystart="5042" bodyend="5045"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1node__impl_1a8cce18328af5c0b915a23f8bf995d230" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t graphene::net::detail::node_impl::get_next_known_hard_fork_block_number</definition>
        <argsstring>(uint32_t block_number) const</argsstring>
        <name>get_next_known_hard_fork_block_number</name>
        <param>
          <type>uint32_t</type>
          <declname>block_number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="830" column="1" bodyfile="libraries/net/node.cpp" bodystart="5046" bodyend="5051"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="5774">
        <label>graphene::net::peer_connection_delegate</label>
        <link refid="classgraphene_1_1net_1_1peer__connection__delegate"/>
      </node>
      <node id="5775">
        <label>std::enable_shared_from_this&lt; node_impl &gt;</label>
      </node>
      <node id="5773">
        <label>graphene::net::detail::node_impl</label>
        <link refid="classgraphene_1_1net_1_1detail_1_1node__impl"/>
        <childnode refid="5774" relation="public-inheritance">
        </childnode>
        <childnode refid="5775" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5796">
        <label>size_t</label>
      </node>
      <node id="5793">
        <label>graphene::net::detail::node_configuration</label>
        <link refid="structgraphene_1_1net_1_1detail_1_1node__configuration"/>
        <childnode refid="5780" relation="usage">
          <edgelabel>listen_endpoint</edgelabel>
        </childnode>
        <childnode refid="5794" relation="usage">
          <edgelabel>private_key</edgelabel>
        </childnode>
        <childnode refid="5795" relation="usage">
          <edgelabel>inbound_endpoint</edgelabel>
        </childnode>
      </node>
      <node id="5780">
        <label>fc::ip::endpoint</label>
        <link refid="classfc_1_1ip_1_1endpoint"/>
      </node>
      <node id="5789">
        <label>graphene::net::peer_database</label>
        <link refid="classgraphene_1_1net_1_1peer__database"/>
      </node>
      <node id="5797">
        <label>fc::tcp_server</label>
        <link refid="classfc_1_1tcp__server"/>
      </node>
      <node id="5790">
        <label>string</label>
      </node>
      <node id="5786">
        <label>graphene::net::detail::blockchain_tied_message_cache</label>
        <link refid="classgraphene_1_1net_1_1detail_1_1blockchain__tied__message__cache"/>
      </node>
      <node id="5785">
        <label>std::unordered_set&lt; graphene::net::item_id, std::hash&lt; graphene::net::item_id &gt;, std::equal_to&lt; graphene::net::item_id &gt; &gt;</label>
      </node>
      <node id="5779">
        <label>fc::future&lt; void &gt;</label>
        <link refid="classfc_1_1future_3_01void_01_4"/>
      </node>
      <node id="5781">
        <label>fc::path</label>
        <link refid="classfc_1_1path"/>
      </node>
      <node id="5792">
        <label>fc::sha256</label>
        <link refid="classfc_1_1sha256"/>
      </node>
      <node id="5777">
        <label>graphene::net::peer_connection_delegate</label>
        <link refid="classgraphene_1_1net_1_1peer__connection__delegate"/>
      </node>
      <node id="5791">
        <label>fc::rate_limiting_group</label>
        <link refid="classfc_1_1rate__limiting__group"/>
      </node>
      <node id="5794">
        <label>fc::ecc::private_key</label>
        <link refid="classfc_1_1ecc_1_1private__key"/>
      </node>
      <node id="5782">
        <label>fc::time_point_sec</label>
        <link refid="classfc_1_1time__point__sec"/>
      </node>
      <node id="5783">
        <label>fc::zero_initialized_array&lt; T, N &gt;</label>
        <link refid="classfc_1_1zero__initialized__array"/>
      </node>
      <node id="5778">
        <label>std::enable_shared_from_this&lt; node_impl &gt;</label>
      </node>
      <node id="5787">
        <label>graphene::net::detail::concurrent_unordered_set&lt; graphene::net::peer_connection_ptr &gt;</label>
        <link refid="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set"/>
        <childnode refid="5788" relation="private-inheritance">
        </childnode>
      </node>
      <node id="5784">
        <label>graphene::net::detail::concurrent_unordered_set&lt; graphene::net::item_id &gt;</label>
        <link refid="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set"/>
        <childnode refid="5785" relation="private-inheritance">
        </childnode>
      </node>
      <node id="5788">
        <label>std::unordered_set&lt; graphene::net::peer_connection_ptr , std::hash&lt;graphene::net::peer_connection_ptr &gt; , std::equal_to&lt;graphene::net::peer_connection_ptr &gt;  &gt;</label>
      </node>
      <node id="5776">
        <label>graphene::net::detail::node_impl</label>
        <link refid="classgraphene_1_1net_1_1detail_1_1node__impl"/>
        <childnode refid="5777" relation="public-inheritance">
        </childnode>
        <childnode refid="5778" relation="public-inheritance">
        </childnode>
        <childnode refid="5779" relation="usage">
          <edgelabel>_bandwidth_monitor_loop_done</edgelabel>
          <edgelabel>_kill_inactive_conns_loop_done</edgelabel>
          <edgelabel>_fetch_updated_peer_lists_loop_done</edgelabel>
          <edgelabel>_advertise_inventory_loop_done</edgelabel>
          <edgelabel>_delayed_peer_deletion_task_done</edgelabel>
          <edgelabel>_fetch_sync_items_loop_done</edgelabel>
          <edgelabel>_fetch_item_loop_done</edgelabel>
          <edgelabel>_dump_node_status_task_done</edgelabel>
          <edgelabel>_process_backlog_of_sync_blocks_done</edgelabel>
          <edgelabel>_p2p_network_connect_loop_done</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
        <childnode refid="5780" relation="usage">
          <edgelabel>_actual_listening_endpoint</edgelabel>
        </childnode>
        <childnode refid="5781" relation="usage">
          <edgelabel>_node_configuration_directory</edgelabel>
        </childnode>
        <childnode refid="5782" relation="usage">
          <edgelabel>_bandwidth_monitor_last_update_time</edgelabel>
        </childnode>
        <childnode refid="5783" relation="usage">
          <edgelabel>_node_public_key</edgelabel>
          <edgelabel>_node_id</edgelabel>
        </childnode>
        <childnode refid="5784" relation="usage">
          <edgelabel>_new_inventory</edgelabel>
        </childnode>
        <childnode refid="5786" relation="usage">
          <edgelabel>_message_cache</edgelabel>
        </childnode>
        <childnode refid="5787" relation="usage">
          <edgelabel>_closing_connections</edgelabel>
          <edgelabel>_handshaking_connections</edgelabel>
          <edgelabel>_terminating_connections</edgelabel>
          <edgelabel>_active_connections</edgelabel>
        </childnode>
        <childnode refid="5789" relation="usage">
          <edgelabel>_potential_peer_db</edgelabel>
        </childnode>
        <childnode refid="5790" relation="usage">
          <edgelabel>_user_agent_string</edgelabel>
        </childnode>
        <childnode refid="5791" relation="usage">
          <edgelabel>_rate_limiter</edgelabel>
        </childnode>
        <childnode refid="5792" relation="usage">
          <edgelabel>_chain_id</edgelabel>
        </childnode>
        <childnode refid="5793" relation="usage">
          <edgelabel>_node_configuration</edgelabel>
        </childnode>
        <childnode refid="5796" relation="usage">
          <edgelabel>_max_sync_blocks_to_prefetch</edgelabel>
          <edgelabel>_avg_net_usage_second_counter</edgelabel>
          <edgelabel>_items_to_fetch_seq_counter</edgelabel>
          <edgelabel>_max_blocks_to_handle_at_once</edgelabel>
          <edgelabel>_avg_net_usage_minute_counter</edgelabel>
          <edgelabel>_max_sync_blocks_per_peer</edgelabel>
          <edgelabel>_max_addrs_to_handle_at_once</edgelabel>
        </childnode>
        <childnode refid="5797" relation="usage">
          <edgelabel>_tcp_server</edgelabel>
        </childnode>
      </node>
      <node id="5795">
        <label>fc::optional&lt; fc::ip::endpoint &gt;</label>
        <link refid="classfc_1_1optional"/>
      </node>
    </collaborationgraph>
    <location file="libraries/net/node_impl.hxx" line="411" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="410" bodyend="831"/>
    <listofallmembers>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a6205fc50153e90224d87a9483340e27d" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_accept_loop_complete</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a7399d608a96b2fd0eb660696055247c9" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_active_connections</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a6392d132d20a0c642b5c7a081b331cac" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_active_sync_requests</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1aa08bf13496add1306a07b9a6ceb83990" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_actual_listening_endpoint</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1ac09b1d2d1c41d8bb1ca3be00472d64aa" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_add_once_node_list</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1aa7d0f5e9b3267e6a4e61bd1cb1f04f53" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_address_builder</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1ae3bcc0b745f57413121feb7a9c1840f4" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_advertise_inventory_loop_done</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1aac608bcdf6311d324768a3422dc5f919" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_avg_net_read_speed_hours</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a13157cd37d66f45e83d4d95d6f39fd73" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_avg_net_read_speed_minutes</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1ab0bfc977849349637f713fb5713eae0a" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_avg_net_read_speed_seconds</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a312f7a2517347b576bd016f08c6c8714" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_avg_net_usage_minute_counter</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1ac1bc80da72b75957fb9d5f98b7d5834e" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_avg_net_usage_second_counter</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a1d92304bf6e93afb250ead625a8eb5b9" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_avg_net_write_speed_hours</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1aa529f9841b0f686ab6641e0a4479a661" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_avg_net_write_speed_minutes</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a850670ee1a34e1cb76c5c2e6964ce8f4" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_avg_net_write_speed_seconds</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1ab2cc8fff85b80254ad2d028a50bef55c" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_bandwidth_monitor_last_update_time</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a0ffe792c9015ec55ae83400c695722df" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_bandwidth_monitor_loop_done</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1ad06e6b509fdb51a7d4b022b206a83701" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_chain_id</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1aa6cb6c012db19622d548125352da3cd6" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_closing_connections</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a101c8283b3eff4041d0178d32669f06c" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_delayed_peer_deletion_task_done</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1ab44f89069cd9bf0e1d18dcacc0a9cda1" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_delegate</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a7bc25e848a44aacc9a2cf901e7829325" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_desired_number_of_connections</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a125eef5969fb21f2f6c8b2d247a9d0f9" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_dump_node_status_task_done</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1ae2776e349a9de8e05bdc7520ddce3aca" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_fetch_item_loop_done</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a2694634b1402b197a5a35c87aae32337" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_fetch_sync_items_loop_done</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a0defb3da9cac53cca601813aba6aeafa" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_fetch_updated_peer_lists_loop_done</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1aa08c712bd961b94b7a0d76fd4a53129c" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_handle_message_calls_in_progress</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a69141b54099ab6ca8145f9e309bbf1fd" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_handshaking_connections</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a658cefdb0f4330c7534c663f93c1ae9e" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_hard_fork_block_numbers</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a4352626fa1fb641c37930315e2419104" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_items_to_fetch</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1ae92ea0d9127d65f30c70f7f0c1848b44" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_items_to_fetch_seq_counter</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1ae050214bfabea62b48dae210663f7f35" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_items_to_fetch_updated</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1ac0e74a035c75d26583f47d286d237083" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_kill_inactive_conns_loop_done</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a6c6016b06ebe49b1415c566ec07bc1ab" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_last_reported_number_of_conns</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a0ffb4ae32bbf9904b60da3818f6aeac5" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_max_addrs_to_handle_at_once</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a71fd2b3bada7cef2f76d361f49b01d93" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_max_blocks_to_handle_at_once</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1aeb2f4146f318ec132022005480bc7579" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_max_sync_blocks_per_peer</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a0ca534987a41c00f7abf282897e6292f" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_max_sync_blocks_to_prefetch</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1ab2fa964881abb331ef5356d5c1c19253" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_maximum_number_of_connections</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a57e78dd53b91b110b663163e74214ba3" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_message_cache</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a4fff1320239ff1c975178420bca2230f" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_most_recent_blocks_accepted</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a0199eaeda5e5eb69cb86b6e0cf847e95" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_new_inventory</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a4b12d39e53e183ac0b85cfffa0a50cc4" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_new_received_sync_items</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1ae64f7b5034a5ae908231270e5a0d2956" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_node_configuration</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1aab143f54b34718e71d55f8cc98c435a9" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_node_configuration_directory</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1ab6a80c17fb51ca20256526753a061900" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_node_id</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a89d3db1eafa447e9dcfb04a699d2c166" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_node_is_shutting_down</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a1151426538eeba6f25dfa3bfc6b0ce37" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_node_public_key</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1ae106eda08a4cd7724c61cfaffe534ced" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_p2p_network_connect_loop_done</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1ad58f3750f2dda46c9f30e255835be655" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_peer_connection_retry_timeout</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a370282f75438e905b33207bf997ad620" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_peer_inactivity_timeout</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a11d658fe10e652b500028650ba63d661" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_peers_to_delete</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1aa8ada12cb58e5daf25f602460d43fff8" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_potential_peer_db</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a7eb7f04fb025395c3d4a999c34578628" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_potential_peer_db_updated</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a5d6393b83975ab365b42786f0b7e876c" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_process_backlog_of_sync_blocks_done</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a2d9b181fb8a6f1d8c5ab566942a1bb56" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_rate_limiter</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a010080d2736788010acacfeee2ebfebe" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_received_sync_items</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a452892e6ffdcc5fb860a79b62b5a0f8b" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_recent_block_interval_seconds</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a48507b4391a98bbe42edf9a1402465e9" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_recently_failed_items</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1aba8b13750ecf3d248932422873b5c870" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_retrigger_advertise_inventory_loop_promise</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a476a6cef3af0bfe3c6167b0353dda5fc" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_retrigger_connect_loop_promise</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a781288bfdcf6a2d64100e93600612562" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_retrigger_fetch_item_loop_promise</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a9083ede1dad0660dd71549d42b5bd692" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_retrigger_fetch_sync_items_loop_promise</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1afe91354984598ce79b0a0b3559563a5e" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_seed_nodes</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a1f16ff1dca2f349049b1095d63abb348" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_suspend_fetching_sync_blocks</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a105452882f9d161214d1f3289c298cca" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_sync_item_type</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1ae39b32fdf34c5134299e1a875fa8f515" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_sync_items_to_fetch_updated</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1ad1436849e3948d5cc0964f6fb2715841" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_tcp_server</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a40b19046083164f45066458f19413ebb" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_terminating_connections</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1ac16b8e9e3afe8665ea5b1e0f0d92c2aa" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_thread</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1aa40d0c9eab74c3e12ca3bd9453801df4" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_total_num_of_unfetched_items</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a5267c092c2f62c1569feae4a671ad735" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_update_seed_nodes_loop_done</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a8ddd39c24d1a3592064433caa15d8415" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>_user_agent_string</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1af0a396abffd315313d53d04d98da788c" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>accept_connection_task</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a7319714563d5bfb1b698929147a2ce6a" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>accept_loop</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a95cf3699ddb09456c2f97341fabd3f3b" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>active_sync_requests_map</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a08fdc2f28e30407cc3676b8479f8195b" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>add_node</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a71fc89b7e0267664735ed06efcabac67" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>add_seed_node</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1aab7e405680b68473595a37c559f1e648" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>advertise_inventory_loop</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a982268cb032b1012d51c6e1efa41368f" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>bandwidth_monitor_loop</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a9ac2076c068f4e29996cddee1874e72f" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>broadcast</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a2980565c34592b67133d97922aa68602" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>broadcast</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a4a9a2f58bf2d3a8556a5182e00e25f3d" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>calculate_unsynced_block_count_from_all_peers</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a039c41617cdee0e42043232178681b7e" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>clear_peer_database</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1afb067749224cc7c562a3f66d58aa6ab9" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>close</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a755019f341d8eeaff540d4140f6dea2a" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>connect_to_endpoint</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1ad205a6a0dbad9504fdf2356bb3777c33" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>connect_to_p2p_network</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a33ffea48a4c2a5dda0882b07ee911e58" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>connect_to_task</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1ad1a727ecd0ade790a08abcf17a7b026e" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>create_blockchain_synopsis_for_peer</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1abf44a212fc6cea37e70265c682bb5f3d" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>delayed_peer_deletion_task</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a3315f7ce2f61bf6f53cb97acd6f28cf7" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>disconnect_from_peer</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a8f923259168d30786da31f289c0ab172" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>display_current_connections</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a849e1fc04d0e9b477c2f6e1142729126" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>dump_node_status</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a1a0fea6e1c256af4a1aafcbf15ed0a47" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>dump_node_status_task</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a918d1b9b18bdf9251ba35663998b9aa6" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>fetch_items_loop</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1ae66669e58608d2a43bde3b57c5ab3bb8" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>fetch_next_batch_of_item_ids_from_peer</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a6f539ab9acfec574a2921923117a91b2" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>fetch_sync_items_loop</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a6febfea9c41ef09cf78a5e64ff948ca7" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>fetch_updated_peer_lists_loop</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a57157a9220ee9aa6ab3d778068bd3750" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>generate_hello_user_data</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a1cb64f4ff5a6638fca2e530a8670dd2c" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>get_active_conn_for_endpoint</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a345bcb4255a7691114c0459352a209be" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>get_actual_listening_endpoint</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a6de5a882c60b3fad99c0cd393fff68be" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>get_advanced_node_parameters</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a1da250f102584e9db464a3a624f9cb4f" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>get_block_propagation_data</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1aa91bea6216835f63b22b32ed1ef9f00a" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>get_call_statistics</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1ab4c751e4aa1d4b7888ae476b4546e715" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>get_connected_peers</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a8f6fb32abaab39bc0e009ea14d74de2b" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>get_connection_count</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a16bd57477c874a66062d5ccb9c3ebb70" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>get_connection_for_endpoint</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a772ee570d804d7cc376815678f09835d" prot="public" virt="virtual"><scope>graphene::net::detail::node_impl</scope><name>get_message_for_item</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a8cce18328af5c0b915a23f8bf995d230" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>get_next_known_hard_fork_block_number</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1aea59aa4f1ee95b852f66932acdedfb21" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>get_node_id</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a1bc0355291ce6b8aecd2b4f7f4791125" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>get_number_of_connections</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a37a8aad5469e11db473511c8c6a5f4a1" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>get_peer_by_node_id</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a75201dcc4d6a250e098607184892e329" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>get_potential_peers</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a58838c214d10b8bee6673baef1664421" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>get_thread</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a315e454cef0dcb7a22466c808b87719c" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>get_tx_propagation_data</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a4f9da514b6d20fc893a9900f37c2f42e" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>have_already_received_sync_item</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a51ebd01a4198ce012aeedf783f4dd44b" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>initiate_connect_to</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1ab0582d9a1383544566d4199a4eab6bb5" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>is_accepting_new_connections</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1af7250538e61d83065d131b05a8e4d9dd" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>is_connected</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a420ac386d304a5b8869a22721480e59a" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>is_connected_to_endpoint</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a15be3b444b10a5591d96e7b2aed6ffe7" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>is_hard_fork_block</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1ae2dc67a2f9569c0226d2a5dfec801fca" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>is_item_in_any_peers_inventory</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a54227d4af466c367d6988a2492654cb8" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>is_wanting_new_connections</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1afb490eae8b2d5c08e089f4ef803d1671" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>items_to_fetch_set_type</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1ac13e0ae88719a2045a2fcb6e6318b89c" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>kill_inactive_conns_loop</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a3117b63faecf76536c9d22ea95d39e04" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>listen_to_p2p_network</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a52a8e52fff2d7c8d5d446a7352f1d8d0" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>load_configuration</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1adef64c9e51b2c5e98decc7a69d6512c3" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>merge_address_info_with_potential_peer_database</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a79d87e24390857ca464a04666fc83c6c" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>move_peer_to_active_list</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a050f187b95f8fc586ec30744fcc15229" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>move_peer_to_closing_list</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a77b752dffd3f09f74bd19801ac64c07f" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>move_peer_to_terminating_list</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1af05bcfe58a09781a0bd2cad7faa3a6ea" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>network_get_info</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1aed886a8b1cd639ead05921b17a33bc6c" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>network_get_usage_stats</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a93895908e6afe7b5ac6287f49c4fa05d" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>new_peer_just_added</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a68dddde5aeba5b61e35278744060dcde" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>node_impl</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a4a4118f53a2756094b9671ce0949b510" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>on_address_message</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a30ee420970dce4966a9821f253189ab4" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>on_address_request_message</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a160de3da1e512097a629ff159758eec9" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>on_blockchain_item_ids_inventory_message</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a2be50c8371065160e4e47472b8a57d63" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>on_closing_connection_message</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a0cd18827934e8f3b5e17b1bace929131" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>on_connection_accepted_message</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1aa4b92bf370f9b6eb35d5ac2b1b7509f7" prot="public" virt="virtual"><scope>graphene::net::detail::node_impl</scope><name>on_connection_closed</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a79e65bc0bc4e058c05cd6c76ab2fe142" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>on_connection_rejected_message</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a9884c88c47903bf7ca1d53900bd09ca2" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>on_current_time_reply_message</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a70acfdec32ffb018126a2622a930a74d" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>on_current_time_request_message</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1aa27add1a01bbb87626386fec496ff60f" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>on_fetch_blockchain_item_ids_message</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1ac60f3771b9c021dc1f6e3051af7cb50e" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>on_fetch_items_message</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1aff36d66edd2ec2aec2a4369dcaee9e12" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>on_hello_message</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1ad65a90e2fa88dbe04511bf8760f8d922" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>on_item_ids_inventory_message</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1aacef8c55523e25690cab0900c5b217bf" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>on_item_not_available_message</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1af36524135d300ed3222ebbf3751d300f" prot="public" virt="virtual"><scope>graphene::net::detail::node_impl</scope><name>on_message</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a7444e97191c02389b3d80d67d90e48e8" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>p2p_network_connect_loop</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a65f94e606b1a775deaa77750ff41bb8f" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>parse_hello_user_data_for_peer</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1ab7324cb162b6a7be394f5338384d34bf" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>process_backlog_of_sync_blocks</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a298c3c376b520b444c94391f49db7d33" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>process_block_during_syncing</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a8de1d629cde314f87c0b7cf972e2f052" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>process_block_message</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1ab57b84d34a28ba677fd46d2608e10349" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>process_block_when_in_sync</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a56cba5611498cf5938e353ff5f4bce5c" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>process_ordinary_message</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a237ff586325e634cc03a717899299499" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>request_sync_item_from_peer</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a0b085ce0ef7e89e40c8100322c4ee155" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>request_sync_items_from_peer</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a4259ad558d7422376b6c603bc25c1f9c" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>resolve_seed_node_and_add</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a8b12b5c2b6e73b8a411aa05b234c1311" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>save_node_configuration</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a5ab1674decd3f32846ef4fcb8afcfb69" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>schedule_next_update_seed_nodes_task</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1aed0609e62434404c2131f9074c51f3e4" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>schedule_peer_for_deletion</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a7935f875342c14bd0cf08c003a5f2d1c" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>send_hello_message</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a2fdf2597351186b6658ca88eed34b464" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>send_sync_block_to_node_delegate</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a3c644869b38831bddb8bad4e874ce42d" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>set_accept_incoming_connections</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1ad73e30a01a5d5271d83ee45d01b1d7a8" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>set_advanced_node_parameters</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1acb493cb698bcd9f4044565b31cdef8ab" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>set_advertise_algorithm</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1acf20c4560e6546e492dafed57b3e4d36" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>set_allowed_peers</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a537e6e2c60c7f4b1da5f67e320816029" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>set_connect_to_new_peers</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a965d0e37052ff3cb1a44b062dcf82f80" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>set_inbound_endpoint</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a5d8a24b5d08d0fe3e5774f3002ecabed" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>set_listen_endpoint</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a7e72b1f05f18690600a1b93c0ea890b5" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>set_node_delegate</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a77e70b8873030f95022dd99642235a40" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>set_total_bandwidth_limit</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a6d23d622c27e04d2079bd4979d231119" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>start_synchronizing</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a770c46a530023ae2b96ea8ac42edae77" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>start_synchronizing_with_peer</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a75d6874ea26b3a7ee0fe5027d2851706" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>sync_from</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a463205d75b58f2658334715daf3e0c79" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>trigger_advertise_inventory_loop</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a425ebde39646aadd068982e5b21eea0c" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>trigger_fetch_items_loop</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1aade8dd172809deb094c6d8c496311b3c" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>trigger_fetch_sync_items_loop</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a990060245a7b82a2f3ece96f2f8bd531" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>trigger_p2p_network_connect_loop</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a962515376e4e8bafcdf2c14d4da0fe22" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>trigger_process_backlog_of_sync_blocks</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a06a97a071e8e0e13d40e227b33cd5fe5" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>update_bandwidth_data</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a0a6c388af167a25f6615b56a0bc2c878" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>update_seed_nodes_task</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1node__impl_1a60aab40765e324b787435e0743e97b67" prot="public" virt="non-virtual"><scope>graphene::net::detail::node_impl</scope><name>~node_impl</name></member>
      <member refid="classgraphene_1_1net_1_1peer__connection__delegate_1acfe65e4e6004bf9a45bda00e3e129d4c" prot="public" virt="virtual"><scope>graphene::net::detail::node_impl</scope><name>~peer_connection_delegate</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
