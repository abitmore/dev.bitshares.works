<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classgraphene_1_1protocol_1_1address" kind="class" language="C++" prot="public">
    <compoundname>graphene::protocol::address</compoundname>
    <includes refid="address_8hpp" local="no">address.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classgraphene_1_1protocol_1_1address_1a9f4aa58a58d011bc2ae7e3efcbda2e3f" prot="public" static="no" mutable="no">
        <type><ref refid="classfc_1_1ripemd160" kindref="compound">fc::ripemd160</ref></type>
        <definition>fc::ripemd160 graphene::protocol::address::addr</definition>
        <argsstring></argsstring>
        <name>addr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/address.hpp" line="58" column="1" bodyfile="libraries/protocol/include/graphene/protocol/address.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgraphene_1_1protocol_1_1address_1aa5f893a66b09052a4cf9157b4304fa8a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>graphene::protocol::address::address</definition>
        <argsstring>()</argsstring>
        <name>address</name>
        <briefdescription>
<para>constructs empty / null address </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/address.hpp" line="47" column="1" bodyfile="libraries/protocol/include/graphene/protocol/address.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1protocol_1_1address_1ab797445b64e4d94963ed31ede172cb11" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::protocol::address::address</definition>
        <argsstring>(const std::string &amp;base58str)</argsstring>
        <name>address</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>base58str</declname>
        </param>
        <briefdescription>
<para>converts to binary, validates checksum </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/address.hpp" line="48" column="1" bodyfile="libraries/protocol/address.cpp" bodystart="33" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1protocol_1_1address_1af4517d975e3eb5dfe65694c1ef65d866" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::protocol::address::address</definition>
        <argsstring>(const fc::ecc::public_key &amp;pub)</argsstring>
        <name>address</name>
        <param>
          <type>const <ref refid="classfc_1_1ecc_1_1public__key" kindref="compound">fc::ecc::public_key</ref> &amp;</type>
          <declname>pub</declname>
        </param>
        <briefdescription>
<para>converts to address </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/address.hpp" line="49" column="1" bodyfile="libraries/protocol/address.cpp" bodystart="69" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1protocol_1_1address_1ab712532b3425b3b9882d76c9fbb9637c" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::protocol::address::address</definition>
        <argsstring>(const fc::ecc::public_key_data &amp;pub)</argsstring>
        <name>address</name>
        <param>
          <type>const <ref refid="namespacefc_1_1ecc_1a050b3233b3000ad6098af37f768aae7a" kindref="member">fc::ecc::public_key_data</ref> &amp;</type>
          <declname>pub</declname>
        </param>
        <briefdescription>
<para>converts to address </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/address.hpp" line="50" column="1" bodyfile="libraries/protocol/address.cpp" bodystart="80" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1protocol_1_1address_1af24226595196e0da6ab1e55fa49b4979" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::protocol::address::address</definition>
        <argsstring>(const pts_address &amp;pub)</argsstring>
        <name>address</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1pts__address" kindref="compound">pts_address</ref> &amp;</type>
          <declname>pub</declname>
        </param>
        <briefdescription>
<para>converts to address </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/address.hpp" line="51" column="1" bodyfile="libraries/protocol/address.cpp" bodystart="75" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1protocol_1_1address_1a2ae3b8e063b455544ec8f6118f7ec952" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::protocol::address::address</definition>
        <argsstring>(const public_key_type &amp;pubkey)</argsstring>
        <name>address</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1public__key__type" kindref="compound">public_key_type</ref> &amp;</type>
          <declname>pubkey</declname>
        </param>
        <briefdescription>
<para>converts to address </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/address.hpp" line="52" column="1" bodyfile="libraries/protocol/address.cpp" bodystart="85" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1protocol_1_1address_1aa97eed02016b45ddaa2ad177fde420ab" prot="public" static="no" const="yes" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::protocol::address::operator std::string</definition>
        <argsstring>() const</argsstring>
        <name>operator std::string</name>
        <briefdescription>
<para>converts to base58 + checksum </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/address.hpp" line="56" column="1" bodyfile="libraries/protocol/address.cpp" bodystart="90" bodyend="98"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classgraphene_1_1protocol_1_1address_1a30ade2db47029e4eac7b45dd3a05d573" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::address::is_valid</definition>
        <argsstring>(const std::string &amp;base58str, const std::string &amp;prefix=GRAPHENE_ADDRESS_PREFIX)</argsstring>
        <name>is_valid</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>base58str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>prefix</declname>
          <defval><ref refid="protocol_2include_2graphene_2protocol_2config_8hpp_1a3b5980d1a4071e8a4aac69cb6710eb2f" kindref="member">GRAPHENE_ADDRESS_PREFIX</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/address.hpp" line="54" column="1" bodyfile="libraries/protocol/address.cpp" bodystart="42" bodyend="67"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>a 160 bit hash of a public key </para>    </briefdescription>
    <detaileddescription>
<para>An address can be converted to or from a base58 string with 32 bit checksum.</para><para>An address is calculated as ripemd160( sha512( compressed_ecc_public_key ) )</para><para>When converted to a string, checksum calculated as the first 4 bytes ripemd160( address ) is appended to the binary address before converting to base58. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="448">
        <label>fc::ripemd160</label>
        <link refid="classfc_1_1ripemd160"/>
      </node>
      <node id="447">
        <label>graphene::protocol::address</label>
        <link refid="classgraphene_1_1protocol_1_1address"/>
        <childnode refid="448" relation="usage">
          <edgelabel>addr</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="libraries/protocol/include/graphene/protocol/address.hpp" line="45" column="1" bodyfile="libraries/protocol/include/graphene/protocol/address.hpp" bodystart="44" bodyend="59"/>
    <listofallmembers>
      <member refid="classgraphene_1_1protocol_1_1address_1a9f4aa58a58d011bc2ae7e3efcbda2e3f" prot="public" virt="non-virtual"><scope>graphene::protocol::address</scope><name>addr</name></member>
      <member refid="classgraphene_1_1protocol_1_1address_1aa5f893a66b09052a4cf9157b4304fa8a" prot="public" virt="non-virtual"><scope>graphene::protocol::address</scope><name>address</name></member>
      <member refid="classgraphene_1_1protocol_1_1address_1ab797445b64e4d94963ed31ede172cb11" prot="public" virt="non-virtual"><scope>graphene::protocol::address</scope><name>address</name></member>
      <member refid="classgraphene_1_1protocol_1_1address_1af4517d975e3eb5dfe65694c1ef65d866" prot="public" virt="non-virtual"><scope>graphene::protocol::address</scope><name>address</name></member>
      <member refid="classgraphene_1_1protocol_1_1address_1ab712532b3425b3b9882d76c9fbb9637c" prot="public" virt="non-virtual"><scope>graphene::protocol::address</scope><name>address</name></member>
      <member refid="classgraphene_1_1protocol_1_1address_1af24226595196e0da6ab1e55fa49b4979" prot="public" virt="non-virtual"><scope>graphene::protocol::address</scope><name>address</name></member>
      <member refid="classgraphene_1_1protocol_1_1address_1a2ae3b8e063b455544ec8f6118f7ec952" prot="public" virt="non-virtual"><scope>graphene::protocol::address</scope><name>address</name></member>
      <member refid="classgraphene_1_1protocol_1_1address_1a30ade2db47029e4eac7b45dd3a05d573" prot="public" virt="non-virtual"><scope>graphene::protocol::address</scope><name>is_valid</name></member>
      <member refid="classgraphene_1_1protocol_1_1address_1aa97eed02016b45ddaa2ad177fde420ab" prot="public" virt="non-virtual"><scope>graphene::protocol::address</scope><name>operator std::string</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
