<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper" kind="class" language="C++" prot="public">
    <compoundname>graphene::net::detail::statistics_gathering_node_delegate_wrapper</compoundname>
    <basecompoundref refid="classgraphene_1_1net_1_1node__delegate" prot="public" virt="non-virtual">graphene::net::node_delegate</basecompoundref>
    <includes refid="node__impl_8hxx" local="no">node_impl.hxx</includes>
    <innerclass refid="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper_1_1call__statistics__collector" prot="private">graphene::net::detail::statistics_gathering_node_delegate_wrapper::call_statistics_collector</innerclass>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper_1a1624894149e76f131041cc1af9f85b7e" prot="private" static="no">
        <type>boost::accumulators::accumulator_set&lt; int64_t, boost::accumulators::stats&lt; boost::accumulators::tag::min, boost::accumulators::tag::rolling_mean, boost::accumulators::tag::max, boost::accumulators::tag::sum, boost::accumulators::tag::count &gt; &gt;</type>
        <definition>using graphene::net::detail::statistics_gathering_node_delegate_wrapper::call_stats_accumulator =  boost::accumulators::accumulator_set&lt; int64_t, boost::accumulators::stats&lt; boost::accumulators::tag::min, boost::accumulators::tag::rolling_mean, boost::accumulators::tag::max, boost::accumulators::tag::sum, boost::accumulators::tag::count&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>call_stats_accumulator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="238" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="243" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper_1ac181724dfb60ed0944bde838e6a0a838" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classgraphene_1_1net_1_1node__delegate" kindref="compound">node_delegate</ref> &gt;</type>
        <definition>std::shared_ptr&lt;node_delegate&gt; graphene::net::detail::statistics_gathering_node_delegate_wrapper::_node_delegate</definition>
        <argsstring></argsstring>
        <name>_node_delegate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="235" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="235" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper_1a8b3c25ae5b681ab943f48c8263a605d0" prot="private" static="no" mutable="no">
        <type><ref refid="classfc_1_1thread" kindref="compound">fc::thread</ref> *</type>
        <definition>fc::thread* graphene::net::detail::statistics_gathering_node_delegate_wrapper::_thread</definition>
        <argsstring></argsstring>
        <name>_thread</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="236" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="236" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper_1af2063679a7be2f9f5c34fde9fe11df27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::net::detail::statistics_gathering_node_delegate_wrapper::statistics_gathering_node_delegate_wrapper</definition>
        <argsstring>(std::shared_ptr&lt; node_delegate &gt; delegate, fc::thread *thread_for_delegate_calls)</argsstring>
        <name>statistics_gathering_node_delegate_wrapper</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classgraphene_1_1net_1_1node__delegate" kindref="compound">node_delegate</ref> &gt;</type>
          <declname>delegate</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1thread" kindref="compound">fc::thread</ref> *</type>
          <declname>thread_for_delegate_calls</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="337" column="1" bodyfile="libraries/net/node.cpp" bodystart="4948" bodyend="4953"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper_1ab987dcd9e4000a1ef5c311aac7330048" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1variant__object" kindref="compound">fc::variant_object</ref></type>
        <definition>fc::variant_object graphene::net::detail::statistics_gathering_node_delegate_wrapper::get_call_statistics</definition>
        <argsstring>()</argsstring>
        <name>get_call_statistics</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="340" column="1" bodyfile="libraries/net/node.cpp" bodystart="4956" bodyend="4984"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper_1a2380752b08d06a0ebc904cd5311c1b53" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool graphene::net::detail::statistics_gathering_node_delegate_wrapper::has_item</definition>
        <argsstring>(const graphene::net::item_id &amp;id) override</argsstring>
        <name>has_item</name>
        <reimplements refid="classgraphene_1_1net_1_1node__delegate_1ae73a8679f1f836d42e5ee06ae0951201">has_item</reimplements>
        <param>
          <type>const <ref refid="structgraphene_1_1net_1_1item__id" kindref="compound">graphene::net::item_id</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If delegate has the item, the network has no need to fetch it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="342" column="1" bodyfile="libraries/net/node.cpp" bodystart="5042" bodyend="5045"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper_1a825a59ae61898c188270c66f91803ae0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void graphene::net::detail::statistics_gathering_node_delegate_wrapper::handle_message</definition>
        <argsstring>(const message &amp;) override</argsstring>
        <name>handle_message</name>
        <reimplements refid="classgraphene_1_1net_1_1node__delegate_1a738c6181f8e461b147934d7b79e710f8">handle_message</reimplements>
        <param>
          <type>const <ref refid="structgraphene_1_1net_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>message_to_process</declname>
        </param>
        <briefdescription>
<para>Called when a new message comes in from the network other than a block or a transaction. Currently there are no other possible messages, so this should never be called. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>exception</parametername>
</parameternamelist>
<parameterdescription>
<para>if error validating the item, otherwise the item is safe to broadcast on. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="343" column="1" bodyfile="libraries/net/node.cpp" bodystart="5047" bodyend="5050"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper_1ab7f843bf1cc02857465130dd34999580" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool graphene::net::detail::statistics_gathering_node_delegate_wrapper::handle_block</definition>
        <argsstring>(const graphene::net::block_message &amp;block_message, bool sync_mode, std::vector&lt; message_hash_type &gt; &amp;contained_transaction_msg_ids) override</argsstring>
        <name>handle_block</name>
        <reimplements refid="classgraphene_1_1net_1_1node__delegate_1a8813881e942d58cb1fa424bbf331a983">handle_block</reimplements>
        <param>
          <type>const <ref refid="structgraphene_1_1net_1_1block__message" kindref="compound">graphene::net::block_message</ref> &amp;</type>
          <declname>blk_msg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sync_mode</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespacegraphene_1_1net_1a117e4c633fce23eaae7824c20c947fd4" kindref="member">message_hash_type</ref> &gt; &amp;</type>
          <declname>contained_transaction_msg_ids</declname>
        </param>
        <briefdescription>
<para>Called when a new block comes in from the network. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>blk_msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message which contains the block </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sync_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>true if the message was fetched through the sync process, false during normal operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>contained_transaction_msg_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>container for the transactions to write back into </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if this message caused the blockchain to switch forks, false if it did not</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>exception</parametername>
</parameternamelist>
<parameterdescription>
<para>if error validating the item, otherwise the item is safe to broadcast on. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="344" column="1" bodyfile="libraries/net/node.cpp" bodystart="5052" bodyend="5056"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper_1a4f226499fd8a014448a21b8016a3cb86" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void graphene::net::detail::statistics_gathering_node_delegate_wrapper::handle_transaction</definition>
        <argsstring>(const graphene::net::trx_message &amp;transaction_message) override</argsstring>
        <name>handle_transaction</name>
        <reimplements refid="classgraphene_1_1net_1_1node__delegate_1a012e220463b248980525219ae44ee0a3">handle_transaction</reimplements>
        <param>
          <type>const <ref refid="structgraphene_1_1net_1_1trx__message" kindref="compound">graphene::net::trx_message</ref> &amp;</type>
          <declname>trx_msg</declname>
        </param>
        <briefdescription>
<para>Called when a new transaction comes in from the network. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>exception</parametername>
</parameternamelist>
<parameterdescription>
<para>if error validating the item, otherwise the item is safe to broadcast on. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="346" column="1" bodyfile="libraries/net/node.cpp" bodystart="5058" bodyend="5061"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper_1a2929f37b4d1b3710dfced7cbcb628941" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; <ref refid="namespacegraphene_1_1net_1ae6a74bd458bbef0d6d21dd35c74c6235" kindref="member">item_hash_t</ref> &gt;</type>
        <definition>std::vector&lt; item_hash_t &gt; graphene::net::detail::statistics_gathering_node_delegate_wrapper::get_block_ids</definition>
        <argsstring>(const std::vector&lt; item_hash_t &gt; &amp;blockchain_synopsis, uint32_t &amp;remaining_item_count, uint32_t limit=2000) override</argsstring>
        <name>get_block_ids</name>
        <reimplements refid="classgraphene_1_1net_1_1node__delegate_1a74b20c0bd09734e2e483809f0fb1d81a">get_block_ids</reimplements>
        <param>
          <type>const std::vector&lt; <ref refid="namespacegraphene_1_1net_1ae6a74bd458bbef0d6d21dd35c74c6235" kindref="member">item_hash_t</ref> &gt; &amp;</type>
          <declname>blockchain_synopsis</declname>
        </param>
        <param>
          <type>uint32_t &amp;</type>
          <declname>remaining_item_count</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
          <defval>2000</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assuming all data elements are ordered in some way, this method should return up to limit ids that occur <emphasis>after</emphasis> from_id. On return, remaining_item_count will be set to the number of items in our blockchain after the last item returned in the result, or 0 if the result contains the last item in the blockchain </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="347" column="1" bodyfile="libraries/net/node.cpp" bodystart="5063" bodyend="5068"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper_1a98c70bc00568dd0946526e73b6067d37" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="structgraphene_1_1net_1_1message" kindref="compound">message</ref></type>
        <definition>message graphene::net::detail::statistics_gathering_node_delegate_wrapper::get_item</definition>
        <argsstring>(const item_id &amp;id) override</argsstring>
        <name>get_item</name>
        <reimplements refid="classgraphene_1_1net_1_1node__delegate_1ad45df7b4d849fa221356a266f408b617">get_item</reimplements>
        <param>
          <type>const <ref refid="structgraphene_1_1net_1_1item__id" kindref="compound">item_id</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Given the hash of the requested data, fetch the body. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="350" column="1" bodyfile="libraries/net/node.cpp" bodystart="5070" bodyend="5073"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper_1a84050ceda8ee5729b2f8e21b7a8448ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacegraphene_1_1protocol_1a56354f39ed89f6a0a13fe90ba8228809" kindref="member">graphene::protocol::chain_id_type</ref></type>
        <definition>chain_id_type graphene::net::detail::statistics_gathering_node_delegate_wrapper::get_chain_id</definition>
        <argsstring>() const override</argsstring>
        <name>get_chain_id</name>
        <reimplements refid="classgraphene_1_1net_1_1node__delegate_1a6abb2ff8bf61ef04b31e1a3685dff950">get_chain_id</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="351" column="1" bodyfile="libraries/net/node.cpp" bodystart="5075" bodyend="5078"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper_1a8e3f17a7b8213696c5d034885eebcddb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; <ref refid="namespacegraphene_1_1net_1ae6a74bd458bbef0d6d21dd35c74c6235" kindref="member">item_hash_t</ref> &gt;</type>
        <definition>std::vector&lt; item_hash_t &gt; graphene::net::detail::statistics_gathering_node_delegate_wrapper::get_blockchain_synopsis</definition>
        <argsstring>(const item_hash_t &amp;reference_point, uint32_t number_of_blocks_after_reference_point) override</argsstring>
        <name>get_blockchain_synopsis</name>
        <reimplements refid="classgraphene_1_1net_1_1node__delegate_1a0f144d17fc3bd79ac59ef4f3372d406a">get_blockchain_synopsis</reimplements>
        <param>
          <type>const <ref refid="namespacegraphene_1_1net_1ae6a74bd458bbef0d6d21dd35c74c6235" kindref="member">item_hash_t</ref> &amp;</type>
          <declname>reference_point</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>number_of_blocks_after_reference_point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a synopsis of the blockchain used for syncing. This consists of a list of selected item hashes from our current preferred blockchain, exponentially falling off into the past. Horrible explanation.</para><para>If the blockchain is empty, it will return the empty list. If the blockchain has one block, it will return a list containing just that block. If it contains more than one block: the first element in the list will be the hash of the highest numbered block that we cannot undo the second element will be the hash of an item at the half way point in the undoable segment of the blockchain the third will be ~3/4 of the way through the undoable segment of the block chain the fourth will be at ~7/8... &amp;c. the last item in the list will be the hash of the most recent block on our preferred chain </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="352" column="1" bodyfile="libraries/net/node.cpp" bodystart="5080" bodyend="5083"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper_1a9197651148a4e99fbca84e93217ffff8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void graphene::net::detail::statistics_gathering_node_delegate_wrapper::sync_status</definition>
        <argsstring>(uint32_t item_type, uint32_t item_count) override</argsstring>
        <name>sync_status</name>
        <reimplements refid="classgraphene_1_1net_1_1node__delegate_1a0f6d68640e7fca4c2f7effbcddcdd9f1">sync_status</reimplements>
        <param>
          <type>uint32_t</type>
          <declname>item_type</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>item_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Call this after the call to handle_message succeeds.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item_type</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the item we&apos;re synchronizing, will be the same as item passed to the sync_from() call </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item_count</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of items known to the node that haven&apos;t been sent to handle_item() yet. After <computeroutput>item_count</computeroutput> more calls to handle_item(), the node will be in sync </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="354" column="1" bodyfile="libraries/net/node.cpp" bodystart="5085" bodyend="5088"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper_1afe1e00af0b540b4e7f943bb90484f340" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void graphene::net::detail::statistics_gathering_node_delegate_wrapper::connection_count_changed</definition>
        <argsstring>(uint32_t c) override</argsstring>
        <name>connection_count_changed</name>
        <reimplements refid="classgraphene_1_1net_1_1node__delegate_1aeb54b89d68318b06a155f5eff640f2df">connection_count_changed</reimplements>
        <param>
          <type>uint32_t</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Call any time the number of connected peers changes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="355" column="1" bodyfile="libraries/net/node.cpp" bodystart="5090" bodyend="5093"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper_1a757c799af3450172b429a9e30d8fd2a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>uint32_t</type>
        <definition>uint32_t graphene::net::detail::statistics_gathering_node_delegate_wrapper::get_block_number</definition>
        <argsstring>(const item_hash_t &amp;block_id) override</argsstring>
        <name>get_block_number</name>
        <reimplements refid="classgraphene_1_1net_1_1node__delegate_1a8620fff6f74e76e5583f4046f7ca3b46">get_block_number</reimplements>
        <param>
          <type>const <ref refid="namespacegraphene_1_1net_1ae6a74bd458bbef0d6d21dd35c74c6235" kindref="member">item_hash_t</ref> &amp;</type>
          <declname>block_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="356" column="1" bodyfile="libraries/net/node.cpp" bodystart="5095" bodyend="5100"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper_1a2a664b7a1494f7f4b8691300af01372d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classfc_1_1time__point__sec" kindref="compound">fc::time_point_sec</ref></type>
        <definition>fc::time_point_sec graphene::net::detail::statistics_gathering_node_delegate_wrapper::get_block_time</definition>
        <argsstring>(const item_hash_t &amp;block_id) override</argsstring>
        <name>get_block_time</name>
        <reimplements refid="classgraphene_1_1net_1_1node__delegate_1a4795a26af1b8ac700479e7e0fd293bd0">get_block_time</reimplements>
        <param>
          <type>const <ref refid="namespacegraphene_1_1net_1ae6a74bd458bbef0d6d21dd35c74c6235" kindref="member">item_hash_t</ref> &amp;</type>
          <declname>block_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the time a block was produced (if block_id = 0, returns genesis time). If we don&apos;t know about the block, returns time_point_sec::min() </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="357" column="1" bodyfile="libraries/net/node.cpp" bodystart="5102" bodyend="5105"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper_1acbbbaf0262662158065a355113885b81" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacegraphene_1_1net_1ae6a74bd458bbef0d6d21dd35c74c6235" kindref="member">item_hash_t</ref></type>
        <definition>item_hash_t graphene::net::detail::statistics_gathering_node_delegate_wrapper::get_head_block_id</definition>
        <argsstring>() const override</argsstring>
        <name>get_head_block_id</name>
        <reimplements refid="classgraphene_1_1net_1_1node__delegate_1ae9da839865d1ac8902096b65c7e13502">get_head_block_id</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="358" column="1" bodyfile="libraries/net/node.cpp" bodystart="5107" bodyend="5110"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper_1a1ddb874ef9e6b37f3f317ac128ab75e9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>uint32_t</type>
        <definition>uint32_t graphene::net::detail::statistics_gathering_node_delegate_wrapper::estimate_last_known_fork_from_git_revision_timestamp</definition>
        <argsstring>(uint32_t unix_timestamp) const override</argsstring>
        <name>estimate_last_known_fork_from_git_revision_timestamp</name>
        <reimplements refid="classgraphene_1_1net_1_1node__delegate_1ac9075e9cdef0eb9d3757ef375efcdff1">estimate_last_known_fork_from_git_revision_timestamp</reimplements>
        <param>
          <type>uint32_t</type>
          <declname>unix_timestamp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="359" column="1" bodyfile="libraries/net/node.cpp" bodystart="5112" bodyend="5115"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper_1a792629477c7ab4cbedbd7e3bdbb28665" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void graphene::net::detail::statistics_gathering_node_delegate_wrapper::error_encountered</definition>
        <argsstring>(const std::string &amp;message, const fc::oexception &amp;error) override</argsstring>
        <name>error_encountered</name>
        <reimplements refid="classgraphene_1_1net_1_1node__delegate_1a1e4d4a7ce301380c67d2908c4d8e8aeb">error_encountered</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <param>
          <type>const <ref refid="namespacefc_1a16f272a3d05d2641cb2bf67bac4673dc" kindref="member">fc::oexception</ref> &amp;</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="360" column="1" bodyfile="libraries/net/node.cpp" bodystart="5117" bodyend="5120"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper_1a2f7f2231d16ecbaaad38079559a3d0a8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>uint8_t</type>
        <definition>uint8_t graphene::net::detail::statistics_gathering_node_delegate_wrapper::get_current_block_interval_in_seconds</definition>
        <argsstring>() const override</argsstring>
        <name>get_current_block_interval_in_seconds</name>
        <reimplements refid="classgraphene_1_1net_1_1node__delegate_1a74351fae3daf10fcb9c5ae2505eeab19">get_current_block_interval_in_seconds</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="361" column="1" bodyfile="libraries/net/node.cpp" bodystart="5122" bodyend="5125"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="6247">
        <label>graphene::net::detail::statistics_gathering_node_delegate_wrapper</label>
        <link refid="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper"/>
        <childnode refid="6248" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6248">
        <label>graphene::net::node_delegate</label>
        <link refid="classgraphene_1_1net_1_1node__delegate"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6249">
        <label>graphene::net::detail::statistics_gathering_node_delegate_wrapper</label>
        <link refid="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper"/>
        <childnode refid="6250" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6250">
        <label>graphene::net::node_delegate</label>
        <link refid="classgraphene_1_1net_1_1node__delegate"/>
      </node>
    </collaborationgraph>
    <location file="libraries/net/node_impl.hxx" line="233" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="232" bodyend="362"/>
    <listofallmembers>
      <member refid="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper_1ac181724dfb60ed0944bde838e6a0a838" prot="private" virt="non-virtual"><scope>graphene::net::detail::statistics_gathering_node_delegate_wrapper</scope><name>_node_delegate</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper_1a8b3c25ae5b681ab943f48c8263a605d0" prot="private" virt="non-virtual"><scope>graphene::net::detail::statistics_gathering_node_delegate_wrapper</scope><name>_thread</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper_1a1624894149e76f131041cc1af9f85b7e" prot="private" virt="non-virtual"><scope>graphene::net::detail::statistics_gathering_node_delegate_wrapper</scope><name>call_stats_accumulator</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper_1afe1e00af0b540b4e7f943bb90484f340" prot="public" virt="virtual"><scope>graphene::net::detail::statistics_gathering_node_delegate_wrapper</scope><name>connection_count_changed</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper_1a792629477c7ab4cbedbd7e3bdbb28665" prot="public" virt="virtual"><scope>graphene::net::detail::statistics_gathering_node_delegate_wrapper</scope><name>error_encountered</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper_1a1ddb874ef9e6b37f3f317ac128ab75e9" prot="public" virt="virtual"><scope>graphene::net::detail::statistics_gathering_node_delegate_wrapper</scope><name>estimate_last_known_fork_from_git_revision_timestamp</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper_1a2929f37b4d1b3710dfced7cbcb628941" prot="public" virt="virtual"><scope>graphene::net::detail::statistics_gathering_node_delegate_wrapper</scope><name>get_block_ids</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper_1a757c799af3450172b429a9e30d8fd2a9" prot="public" virt="virtual"><scope>graphene::net::detail::statistics_gathering_node_delegate_wrapper</scope><name>get_block_number</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper_1a2a664b7a1494f7f4b8691300af01372d" prot="public" virt="virtual"><scope>graphene::net::detail::statistics_gathering_node_delegate_wrapper</scope><name>get_block_time</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper_1a8e3f17a7b8213696c5d034885eebcddb" prot="public" virt="virtual"><scope>graphene::net::detail::statistics_gathering_node_delegate_wrapper</scope><name>get_blockchain_synopsis</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper_1ab987dcd9e4000a1ef5c311aac7330048" prot="public" virt="non-virtual"><scope>graphene::net::detail::statistics_gathering_node_delegate_wrapper</scope><name>get_call_statistics</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper_1a84050ceda8ee5729b2f8e21b7a8448ad" prot="public" virt="virtual"><scope>graphene::net::detail::statistics_gathering_node_delegate_wrapper</scope><name>get_chain_id</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper_1a2f7f2231d16ecbaaad38079559a3d0a8" prot="public" virt="virtual"><scope>graphene::net::detail::statistics_gathering_node_delegate_wrapper</scope><name>get_current_block_interval_in_seconds</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper_1acbbbaf0262662158065a355113885b81" prot="public" virt="virtual"><scope>graphene::net::detail::statistics_gathering_node_delegate_wrapper</scope><name>get_head_block_id</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper_1a98c70bc00568dd0946526e73b6067d37" prot="public" virt="virtual"><scope>graphene::net::detail::statistics_gathering_node_delegate_wrapper</scope><name>get_item</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper_1ab7f843bf1cc02857465130dd34999580" prot="public" virt="virtual"><scope>graphene::net::detail::statistics_gathering_node_delegate_wrapper</scope><name>handle_block</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper_1a825a59ae61898c188270c66f91803ae0" prot="public" virt="virtual"><scope>graphene::net::detail::statistics_gathering_node_delegate_wrapper</scope><name>handle_message</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper_1a4f226499fd8a014448a21b8016a3cb86" prot="public" virt="virtual"><scope>graphene::net::detail::statistics_gathering_node_delegate_wrapper</scope><name>handle_transaction</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper_1a2380752b08d06a0ebc904cd5311c1b53" prot="public" virt="virtual"><scope>graphene::net::detail::statistics_gathering_node_delegate_wrapper</scope><name>has_item</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper_1af2063679a7be2f9f5c34fde9fe11df27" prot="public" virt="non-virtual"><scope>graphene::net::detail::statistics_gathering_node_delegate_wrapper</scope><name>statistics_gathering_node_delegate_wrapper</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1statistics__gathering__node__delegate__wrapper_1a9197651148a4e99fbca84e93217ffff8" prot="public" virt="virtual"><scope>graphene::net::detail::statistics_gathering_node_delegate_wrapper</scope><name>sync_status</name></member>
      <member refid="classgraphene_1_1net_1_1node__delegate_1a9c17b7796f2f106c161e2cf0c9c6b66b" prot="public" virt="virtual"><scope>graphene::net::detail::statistics_gathering_node_delegate_wrapper</scope><name>~node_delegate</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
