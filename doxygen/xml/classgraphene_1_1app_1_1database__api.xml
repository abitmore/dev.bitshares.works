<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classgraphene_1_1app_1_1database__api" kind="class" language="C++" prot="public">
    <compoundname>graphene::app::database_api</compoundname>
    <includes refid="database__api_8hpp" local="no">database_api.hpp</includes>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a20b46d7e5663c52b0ea882566081be63" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1samet__fund__object" kindref="compound">samet_fund_object</ref> &gt;</type>
        <definition>vector&lt; samet_fund_object &gt; graphene::app::database_api::list_samet_funds</definition>
        <argsstring>(const optional&lt; uint32_t &gt; &amp;limit=optional&lt; uint32_t &gt;(), const optional&lt; samet_fund_id_type &gt; &amp;start_id=optional&lt; samet_fund_id_type &gt;()) const</argsstring>
        <name>list_samet_funds</name>
        <param>
          <type>const optional&lt; uint32_t &gt; &amp;</type>
          <declname>limit</declname>
          <defval>optional&lt; uint32_t &gt;()</defval>
        </param>
        <param>
          <type>const optional&lt; samet_fund_id_type &gt; &amp;</type>
          <declname>start_id</declname>
          <defval>optional&lt; samet_fund_id_type &gt;()</defval>
        </param>
        <briefdescription>
<para>Get a list of SameT Funds. </para>        </briefdescription>
        <detaileddescription>
<para>SameT Funds <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>The limitation of items each query can fetch, not greater than the configured value of <emphasis>api_limit_get_samet_funds</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Start SameT Fund id, fetch items whose IDs are greater than or equal to this ID </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The SameT Funds</para></simplesect>
<simplesect kind="note"><para><orderedlist>
<listitem><para><computeroutput>limit</computeroutput> can be omitted or be <emphasis>null</emphasis>, if so the configured value of <emphasis>api_limit_get_samet_funds</emphasis> will be used</para></listitem><listitem><para><computeroutput>start_id</computeroutput> can be omitted or be <emphasis>null</emphasis>, if so the api will return the &quot;first page&quot; of data</para></listitem><listitem><para>One or more optional parameters can be omitted from the end of the parameter list, and the optional parameters in the middle cannot be omitted (but can be <emphasis>null</emphasis>). </para></listitem></orderedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="881" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2011" bodyend="2020"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a65bd4a0a72d2b735e7400ba47a6682c6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1samet__fund__object" kindref="compound">samet_fund_object</ref> &gt;</type>
        <definition>vector&lt; samet_fund_object &gt; graphene::app::database_api::get_samet_funds_by_owner</definition>
        <argsstring>(const std::string &amp;account_name_or_id, const optional&lt; uint32_t &gt; &amp;limit=optional&lt; uint32_t &gt;(), const optional&lt; samet_fund_id_type &gt; &amp;start_id=optional&lt; samet_fund_id_type &gt;()) const</argsstring>
        <name>get_samet_funds_by_owner</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>account_name_or_id</declname>
        </param>
        <param>
          <type>const optional&lt; uint32_t &gt; &amp;</type>
          <declname>limit</declname>
          <defval>optional&lt; uint32_t &gt;()</defval>
        </param>
        <param>
          <type>const optional&lt; samet_fund_id_type &gt; &amp;</type>
          <declname>start_id</declname>
          <defval>optional&lt; samet_fund_id_type &gt;()</defval>
        </param>
        <briefdescription>
<para>Get a list of SameT Funds by the name or ID of the owner account. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account_name_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>name or ID of the owner account </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>The limitation of items each query can fetch, not greater than the configured value of <emphasis>api_limit_get_samet_funds</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Start SameT Fund id, fetch items whose IDs are greater than or equal to this ID </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The SameT Funds</para></simplesect>
<simplesect kind="note"><para><orderedlist>
<listitem><para>If <computeroutput>account_name_or_id</computeroutput> cannot be tied to an account, an error will be returned</para></listitem><listitem><para><computeroutput>limit</computeroutput> can be omitted or be <emphasis>null</emphasis>, if so the configured value of <emphasis>api_limit_get_samet_funds</emphasis> will be used</para></listitem><listitem><para><computeroutput>start_id</computeroutput> can be omitted or be <emphasis>null</emphasis>, if so the api will return the &quot;first page&quot; of data</para></listitem><listitem><para>One or more optional parameters can be omitted from the end of the parameter list, and the optional parameters in the middle cannot be omitted (but can be <emphasis>null</emphasis>). </para></listitem></orderedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="901" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2022" bodyend="2033"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a8b7045a7151c2a7a538e65c771b77b1c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1samet__fund__object" kindref="compound">samet_fund_object</ref> &gt;</type>
        <definition>vector&lt; samet_fund_object &gt; graphene::app::database_api::get_samet_funds_by_asset</definition>
        <argsstring>(const std::string &amp;asset_symbol_or_id, const optional&lt; uint32_t &gt; &amp;limit=optional&lt; uint32_t &gt;(), const optional&lt; samet_fund_id_type &gt; &amp;start_id=optional&lt; samet_fund_id_type &gt;()) const</argsstring>
        <name>get_samet_funds_by_asset</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>asset_symbol_or_id</declname>
        </param>
        <param>
          <type>const optional&lt; uint32_t &gt; &amp;</type>
          <declname>limit</declname>
          <defval>optional&lt; uint32_t &gt;()</defval>
        </param>
        <param>
          <type>const optional&lt; samet_fund_id_type &gt; &amp;</type>
          <declname>start_id</declname>
          <defval>optional&lt; samet_fund_id_type &gt;()</defval>
        </param>
        <briefdescription>
<para>Get a list of SameT Funds by the symbol or ID of the asset type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>asset_symbol_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol or ID of the asset type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>The limitation of items each query can fetch, not greater than the configured value of <emphasis>api_limit_get_samet_funds</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Start SameT Fund id, fetch items whose IDs are greater than or equal to this ID </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The SameT Funds</para></simplesect>
<simplesect kind="note"><para><orderedlist>
<listitem><para>If <computeroutput>asset_symbol_or_id</computeroutput> cannot be tied to an asset, an error will be returned</para></listitem><listitem><para><computeroutput>limit</computeroutput> can be omitted or be <emphasis>null</emphasis>, if so the configured value of <emphasis>api_limit_get_samet_funds</emphasis> will be used</para></listitem><listitem><para><computeroutput>start_id</computeroutput> can be omitted or be <emphasis>null</emphasis>, if so the api will return the &quot;first page&quot; of data</para></listitem><listitem><para>One or more optional parameters can be omitted from the end of the parameter list, and the optional parameters in the middle cannot be omitted (but can be <emphasis>null</emphasis>). </para></listitem></orderedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="922" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2035" bodyend="2046"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1ae88a4c2140cf8e973326c6a32213eb72" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1credit__offer__object" kindref="compound">credit_offer_object</ref> &gt;</type>
        <definition>vector&lt; credit_offer_object &gt; graphene::app::database_api::list_credit_offers</definition>
        <argsstring>(const optional&lt; uint32_t &gt; &amp;limit=optional&lt; uint32_t &gt;(), const optional&lt; credit_offer_id_type &gt; &amp;start_id=optional&lt; credit_offer_id_type &gt;()) const</argsstring>
        <name>list_credit_offers</name>
        <param>
          <type>const optional&lt; uint32_t &gt; &amp;</type>
          <declname>limit</declname>
          <defval>optional&lt; uint32_t &gt;()</defval>
        </param>
        <param>
          <type>const optional&lt; credit_offer_id_type &gt; &amp;</type>
          <declname>start_id</declname>
          <defval>optional&lt; credit_offer_id_type &gt;()</defval>
        </param>
        <briefdescription>
<para>Get a list of credit offers. </para>        </briefdescription>
        <detaileddescription>
<para>Credit offers and credit deals <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>The limitation of items each query can fetch, not greater than the configured value of <emphasis>api_limit_get_credit_offers</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Start credit offer id, fetch items whose IDs are greater than or equal to this ID </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The credit offers</para></simplesect>
<simplesect kind="note"><para><orderedlist>
<listitem><para><computeroutput>limit</computeroutput> can be omitted or be <emphasis>null</emphasis>, if so the configured value of <emphasis>api_limit_get_credit_offers</emphasis> will be used</para></listitem><listitem><para><computeroutput>start_id</computeroutput> can be omitted or be <emphasis>null</emphasis>, if so the api will return the &quot;first page&quot; of data</para></listitem><listitem><para>One or more optional parameters can be omitted from the end of the parameter list, and the optional parameters in the middle cannot be omitted (but can be <emphasis>null</emphasis>). </para></listitem></orderedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="947" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2055" bodyend="2064"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1aa50f87f1fcb9e11e8fd1e970c9619bc0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1credit__offer__object" kindref="compound">credit_offer_object</ref> &gt;</type>
        <definition>vector&lt; credit_offer_object &gt; graphene::app::database_api::get_credit_offers_by_owner</definition>
        <argsstring>(const std::string &amp;account_name_or_id, const optional&lt; uint32_t &gt; &amp;limit=optional&lt; uint32_t &gt;(), const optional&lt; credit_offer_id_type &gt; &amp;start_id=optional&lt; credit_offer_id_type &gt;()) const</argsstring>
        <name>get_credit_offers_by_owner</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>account_name_or_id</declname>
        </param>
        <param>
          <type>const optional&lt; uint32_t &gt; &amp;</type>
          <declname>limit</declname>
          <defval>optional&lt; uint32_t &gt;()</defval>
        </param>
        <param>
          <type>const optional&lt; credit_offer_id_type &gt; &amp;</type>
          <declname>start_id</declname>
          <defval>optional&lt; credit_offer_id_type &gt;()</defval>
        </param>
        <briefdescription>
<para>Get a list of credit offers by the name or ID of the owner account. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account_name_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>name or ID of the owner account </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>The limitation of items each query can fetch, not greater than the configured value of <emphasis>api_limit_get_credit_offers</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Start credit offer id, fetch items whose IDs are greater than or equal to this ID </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The credit offers</para></simplesect>
<simplesect kind="note"><para><orderedlist>
<listitem><para>If <computeroutput>account_name_or_id</computeroutput> cannot be tied to an account, an error will be returned</para></listitem><listitem><para><computeroutput>limit</computeroutput> can be omitted or be <emphasis>null</emphasis>, if so the configured value of <emphasis>api_limit_get_credit_offers</emphasis> will be used</para></listitem><listitem><para><computeroutput>start_id</computeroutput> can be omitted or be <emphasis>null</emphasis>, if so the api will return the &quot;first page&quot; of data</para></listitem><listitem><para>One or more optional parameters can be omitted from the end of the parameter list, and the optional parameters in the middle cannot be omitted (but can be <emphasis>null</emphasis>). </para></listitem></orderedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="967" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2066" bodyend="2077"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a65052e7e93ec254815392730e32622e1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1credit__offer__object" kindref="compound">credit_offer_object</ref> &gt;</type>
        <definition>vector&lt; credit_offer_object &gt; graphene::app::database_api::get_credit_offers_by_asset</definition>
        <argsstring>(const std::string &amp;asset_symbol_or_id, const optional&lt; uint32_t &gt; &amp;limit=optional&lt; uint32_t &gt;(), const optional&lt; credit_offer_id_type &gt; &amp;start_id=optional&lt; credit_offer_id_type &gt;()) const</argsstring>
        <name>get_credit_offers_by_asset</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>asset_symbol_or_id</declname>
        </param>
        <param>
          <type>const optional&lt; uint32_t &gt; &amp;</type>
          <declname>limit</declname>
          <defval>optional&lt; uint32_t &gt;()</defval>
        </param>
        <param>
          <type>const optional&lt; credit_offer_id_type &gt; &amp;</type>
          <declname>start_id</declname>
          <defval>optional&lt; credit_offer_id_type &gt;()</defval>
        </param>
        <briefdescription>
<para>Get a list of credit offers by the symbol or ID of the asset type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>asset_symbol_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol or ID of the asset type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>The limitation of items each query can fetch, not greater than the configured value of <emphasis>api_limit_get_credit_offers</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Start credit offer id, fetch items whose IDs are greater than or equal to this ID </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The credit offers</para></simplesect>
<simplesect kind="note"><para><orderedlist>
<listitem><para>If <computeroutput>asset_symbol_or_id</computeroutput> cannot be tied to an asset, an error will be returned</para></listitem><listitem><para><computeroutput>limit</computeroutput> can be omitted or be <emphasis>null</emphasis>, if so the configured value of <emphasis>api_limit_get_credit_offers</emphasis> will be used</para></listitem><listitem><para><computeroutput>start_id</computeroutput> can be omitted or be <emphasis>null</emphasis>, if so the api will return the &quot;first page&quot; of data</para></listitem><listitem><para>One or more optional parameters can be omitted from the end of the parameter list, and the optional parameters in the middle cannot be omitted (but can be <emphasis>null</emphasis>). </para></listitem></orderedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="988" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2079" bodyend="2090"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a9bbd01c75de6c94d28de2001218c4ef6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1credit__deal__object" kindref="compound">credit_deal_object</ref> &gt;</type>
        <definition>vector&lt; credit_deal_object &gt; graphene::app::database_api::list_credit_deals</definition>
        <argsstring>(const optional&lt; uint32_t &gt; &amp;limit=optional&lt; uint32_t &gt;(), const optional&lt; credit_deal_id_type &gt; &amp;start_id=optional&lt; credit_deal_id_type &gt;()) const</argsstring>
        <name>list_credit_deals</name>
        <param>
          <type>const optional&lt; uint32_t &gt; &amp;</type>
          <declname>limit</declname>
          <defval>optional&lt; uint32_t &gt;()</defval>
        </param>
        <param>
          <type>const optional&lt; credit_deal_id_type &gt; &amp;</type>
          <declname>start_id</declname>
          <defval>optional&lt; credit_deal_id_type &gt;()</defval>
        </param>
        <briefdescription>
<para>Get a list of credit deals. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>The limitation of items each query can fetch, not greater than the configured value of <emphasis>api_limit_get_credit_offers</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Start credit deal id, fetch items whose IDs are greater than or equal to this ID </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The credit deals</para></simplesect>
<simplesect kind="note"><para><orderedlist>
<listitem><para><computeroutput>limit</computeroutput> can be omitted or be <emphasis>null</emphasis>, if so the configured value of <emphasis>api_limit_get_credit_offers</emphasis> will be used</para></listitem><listitem><para><computeroutput>start_id</computeroutput> can be omitted or be <emphasis>null</emphasis>, if so the api will return the &quot;first page&quot; of data</para></listitem><listitem><para>One or more optional parameters can be omitted from the end of the parameter list, and the optional parameters in the middle cannot be omitted (but can be <emphasis>null</emphasis>). </para></listitem></orderedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="1007" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2092" bodyend="2101"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a7856b3463b0dfd72262a9afc0f3dd36c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1credit__deal__object" kindref="compound">credit_deal_object</ref> &gt;</type>
        <definition>vector&lt; credit_deal_object &gt; graphene::app::database_api::get_credit_deals_by_offer_id</definition>
        <argsstring>(const credit_offer_id_type &amp;offer_id, const optional&lt; uint32_t &gt; &amp;limit=optional&lt; uint32_t &gt;(), const optional&lt; credit_deal_id_type &gt; &amp;start_id=optional&lt; credit_deal_id_type &gt;()) const</argsstring>
        <name>get_credit_deals_by_offer_id</name>
        <param>
          <type>const credit_offer_id_type &amp;</type>
          <declname>offer_id</declname>
        </param>
        <param>
          <type>const optional&lt; uint32_t &gt; &amp;</type>
          <declname>limit</declname>
          <defval>optional&lt; uint32_t &gt;()</defval>
        </param>
        <param>
          <type>const optional&lt; credit_deal_id_type &gt; &amp;</type>
          <declname>start_id</declname>
          <defval>optional&lt; credit_deal_id_type &gt;()</defval>
        </param>
        <briefdescription>
<para>Get a list of credit deals by the ID of a credit offer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>offer_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the credit offer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>The limitation of items each query can fetch, not greater than the configured value of <emphasis>api_limit_get_credit_offers</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Start credit deal id, fetch items whose IDs are greater than or equal to this ID </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The credit deals</para></simplesect>
<simplesect kind="note"><para><orderedlist>
<listitem><para>If <computeroutput>offer_id</computeroutput> cannot be tied to a credit offer, an empty list will be returned</para></listitem><listitem><para><computeroutput>limit</computeroutput> can be omitted or be <emphasis>null</emphasis>, if so the configured value of <emphasis>api_limit_get_credit_offers</emphasis> will be used</para></listitem><listitem><para><computeroutput>start_id</computeroutput> can be omitted or be <emphasis>null</emphasis>, if so the api will return the &quot;first page&quot; of data</para></listitem><listitem><para>One or more optional parameters can be omitted from the end of the parameter list, and the optional parameters in the middle cannot be omitted (but can be <emphasis>null</emphasis>). </para></listitem></orderedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="1027" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2103" bodyend="2113"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a5e2dfd45db157be4aab1560613265bc1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1credit__deal__object" kindref="compound">credit_deal_object</ref> &gt;</type>
        <definition>vector&lt; credit_deal_object &gt; graphene::app::database_api::get_credit_deals_by_offer_owner</definition>
        <argsstring>(const std::string &amp;account_name_or_id, const optional&lt; uint32_t &gt; &amp;limit=optional&lt; uint32_t &gt;(), const optional&lt; credit_deal_id_type &gt; &amp;start_id=optional&lt; credit_deal_id_type &gt;()) const</argsstring>
        <name>get_credit_deals_by_offer_owner</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>account_name_or_id</declname>
        </param>
        <param>
          <type>const optional&lt; uint32_t &gt; &amp;</type>
          <declname>limit</declname>
          <defval>optional&lt; uint32_t &gt;()</defval>
        </param>
        <param>
          <type>const optional&lt; credit_deal_id_type &gt; &amp;</type>
          <declname>start_id</declname>
          <defval>optional&lt; credit_deal_id_type &gt;()</defval>
        </param>
        <briefdescription>
<para>Get a list of credit deals by the name or ID of a credit offer owner account. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account_name_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>name or ID of the credit offer owner account </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>The limitation of items each query can fetch, not greater than the configured value of <emphasis>api_limit_get_credit_offers</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Start credit deal id, fetch items whose IDs are greater than or equal to this ID </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The credit deals</para></simplesect>
<simplesect kind="note"><para><orderedlist>
<listitem><para>If <computeroutput>account_name_or_id</computeroutput> cannot be tied to an account, an error will be returned</para></listitem><listitem><para><computeroutput>limit</computeroutput> can be omitted or be <emphasis>null</emphasis>, if so the configured value of <emphasis>api_limit_get_credit_offers</emphasis> will be used</para></listitem><listitem><para><computeroutput>start_id</computeroutput> can be omitted or be <emphasis>null</emphasis>, if so the api will return the &quot;first page&quot; of data</para></listitem><listitem><para>One or more optional parameters can be omitted from the end of the parameter list, and the optional parameters in the middle cannot be omitted (but can be <emphasis>null</emphasis>). </para></listitem></orderedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="1048" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2115" bodyend="2126"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1af1233bfc166711b78b4d34d3bb094047" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1credit__deal__object" kindref="compound">credit_deal_object</ref> &gt;</type>
        <definition>vector&lt; credit_deal_object &gt; graphene::app::database_api::get_credit_deals_by_borrower</definition>
        <argsstring>(const std::string &amp;account_name_or_id, const optional&lt; uint32_t &gt; &amp;limit=optional&lt; uint32_t &gt;(), const optional&lt; credit_deal_id_type &gt; &amp;start_id=optional&lt; credit_deal_id_type &gt;()) const</argsstring>
        <name>get_credit_deals_by_borrower</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>account_name_or_id</declname>
        </param>
        <param>
          <type>const optional&lt; uint32_t &gt; &amp;</type>
          <declname>limit</declname>
          <defval>optional&lt; uint32_t &gt;()</defval>
        </param>
        <param>
          <type>const optional&lt; credit_deal_id_type &gt; &amp;</type>
          <declname>start_id</declname>
          <defval>optional&lt; credit_deal_id_type &gt;()</defval>
        </param>
        <briefdescription>
<para>Get a list of credit deals by the name or ID of a borrower account. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account_name_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>name or ID of the borrower account </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>The limitation of items each query can fetch, not greater than the configured value of <emphasis>api_limit_get_credit_offers</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Start credit deal id, fetch items whose IDs are greater than or equal to this ID </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The credit deals</para></simplesect>
<simplesect kind="note"><para><orderedlist>
<listitem><para>If <computeroutput>account_name_or_id</computeroutput> cannot be tied to an account, an error will be returned</para></listitem><listitem><para><computeroutput>limit</computeroutput> can be omitted or be <emphasis>null</emphasis>, if so the configured value of <emphasis>api_limit_get_credit_offers</emphasis> will be used</para></listitem><listitem><para><computeroutput>start_id</computeroutput> can be omitted or be <emphasis>null</emphasis>, if so the api will return the &quot;first page&quot; of data</para></listitem><listitem><para>One or more optional parameters can be omitted from the end of the parameter list, and the optional parameters in the middle cannot be omitted (but can be <emphasis>null</emphasis>). </para></listitem></orderedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="1069" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2128" bodyend="2139"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a16b2614e7f4476d717fc3e38f1eb1e5e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1credit__deal__object" kindref="compound">credit_deal_object</ref> &gt;</type>
        <definition>vector&lt; credit_deal_object &gt; graphene::app::database_api::get_credit_deals_by_debt_asset</definition>
        <argsstring>(const std::string &amp;asset_symbol_or_id, const optional&lt; uint32_t &gt; &amp;limit=optional&lt; uint32_t &gt;(), const optional&lt; credit_deal_id_type &gt; &amp;start_id=optional&lt; credit_deal_id_type &gt;()) const</argsstring>
        <name>get_credit_deals_by_debt_asset</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>asset_symbol_or_id</declname>
        </param>
        <param>
          <type>const optional&lt; uint32_t &gt; &amp;</type>
          <declname>limit</declname>
          <defval>optional&lt; uint32_t &gt;()</defval>
        </param>
        <param>
          <type>const optional&lt; credit_deal_id_type &gt; &amp;</type>
          <declname>start_id</declname>
          <defval>optional&lt; credit_deal_id_type &gt;()</defval>
        </param>
        <briefdescription>
<para>Get a list of credit deals by the symbol or ID of the debt asset type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>asset_symbol_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol or ID of the debt asset type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>The limitation of items each query can fetch, not greater than the configured value of <emphasis>api_limit_get_credit_offers</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Start credit deal id, fetch items whose IDs are greater than or equal to this ID </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The credit deals</para></simplesect>
<simplesect kind="note"><para><orderedlist>
<listitem><para>If <computeroutput>asset_symbol_or_id</computeroutput> cannot be tied to an asset, an error will be returned</para></listitem><listitem><para><computeroutput>limit</computeroutput> can be omitted or be <emphasis>null</emphasis>, if so the configured value of <emphasis>api_limit_get_credit_offers</emphasis> will be used</para></listitem><listitem><para><computeroutput>start_id</computeroutput> can be omitted or be <emphasis>null</emphasis>, if so the api will return the &quot;first page&quot; of data</para></listitem><listitem><para>One or more optional parameters can be omitted from the end of the parameter list, and the optional parameters in the middle cannot be omitted (but can be <emphasis>null</emphasis>). </para></listitem></orderedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="1090" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2141" bodyend="2152"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1abbb420107a13b57e11296c52ada69cf4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1credit__deal__object" kindref="compound">credit_deal_object</ref> &gt;</type>
        <definition>vector&lt; credit_deal_object &gt; graphene::app::database_api::get_credit_deals_by_collateral_asset</definition>
        <argsstring>(const std::string &amp;asset_symbol_or_id, const optional&lt; uint32_t &gt; &amp;limit=optional&lt; uint32_t &gt;(), const optional&lt; credit_deal_id_type &gt; &amp;start_id=optional&lt; credit_deal_id_type &gt;()) const</argsstring>
        <name>get_credit_deals_by_collateral_asset</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>asset_symbol_or_id</declname>
        </param>
        <param>
          <type>const optional&lt; uint32_t &gt; &amp;</type>
          <declname>limit</declname>
          <defval>optional&lt; uint32_t &gt;()</defval>
        </param>
        <param>
          <type>const optional&lt; credit_deal_id_type &gt; &amp;</type>
          <declname>start_id</declname>
          <defval>optional&lt; credit_deal_id_type &gt;()</defval>
        </param>
        <briefdescription>
<para>Get a list of credit deals by the symbol or ID of the collateral asset type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>asset_symbol_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol or ID of the collateral asset type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>The limitation of items each query can fetch, not greater than the configured value of <emphasis>api_limit_get_credit_offers</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Start credit deal id, fetch items whose IDs are greater than or equal to this ID </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The credit deals</para></simplesect>
<simplesect kind="note"><para><orderedlist>
<listitem><para>If <computeroutput>asset_symbol_or_id</computeroutput> cannot be tied to an asset, an error will be returned</para></listitem><listitem><para><computeroutput>limit</computeroutput> can be omitted or be <emphasis>null</emphasis>, if so the configured value of <emphasis>api_limit_get_credit_offers</emphasis> will be used</para></listitem><listitem><para><computeroutput>start_id</computeroutput> can be omitted or be <emphasis>null</emphasis>, if so the api will return the &quot;first page&quot; of data</para></listitem><listitem><para>One or more optional parameters can be omitted from the end of the parameter list, and the optional parameters in the middle cannot be omitted (but can be <emphasis>null</emphasis>). </para></listitem></orderedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="1111" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2154" bodyend="2165"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classgraphene_1_1app_1_1database__api_1a5b8f07ff78c43a35bbda1afe09ab29c1" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classgraphene_1_1app_1_1database__api__impl" kindref="compound">database_api_impl</ref> &gt;</type>
        <definition>std::shared_ptr&lt; database_api_impl &gt; graphene::app::database_api::my</definition>
        <argsstring></argsstring>
        <name>my</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="1461" column="1" bodyfile="libraries/app/include/graphene/app/database_api.hpp" bodystart="1461" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1ad81929c19600a30b92e8c387338264ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::app::database_api::database_api</definition>
        <argsstring>(graphene::chain::database &amp;db, const application_options *app_options=nullptr)</argsstring>
        <name>database_api</name>
        <param>
          <type><ref refid="classgraphene_1_1chain_1_1database" kindref="compound">graphene::chain::database</ref> &amp;</type>
          <declname>db</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1app_1_1application__options" kindref="compound">application_options</ref> *</type>
          <declname>app_options</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="73" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a3510335e90925e050398d74bc9d22dd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::app::database_api::~database_api</definition>
        <argsstring>()</argsstring>
        <name>~database_api</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a1f20e51d290fc3ac2409c49c058585b3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacefc_1a2e5e6bdb302dfb79e684336f3fbbd8bc" kindref="member">fc::variants</ref></type>
        <definition>fc::variants graphene::app::database_api::get_objects</definition>
        <argsstring>(const vector&lt; object_id_type &gt; &amp;ids, optional&lt; bool &gt; subscribe=optional&lt; bool &gt;()) const</argsstring>
        <name>get_objects</name>
        <param>
          <type>const vector&lt; object_id_type &gt; &amp;</type>
          <declname>ids</declname>
        </param>
        <param>
          <type>optional&lt; bool &gt;</type>
          <declname>subscribe</declname>
          <defval>optional&lt; bool &gt;()</defval>
        </param>
        <briefdescription>
<para>Get the objects corresponding to the provided IDs. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ids</parametername>
</parameternamelist>
<parameterdescription>
<para>IDs of the objects to retrieve </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subscribe</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>true</emphasis> to subscribe to the queried objects, <emphasis>false</emphasis> to not subscribe, <emphasis>null</emphasis> to subscribe or not subscribe according to current auto-subscription setting (see <ref refid="classgraphene_1_1app_1_1database__api_1a7ef2faf3e3e402ea9572067554c2dd2c" kindref="member">set_auto_subscription</ref>) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The objects retrieved, in the order they are mentioned in ids </para></simplesect>
<simplesect kind="note"><para>operation_history_object (1.11.x) and account_history_object (2.9.x) can not be subscribed.</para></simplesect>
If any of the provided IDs does not map to an object, a null variant is returned in its position. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="92" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="135" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a66addb6dfc6b60d687bfb17b4401c36e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::database_api::set_subscribe_callback</definition>
        <argsstring>(std::function&lt; void(const variant &amp;)&gt; cb, bool notify_remove_create)</argsstring>
        <name>set_subscribe_callback</name>
        <param>
          <type>std::function&lt; void(const variant &amp;)&gt;</type>
          <declname>cb</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>notify_remove_create</declname>
        </param>
        <briefdescription>
<para>Register a callback handle which then can be used to subscribe to object database changes. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>The callback handle to register </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>notify_remove_create</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether subscribe to universal object creation and removal events. If this is set to true, the API server will notify all newly created objects and ID of all newly removed objects to the client, no matter whether client subscribed to the objects. By default, API servers don&apos;t allow subscribing to universal events, which can be changed on server startup.</para></parameterdescription>
</parameteritem>
</parameterlist>
Note: auto-subscription is enabled by default and can be disabled with <ref refid="classgraphene_1_1app_1_1database__api_1a7ef2faf3e3e402ea9572067554c2dd2c" kindref="member">set_auto_subscription</ref> API. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="110" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="167" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a7ef2faf3e3e402ea9572067554c2dd2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::database_api::set_auto_subscription</definition>
        <argsstring>(bool enable)</argsstring>
        <name>set_auto_subscription</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Set auto-subscription behavior of follow-up API queries. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>whether follow-up API queries will automatically subscribe to queried objects</para></parameterdescription>
</parameteritem>
</parameterlist>
Impacts behavior of these APIs:<itemizedlist>
<listitem><para>get_accounts</para></listitem><listitem><para>get_assets</para></listitem><listitem><para>get_objects</para></listitem><listitem><para>lookup_accounts</para></listitem><listitem><para>get_full_accounts</para></listitem><listitem><para>get_htlc</para></listitem><listitem><para>get_liquidity_pools</para></listitem><listitem><para>get_liquidity_pools_by_share_asset</para></listitem></itemizedlist>
</para><para>Note: auto-subscription is enabled by default</para><para><simplesect kind="see"><para><ref refid="classgraphene_1_1app_1_1database__api_1a66addb6dfc6b60d687bfb17b4401c36e" kindref="member">set_subscribe_callback</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="129" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="186" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a53aa3374ca6b7d063f2f0eb994e5687f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::database_api::set_pending_transaction_callback</definition>
        <argsstring>(std::function&lt; void(const variant &amp;signed_transaction_object)&gt; cb)</argsstring>
        <name>set_pending_transaction_callback</name>
        <param>
          <type>std::function&lt; void(const variant &amp;signed_transaction_object)&gt;</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Register a callback handle which will get notified when a transaction is pushed to database. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>The callback handle to register</para></parameterdescription>
</parameteritem>
</parameterlist>
Note: a transaction can be pushed to database and be popped from database several times while processing, before and after included in a block. Everytime when a push is done, the client will be notified. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="138" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="196" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a5a0bc87af4cb36c11a9a15f5c29d6ea9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::database_api::set_block_applied_callback</definition>
        <argsstring>(std::function&lt; void(const variant &amp;block_id)&gt; cb)</argsstring>
        <name>set_block_applied_callback</name>
        <param>
          <type>std::function&lt; void(const variant &amp;block_id)&gt;</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Register a callback handle which will get notified when a block is pushed to database. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>The callback handle to register </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="143" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="206" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a0c3f545dec20b073131bbd7466940c6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::database_api::cancel_all_subscriptions</definition>
        <argsstring>()</argsstring>
        <name>cancel_all_subscriptions</name>
        <briefdescription>
<para>Stop receiving any notifications. </para>        </briefdescription>
        <detaileddescription>
<para>This unsubscribes from all subscribed markets and objects. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="149" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="216" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a27ae68393da89f5f225c9906a8d568eb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>optional&lt; <ref refid="structgraphene_1_1app_1_1maybe__signed__block__header" kindref="compound">maybe_signed_block_header</ref> &gt;</type>
        <definition>optional&lt; maybe_signed_block_header &gt; graphene::app::database_api::get_block_header</definition>
        <argsstring>(uint32_t block_num, const optional&lt; bool &gt; &amp;with_witness_signature=optional&lt; bool &gt;()) const</argsstring>
        <name>get_block_header</name>
        <param>
          <type>uint32_t</type>
          <declname>block_num</declname>
        </param>
        <param>
          <type>const optional&lt; bool &gt; &amp;</type>
          <declname>with_witness_signature</declname>
          <defval>optional&lt; bool &gt;()</defval>
        </param>
        <briefdescription>
<para>Retrieve a block header. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>block_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Height of the block whose header should be returned </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>with_witness_signature</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to return witness signature. Optional. If omitted or is <emphasis>false</emphasis>, will not return witness signature. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>header of the referenced block, or null if no matching block was found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="162" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="241" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a6d51f441fb5e1ed12b06ecd8b2f95321" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>map&lt; uint32_t, optional&lt; <ref refid="structgraphene_1_1app_1_1maybe__signed__block__header" kindref="compound">maybe_signed_block_header</ref> &gt; &gt;</type>
        <definition>map&lt; uint32_t, optional&lt; maybe_signed_block_header &gt; &gt; graphene::app::database_api::get_block_header_batch</definition>
        <argsstring>(const vector&lt; uint32_t &gt; &amp;block_nums, const optional&lt; bool &gt; &amp;with_witness_signatures=optional&lt; bool &gt;()) const</argsstring>
        <name>get_block_header_batch</name>
        <param>
          <type>const vector&lt; uint32_t &gt; &amp;</type>
          <declname>block_nums</declname>
        </param>
        <param>
          <type>const optional&lt; bool &gt; &amp;</type>
          <declname>with_witness_signatures</declname>
          <defval>optional&lt; bool &gt;()</defval>
        </param>
        <briefdescription>
<para>Retrieve multiple block headers by block numbers. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>block_nums</parametername>
</parameternamelist>
<parameterdescription>
<para>vector containing heights of the blocks whose headers should be returned </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>with_witness_signatures</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to return witness signatures. Optional. If omitted or is <emphasis>false</emphasis>, will not return witness signatures. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>array of headers of the referenced blocks, or null if no matching block was found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="173" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="257" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a865cb0a6e29f07e8854ffe092adb503e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>optional&lt; <ref refid="classgraphene_1_1protocol_1_1signed__block" kindref="compound">signed_block</ref> &gt;</type>
        <definition>optional&lt; signed_block &gt; graphene::app::database_api::get_block</definition>
        <argsstring>(uint32_t block_num) const</argsstring>
        <name>get_block</name>
        <param>
          <type>uint32_t</type>
          <declname>block_num</declname>
        </param>
        <briefdescription>
<para>Retrieve a full, signed block. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>block_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Height of the block to be returned </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the referenced block, or null if no matching block was found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="182" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="275" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1aca15ad75a1150dd83304f419ce54d320" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1processed__transaction" kindref="compound">processed_transaction</ref></type>
        <definition>processed_transaction graphene::app::database_api::get_transaction</definition>
        <argsstring>(uint32_t block_num, uint32_t trx_in_block) const</argsstring>
        <name>get_transaction</name>
        <param>
          <type>uint32_t</type>
          <declname>block_num</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>trx_in_block</declname>
        </param>
        <briefdescription>
<para>used to fetch an individual transaction. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>block_num</parametername>
</parameternamelist>
<parameterdescription>
<para>height of the block to fetch </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trx_in_block</parametername>
</parameternamelist>
<parameterdescription>
<para>the index (sequence number) of the transaction in the block, starts from 0 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the transaction at the given position </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="190" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="285" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a8a17f68497a018e2886abf23f354e278" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>optional&lt; signed_transaction &gt;</type>
        <definition>optional&lt; signed_transaction &gt; graphene::app::database_api::get_recent_transaction_by_id</definition>
        <argsstring>(const transaction_id_type &amp;txid) const</argsstring>
        <name>get_recent_transaction_by_id</name>
        <param>
          <type>const transaction_id_type &amp;</type>
          <declname>txid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If the transaction has not expired, this method will return the transaction for the given ID or it will return NULL if it is not known. Just because it is not known does not mean it wasn&apos;t included in the blockchain.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>txid</parametername>
</parameternamelist>
<parameterdescription>
<para>hash of the transaction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the corresponding transaction if found, or null if not found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="200" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="290" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a51e318453ce7d459cd24e65fe81b14f1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgraphene_1_1chain_1_1chain__property__object" kindref="compound">chain_property_object</ref></type>
        <definition>chain_property_object graphene::app::database_api::get_chain_properties</definition>
        <argsstring>() const</argsstring>
        <name>get_chain_properties</name>
        <briefdescription>
<para>Retrieve the <ref refid="classgraphene_1_1chain_1_1chain__property__object" kindref="compound">graphene::chain::chain_property_object</ref> associated with the chain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="209" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="313" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a6428c7a87e41ad7c30d59e4bbf45afe7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgraphene_1_1chain_1_1global__property__object" kindref="compound">global_property_object</ref></type>
        <definition>global_property_object graphene::app::database_api::get_global_properties</definition>
        <argsstring>() const</argsstring>
        <name>get_global_properties</name>
        <briefdescription>
<para>Retrieve the current <ref refid="classgraphene_1_1chain_1_1global__property__object" kindref="compound">graphene::chain::global_property_object</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="214" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="323" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1aecbae15b1b183ee2b70d8cf5d25c1afa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1variant__object" kindref="compound">fc::variant_object</ref></type>
        <definition>fc::variant_object graphene::app::database_api::get_config</definition>
        <argsstring>() const</argsstring>
        <name>get_config</name>
        <briefdescription>
<para>Retrieve compile-time constants. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="219" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="333" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a940f705654d1baf52af6601b09b4ad9f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegraphene_1_1protocol_1a56354f39ed89f6a0a13fe90ba8228809" kindref="member">chain_id_type</ref></type>
        <definition>chain_id_type graphene::app::database_api::get_chain_id</definition>
        <argsstring>() const</argsstring>
        <name>get_chain_id</name>
        <briefdescription>
<para>Get the chain ID. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="224" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="343" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a3398a20589c01aa807a364a02ec4c728" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgraphene_1_1chain_1_1dynamic__global__property__object" kindref="compound">dynamic_global_property_object</ref></type>
        <definition>dynamic_global_property_object graphene::app::database_api::get_dynamic_global_properties</definition>
        <argsstring>() const</argsstring>
        <name>get_dynamic_global_properties</name>
        <briefdescription>
<para>Retrieve the current <ref refid="classgraphene_1_1chain_1_1dynamic__global__property__object" kindref="compound">graphene::chain::dynamic_global_property_object</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="229" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="353" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a6292d6c9f41e9bf467b105eab60d8ead" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>object_id_type</type>
        <definition>object_id_type graphene::app::database_api::get_next_object_id</definition>
        <argsstring>(uint8_t space_id, uint8_t type_id, bool with_pending_transactions) const</argsstring>
        <name>get_next_object_id</name>
        <param>
          <type>uint8_t</type>
          <declname>space_id</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>type_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>with_pending_transactions</declname>
        </param>
        <briefdescription>
<para>Get the next object ID in an object space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>space_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The space ID </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The type ID </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>with_pending_transactions</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to include pending transactions </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The next object ID to be assigned </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classfc_1_1exception" kindref="compound">fc::exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>If the object space does not exist, or <computeroutput>with_pending_transactions</computeroutput> is <emphasis>false</emphasis> but the <ref refid="namespacegraphene_1_1api__helper__indexes" kindref="compound">api_helper_indexes</ref> plugin is not enabled </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="240" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="363" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1aacba679e16a5dcf764ccccce69987941" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; flat_set&lt; account_id_type &gt; &gt;</type>
        <definition>vector&lt; flat_set&lt; account_id_type &gt; &gt; graphene::app::database_api::get_key_references</definition>
        <argsstring>(vector&lt; public_key_type &gt; keys) const</argsstring>
        <name>get_key_references</name>
        <param>
          <type>vector&lt; public_key_type &gt;</type>
          <declname>keys</declname>
        </param>
        <briefdescription>
<para>Get all accounts that refer to the specified public keys in their owner authority, active authorities or memo key. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keys</parametername>
</parameternamelist>
<parameterdescription>
<para>a list of public keys to query, the quantity should not be greater than the configured value of <emphasis>api_limit_get_key_references</emphasis> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ID of all accounts that refer to the specified keys </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="254" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="386" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a6a8ea15c0976f303ec81fcfe2ebad67a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::app::database_api::is_public_key_registered</definition>
        <argsstring>(string public_key) const</argsstring>
        <name>is_public_key_registered</name>
        <param>
          <type>string</type>
          <declname>public_key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine whether a textual representation of a public key (in Base-58 format) is <emphasis>currently</emphasis> linked to any <emphasis>registered</emphasis> (i.e. non-stealth) account on the blockchain <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>public_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Public key </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Whether a public key is known </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="263" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="447" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a9f82d7f754d32a6ed45b887916ab83ff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>account_id_type</type>
        <definition>account_id_type graphene::app::database_api::get_account_id_from_string</definition>
        <argsstring>(const std::string &amp;name_or_id) const</argsstring>
        <name>get_account_id_from_string</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name_or_id</declname>
        </param>
        <briefdescription>
<para>Get account object from a name or ID. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>name or ID of the account </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Account ID </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="275" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="487" bodyend="490"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a4d888f7e9c38f0465e5346cbdf23e955" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; optional&lt; <ref refid="classgraphene_1_1chain_1_1account__object" kindref="compound">account_object</ref> &gt; &gt;</type>
        <definition>vector&lt; optional&lt; account_object &gt; &gt; graphene::app::database_api::get_accounts</definition>
        <argsstring>(const vector&lt; std::string &gt; &amp;account_names_or_ids, optional&lt; bool &gt; subscribe=optional&lt; bool &gt;()) const</argsstring>
        <name>get_accounts</name>
        <param>
          <type>const vector&lt; std::string &gt; &amp;</type>
          <declname>account_names_or_ids</declname>
        </param>
        <param>
          <type>optional&lt; bool &gt;</type>
          <declname>subscribe</declname>
          <defval>optional&lt; bool &gt;()</defval>
        </param>
        <briefdescription>
<para>Get a list of accounts by names or IDs. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account_names_or_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>names or IDs of the accounts to retrieve </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subscribe</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>true</emphasis> to subscribe to the queried account objects, <emphasis>false</emphasis> to not subscribe, <emphasis>null</emphasis> to subscribe or not subscribe according to current auto-subscription setting (see <ref refid="classgraphene_1_1app_1_1database__api_1a7ef2faf3e3e402ea9572067554c2dd2c" kindref="member">set_auto_subscription</ref>) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The accounts corresponding to the provided names or IDs</para></simplesect>
This function has semantics identical to <ref refid="classgraphene_1_1app_1_1database__api_1a1f20e51d290fc3ac2409c49c058585b3" kindref="member">get_objects</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="287" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="492" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a5ab6a58dd3535028d7e7b713accf8d7c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>map&lt; string, <ref refid="structgraphene_1_1app_1_1full__account" kindref="compound">full_account</ref>, std::less&lt;&gt; &gt;</type>
        <definition>std::map&lt; string, full_account, std::less&lt;&gt; &gt; graphene::app::database_api::get_full_accounts</definition>
        <argsstring>(const vector&lt; string &gt; &amp;names_or_ids, const optional&lt; bool &gt; &amp;subscribe=optional&lt; bool &gt;()) const</argsstring>
        <name>get_full_accounts</name>
        <param>
          <type>const vector&lt; string &gt; &amp;</type>
          <declname>names_or_ids</declname>
        </param>
        <param>
          <type>const optional&lt; bool &gt; &amp;</type>
          <declname>subscribe</declname>
          <defval>optional&lt; bool &gt;()</defval>
        </param>
        <briefdescription>
<para>Fetch objects relevant to the specified accounts and optionally subscribe to updates. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>names_or_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>Each item must be the name or ID of an account to retrieve, the quantity should not be greater than the configured value of <emphasis>api_limit_get_full_accounts</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subscribe</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>true</emphasis> to subscribe to the queried full account objects, <emphasis>false</emphasis> to not subscribe, <emphasis>null</emphasis> to subscribe or not subscribe according to current auto-subscription setting (see <ref refid="classgraphene_1_1app_1_1database__api_1a7ef2faf3e3e402ea9572067554c2dd2c" kindref="member">set_auto_subscription</ref>) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Map of string from <computeroutput>names_or_ids</computeroutput> to the corresponding account</para></simplesect>
This function fetches relevant objects for the given accounts, and subscribes to updates to the given accounts. If any of the strings in <computeroutput>names_or_ids</computeroutput> cannot be tied to an account, that input will be ignored. Other accounts will be retrieved and subscribed. <simplesect kind="note"><para>The maximum number of accounts allowed to subscribe per connection is configured by the <emphasis>api_limit_get_full_accounts_subscribe</emphasis> option. Exceeded subscriptions will be ignored. </para></simplesect>
<simplesect kind="note"><para>For each object type, the maximum number of objects to return is configured by the <emphasis>api_limit_get_full_accounts_lists</emphasis> option. Exceeded objects need to be queried with other APIs. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="309" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="516" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1acb8ab33255ca9bb0cdba566613759a63" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1account__statistics__object" kindref="compound">account_statistics_object</ref> &gt;</type>
        <definition>vector&lt; account_statistics_object &gt; graphene::app::database_api::get_top_voters</definition>
        <argsstring>(uint32_t limit) const</argsstring>
        <name>get_top_voters</name>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Returns vector of voting power sorted by reverse vp_active. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of accounts to retrieve, must not exceed the configured value of <emphasis>api_limit_get_top_voters</emphasis> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Desc Sorted voting power vector </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="319" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="701" bodyend="704"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a038218b56f3325924dedd39622b9bbb9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>optional&lt; <ref refid="classgraphene_1_1chain_1_1account__object" kindref="compound">account_object</ref> &gt;</type>
        <definition>optional&lt; account_object &gt; graphene::app::database_api::get_account_by_name</definition>
        <argsstring>(string name) const</argsstring>
        <name>get_account_by_name</name>
        <param>
          <type>string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Get info of an account by name. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the account to retrieve </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The account holding the provided name </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="326" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="727" bodyend="730"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a43517821a3d5b059134fe02a2cf0ae4a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; account_id_type &gt;</type>
        <definition>vector&lt; account_id_type &gt; graphene::app::database_api::get_account_references</definition>
        <argsstring>(const std::string account_name_or_id) const</argsstring>
        <name>get_account_references</name>
        <param>
          <type>const std::string</type>
          <declname>account_name_or_id</declname>
        </param>
        <briefdescription>
<para>Get all accounts that refer to the specified account in their owner or active authorities. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account_name_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Account name or ID to query </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>all accounts that refer to the specified account in their owner or active authorities </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="333" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="741" bodyend="744"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a2387dfaadd10588b1253e1453640a56d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; optional&lt; <ref refid="classgraphene_1_1chain_1_1account__object" kindref="compound">account_object</ref> &gt; &gt;</type>
        <definition>vector&lt; optional&lt; account_object &gt; &gt; graphene::app::database_api::lookup_account_names</definition>
        <argsstring>(const vector&lt; string &gt; &amp;account_names) const</argsstring>
        <name>lookup_account_names</name>
        <param>
          <type>const vector&lt; string &gt; &amp;</type>
          <declname>account_names</declname>
        </param>
        <briefdescription>
<para>Get a list of accounts by name. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account_names</parametername>
</parameternamelist>
<parameterdescription>
<para>Names of the accounts to retrieve </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The accounts holding the provided names</para></simplesect>
This function has semantics identical to <ref refid="classgraphene_1_1app_1_1database__api_1a1f20e51d290fc3ac2409c49c058585b3" kindref="member">get_objects</ref>, but doesn&apos;t subscribe. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="342" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="767" bodyend="770"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a87b5eecf2a53c1de1700891f94146bfe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>map&lt; string, account_id_type, std::less&lt;&gt; &gt;</type>
        <definition>map&lt; string, account_id_type, std::less&lt;&gt; &gt; graphene::app::database_api::lookup_accounts</definition>
        <argsstring>(const string &amp;lower_bound_name, uint32_t limit, const optional&lt; bool &gt; &amp;subscribe=optional&lt; bool &gt;()) const</argsstring>
        <name>lookup_accounts</name>
        <param>
          <type>const string &amp;</type>
          <declname>lower_bound_name</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <param>
          <type>const optional&lt; bool &gt; &amp;</type>
          <declname>subscribe</declname>
          <defval>optional&lt; bool &gt;()</defval>
        </param>
        <briefdescription>
<para>Get names and IDs for registered accounts. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lower_bound_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower bound of the first name to return </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of results to return, must not exceed the configured value of <emphasis>api_limit_lookup_accounts</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subscribe</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>true</emphasis> to subscribe to the queried account objects, <emphasis>false</emphasis> to not subscribe, <emphasis>null</emphasis> to subscribe or not subscribe according to current auto-subscription setting (see <ref refid="classgraphene_1_1app_1_1database__api_1a7ef2faf3e3e402ea9572067554c2dd2c" kindref="member">set_auto_subscription</ref>) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Map of account names to corresponding IDs</para></simplesect>
<simplesect kind="note"><para>In addition to the common auto-subscription rules, this API will subscribe to the returned account only if <computeroutput>limit</computeroutput> is 1. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="357" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="777" bodyend="782"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1af3a97a65a2b8a714c74a3e3f8d888019" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &gt;</type>
        <definition>vector&lt; asset &gt; graphene::app::database_api::get_account_balances</definition>
        <argsstring>(const std::string &amp;account_name_or_id, const flat_set&lt; asset_id_type &gt; &amp;assets) const</argsstring>
        <name>get_account_balances</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>account_name_or_id</declname>
        </param>
        <param>
          <type>const flat_set&lt; asset_id_type &gt; &amp;</type>
          <declname>assets</declname>
        </param>
        <briefdescription>
<para>Get an account&apos;s balances in various assets. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account_name_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>name or ID of the account to get balances for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>assets</parametername>
</parameternamelist>
<parameterdescription>
<para>IDs of the assets to get balances of; if empty, get all assets account has a balance in </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Balances of the account </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="371" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="829" bodyend="833"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a52372cd241026042c898239aaf4ab18a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &gt;</type>
        <definition>vector&lt; asset &gt; graphene::app::database_api::get_named_account_balances</definition>
        <argsstring>(const std::string &amp;name, const flat_set&lt; asset_id_type &gt; &amp;assets) const</argsstring>
        <name>get_named_account_balances</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const flat_set&lt; asset_id_type &gt; &amp;</type>
          <declname>assets</declname>
        </param>
        <briefdescription>
<para>Semantically equivalent to <ref refid="classgraphene_1_1app_1_1database__api_1af3a97a65a2b8a714c74a3e3f8d888019" kindref="member">get_account_balances</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="375" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="861" bodyend="865"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1ae95b0587f9735593e1331cfe97b6be41" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1balance__object" kindref="compound">balance_object</ref> &gt;</type>
        <definition>vector&lt; balance_object &gt; graphene::app::database_api::get_balance_objects</definition>
        <argsstring>(const vector&lt; address &gt; &amp;addrs) const</argsstring>
        <name>get_balance_objects</name>
        <param>
          <type>const vector&lt; address &gt; &amp;</type>
          <declname>addrs</declname>
        </param>
        <briefdescription>
<para>Return all unclaimed balance objects for a list of addresses. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addrs</parametername>
</parameternamelist>
<parameterdescription>
<para>a list of addresses </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>all unclaimed balance objects for the addresses </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="382" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="867" bodyend="870"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1ad544bdda0a336353ba66d304cdced4c0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &gt;</type>
        <definition>vector&lt; asset &gt; graphene::app::database_api::get_vested_balances</definition>
        <argsstring>(const vector&lt; balance_id_type &gt; &amp;objs) const</argsstring>
        <name>get_vested_balances</name>
        <param>
          <type>const vector&lt; balance_id_type &gt; &amp;</type>
          <declname>objs</declname>
        </param>
        <briefdescription>
<para>Calculate how much assets in the given balance objects are able to be claimed at current head block time. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>objs</parametername>
</parameternamelist>
<parameterdescription>
<para>a list of balance object IDs </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a list indicating how much asset in each balance object is available to be claimed </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="390" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="895" bodyend="898"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a0fcc0397965e0f43ce743f16929767a0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1vesting__balance__object" kindref="compound">vesting_balance_object</ref> &gt;</type>
        <definition>vector&lt; vesting_balance_object &gt; graphene::app::database_api::get_vesting_balances</definition>
        <argsstring>(const std::string account_name_or_id) const</argsstring>
        <name>get_vesting_balances</name>
        <param>
          <type>const std::string</type>
          <declname>account_name_or_id</declname>
        </param>
        <briefdescription>
<para>Return all vesting balance objects owned by an account. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account_name_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>name or ID of an account </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>all vesting balance objects owned by the account </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="397" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="913" bodyend="916"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1aeae61cd2ea6284869e996dce486286d4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t graphene::app::database_api::get_account_count</definition>
        <argsstring>() const</argsstring>
        <name>get_account_count</name>
        <briefdescription>
<para>Get the total number of accounts registered with the blockchain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="402" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="813" bodyend="816"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1ae353813a6ad254bbc6c1be6109e9f8ca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>asset_id_type</type>
        <definition>asset_id_type graphene::app::database_api::get_asset_id_from_string</definition>
        <argsstring>(const std::string &amp;symbol_or_id) const</argsstring>
        <name>get_asset_id_from_string</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>symbol_or_id</declname>
        </param>
        <briefdescription>
<para>Get asset ID from an asset symbol or ID. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>symbol_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol name or ID of the asset </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>asset ID </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="413" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="941" bodyend="944"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a836ed951450422027852b7d74b419885" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; optional&lt; <ref refid="structgraphene_1_1app_1_1extended__asset__object" kindref="compound">extended_asset_object</ref> &gt; &gt;</type>
        <definition>vector&lt; optional&lt; extended_asset_object &gt; &gt; graphene::app::database_api::get_assets</definition>
        <argsstring>(const vector&lt; std::string &gt; &amp;asset_symbols_or_ids, optional&lt; bool &gt; subscribe=optional&lt; bool &gt;()) const</argsstring>
        <name>get_assets</name>
        <param>
          <type>const vector&lt; std::string &gt; &amp;</type>
          <declname>asset_symbols_or_ids</declname>
        </param>
        <param>
          <type>optional&lt; bool &gt;</type>
          <declname>subscribe</declname>
          <defval>optional&lt; bool &gt;()</defval>
        </param>
        <briefdescription>
<para>Get a list of assets by symbol names or IDs. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>asset_symbols_or_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol names or IDs of the assets to retrieve </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subscribe</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>true</emphasis> to subscribe to the queried asset objects, <emphasis>false</emphasis> to not subscribe, <emphasis>null</emphasis> to subscribe or not subscribe according to current auto-subscription setting (see <ref refid="classgraphene_1_1app_1_1database__api_1a7ef2faf3e3e402ea9572067554c2dd2c" kindref="member">set_auto_subscription</ref>) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The assets corresponding to the provided symbol names or IDs</para></simplesect>
This function has semantics identical to <ref refid="classgraphene_1_1app_1_1database__api_1a1f20e51d290fc3ac2409c49c058585b3" kindref="member">get_objects</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="425" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="946" bodyend="951"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a647bbe1817ac17b00a80e2c76c95f079" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1app_1_1extended__asset__object" kindref="compound">extended_asset_object</ref> &gt;</type>
        <definition>vector&lt; extended_asset_object &gt; graphene::app::database_api::list_assets</definition>
        <argsstring>(const string &amp;lower_bound_symbol, uint32_t limit) const</argsstring>
        <name>list_assets</name>
        <param>
          <type>const string &amp;</type>
          <declname>lower_bound_symbol</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Get assets alphabetically by symbol name. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lower_bound_symbol</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower bound of symbol names to retrieve </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of assets to fetch, must not exceed the configured value of <emphasis>api_limit_get_assets</emphasis> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The assets found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="435" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="972" bodyend="975"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a0d263bd65e3c8221fc6fa83000661e0e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; optional&lt; <ref refid="structgraphene_1_1app_1_1extended__asset__object" kindref="compound">extended_asset_object</ref> &gt; &gt;</type>
        <definition>vector&lt; optional&lt; extended_asset_object &gt; &gt; graphene::app::database_api::lookup_asset_symbols</definition>
        <argsstring>(const vector&lt; string &gt; &amp;symbols_or_ids) const</argsstring>
        <name>lookup_asset_symbols</name>
        <param>
          <type>const vector&lt; string &gt; &amp;</type>
          <declname>symbols_or_ids</declname>
        </param>
        <briefdescription>
<para>Get a list of assets by symbol names or IDs. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>symbols_or_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol names or IDs of the assets to retrieve </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The assets corresponding to the provided symbols or IDs</para></simplesect>
This function has semantics identical to <ref refid="classgraphene_1_1app_1_1database__api_1a1f20e51d290fc3ac2409c49c058585b3" kindref="member">get_objects</ref>, but doesn&apos;t subscribe </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="444" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1035" bodyend="1039"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a6b628b3014c888dd5328bb11c0b414bc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t graphene::app::database_api::get_asset_count</definition>
        <argsstring>() const</argsstring>
        <name>get_asset_count</name>
        <briefdescription>
<para>Get assets count. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The assets count </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="450" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="997" bodyend="1000"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a1d3724c792c87c23836fb5ea5854bc0a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1app_1_1extended__asset__object" kindref="compound">extended_asset_object</ref> &gt;</type>
        <definition>vector&lt; extended_asset_object &gt; graphene::app::database_api::get_assets_by_issuer</definition>
        <argsstring>(const std::string &amp;issuer_name_or_id, asset_id_type start, uint32_t limit) const</argsstring>
        <name>get_assets_by_issuer</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>issuer_name_or_id</declname>
        </param>
        <param>
          <type>asset_id_type</type>
          <declname>start</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Get assets issued (owned) by a given account. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>issuer_name_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Account name or ID to get objects from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>Asset objects(1.3.X) before this ID will be skipped in results. Pagination purposes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of assets to retrieve, must not exceed the configured value of <emphasis>api_limit_get_assets</emphasis> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The assets issued (owned) by the account </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="460" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1007" bodyend="1011"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1ab970529cf7f1f126b633522f47c09e54" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref> &gt;</type>
        <definition>vector&lt; limit_order_object &gt; graphene::app::database_api::get_limit_orders</definition>
        <argsstring>(std::string a, std::string b, uint32_t limit) const</argsstring>
        <name>get_limit_orders</name>
        <param>
          <type>std::string</type>
          <declname>a</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>b</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Get limit orders in a given market. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol or ID of asset being sold </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol or ID of asset being purchased </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of orders to retrieve, must not exceed the configured value of <emphasis>api_limit_get_limit_orders</emphasis> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The limit orders, ordered from least price to greatest </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="475" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1053" bodyend="1056"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1aef5b23c034ffa6149abb34f5d1d80a62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref> &gt;</type>
        <definition>vector&lt; limit_order_object &gt; graphene::app::database_api::get_limit_orders_by_account</definition>
        <argsstring>(const string &amp;account_name_or_id, const optional&lt; uint32_t &gt; &amp;limit=optional&lt; uint32_t &gt;(), const optional&lt; limit_order_id_type &gt; &amp;start_id=optional&lt; limit_order_id_type &gt;())</argsstring>
        <name>get_limit_orders_by_account</name>
        <param>
          <type>const string &amp;</type>
          <declname>account_name_or_id</declname>
        </param>
        <param>
          <type>const optional&lt; uint32_t &gt; &amp;</type>
          <declname>limit</declname>
          <defval>optional&lt; uint32_t &gt;()</defval>
        </param>
        <param>
          <type>const optional&lt; limit_order_id_type &gt; &amp;</type>
          <declname>start_id</declname>
          <defval>optional&lt; limit_order_id_type &gt;()</defval>
        </param>
        <briefdescription>
<para>Fetch open limit orders in all markets relevant to the specified account, ordered by ID. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account_name_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The name or ID of an account to retrieve </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>The limitation of items each query can fetch, not greater than the configured value of <emphasis>api_limit_get_limit_orders_by_account</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Start order id, fetch orders whose IDs are greater than or equal to this order</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of limit orders of the specified account</para></simplesect>
<simplesect kind="note"><para><orderedlist>
<listitem><para>If <computeroutput>account_name_or_id</computeroutput> cannot be tied to an account, an error will be returned</para></listitem><listitem><para><computeroutput>limit</computeroutput> can be omitted or be <emphasis>null</emphasis>, if so the configured value of <emphasis>api_limit_get_limit_orders_by_account</emphasis> will be used</para></listitem><listitem><para><computeroutput>start_id</computeroutput> can be omitted or be null, if so the api will return the &quot;first page&quot; of orders</para></listitem><listitem><para>One or more optional parameters can be omitted from the end of the parameter list, and the optional parameters in the middle cannot be omitted (but can be <emphasis>null</emphasis>). </para></listitem></orderedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="495" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1073" bodyend="1077"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a92522911b62a79d1adb7c58105cc6fb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref> &gt;</type>
        <definition>vector&lt; limit_order_object &gt; graphene::app::database_api::get_account_limit_orders</definition>
        <argsstring>(const string &amp;account_name_or_id, const string &amp;base, const string &amp;quote, uint32_t limit=application_options::get_default().api_limit_get_account_limit_orders, optional&lt; limit_order_id_type &gt; ostart_id=optional&lt; limit_order_id_type &gt;(), optional&lt; price &gt; ostart_price=optional&lt; price &gt;())</argsstring>
        <name>get_account_limit_orders</name>
        <param>
          <type>const string &amp;</type>
          <declname>account_name_or_id</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>quote</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
          <defval><ref refid="classgraphene_1_1app_1_1application__options_1a81caf0c8ace863de19903484f0166e0b" kindref="member">application_options::get_default</ref>().api_limit_get_account_limit_orders</defval>
        </param>
        <param>
          <type>optional&lt; limit_order_id_type &gt;</type>
          <declname>ostart_id</declname>
          <defval>optional&lt; limit_order_id_type &gt;()</defval>
        </param>
        <param>
          <type>optional&lt; price &gt;</type>
          <declname>ostart_price</declname>
          <defval>optional&lt; price &gt;()</defval>
        </param>
        <briefdescription>
<para>Fetch all orders relevant to the specified account and specified market, result orders are sorted descendingly by price. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account_name_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The name or ID of an account to retrieve </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>Base asset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>quote</parametername>
</parameternamelist>
<parameterdescription>
<para>Quote asset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>The limitation of items each query can fetch, not greater than the configured value of <emphasis>api_limit_get_account_limit_orders</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ostart_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Start order id, fetch orders which price lower than this order, or price equal to this order but order ID greater than this order </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ostart_price</parametername>
</parameternamelist>
<parameterdescription>
<para>Fetch orders with price lower than or equal to this price</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of orders from <computeroutput>account_name_or_id</computeroutput> to the corresponding account</para></simplesect>
<simplesect kind="note"><para><orderedlist>
<listitem><para>If <computeroutput>account_name_or_id</computeroutput> cannot be tied to an account, an error will be returned</para></listitem><listitem><para><computeroutput>ostart_id</computeroutput> and <computeroutput>ostart_price</computeroutput> can be empty, if so the api will return the &quot;first page&quot; of orders; if <computeroutput>ostart_id</computeroutput> is specified, its price will be used to do page query preferentially, otherwise the <computeroutput>ostart_price</computeroutput> will be used; <computeroutput>ostart_id</computeroutput> and <computeroutput>ostart_price</computeroutput> may be used cooperatively in case of the order specified by <computeroutput>ostart_id</computeroutput> was just canceled accidentally, in such case, the result orders&apos; price may lower or equal to <computeroutput>ostart_price</computeroutput>, but orders&apos; id greater than <computeroutput>ostart_id</computeroutput> </para></listitem></orderedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="524" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1113" bodyend="1118"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a70e6dafcc9f6640ca5f9b721f784ab4f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1call__order__object" kindref="compound">call_order_object</ref> &gt;</type>
        <definition>vector&lt; call_order_object &gt; graphene::app::database_api::get_call_orders</definition>
        <argsstring>(const std::string &amp;a, uint32_t limit) const</argsstring>
        <name>get_call_orders</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Get call orders (aka margin positions) for a given asset. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol name or ID of the debt asset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of orders to retrieve, must not exceed the configured value of <emphasis>api_limit_get_call_orders</emphasis> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The call orders, ordered from earliest to be called to latest </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="538" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1206" bodyend="1209"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a78eb082a3a0cfb33ccd00adeb8cfac1d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1call__order__object" kindref="compound">call_order_object</ref> &gt;</type>
        <definition>vector&lt; call_order_object &gt; graphene::app::database_api::get_call_orders_by_account</definition>
        <argsstring>(const std::string &amp;account_name_or_id, asset_id_type start, uint32_t limit) const</argsstring>
        <name>get_call_orders_by_account</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>account_name_or_id</declname>
        </param>
        <param>
          <type>asset_id_type</type>
          <declname>start</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Get call orders (aka margin positions) of a given account. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account_name_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Account name or ID to get objects from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>Asset objects(1.3.X) before this ID will be skipped in results. Pagination purposes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of orders to retrieve, must not exceed the configured value of <emphasis>api_limit_get_call_orders</emphasis> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The call orders of the account </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="548" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1234" bodyend="1238"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a2e08bf257a9e0cd985ddda28fec57faa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1force__settlement__object" kindref="compound">force_settlement_object</ref> &gt;</type>
        <definition>vector&lt; force_settlement_object &gt; graphene::app::database_api::get_settle_orders</definition>
        <argsstring>(const std::string &amp;a, uint32_t limit) const</argsstring>
        <name>get_settle_orders</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Get forced settlement orders in a given asset. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Symbol or ID of asset being settled </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of orders to retrieve, must not exceed the configured value of <emphasis>api_limit_get_settle_orders</emphasis> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The settle orders, ordered from earliest settlement date to latest </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="558" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1262" bodyend="1265"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a70e3f5424c303e2d9a1838bc92320f5f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1force__settlement__object" kindref="compound">force_settlement_object</ref> &gt;</type>
        <definition>vector&lt; force_settlement_object &gt; graphene::app::database_api::get_settle_orders_by_account</definition>
        <argsstring>(const std::string &amp;account_name_or_id, force_settlement_id_type start, uint32_t limit) const</argsstring>
        <name>get_settle_orders_by_account</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>account_name_or_id</declname>
        </param>
        <param>
          <type>force_settlement_id_type</type>
          <declname>start</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Get forced settlement orders of a given account. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account_name_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Account name or ID to get objects from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>Force settlement objects(1.4.X) before this ID will be skipped in results. Pagination purposes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of orders to retrieve, must not exceed the configured value of <emphasis>api_limit_get_settle_orders</emphasis> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The settle orders, ordered from earliest settlement date to latest </para></simplesect>
<simplesect kind="return"><para>The settle orders of the account </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="569" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1290" bodyend="1296"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a3e7c0d7f9dd1f5310523b498ea9bfe4e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1collateral__bid__object" kindref="compound">collateral_bid_object</ref> &gt;</type>
        <definition>vector&lt; collateral_bid_object &gt; graphene::app::database_api::get_collateral_bids</definition>
        <argsstring>(const std::string &amp;a, uint32_t limit, uint32_t start) const</argsstring>
        <name>get_collateral_bids</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>start</declname>
        </param>
        <briefdescription>
<para>Get collateral_bid_objects for a given asset. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Symbol or ID of asset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of objects to retrieve, must not exceed the configured value of <emphasis>api_limit_get_collateral_bids</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>skip that many results </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The settle orders, ordered from earliest settlement date to latest </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="581" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1330" bodyend="1334"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a4c350db68ce602c9cdc4f100c6ad8c83" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1call__order__object" kindref="compound">call_order_object</ref> &gt;</type>
        <definition>vector&lt; call_order_object &gt; graphene::app::database_api::get_margin_positions</definition>
        <argsstring>(const std::string &amp;account_name_or_id) const</argsstring>
        <name>get_margin_positions</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>account_name_or_id</declname>
        </param>
        <briefdescription>
<para>Get open margin positions of a given account. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account_name_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>name or ID of an account </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>open margin positions of the account</para></simplesect>
Similar to <ref refid="classgraphene_1_1app_1_1database__api_1a78eb082a3a0cfb33ccd00adeb8cfac1d" kindref="member">get_call_orders_by_account</ref>, but only the first page will be returned, the page size is the configured value of <emphasis>api_limit_get_call_orders</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="591" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1323" bodyend="1328"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1afda8182c12340a82a94ae455bbb0ee40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::database_api::subscribe_to_market</definition>
        <argsstring>(std::function&lt; void(const variant &amp;)&gt; callback, const std::string &amp;a, const std::string &amp;b)</argsstring>
        <name>subscribe_to_market</name>
        <param>
          <type>std::function&lt; void(const variant &amp;)&gt;</type>
          <declname>callback</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Request notification when the active orders in the market between two assets changes. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback method which is called when the market changes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol name or ID of the first asset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol name or ID of the second asset</para></parameterdescription>
</parameteritem>
</parameterlist>
Callback will be passed a variant containing a vector&lt;pair&lt;operation, operation_result&gt;&gt;. The vector will contain, in order, the operations which changed the market, and their results. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="602" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1360" bodyend="1364"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a56e8e3de3827d2ed993d28bd22b943de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::database_api::unsubscribe_from_market</definition>
        <argsstring>(const std::string &amp;a, const std::string &amp;b)</argsstring>
        <name>unsubscribe_from_market</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Unsubscribe from updates to a given market. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol name or ID of the first asset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol name or ID of the second asset </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="610" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1377" bodyend="1380"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1ab507c98bcb65b3e5efef6d11a9a0a08c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1app_1_1market__ticker" kindref="compound">market_ticker</ref></type>
        <definition>market_ticker graphene::app::database_api::get_ticker</definition>
        <argsstring>(const string &amp;base, const string &amp;quote) const</argsstring>
        <name>get_ticker</name>
        <param>
          <type>const string &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>quote</declname>
        </param>
        <briefdescription>
<para>Returns the ticker for the market assetA:assetB. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol name or ID of the base asset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>quote</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol name or ID of the quote asset </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The market ticker for the past 24 hours. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="618" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1392" bodyend="1395"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1ada3034b4ddacffa7106cde1f256d07d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1app_1_1market__volume" kindref="compound">market_volume</ref></type>
        <definition>market_volume graphene::app::database_api::get_24_volume</definition>
        <argsstring>(const string &amp;base, const string &amp;quote) const</argsstring>
        <name>get_24_volume</name>
        <param>
          <type>const string &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>quote</declname>
        </param>
        <briefdescription>
<para>Returns the 24 hour volume for the market assetA:assetB. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol name or ID of the base asset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>quote</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol name or ID of the quote asset </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The market volume over the past 24 hours </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="626" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1426" bodyend="1429"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a0579547021625dae09a2524a794c36e4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1app_1_1order__book" kindref="compound">order_book</ref></type>
        <definition>order_book graphene::app::database_api::get_order_book</definition>
        <argsstring>(const string &amp;base, const string &amp;quote, uint32_t limit=application_options::get_default().api_limit_get_order_book) const</argsstring>
        <name>get_order_book</name>
        <param>
          <type>const string &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>quote</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
          <defval><ref refid="classgraphene_1_1app_1_1application__options_1a81caf0c8ace863de19903484f0166e0b" kindref="member">application_options::get_default</ref>().api_limit_get_order_book</defval>
        </param>
        <briefdescription>
<para>Returns the order book for the market base:quote. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol name or ID of the base asset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>quote</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol name or ID of the quote asset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>depth of the order book to retrieve, for bids and asks each, capped at the configured value of <emphasis>api_limit_get_order_book</emphasis> and <emphasis>api_limit_get_limit_orders</emphasis> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Order book of the market </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="636" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1445" bodyend="1448"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1adbbb2c12bca7d9f84bc73ef5b2991df6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1app_1_1market__ticker" kindref="compound">market_ticker</ref> &gt;</type>
        <definition>vector&lt; market_ticker &gt; graphene::app::database_api::get_top_markets</definition>
        <argsstring>(uint32_t limit) const</argsstring>
        <name>get_top_markets</name>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Returns vector of tickers sorted by reverse base_volume. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>this API is experimental and subject to change in next releases </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Max number of results, must not exceed the configured value of <emphasis>api_limit_get_top_markets</emphasis> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Desc Sorted ticker vector </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="646" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1494" bodyend="1497"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1adf9ed4ed4069623c11551b25ae7b3323" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1app_1_1market__trade" kindref="compound">market_trade</ref> &gt;</type>
        <definition>vector&lt; market_trade &gt; graphene::app::database_api::get_trade_history</definition>
        <argsstring>(const string &amp;base, const string &amp;quote, fc::time_point_sec start, fc::time_point_sec stop, uint32_t limit=application_options::get_default().api_limit_get_trade_history) const</argsstring>
        <name>get_trade_history</name>
        <param>
          <type>const string &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>quote</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1time__point__sec" kindref="compound">fc::time_point_sec</ref></type>
          <declname>start</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1time__point__sec" kindref="compound">fc::time_point_sec</ref></type>
          <declname>stop</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
          <defval><ref refid="classgraphene_1_1app_1_1application__options_1a81caf0c8ace863de19903484f0166e0b" kindref="member">application_options::get_default</ref>().api_limit_get_trade_history</defval>
        </param>
        <briefdescription>
<para>Get market transactions occurred in the market base:quote, ordered by time, most recent first. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol or ID of the base asset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>quote</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol or ID of the quote asset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>Start time as a UNIX timestamp, the latest transactions to retrieve </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stop</parametername>
</parameternamelist>
<parameterdescription>
<para>Stop time as a UNIX timestamp, the earliest transactions to retrieve </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum quantity of transactions to retrieve, capped at the configured value of <emphasis>api_limit_get_trade_history</emphasis> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Transactions in the market </para></simplesect>
<simplesect kind="note"><para>The time must be UTC, timezone offsets are not supported. The range is [stop, start]. In case when there are more transactions than <computeroutput>limit</computeroutput> occurred in the same second, this API only returns the most recent records, the rest records can be retrieved with the <ref refid="classgraphene_1_1app_1_1database__api_1a4c7d0d66684e8a3f3150c72b54948c7f" kindref="member">get_trade_history_by_sequence</ref> API. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="662" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1527" bodyend="1534"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a4c7d0d66684e8a3f3150c72b54948c7f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1app_1_1market__trade" kindref="compound">market_trade</ref> &gt;</type>
        <definition>vector&lt; market_trade &gt; graphene::app::database_api::get_trade_history_by_sequence</definition>
        <argsstring>(const string &amp;base, const string &amp;quote, int64_t start, fc::time_point_sec stop, uint32_t limit=application_options::get_default().api_limit_get_trade_history_by_sequence) const</argsstring>
        <name>get_trade_history_by_sequence</name>
        <param>
          <type>const string &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>quote</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>start</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1time__point__sec" kindref="compound">fc::time_point_sec</ref></type>
          <declname>stop</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
          <defval><ref refid="classgraphene_1_1app_1_1application__options_1a81caf0c8ace863de19903484f0166e0b" kindref="member">application_options::get_default</ref>().api_limit_get_trade_history_by_sequence</defval>
        </param>
        <briefdescription>
<para>Get market transactions occurred in the market base:quote, ordered by time, most recent first. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol or ID of the base asset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>quote</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol or ID of the quote asset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>Start sequence as an Integer, the latest transaction to retrieve </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stop</parametername>
</parameternamelist>
<parameterdescription>
<para>Stop time as a UNIX timestamp, the earliest transactions to retrieve </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum quantity of transactions to retrieve, capped at the configured value of <emphasis>api_limit_get_trade_history_by_sequence</emphasis> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Transactions in the market </para></simplesect>
<simplesect kind="note"><para>The time must be UTC, timezone offsets are not supported. The range is [stop, start]. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="677" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1628" bodyend="1636"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1af6d826816f093baad2d45389970ef0eb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1app_1_1extended__liquidity__pool__object" kindref="compound">extended_liquidity_pool_object</ref> &gt;</type>
        <definition>vector&lt; extended_liquidity_pool_object &gt; graphene::app::database_api::list_liquidity_pools</definition>
        <argsstring>(const optional&lt; uint32_t &gt; &amp;limit=optional&lt; uint32_t &gt;(), const optional&lt; liquidity_pool_id_type &gt; &amp;start_id=optional&lt; liquidity_pool_id_type &gt;(), const optional&lt; bool &gt; &amp;with_statistics=false) const</argsstring>
        <name>list_liquidity_pools</name>
        <param>
          <type>const optional&lt; uint32_t &gt; &amp;</type>
          <declname>limit</declname>
          <defval>optional&lt; uint32_t &gt;()</defval>
        </param>
        <param>
          <type>const optional&lt; liquidity_pool_id_type &gt; &amp;</type>
          <declname>start_id</declname>
          <defval>optional&lt; liquidity_pool_id_type &gt;()</defval>
        </param>
        <param>
          <type>const optional&lt; bool &gt; &amp;</type>
          <declname>with_statistics</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Get a list of liquidity pools. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>The limitation of items each query can fetch, not greater than the configured value of <emphasis>api_limit_get_liquidity_pools</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Start liquidity pool id, fetch pools whose IDs are greater than or equal to this ID </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>with_statistics</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to return statistics </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The liquidity pools</para></simplesect>
<simplesect kind="note"><para><orderedlist>
<listitem><para><computeroutput>limit</computeroutput> can be omitted or be <emphasis>null</emphasis>, if so the configured value of <emphasis>api_limit_get_liquidity_pools</emphasis> will be used</para></listitem><listitem><para><computeroutput>start_id</computeroutput> can be omitted or be <emphasis>null</emphasis>, if so the api will return the &quot;first page&quot; of pools</para></listitem><listitem><para>One or more optional parameters can be omitted from the end of the parameter list, and the optional parameters in the middle cannot be omitted (but can be <emphasis>null</emphasis>). </para></listitem></orderedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="701" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1752" bodyend="1761"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1ab49d0108a9762fc1ecc0a80377f15f48" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1app_1_1extended__liquidity__pool__object" kindref="compound">extended_liquidity_pool_object</ref> &gt;</type>
        <definition>vector&lt; extended_liquidity_pool_object &gt; graphene::app::database_api::get_liquidity_pools_by_asset_a</definition>
        <argsstring>(const std::string &amp;asset_symbol_or_id, const optional&lt; uint32_t &gt; &amp;limit=optional&lt; uint32_t &gt;(), const optional&lt; liquidity_pool_id_type &gt; &amp;start_id=optional&lt; liquidity_pool_id_type &gt;(), const optional&lt; bool &gt; &amp;with_statistics=false) const</argsstring>
        <name>get_liquidity_pools_by_asset_a</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>asset_symbol_or_id</declname>
        </param>
        <param>
          <type>const optional&lt; uint32_t &gt; &amp;</type>
          <declname>limit</declname>
          <defval>optional&lt; uint32_t &gt;()</defval>
        </param>
        <param>
          <type>const optional&lt; liquidity_pool_id_type &gt; &amp;</type>
          <declname>start_id</declname>
          <defval>optional&lt; liquidity_pool_id_type &gt;()</defval>
        </param>
        <param>
          <type>const optional&lt; bool &gt; &amp;</type>
          <declname>with_statistics</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Get a list of liquidity pools by the symbol or ID of the first asset in the pool. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>asset_symbol_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol name or ID of the asset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>The limitation of items each query can fetch, not greater than the configured value of <emphasis>api_limit_get_liquidity_pools</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Start liquidity pool id, fetch pools whose IDs are greater than or equal to this ID </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>with_statistics</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to return statistics </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The liquidity pools</para></simplesect>
<simplesect kind="note"><para><orderedlist>
<listitem><para>If <computeroutput>asset_symbol_or_id</computeroutput> cannot be tied to an asset, an error will be returned</para></listitem><listitem><para><computeroutput>limit</computeroutput> can be omitted or be <emphasis>null</emphasis>, if so the configured value of <emphasis>api_limit_get_liquidity_pools</emphasis> will be used</para></listitem><listitem><para><computeroutput>start_id</computeroutput> can be omitted or be <emphasis>null</emphasis>, if so the api will return the &quot;first page&quot; of pools</para></listitem><listitem><para>One or more optional parameters can be omitted from the end of the parameter list, and the optional parameters in the middle cannot be omitted (but can be <emphasis>null</emphasis>). </para></listitem></orderedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="723" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1763" bodyend="1775"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1ae8b478f32b478ef596a43bd5ce0f652c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1app_1_1extended__liquidity__pool__object" kindref="compound">extended_liquidity_pool_object</ref> &gt;</type>
        <definition>vector&lt; extended_liquidity_pool_object &gt; graphene::app::database_api::get_liquidity_pools_by_asset_b</definition>
        <argsstring>(const std::string &amp;asset_symbol_or_id, const optional&lt; uint32_t &gt; &amp;limit=optional&lt; uint32_t &gt;(), const optional&lt; liquidity_pool_id_type &gt; &amp;start_id=optional&lt; liquidity_pool_id_type &gt;(), const optional&lt; bool &gt; &amp;with_statistics=false) const</argsstring>
        <name>get_liquidity_pools_by_asset_b</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>asset_symbol_or_id</declname>
        </param>
        <param>
          <type>const optional&lt; uint32_t &gt; &amp;</type>
          <declname>limit</declname>
          <defval>optional&lt; uint32_t &gt;()</defval>
        </param>
        <param>
          <type>const optional&lt; liquidity_pool_id_type &gt; &amp;</type>
          <declname>start_id</declname>
          <defval>optional&lt; liquidity_pool_id_type &gt;()</defval>
        </param>
        <param>
          <type>const optional&lt; bool &gt; &amp;</type>
          <declname>with_statistics</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Get a list of liquidity pools by the symbol or ID of the second asset in the pool. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>asset_symbol_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol name or ID of the asset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>The limitation of items each query can fetch, not greater than the configured value of <emphasis>api_limit_get_liquidity_pools</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Start liquidity pool id, fetch pools whose IDs are greater than or equal to this ID </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>with_statistics</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to return statistics </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The liquidity pools</para></simplesect>
<simplesect kind="note"><para><orderedlist>
<listitem><para>If <computeroutput>asset_symbol_or_id</computeroutput> cannot be tied to an asset, an error will be returned</para></listitem><listitem><para><computeroutput>limit</computeroutput> can be omitted or be <emphasis>null</emphasis>, if so the configured value of <emphasis>api_limit_get_liquidity_pools</emphasis> will be used</para></listitem><listitem><para><computeroutput>start_id</computeroutput> can be omitted or be <emphasis>null</emphasis>, if so the api will return the &quot;first page&quot; of pools</para></listitem><listitem><para>One or more optional parameters can be omitted from the end of the parameter list, and the optional parameters in the middle cannot be omitted (but can be <emphasis>null</emphasis>). </para></listitem></orderedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="746" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1777" bodyend="1789"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1ae2948b6c7a4b2ec221f34c1290fa32fd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1app_1_1extended__liquidity__pool__object" kindref="compound">extended_liquidity_pool_object</ref> &gt;</type>
        <definition>vector&lt; extended_liquidity_pool_object &gt; graphene::app::database_api::get_liquidity_pools_by_one_asset</definition>
        <argsstring>(const std::string &amp;asset_symbol_or_id, const optional&lt; uint32_t &gt; &amp;limit=optional&lt; uint32_t &gt;(), const optional&lt; liquidity_pool_id_type &gt; &amp;start_id=optional&lt; liquidity_pool_id_type &gt;(), const optional&lt; bool &gt; &amp;with_statistics=false) const</argsstring>
        <name>get_liquidity_pools_by_one_asset</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>asset_symbol_or_id</declname>
        </param>
        <param>
          <type>const optional&lt; uint32_t &gt; &amp;</type>
          <declname>limit</declname>
          <defval>optional&lt; uint32_t &gt;()</defval>
        </param>
        <param>
          <type>const optional&lt; liquidity_pool_id_type &gt; &amp;</type>
          <declname>start_id</declname>
          <defval>optional&lt; liquidity_pool_id_type &gt;()</defval>
        </param>
        <param>
          <type>const optional&lt; bool &gt; &amp;</type>
          <declname>with_statistics</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Get a list of liquidity pools by the symbol or ID of one asset in the pool. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>asset_symbol_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol name or ID of the asset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>The limitation of items each query can fetch, not greater than the configured value of <emphasis>api_limit_get_liquidity_pools</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Start liquidity pool id, fetch pools whose IDs are greater than or equal to this ID </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>with_statistics</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to return statistics </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The liquidity pools</para></simplesect>
<simplesect kind="note"><para><orderedlist>
<listitem><para>If <computeroutput>asset_symbol_or_id</computeroutput> cannot be tied to an asset, an error will be returned</para></listitem><listitem><para><computeroutput>limit</computeroutput> can be omitted or be <emphasis>null</emphasis>, if so the configured value of <emphasis>api_limit_get_liquidity_pools</emphasis> will be used</para></listitem><listitem><para><computeroutput>start_id</computeroutput> can be omitted or be <emphasis>null</emphasis>, if so the api will return the &quot;first page&quot; of pools</para></listitem><listitem><para>One or more optional parameters can be omitted from the end of the parameter list, and the optional parameters in the middle cannot be omitted (but can be <emphasis>null</emphasis>). </para></listitem></orderedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="769" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1791" bodyend="1802"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1af68feefbc990407d40e5fa2e9ad9bb99" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1app_1_1extended__liquidity__pool__object" kindref="compound">extended_liquidity_pool_object</ref> &gt;</type>
        <definition>vector&lt; extended_liquidity_pool_object &gt; graphene::app::database_api::get_liquidity_pools_by_both_assets</definition>
        <argsstring>(const std::string &amp;asset_symbol_or_id_a, const std::string &amp;asset_symbol_or_id_b, const optional&lt; uint32_t &gt; &amp;limit=optional&lt; uint32_t &gt;(), const optional&lt; liquidity_pool_id_type &gt; &amp;start_id=optional&lt; liquidity_pool_id_type &gt;(), const optional&lt; bool &gt; &amp;with_statistics=false) const</argsstring>
        <name>get_liquidity_pools_by_both_assets</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>asset_symbol_or_id_a</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>asset_symbol_or_id_b</declname>
        </param>
        <param>
          <type>const optional&lt; uint32_t &gt; &amp;</type>
          <declname>limit</declname>
          <defval>optional&lt; uint32_t &gt;()</defval>
        </param>
        <param>
          <type>const optional&lt; liquidity_pool_id_type &gt; &amp;</type>
          <declname>start_id</declname>
          <defval>optional&lt; liquidity_pool_id_type &gt;()</defval>
        </param>
        <param>
          <type>const optional&lt; bool &gt; &amp;</type>
          <declname>with_statistics</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Get a list of liquidity pools by the symbols or IDs of the two assets in the pool. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>asset_symbol_or_id_a</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol name or ID of one asset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>asset_symbol_or_id_b</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol name or ID of the other asset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>The limitation of items each query can fetch, not greater than the configured value of <emphasis>api_limit_get_liquidity_pools</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Start liquidity pool id, fetch pools whose IDs are greater than or equal to this ID </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>with_statistics</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to return statistics </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The liquidity pools</para></simplesect>
<simplesect kind="note"><para><orderedlist>
<listitem><para>If <computeroutput>asset_symbol_or_id_a</computeroutput> or <computeroutput>asset_symbol_or_id_b</computeroutput> cannot be tied to an asset, an error will be returned</para></listitem><listitem><para><computeroutput>limit</computeroutput> can be omitted or be <emphasis>null</emphasis>, if so the configured value of <emphasis>api_limit_get_liquidity_pools</emphasis> will be used</para></listitem><listitem><para><computeroutput>start_id</computeroutput> can be omitted or be <emphasis>null</emphasis>, if so the api will return the &quot;first page&quot; of pools</para></listitem><listitem><para>One or more optional parameters can be omitted from the end of the parameter list, and the optional parameters in the middle cannot be omitted (but can be <emphasis>null</emphasis>). </para></listitem></orderedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="794" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1843" bodyend="1860"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a303a0450f921caf2fdfbb7208fcdb5ea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; optional&lt; <ref refid="structgraphene_1_1app_1_1extended__liquidity__pool__object" kindref="compound">extended_liquidity_pool_object</ref> &gt; &gt;</type>
        <definition>vector&lt; optional&lt; extended_liquidity_pool_object &gt; &gt; graphene::app::database_api::get_liquidity_pools</definition>
        <argsstring>(const vector&lt; liquidity_pool_id_type &gt; &amp;ids, const optional&lt; bool &gt; &amp;subscribe=optional&lt; bool &gt;(), const optional&lt; bool &gt; &amp;with_statistics=false) const</argsstring>
        <name>get_liquidity_pools</name>
        <param>
          <type>const vector&lt; liquidity_pool_id_type &gt; &amp;</type>
          <declname>ids</declname>
        </param>
        <param>
          <type>const optional&lt; bool &gt; &amp;</type>
          <declname>subscribe</declname>
          <defval>optional&lt; bool &gt;()</defval>
        </param>
        <param>
          <type>const optional&lt; bool &gt; &amp;</type>
          <declname>with_statistics</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Get a list of liquidity pools by their IDs. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ids</parametername>
</parameternamelist>
<parameterdescription>
<para>IDs of the liquidity pools, the quantity should not be greater than the configured value of <emphasis>api_limit_get_liquidity_pools</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subscribe</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>true</emphasis> to subscribe to the queried objects, <emphasis>false</emphasis> to not subscribe, <emphasis>null</emphasis> to subscribe or not subscribe according to current auto-subscription setting (see <ref refid="classgraphene_1_1app_1_1database__api_1a7ef2faf3e3e402ea9572067554c2dd2c" kindref="member">set_auto_subscription</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>with_statistics</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to return statistics </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The liquidity pools</para></simplesect>
<simplesect kind="note"><para>if an ID in the list can not be found, the corresponding data in the returned list is null. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="815" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1862" bodyend="1871"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a404ef050664db7f873988d36c5e4395a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; optional&lt; <ref refid="structgraphene_1_1app_1_1extended__liquidity__pool__object" kindref="compound">extended_liquidity_pool_object</ref> &gt; &gt;</type>
        <definition>vector&lt; optional&lt; extended_liquidity_pool_object &gt; &gt; graphene::app::database_api::get_liquidity_pools_by_share_asset</definition>
        <argsstring>(const vector&lt; std::string &gt; &amp;asset_symbols_or_ids, const optional&lt; bool &gt; &amp;subscribe=optional&lt; bool &gt;(), const optional&lt; bool &gt; &amp;with_statistics=false) const</argsstring>
        <name>get_liquidity_pools_by_share_asset</name>
        <param>
          <type>const vector&lt; std::string &gt; &amp;</type>
          <declname>asset_symbols_or_ids</declname>
        </param>
        <param>
          <type>const optional&lt; bool &gt; &amp;</type>
          <declname>subscribe</declname>
          <defval>optional&lt; bool &gt;()</defval>
        </param>
        <param>
          <type>const optional&lt; bool &gt; &amp;</type>
          <declname>with_statistics</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Get a list of liquidity pools by their share asset symbols or IDs. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>asset_symbols_or_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol names or IDs of the share assets, the quantity should not be greater than the configured value of <emphasis>api_limit_get_liquidity_pools</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subscribe</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>true</emphasis> to subscribe to the queried objects, <emphasis>false</emphasis> to not subscribe, <emphasis>null</emphasis> to subscribe or not subscribe according to current auto-subscription setting (see <ref refid="classgraphene_1_1app_1_1database__api_1a7ef2faf3e3e402ea9572067554c2dd2c" kindref="member">set_auto_subscription</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>with_statistics</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to return statistics </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The liquidity pools that the assets are for</para></simplesect>
<simplesect kind="note"><para>if an asset in the list can not be found or is not a share asset of any liquidity pool, the corresponding data in the returned list is null. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="834" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1908" bodyend="1917"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a9af61002f77b4bb3fe4dc592e504eadb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1app_1_1extended__liquidity__pool__object" kindref="compound">extended_liquidity_pool_object</ref> &gt;</type>
        <definition>vector&lt; extended_liquidity_pool_object &gt; graphene::app::database_api::get_liquidity_pools_by_owner</definition>
        <argsstring>(const std::string &amp;account_name_or_id, const optional&lt; uint32_t &gt; &amp;limit=optional&lt; uint32_t &gt;(), const optional&lt; asset_id_type &gt; &amp;start_id=optional&lt; asset_id_type &gt;(), const optional&lt; bool &gt; &amp;with_statistics=false) const</argsstring>
        <name>get_liquidity_pools_by_owner</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>account_name_or_id</declname>
        </param>
        <param>
          <type>const optional&lt; uint32_t &gt; &amp;</type>
          <declname>limit</declname>
          <defval>optional&lt; uint32_t &gt;()</defval>
        </param>
        <param>
          <type>const optional&lt; asset_id_type &gt; &amp;</type>
          <declname>start_id</declname>
          <defval>optional&lt; asset_id_type &gt;()</defval>
        </param>
        <param>
          <type>const optional&lt; bool &gt; &amp;</type>
          <declname>with_statistics</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Get a list of liquidity pools by the name or ID of the owner account. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account_name_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>name or ID of the owner account </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>The limitation of items each query can fetch, not greater than the configured value of <emphasis>api_limit_get_liquidity_pools</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Start share asset id, fetch pools whose share asset IDs are greater than or equal to this ID </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>with_statistics</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to return statistics </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The liquidity pools</para></simplesect>
<simplesect kind="note"><para><orderedlist>
<listitem><para>If <computeroutput>account_name_or_id</computeroutput> cannot be tied to an account, an error will be returned</para></listitem><listitem><para><computeroutput>limit</computeroutput> can be omitted or be <emphasis>null</emphasis>, if so the configured value of <emphasis>api_limit_get_liquidity_pools</emphasis> will be used</para></listitem><listitem><para><computeroutput>start_id</computeroutput> can be omitted or be <emphasis>null</emphasis>, if so the api will return the &quot;first page&quot; of pools</para></listitem><listitem><para>One or more optional parameters can be omitted from the end of the parameter list, and the optional parameters in the middle cannot be omitted (but can be <emphasis>null</emphasis>). </para></listitem></orderedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="856" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1953" bodyend="1964"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a74f6a78e1b086b71d76c13c61344373a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; optional&lt; <ref refid="classgraphene_1_1chain_1_1witness__object" kindref="compound">witness_object</ref> &gt; &gt;</type>
        <definition>vector&lt; optional&lt; witness_object &gt; &gt; graphene::app::database_api::get_witnesses</definition>
        <argsstring>(const vector&lt; witness_id_type &gt; &amp;witness_ids) const</argsstring>
        <name>get_witnesses</name>
        <param>
          <type>const vector&lt; witness_id_type &gt; &amp;</type>
          <declname>witness_ids</declname>
        </param>
        <briefdescription>
<para>Get a list of witnesses by ID. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>witness_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>IDs of the witnesses to retrieve </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The witnesses corresponding to the provided IDs</para></simplesect>
This function has semantics identical to <ref refid="classgraphene_1_1app_1_1database__api_1a1f20e51d290fc3ac2409c49c058585b3" kindref="member">get_objects</ref>, but doesn&apos;t subscribe </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="1129" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2174" bodyend="2177"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1ad5b1d3e1677a3cf1b56dd24d5fbb72f6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1optional" kindref="compound">fc::optional</ref>&lt; <ref refid="classgraphene_1_1chain_1_1witness__object" kindref="compound">witness_object</ref> &gt;</type>
        <definition>fc::optional&lt; witness_object &gt; graphene::app::database_api::get_witness_by_account</definition>
        <argsstring>(const std::string &amp;account_name_or_id) const</argsstring>
        <name>get_witness_by_account</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>account_name_or_id</declname>
        </param>
        <briefdescription>
<para>Get the witness owned by a given account. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account_name_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The name or ID of the account whose witness should be retrieved </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The witness object, or null if the account does not have a witness </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="1136" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2191" bodyend="2194"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a0e46beb464f4c2c8c58fe772721f47a7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>map&lt; string, witness_id_type, std::less&lt;&gt; &gt;</type>
        <definition>map&lt; string, witness_id_type, std::less&lt;&gt; &gt; graphene::app::database_api::lookup_witness_accounts</definition>
        <argsstring>(const string &amp;lower_bound_name, uint32_t limit) const</argsstring>
        <name>lookup_witness_accounts</name>
        <param>
          <type>const string &amp;</type>
          <declname>lower_bound_name</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Get names and IDs for registered witnesses. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lower_bound_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower bound of the first name to return </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of results to return, must not exceed the configured value of <emphasis>api_limit_lookup_witness_accounts</emphasis> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Map of witness names to corresponding IDs </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="1145" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2206" bodyend="2210"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1af63c5f89b966944940ac7007f83fe051" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t graphene::app::database_api::get_witness_count</definition>
        <argsstring>() const</argsstring>
        <name>get_witness_count</name>
        <briefdescription>
<para>Get the total number of witnesses registered with the blockchain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="1151" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2245" bodyend="2248"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1aacfac5de7a9265a073b678812e26e729" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; optional&lt; <ref refid="classgraphene_1_1chain_1_1committee__member__object" kindref="compound">committee_member_object</ref> &gt; &gt;</type>
        <definition>vector&lt; optional&lt; committee_member_object &gt; &gt; graphene::app::database_api::get_committee_members</definition>
        <argsstring>(const vector&lt; committee_member_id_type &gt; &amp;committee_member_ids) const</argsstring>
        <name>get_committee_members</name>
        <param>
          <type>const vector&lt; committee_member_id_type &gt; &amp;</type>
          <declname>committee_member_ids</declname>
        </param>
        <briefdescription>
<para>Get a list of committee_members by ID. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>committee_member_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>IDs of the committee_members to retrieve </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The committee_members corresponding to the provided IDs</para></simplesect>
This function has semantics identical to <ref refid="classgraphene_1_1app_1_1database__api_1a1f20e51d290fc3ac2409c49c058585b3" kindref="member">get_objects</ref>, but doesn&apos;t subscribe </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="1164" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2261" bodyend="2265"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a3682d40b3b10abd9ab439e8515cdbfdd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1optional" kindref="compound">fc::optional</ref>&lt; <ref refid="classgraphene_1_1chain_1_1committee__member__object" kindref="compound">committee_member_object</ref> &gt;</type>
        <definition>fc::optional&lt; committee_member_object &gt; graphene::app::database_api::get_committee_member_by_account</definition>
        <argsstring>(const string &amp;account_name_or_id) const</argsstring>
        <name>get_committee_member_by_account</name>
        <param>
          <type>const string &amp;</type>
          <declname>account_name_or_id</declname>
        </param>
        <briefdescription>
<para>Get the committee_member owned by a given account. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account_name_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The name or ID of the account whose committee_member should be retrieved </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The committee_member object, or null if the account does not have a committee_member </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="1172" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2280" bodyend="2284"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1aa74ae6cb6883d1339f67dfd93fcfefa7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>map&lt; string, committee_member_id_type, std::less&lt;&gt; &gt;</type>
        <definition>map&lt; string, committee_member_id_type, std::less&lt;&gt; &gt; graphene::app::database_api::lookup_committee_member_accounts</definition>
        <argsstring>(const string &amp;lower_bound_name, uint32_t limit) const</argsstring>
        <name>lookup_committee_member_accounts</name>
        <param>
          <type>const string &amp;</type>
          <declname>lower_bound_name</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Get names and IDs for registered committee_members. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lower_bound_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower bound of the first name to return </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of results to return, must not exceed the configured value of <emphasis>api_limit_lookup_committee_member_accounts</emphasis> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Map of committee_member names to corresponding IDs </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="1181" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2297" bodyend="2301"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1ae004f1926d5eca8760a9bf1a0f8fffb2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t graphene::app::database_api::get_committee_count</definition>
        <argsstring>() const</argsstring>
        <name>get_committee_count</name>
        <briefdescription>
<para>Get the total number of committee registered with the blockchain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="1188" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2336" bodyend="2339"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a1785d2851b71b89123c1e95aa030de81" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1worker__object" kindref="compound">worker_object</ref> &gt;</type>
        <definition>vector&lt; worker_object &gt; graphene::app::database_api::get_all_workers</definition>
        <argsstring>(const optional&lt; bool &gt; &amp;is_expired=optional&lt; bool &gt;()) const</argsstring>
        <name>get_all_workers</name>
        <param>
          <type>const optional&lt; bool &gt; &amp;</type>
          <declname>is_expired</declname>
          <defval>optional&lt; bool &gt;()</defval>
        </param>
        <briefdescription>
<para>Get workers. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is_expired</parametername>
</parameternamelist>
<parameterdescription>
<para>null for all workers, true for expired workers only, false for non-expired workers only </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A list of worker objects </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="1201" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2353" bodyend="2356"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a6d2b49d8b52b79addccee543a5de5ce6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1worker__object" kindref="compound">worker_object</ref> &gt;</type>
        <definition>vector&lt; worker_object &gt; graphene::app::database_api::get_workers_by_account</definition>
        <argsstring>(const std::string &amp;account_name_or_id) const</argsstring>
        <name>get_workers_by_account</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>account_name_or_id</declname>
        </param>
        <briefdescription>
<para>Get the workers owned by a given account. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account_name_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The name or ID of the account whose worker should be retrieved </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A list of worker objects owned by the account </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="1208" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2386" bodyend="2389"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1abcb21200b2538c1ec2d36d6ae38620cc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t graphene::app::database_api::get_worker_count</definition>
        <argsstring>() const</argsstring>
        <name>get_worker_count</name>
        <briefdescription>
<para>Get the total number of workers registered with the blockchain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="1213" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2405" bodyend="2408"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a68b9a93c530b3fa4bb77d5d57b96fab3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; variant &gt;</type>
        <definition>vector&lt; variant &gt; graphene::app::database_api::lookup_vote_ids</definition>
        <argsstring>(const vector&lt; vote_id_type &gt; &amp;votes) const</argsstring>
        <name>lookup_vote_ids</name>
        <param>
          <type>const vector&lt; vote_id_type &gt; &amp;</type>
          <declname>votes</declname>
        </param>
        <briefdescription>
<para>Given a set of votes, return the objects they are voting for. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>votes</parametername>
</parameternamelist>
<parameterdescription>
<para>a list of vote IDs, the quantity should not be greater than the configured value of <emphasis>api_limit_lookup_vote_ids</emphasis> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the referenced objects</para></simplesect>
This will be a mixture of committee_member_objects, witness_objects, and worker_objects</para><para>The results will be in the same order as the votes. Null will be returned for any vote IDs that are not found. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="1233" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2423" bodyend="2426"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1ad099ccae08856bd4af70aa6669c6e8f6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string graphene::app::database_api::get_transaction_hex</definition>
        <argsstring>(const signed_transaction &amp;trx) const</argsstring>
        <name>get_transaction_hex</name>
        <param>
          <type>const signed_transaction &amp;</type>
          <declname>trx</declname>
        </param>
        <briefdescription>
<para>Get a hexdump of the serialized binary form of a transaction. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trx</parametername>
</parameternamelist>
<parameterdescription>
<para>a transaction to get hexdump from </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the hexdump of the transaction </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="1244" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2500" bodyend="2503"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1aed4e01791a31c797fb75b9ec7d95441d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string graphene::app::database_api::get_transaction_hex_without_sig</definition>
        <argsstring>(const transaction &amp;trx) const</argsstring>
        <name>get_transaction_hex_without_sig</name>
        <param>
          <type>const transaction &amp;</type>
          <declname>trx</declname>
        </param>
        <briefdescription>
<para>Get a hexdump of the serialized binary form of a signatures-stripped transaction. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trx</parametername>
</parameternamelist>
<parameterdescription>
<para>a transaction to get hexdump from </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the hexdump of the transaction without the signatures </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="1251" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2510" bodyend="2514"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a9ae2eb6a83c27a7b4eec2b00ee8ba371" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>set&lt; public_key_type &gt;</type>
        <definition>set&lt; public_key_type &gt; graphene::app::database_api::get_required_signatures</definition>
        <argsstring>(const signed_transaction &amp;trx, const flat_set&lt; public_key_type &gt; &amp;available_keys) const</argsstring>
        <name>get_required_signatures</name>
        <param>
          <type>const signed_transaction &amp;</type>
          <declname>trx</declname>
        </param>
        <param>
          <type>const flat_set&lt; public_key_type &gt; &amp;</type>
          <declname>available_keys</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This API will take a partially signed transaction and a set of public keys that the owner has the ability to sign for and return the minimal subset of public keys that should add signatures to the transaction.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trx</parametername>
</parameternamelist>
<parameterdescription>
<para>the transaction to be signed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>available_keys</parametername>
</parameternamelist>
<parameterdescription>
<para>a set of public keys </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a subset of <computeroutput>available_keys</computeroutput> that could sign for the given transaction </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="1262" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2522" bodyend="2526"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1ae62878047f99b974282302825086d369" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>set&lt; public_key_type &gt;</type>
        <definition>set&lt; public_key_type &gt; graphene::app::database_api::get_potential_signatures</definition>
        <argsstring>(const signed_transaction &amp;trx) const</argsstring>
        <name>get_potential_signatures</name>
        <param>
          <type>const signed_transaction &amp;</type>
          <declname>trx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method will return the set of all public keys that could possibly sign for a given transaction. This call can be used by wallets to filter their set of public keys to just the relevant subset prior to calling <ref refid="classgraphene_1_1app_1_1database__api_1a9ae2eb6a83c27a7b4eec2b00ee8ba371" kindref="member">get_required_signatures</ref> to get the minimum subset.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trx</parametername>
</parameternamelist>
<parameterdescription>
<para>the transaction to be signed </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a set of public keys that could possibly sign for the given transaction </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="1273" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2544" bodyend="2547"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1ae40d3a430ca023b53c09f92351d9e904" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>set&lt; address &gt;</type>
        <definition>set&lt; address &gt; graphene::app::database_api::get_potential_address_signatures</definition>
        <argsstring>(const signed_transaction &amp;trx) const</argsstring>
        <name>get_potential_address_signatures</name>
        <param>
          <type>const signed_transaction &amp;</type>
          <declname>trx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method will return the set of all addresses that could possibly sign for a given transaction.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trx</parametername>
</parameternamelist>
<parameterdescription>
<para>the transaction to be signed </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a set of addresses that could possibly sign for the given transaction </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="1281" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2548" bodyend="2551"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1afe62b6a147149b0954cda6c10c858f7d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::app::database_api::verify_authority</definition>
        <argsstring>(const signed_transaction &amp;trx) const</argsstring>
        <name>verify_authority</name>
        <param>
          <type>const signed_transaction &amp;</type>
          <declname>trx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check whether a transaction has all of the required signatures <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trx</parametername>
</parameternamelist>
<parameterdescription>
<para>a transaction to be verified </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the <computeroutput>trx</computeroutput> has all of the required signatures, otherwise throws an exception </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="1288" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2621" bodyend="2624"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a359ba5375d70ea8c68c81e97ff5b90f7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::app::database_api::verify_account_authority</definition>
        <argsstring>(const string &amp;account_name_or_id, const flat_set&lt; public_key_type &gt; &amp;signers) const</argsstring>
        <name>verify_account_authority</name>
        <param>
          <type>const string &amp;</type>
          <declname>account_name_or_id</declname>
        </param>
        <param>
          <type>const flat_set&lt; public_key_type &gt; &amp;</type>
          <declname>signers</declname>
        </param>
        <briefdescription>
<para>Verify that the public keys have enough authority to approve an operation for this account. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account_name_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>name or ID of an account to check </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signers</parametername>
</parameternamelist>
<parameterdescription>
<para>the public keys </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the passed in keys have enough authority to approve an operation for this account </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="1296" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2639" bodyend="2643"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a3b704179a813b26c3f910105f7e6a9f6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1processed__transaction" kindref="compound">processed_transaction</ref></type>
        <definition>processed_transaction graphene::app::database_api::validate_transaction</definition>
        <argsstring>(const signed_transaction &amp;trx) const</argsstring>
        <name>validate_transaction</name>
        <param>
          <type>const signed_transaction &amp;</type>
          <declname>trx</declname>
        </param>
        <briefdescription>
<para>Validates a transaction against the current state without broadcasting it on the network. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trx</parametername>
</parameternamelist>
<parameterdescription>
<para>a transaction to be validated </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a processed_transaction object if the transaction passes the validation, otherwise an exception will be thrown </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="1305" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2671" bodyend="2674"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1ac97496b7f7c91b710cb32f82d44c271c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classfc_1_1variant" kindref="compound">fc::variant</ref> &gt;</type>
        <definition>vector&lt; fc::variant &gt; graphene::app::database_api::get_required_fees</definition>
        <argsstring>(const vector&lt; operation &gt; &amp;ops, const std::string &amp;asset_symbol_or_id) const</argsstring>
        <name>get_required_fees</name>
        <param>
          <type>const vector&lt; operation &gt; &amp;</type>
          <declname>ops</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>asset_symbol_or_id</declname>
        </param>
        <briefdescription>
<para>For each operation calculate the required fee in the specified asset type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ops</parametername>
</parameternamelist>
<parameterdescription>
<para>a list of operations to be query for required fees </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>asset_symbol_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol name or ID of an asset that to be used to pay the fees </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a list of objects which indicates required fees of each operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="1313" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2681" bodyend="2685"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1aaf638b04c5e30917948d9ac1382ce898" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1proposal__object" kindref="compound">proposal_object</ref> &gt;</type>
        <definition>vector&lt; proposal_object &gt; graphene::app::database_api::get_proposed_transactions</definition>
        <argsstring>(const std::string account_name_or_id) const</argsstring>
        <name>get_proposed_transactions</name>
        <param>
          <type>const std::string</type>
          <declname>account_name_or_id</declname>
        </param>
        <briefdescription>
<para>return a set of proposed transactions (aka proposals) that the specified account can add approval to or remove approval from </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account_name_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The name or ID of an account </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a set of proposed transactions that the specified account can act on </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="1326" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2772" bodyend="2775"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a42799e089fb62035373538f9ccc973af" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1blinded__balance__object" kindref="compound">blinded_balance_object</ref> &gt;</type>
        <definition>vector&lt; blinded_balance_object &gt; graphene::app::database_api::get_blinded_balances</definition>
        <argsstring>(const flat_set&lt; commitment_type &gt; &amp;commitments) const</argsstring>
        <name>get_blinded_balances</name>
        <param>
          <type>const flat_set&lt; commitment_type &gt; &amp;</type>
          <declname>commitments</declname>
        </param>
        <briefdescription>
<para>return the set of blinded balance objects by commitment ID </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>commitments</parametername>
</parameternamelist>
<parameterdescription>
<para>a set of commitments to query for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the set of blinded balance objects by commitment ID </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="1337" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2807" bodyend="2811"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1ac84d7a0d2711c58146607515b8902c04" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1withdraw__permission__object" kindref="compound">withdraw_permission_object</ref> &gt;</type>
        <definition>vector&lt; withdraw_permission_object &gt; graphene::app::database_api::get_withdraw_permissions_by_giver</definition>
        <argsstring>(const std::string account_name_or_id, withdraw_permission_id_type start, uint32_t limit) const</argsstring>
        <name>get_withdraw_permissions_by_giver</name>
        <param>
          <type>const std::string</type>
          <declname>account_name_or_id</declname>
        </param>
        <param>
          <type>withdraw_permission_id_type</type>
          <declname>start</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Get non expired withdraw permission objects for a giver(ex:recurring customer) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account_name_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Account name or ID to get objects from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>Withdraw permission objects(1.12.X) before this ID will be skipped in results. Pagination purposes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of objects to retrieve, must not exceed the configured value of <emphasis>api_limit_get_withdraw_permissions_by_giver</emphasis> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Withdraw permission objects for the account </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="1352" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2834" bodyend="2840"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1aa6a3b98ed912fd3325aaed3648402f4d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1withdraw__permission__object" kindref="compound">withdraw_permission_object</ref> &gt;</type>
        <definition>vector&lt; withdraw_permission_object &gt; graphene::app::database_api::get_withdraw_permissions_by_recipient</definition>
        <argsstring>(const std::string account_name_or_id, withdraw_permission_id_type start, uint32_t limit) const</argsstring>
        <name>get_withdraw_permissions_by_recipient</name>
        <param>
          <type>const std::string</type>
          <declname>account_name_or_id</declname>
        </param>
        <param>
          <type>withdraw_permission_id_type</type>
          <declname>start</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Get non expired withdraw permission objects for a recipient(ex:service provider) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account_name_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Account name or ID to get objects from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>Withdraw permission objects(1.12.X) before this ID will be skipped in results. Pagination purposes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of objects to retrieve, must not exceed the configured value of <emphasis>api_limit_get_withdraw_permissions_by_recipient</emphasis> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Withdraw permission objects for the account </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="1365" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2868" bodyend="2874"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a81ed3d0c944b228f001f19f3c790b6fd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>optional&lt; <ref refid="classgraphene_1_1chain_1_1htlc__object" kindref="compound">htlc_object</ref> &gt;</type>
        <definition>optional&lt; htlc_object &gt; graphene::app::database_api::get_htlc</definition>
        <argsstring>(htlc_id_type id, optional&lt; bool &gt; subscribe=optional&lt; bool &gt;()) const</argsstring>
        <name>get_htlc</name>
        <param>
          <type>htlc_id_type</type>
          <declname>id</declname>
        </param>
        <param>
          <type>optional&lt; bool &gt;</type>
          <declname>subscribe</declname>
          <defval>optional&lt; bool &gt;()</defval>
        </param>
        <briefdescription>
<para>Get HTLC object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>HTLC contract id </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subscribe</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>true</emphasis> to subscribe to the queried HTLC objects, <emphasis>false</emphasis> to not subscribe, <emphasis>null</emphasis> to subscribe or not subscribe according to current auto-subscription setting (see <ref refid="classgraphene_1_1app_1_1database__api_1a7ef2faf3e3e402ea9572067554c2dd2c" kindref="member">set_auto_subscription</ref>) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>HTLC object for the id </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="1381" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2907" bodyend="2910"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1acbce7053f382ccc0c13b406930b68f8c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1htlc__object" kindref="compound">htlc_object</ref> &gt;</type>
        <definition>vector&lt; htlc_object &gt; graphene::app::database_api::get_htlc_by_from</definition>
        <argsstring>(const std::string account_name_or_id, htlc_id_type start, uint32_t limit) const</argsstring>
        <name>get_htlc_by_from</name>
        <param>
          <type>const std::string</type>
          <declname>account_name_or_id</declname>
        </param>
        <param>
          <type>htlc_id_type</type>
          <declname>start</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Get non expired HTLC objects using the sender account. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account_name_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Account name or ID to get objects from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>htlc objects before this ID will be skipped in results. Pagination purposes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of objects to retrieve, must not exceed the configured value of <emphasis>api_limit_get_htlc_by</emphasis> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>HTLC objects for the account </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="1391" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2922" bodyend="2926"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1aa2300f056dcedcf6fad9ec54dab0879c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1htlc__object" kindref="compound">htlc_object</ref> &gt;</type>
        <definition>vector&lt; htlc_object &gt; graphene::app::database_api::get_htlc_by_to</definition>
        <argsstring>(const std::string account_name_or_id, htlc_id_type start, uint32_t limit) const</argsstring>
        <name>get_htlc_by_to</name>
        <param>
          <type>const std::string</type>
          <declname>account_name_or_id</declname>
        </param>
        <param>
          <type>htlc_id_type</type>
          <declname>start</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Get non expired HTLC objects using the receiver account. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account_name_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Account name or ID to get objects from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>htlc objects before this ID will be skipped in results. Pagination purposes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of objects to retrieve, must not exceed the configured value of <emphasis>api_limit_get_htlc_by</emphasis> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>HTLC objects for the account </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="1403" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2952" bodyend="2956"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1ab3d51a5d6848233ff9670803174808a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1htlc__object" kindref="compound">htlc_object</ref> &gt;</type>
        <definition>vector&lt; htlc_object &gt; graphene::app::database_api::list_htlcs</definition>
        <argsstring>(const htlc_id_type start, uint32_t limit) const</argsstring>
        <name>list_htlcs</name>
        <param>
          <type>const htlc_id_type</type>
          <declname>start</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Get all HTLCs. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower bound of htlc id to start getting results </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of htlc objects to fetch, must not exceed the configured value of <emphasis>api_limit_list_htlcs</emphasis> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The htlc object list </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="1414" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2982" bodyend="2985"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1adf6b094879a94e98f2efa90b17f3bc77" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1ticket__object" kindref="compound">ticket_object</ref> &gt;</type>
        <definition>vector&lt; ticket_object &gt; graphene::app::database_api::list_tickets</definition>
        <argsstring>(const optional&lt; uint32_t &gt; &amp;limit=optional&lt; uint32_t &gt;(), const optional&lt; ticket_id_type &gt; &amp;start_id=optional&lt; ticket_id_type &gt;()) const</argsstring>
        <name>list_tickets</name>
        <param>
          <type>const optional&lt; uint32_t &gt; &amp;</type>
          <declname>limit</declname>
          <defval>optional&lt; uint32_t &gt;()</defval>
        </param>
        <param>
          <type>const optional&lt; ticket_id_type &gt; &amp;</type>
          <declname>start_id</declname>
          <defval>optional&lt; ticket_id_type &gt;()</defval>
        </param>
        <briefdescription>
<para>Get a list of tickets. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>The limitation of items each query can fetch, not greater than the configured value of <emphasis>api_limit_get_tickets</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Start ticket id, fetch tickets whose IDs are greater than or equal to this ID </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The tickets</para></simplesect>
<simplesect kind="note"><para><orderedlist>
<listitem><para><computeroutput>limit</computeroutput> can be omitted or be <emphasis>null</emphasis>, if so the configured value of <emphasis>api_limit_get_tickets</emphasis> will be used</para></listitem><listitem><para><computeroutput>start_id</computeroutput> can be omitted or be <emphasis>null</emphasis>, if so the api will return the &quot;first page&quot; of tickets</para></listitem><listitem><para>One or more optional parameters can be omitted from the end of the parameter list, and the optional parameters in the middle cannot be omitted (but can be <emphasis>null</emphasis>). </para></listitem></orderedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="1435" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="3012" bodyend="3021"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api_1a532916e6c34abacabad50a3978931e53" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1ticket__object" kindref="compound">ticket_object</ref> &gt;</type>
        <definition>vector&lt; ticket_object &gt; graphene::app::database_api::get_tickets_by_account</definition>
        <argsstring>(const std::string &amp;account_name_or_id, const optional&lt; uint32_t &gt; &amp;limit=optional&lt; uint32_t &gt;(), const optional&lt; ticket_id_type &gt; &amp;start_id=optional&lt; ticket_id_type &gt;()) const</argsstring>
        <name>get_tickets_by_account</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>account_name_or_id</declname>
        </param>
        <param>
          <type>const optional&lt; uint32_t &gt; &amp;</type>
          <declname>limit</declname>
          <defval>optional&lt; uint32_t &gt;()</defval>
        </param>
        <param>
          <type>const optional&lt; ticket_id_type &gt; &amp;</type>
          <declname>start_id</declname>
          <defval>optional&lt; ticket_id_type &gt;()</defval>
        </param>
        <briefdescription>
<para>Get a list of tickets by the name or ID of the owner account. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account_name_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>name or ID of the owner account </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>The limitation of items each query can fetch, not greater than the configured value of <emphasis>api_limit_get_tickets</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Start ticket id, fetch tickets whose IDs are greater than or equal to this ID </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The tickets</para></simplesect>
<simplesect kind="note"><para><orderedlist>
<listitem><para>If <computeroutput>account_name_or_id</computeroutput> cannot be tied to an account, an error will be returned</para></listitem><listitem><para><computeroutput>limit</computeroutput> can be omitted or be <emphasis>null</emphasis>, if so the configured value of <emphasis>api_limit_get_tickets</emphasis> will be used</para></listitem><listitem><para><computeroutput>start_id</computeroutput> can be omitted or be <emphasis>null</emphasis>, if so the api will return the &quot;first page&quot; of tickets</para></listitem><listitem><para>One or more optional parameters can be omitted from the end of the parameter list, and the optional parameters in the middle cannot be omitted (but can be <emphasis>null</emphasis>). </para></listitem></orderedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/database_api.hpp" line="1455" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="3023" bodyend="3034"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classgraphene_1_1app_1_1database__api" kindref="compound">database_api</ref> class implements the RPC API for the chain database. </para>    </briefdescription>
    <detaileddescription>
<para>This API exposes accessors on the database which query state tracked by a blockchain validating node. This API is read-only; all modifications to the database must be performed via transactions. Transactions are broadcast via the <ref refid="classgraphene_1_1app_1_1network__broadcast__api" kindref="compound">network_broadcast_api</ref>. </para>    </detaileddescription>
    <location file="libraries/app/include/graphene/app/database_api.hpp" line="71" column="1" bodyfile="libraries/app/include/graphene/app/database_api.hpp" bodystart="70" bodyend="1462"/>
    <listofallmembers>
      <member refid="classgraphene_1_1app_1_1database__api_1a0c3f545dec20b073131bbd7466940c6f" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>cancel_all_subscriptions</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1ad81929c19600a30b92e8c387338264ab" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>database_api</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1ada3034b4ddacffa7106cde1f256d07d3" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_24_volume</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1af3a97a65a2b8a714c74a3e3f8d888019" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_account_balances</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a038218b56f3325924dedd39622b9bbb9" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_account_by_name</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1aeae61cd2ea6284869e996dce486286d4" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_account_count</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a9f82d7f754d32a6ed45b887916ab83ff" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_account_id_from_string</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a92522911b62a79d1adb7c58105cc6fb3" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_account_limit_orders</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a43517821a3d5b059134fe02a2cf0ae4a" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_account_references</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a4d888f7e9c38f0465e5346cbdf23e955" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_accounts</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a1785d2851b71b89123c1e95aa030de81" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_all_workers</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a6b628b3014c888dd5328bb11c0b414bc" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_asset_count</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1ae353813a6ad254bbc6c1be6109e9f8ca" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_asset_id_from_string</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a836ed951450422027852b7d74b419885" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_assets</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a1d3724c792c87c23836fb5ea5854bc0a" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_assets_by_issuer</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1ae95b0587f9735593e1331cfe97b6be41" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_balance_objects</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a42799e089fb62035373538f9ccc973af" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_blinded_balances</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a865cb0a6e29f07e8854ffe092adb503e" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_block</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a27ae68393da89f5f225c9906a8d568eb" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_block_header</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a6d51f441fb5e1ed12b06ecd8b2f95321" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_block_header_batch</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a70e6dafcc9f6640ca5f9b721f784ab4f" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_call_orders</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a78eb082a3a0cfb33ccd00adeb8cfac1d" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_call_orders_by_account</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a940f705654d1baf52af6601b09b4ad9f" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_chain_id</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a51e318453ce7d459cd24e65fe81b14f1" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_chain_properties</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a3e7c0d7f9dd1f5310523b498ea9bfe4e" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_collateral_bids</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1ae004f1926d5eca8760a9bf1a0f8fffb2" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_committee_count</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a3682d40b3b10abd9ab439e8515cdbfdd" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_committee_member_by_account</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1aacfac5de7a9265a073b678812e26e729" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_committee_members</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1aecbae15b1b183ee2b70d8cf5d25c1afa" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_config</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1af1233bfc166711b78b4d34d3bb094047" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_credit_deals_by_borrower</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1abbb420107a13b57e11296c52ada69cf4" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_credit_deals_by_collateral_asset</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a16b2614e7f4476d717fc3e38f1eb1e5e" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_credit_deals_by_debt_asset</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a7856b3463b0dfd72262a9afc0f3dd36c" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_credit_deals_by_offer_id</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a5e2dfd45db157be4aab1560613265bc1" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_credit_deals_by_offer_owner</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a65052e7e93ec254815392730e32622e1" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_credit_offers_by_asset</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1aa50f87f1fcb9e11e8fd1e970c9619bc0" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_credit_offers_by_owner</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a3398a20589c01aa807a364a02ec4c728" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_dynamic_global_properties</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a5ab6a58dd3535028d7e7b713accf8d7c" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_full_accounts</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a6428c7a87e41ad7c30d59e4bbf45afe7" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_global_properties</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a81ed3d0c944b228f001f19f3c790b6fd" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_htlc</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1acbce7053f382ccc0c13b406930b68f8c" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_htlc_by_from</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1aa2300f056dcedcf6fad9ec54dab0879c" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_htlc_by_to</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1aacba679e16a5dcf764ccccce69987941" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_key_references</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1ab970529cf7f1f126b633522f47c09e54" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_limit_orders</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1aef5b23c034ffa6149abb34f5d1d80a62" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_limit_orders_by_account</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a303a0450f921caf2fdfbb7208fcdb5ea" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_liquidity_pools</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1ab49d0108a9762fc1ecc0a80377f15f48" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_liquidity_pools_by_asset_a</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1ae8b478f32b478ef596a43bd5ce0f652c" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_liquidity_pools_by_asset_b</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1af68feefbc990407d40e5fa2e9ad9bb99" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_liquidity_pools_by_both_assets</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1ae2948b6c7a4b2ec221f34c1290fa32fd" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_liquidity_pools_by_one_asset</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a9af61002f77b4bb3fe4dc592e504eadb" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_liquidity_pools_by_owner</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a404ef050664db7f873988d36c5e4395a" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_liquidity_pools_by_share_asset</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a4c350db68ce602c9cdc4f100c6ad8c83" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_margin_positions</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a52372cd241026042c898239aaf4ab18a" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_named_account_balances</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a6292d6c9f41e9bf467b105eab60d8ead" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_next_object_id</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a1f20e51d290fc3ac2409c49c058585b3" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_objects</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a0579547021625dae09a2524a794c36e4" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_order_book</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1ae40d3a430ca023b53c09f92351d9e904" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_potential_address_signatures</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1ae62878047f99b974282302825086d369" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_potential_signatures</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1aaf638b04c5e30917948d9ac1382ce898" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_proposed_transactions</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a8a17f68497a018e2886abf23f354e278" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_recent_transaction_by_id</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1ac97496b7f7c91b710cb32f82d44c271c" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_required_fees</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a9ae2eb6a83c27a7b4eec2b00ee8ba371" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_required_signatures</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a8b7045a7151c2a7a538e65c771b77b1c" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_samet_funds_by_asset</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a65bd4a0a72d2b735e7400ba47a6682c6" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_samet_funds_by_owner</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a2e08bf257a9e0cd985ddda28fec57faa" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_settle_orders</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a70e3f5424c303e2d9a1838bc92320f5f" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_settle_orders_by_account</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1ab507c98bcb65b3e5efef6d11a9a0a08c" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_ticker</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a532916e6c34abacabad50a3978931e53" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_tickets_by_account</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1adbbb2c12bca7d9f84bc73ef5b2991df6" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_top_markets</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1acb8ab33255ca9bb0cdba566613759a63" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_top_voters</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1adf9ed4ed4069623c11551b25ae7b3323" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_trade_history</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a4c7d0d66684e8a3f3150c72b54948c7f" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_trade_history_by_sequence</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1aca15ad75a1150dd83304f419ce54d320" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_transaction</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1ad099ccae08856bd4af70aa6669c6e8f6" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_transaction_hex</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1aed4e01791a31c797fb75b9ec7d95441d" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_transaction_hex_without_sig</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1ad544bdda0a336353ba66d304cdced4c0" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_vested_balances</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a0fcc0397965e0f43ce743f16929767a0" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_vesting_balances</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1ac84d7a0d2711c58146607515b8902c04" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_withdraw_permissions_by_giver</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1aa6a3b98ed912fd3325aaed3648402f4d" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_withdraw_permissions_by_recipient</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1ad5b1d3e1677a3cf1b56dd24d5fbb72f6" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_witness_by_account</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1af63c5f89b966944940ac7007f83fe051" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_witness_count</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a74f6a78e1b086b71d76c13c61344373a" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_witnesses</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1abcb21200b2538c1ec2d36d6ae38620cc" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_worker_count</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a6d2b49d8b52b79addccee543a5de5ce6" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>get_workers_by_account</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a6a8ea15c0976f303ec81fcfe2ebad67a" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>is_public_key_registered</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a647bbe1817ac17b00a80e2c76c95f079" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>list_assets</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a9bbd01c75de6c94d28de2001218c4ef6" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>list_credit_deals</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1ae88a4c2140cf8e973326c6a32213eb72" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>list_credit_offers</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1ab3d51a5d6848233ff9670803174808a2" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>list_htlcs</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1af6d826816f093baad2d45389970ef0eb" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>list_liquidity_pools</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a20b46d7e5663c52b0ea882566081be63" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>list_samet_funds</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1adf6b094879a94e98f2efa90b17f3bc77" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>list_tickets</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a2387dfaadd10588b1253e1453640a56d" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>lookup_account_names</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a87b5eecf2a53c1de1700891f94146bfe" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>lookup_accounts</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a0d263bd65e3c8221fc6fa83000661e0e" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>lookup_asset_symbols</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1aa74ae6cb6883d1339f67dfd93fcfefa7" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>lookup_committee_member_accounts</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a68b9a93c530b3fa4bb77d5d57b96fab3" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>lookup_vote_ids</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a0e46beb464f4c2c8c58fe772721f47a7" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>lookup_witness_accounts</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a5b8f07ff78c43a35bbda1afe09ab29c1" prot="private" virt="non-virtual"><scope>graphene::app::database_api</scope><name>my</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a7ef2faf3e3e402ea9572067554c2dd2c" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>set_auto_subscription</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a5a0bc87af4cb36c11a9a15f5c29d6ea9" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>set_block_applied_callback</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a53aa3374ca6b7d063f2f0eb994e5687f" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>set_pending_transaction_callback</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a66addb6dfc6b60d687bfb17b4401c36e" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>set_subscribe_callback</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1afda8182c12340a82a94ae455bbb0ee40" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>subscribe_to_market</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a56e8e3de3827d2ed993d28bd22b943de" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>unsubscribe_from_market</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a3b704179a813b26c3f910105f7e6a9f6" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>validate_transaction</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a359ba5375d70ea8c68c81e97ff5b90f7" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>verify_account_authority</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1afe62b6a147149b0954cda6c10c858f7d" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>verify_authority</name></member>
      <member refid="classgraphene_1_1app_1_1database__api_1a3510335e90925e050398d74bc9d22dd4" prot="public" virt="non-virtual"><scope>graphene::app::database_api</scope><name>~database_api</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
