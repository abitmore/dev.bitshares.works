<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classfc_1_1enum__type" kind="class" language="C++" prot="public">
    <compoundname>fc::enum_type</compoundname>
    <includes refid="enum__type_8hpp" local="no">enum_type.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>IntType</declname>
        <defname>IntType</defname>
      </param>
      <param>
        <type>typename</type>
        <declname>EnumType</declname>
        <defname>EnumType</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classfc_1_1enum__type_1a8b0e6540d17ce2ef92a0255af066f78f" prot="public" static="no" mutable="no">
        <type>EnumType</type>
        <definition>EnumType fc::enum_type&lt; IntType, EnumType &gt;::value</definition>
        <argsstring></argsstring>
        <name>value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/enum_type.hpp" line="46" column="1" bodyfile="libraries/fc/include/fc/io/enum_type.hpp" bodystart="46" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classfc_1_1enum__type_1a3078b4135df95e31bfc2ae29c1ee5faf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>fc::enum_type&lt; IntType, EnumType &gt;::enum_type</definition>
        <argsstring>(EnumType t)</argsstring>
        <name>enum_type</name>
        <param>
          <type>EnumType</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/enum_type.hpp" line="12" column="1" bodyfile="libraries/fc/include/fc/io/enum_type.hpp" bodystart="12" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1enum__type_1ad8d102851f090f6ff22523a56b187262" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>fc::enum_type&lt; IntType, EnumType &gt;::enum_type</definition>
        <argsstring>(IntType t)</argsstring>
        <name>enum_type</name>
        <param>
          <type>IntType</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/enum_type.hpp" line="15" column="1" bodyfile="libraries/fc/include/fc/io/enum_type.hpp" bodystart="15" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1enum__type_1a6287fe27974f80c56243be5e37abf0ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>fc::enum_type&lt; IntType, EnumType &gt;::enum_type</definition>
        <argsstring>()</argsstring>
        <name>enum_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/enum_type.hpp" line="18" column="1" bodyfile="libraries/fc/include/fc/io/enum_type.hpp" bodystart="18" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1enum__type_1a22c917928cbb64ddb37e6ecc3ecf8c23" prot="public" static="no" const="yes" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>fc::enum_type&lt; IntType, EnumType &gt;::operator IntType</definition>
        <argsstring>() const</argsstring>
        <name>operator IntType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/enum_type.hpp" line="20" column="1" bodyfile="libraries/fc/include/fc/io/enum_type.hpp" bodystart="20" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1enum__type_1af0773eac818e95a1f6addd5dc892a44d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>fc::enum_type&lt; IntType, EnumType &gt;::operator EnumType</definition>
        <argsstring>() const</argsstring>
        <name>operator EnumType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/enum_type.hpp" line="21" column="1" bodyfile="libraries/fc/include/fc/io/enum_type.hpp" bodystart="21" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1enum__type_1ae0627e8e9651ef61c1e66ba3b570ff0a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>fc::enum_type&lt; IntType, EnumType &gt;::operator std::string</definition>
        <argsstring>() const</argsstring>
        <name>operator std::string</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/enum_type.hpp" line="22" column="1" bodyfile="libraries/fc/include/fc/io/enum_type.hpp" bodystart="22" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1enum__type_1ae9f685bb1a3400f4ba16cec4ad1f0b89" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfc_1_1enum__type" kindref="compound">enum_type</ref> &amp;</type>
        <definition>enum_type&amp; fc::enum_type&lt; IntType, EnumType &gt;::operator=</definition>
        <argsstring>(IntType i)</argsstring>
        <name>operator=</name>
        <param>
          <type>IntType</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/enum_type.hpp" line="24" column="1" bodyfile="libraries/fc/include/fc/io/enum_type.hpp" bodystart="24" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1enum__type_1a10fec0ad3f736434b38d15cfd37ad10b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfc_1_1enum__type" kindref="compound">enum_type</ref> &amp;</type>
        <definition>enum_type&amp; fc::enum_type&lt; IntType, EnumType &gt;::operator=</definition>
        <argsstring>(EnumType i)</argsstring>
        <name>operator=</name>
        <param>
          <type>EnumType</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/enum_type.hpp" line="25" column="1" bodyfile="libraries/fc/include/fc/io/enum_type.hpp" bodystart="25" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1enum__type_1a948ee1bc590e651c2d42dda538bb4522" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::enum_type&lt; IntType, EnumType &gt;::operator&lt;</definition>
        <argsstring>(EnumType i) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>EnumType</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/enum_type.hpp" line="26" column="1" bodyfile="libraries/fc/include/fc/io/enum_type.hpp" bodystart="26" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1enum__type_1a37bab60221d5bfaee42c0f03a7e6879a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::enum_type&lt; IntType, EnumType &gt;::operator&gt;</definition>
        <argsstring>(EnumType i) const</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>EnumType</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/enum_type.hpp" line="27" column="1" bodyfile="libraries/fc/include/fc/io/enum_type.hpp" bodystart="27" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1enum__type_1a7c681516050d6eceac8a0c571f72500e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::enum_type&lt; IntType, EnumType &gt;::operator&lt;</definition>
        <argsstring>(const enum_type &amp;e) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classfc_1_1enum__type" kindref="compound">enum_type</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/enum_type.hpp" line="29" column="1" bodyfile="libraries/fc/include/fc/io/enum_type.hpp" bodystart="29" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1enum__type_1ac6e9a19af6949253caa65b836a880f39" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::enum_type&lt; IntType, EnumType &gt;::operator&gt;</definition>
        <argsstring>(const enum_type &amp;e) const</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classfc_1_1enum__type" kindref="compound">enum_type</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/enum_type.hpp" line="30" column="1" bodyfile="libraries/fc/include/fc/io/enum_type.hpp" bodystart="30" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1enum__type_1a53f9929b8853c133181f296c8a6c6d58" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::enum_type&lt; IntType, EnumType &gt;::operator&lt;=</definition>
        <argsstring>(const enum_type &amp;e) const</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classfc_1_1enum__type" kindref="compound">enum_type</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/enum_type.hpp" line="32" column="1" bodyfile="libraries/fc/include/fc/io/enum_type.hpp" bodystart="32" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1enum__type_1a92d7cbbdb071304598bb632621ac3b0e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::enum_type&lt; IntType, EnumType &gt;::operator&gt;=</definition>
        <argsstring>(const enum_type &amp;e) const</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classfc_1_1enum__type" kindref="compound">enum_type</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/enum_type.hpp" line="33" column="1" bodyfile="libraries/fc/include/fc/io/enum_type.hpp" bodystart="33" bodyend="33"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classfc_1_1enum__type_1af1bbc088779a537daf544ab3633eeba2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const enum_type &amp;e, IntType i)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classfc_1_1enum__type" kindref="compound">enum_type</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>IntType</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/enum_type.hpp" line="35" column="1" bodyfile="libraries/fc/include/fc/io/enum_type.hpp" bodystart="35" bodyend="35"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1enum__type_1a1ffc7cb32cd9a60afb25a6e2f7d1034e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const enum_type &amp;e, EnumType i)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classfc_1_1enum__type" kindref="compound">enum_type</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>EnumType</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/enum_type.hpp" line="36" column="1" bodyfile="libraries/fc/include/fc/io/enum_type.hpp" bodystart="36" bodyend="36"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1enum__type_1a091a7d971ad168253c3ef16098064da1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const enum_type &amp;e, const enum_type &amp;i)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classfc_1_1enum__type" kindref="compound">enum_type</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1enum__type" kindref="compound">enum_type</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/enum_type.hpp" line="38" column="1" bodyfile="libraries/fc/include/fc/io/enum_type.hpp" bodystart="38" bodyend="38"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1enum__type_1a2a5c6a3beea82066bc45bbc444258875" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(IntType i, const enum_type &amp;e)</argsstring>
        <name>operator==</name>
        <param>
          <type>IntType</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1enum__type" kindref="compound">enum_type</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/enum_type.hpp" line="39" column="1" bodyfile="libraries/fc/include/fc/io/enum_type.hpp" bodystart="39" bodyend="39"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1enum__type_1a0dd0e3d86ccff831757ff6a3cc8f1065" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(EnumType i, const enum_type &amp;e)</argsstring>
        <name>operator==</name>
        <param>
          <type>EnumType</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1enum__type" kindref="compound">enum_type</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/enum_type.hpp" line="40" column="1" bodyfile="libraries/fc/include/fc/io/enum_type.hpp" bodystart="40" bodyend="40"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1enum__type_1aadc1d927dadd114ca02a7193d626e2e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const enum_type &amp;e, IntType i)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classfc_1_1enum__type" kindref="compound">enum_type</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>IntType</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/enum_type.hpp" line="42" column="1" bodyfile="libraries/fc/include/fc/io/enum_type.hpp" bodystart="42" bodyend="42"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1enum__type_1a30df5bfcf9438a7970e0a839ee9ae896" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const enum_type &amp;e, EnumType i)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classfc_1_1enum__type" kindref="compound">enum_type</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>EnumType</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/enum_type.hpp" line="43" column="1" bodyfile="libraries/fc/include/fc/io/enum_type.hpp" bodystart="43" bodyend="43"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1enum__type_1aa80e65e65577bc8d4f01cd633218cd8e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const enum_type &amp;e, const enum_type &amp;i)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classfc_1_1enum__type" kindref="compound">enum_type</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1enum__type" kindref="compound">enum_type</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/enum_type.hpp" line="44" column="1" bodyfile="libraries/fc/include/fc/io/enum_type.hpp" bodystart="44" bodyend="44"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="3530">
        <label>fc::enum_type&lt; IntType, EnumType &gt;</label>
        <link refid="classfc_1_1enum__type"/>
        <childnode refid="3531" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="3531">
        <label>EnumType</label>
      </node>
    </collaborationgraph>
    <location file="libraries/fc/include/fc/io/enum_type.hpp" line="10" column="1" bodyfile="libraries/fc/include/fc/io/enum_type.hpp" bodystart="9" bodyend="47"/>
    <listofallmembers>
      <member refid="classfc_1_1enum__type_1a3078b4135df95e31bfc2ae29c1ee5faf" prot="public" virt="non-virtual"><scope>fc::enum_type</scope><name>enum_type</name></member>
      <member refid="classfc_1_1enum__type_1ad8d102851f090f6ff22523a56b187262" prot="public" virt="non-virtual"><scope>fc::enum_type</scope><name>enum_type</name></member>
      <member refid="classfc_1_1enum__type_1a6287fe27974f80c56243be5e37abf0ab" prot="public" virt="non-virtual"><scope>fc::enum_type</scope><name>enum_type</name></member>
      <member refid="classfc_1_1enum__type_1af0773eac818e95a1f6addd5dc892a44d" prot="public" virt="non-virtual"><scope>fc::enum_type</scope><name>operator EnumType</name></member>
      <member refid="classfc_1_1enum__type_1a22c917928cbb64ddb37e6ecc3ecf8c23" prot="public" virt="non-virtual"><scope>fc::enum_type</scope><name>operator IntType</name></member>
      <member refid="classfc_1_1enum__type_1ae0627e8e9651ef61c1e66ba3b570ff0a" prot="public" virt="non-virtual"><scope>fc::enum_type</scope><name>operator std::string</name></member>
      <member refid="classfc_1_1enum__type_1aadc1d927dadd114ca02a7193d626e2e8" prot="public" virt="non-virtual"><scope>fc::enum_type</scope><name>operator!=</name></member>
      <member refid="classfc_1_1enum__type_1a30df5bfcf9438a7970e0a839ee9ae896" prot="public" virt="non-virtual"><scope>fc::enum_type</scope><name>operator!=</name></member>
      <member refid="classfc_1_1enum__type_1aa80e65e65577bc8d4f01cd633218cd8e" prot="public" virt="non-virtual"><scope>fc::enum_type</scope><name>operator!=</name></member>
      <member refid="classfc_1_1enum__type_1a948ee1bc590e651c2d42dda538bb4522" prot="public" virt="non-virtual"><scope>fc::enum_type</scope><name>operator&lt;</name></member>
      <member refid="classfc_1_1enum__type_1a7c681516050d6eceac8a0c571f72500e" prot="public" virt="non-virtual"><scope>fc::enum_type</scope><name>operator&lt;</name></member>
      <member refid="classfc_1_1enum__type_1a53f9929b8853c133181f296c8a6c6d58" prot="public" virt="non-virtual"><scope>fc::enum_type</scope><name>operator&lt;=</name></member>
      <member refid="classfc_1_1enum__type_1ae9f685bb1a3400f4ba16cec4ad1f0b89" prot="public" virt="non-virtual"><scope>fc::enum_type</scope><name>operator=</name></member>
      <member refid="classfc_1_1enum__type_1a10fec0ad3f736434b38d15cfd37ad10b" prot="public" virt="non-virtual"><scope>fc::enum_type</scope><name>operator=</name></member>
      <member refid="classfc_1_1enum__type_1af1bbc088779a537daf544ab3633eeba2" prot="public" virt="non-virtual"><scope>fc::enum_type</scope><name>operator==</name></member>
      <member refid="classfc_1_1enum__type_1a1ffc7cb32cd9a60afb25a6e2f7d1034e" prot="public" virt="non-virtual"><scope>fc::enum_type</scope><name>operator==</name></member>
      <member refid="classfc_1_1enum__type_1a091a7d971ad168253c3ef16098064da1" prot="public" virt="non-virtual"><scope>fc::enum_type</scope><name>operator==</name></member>
      <member refid="classfc_1_1enum__type_1a2a5c6a3beea82066bc45bbc444258875" prot="public" virt="non-virtual"><scope>fc::enum_type</scope><name>operator==</name></member>
      <member refid="classfc_1_1enum__type_1a0dd0e3d86ccff831757ff6a3cc8f1065" prot="public" virt="non-virtual"><scope>fc::enum_type</scope><name>operator==</name></member>
      <member refid="classfc_1_1enum__type_1a37bab60221d5bfaee42c0f03a7e6879a" prot="public" virt="non-virtual"><scope>fc::enum_type</scope><name>operator&gt;</name></member>
      <member refid="classfc_1_1enum__type_1ac6e9a19af6949253caa65b836a880f39" prot="public" virt="non-virtual"><scope>fc::enum_type</scope><name>operator&gt;</name></member>
      <member refid="classfc_1_1enum__type_1a92d7cbbdb071304598bb632621ac3b0e" prot="public" virt="non-virtual"><scope>fc::enum_type</scope><name>operator&gt;=</name></member>
      <member refid="classfc_1_1enum__type_1a8b0e6540d17ce2ef92a0255af066f78f" prot="public" virt="non-virtual"><scope>fc::enum_type</scope><name>value</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
