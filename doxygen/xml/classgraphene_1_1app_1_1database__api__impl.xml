<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classgraphene_1_1app_1_1database__api__impl" kind="class" language="C++" prot="public">
    <compoundname>graphene::app::database_api_impl</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::enable_shared_from_this&lt; database_api_impl &gt;</basecompoundref>
    <basecompoundref refid="classgraphene_1_1app_1_1database__api__helper" prot="public" virt="non-virtual">graphene::app::database_api_helper</basecompoundref>
    <includes refid="database__api__impl_8hxx" local="no">database_api_impl.hxx</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classgraphene_1_1app_1_1database__api__impl_1a44bb83df538540ec0d969c739f28c589" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool graphene::app::database_api_impl::_notify_remove_create</definition>
        <argsstring></argsstring>
        <name>_notify_remove_create</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="416" column="12" bodyfile="libraries/app/database_api_impl.hxx" bodystart="416" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1database__api__impl_1a4bfce46e305ae20b9925122fb709172f" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool graphene::app::database_api_impl::_enabled_auto_subscription</definition>
        <argsstring></argsstring>
        <name>_enabled_auto_subscription</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="417" column="12" bodyfile="libraries/app/database_api_impl.hxx" bodystart="417" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1database__api__impl_1add7a21998f28a6c4aea41006eb1ff022" prot="public" static="no" mutable="yes">
        <type><ref refid="classfc_1_1bloom__filter" kindref="compound">fc::bloom_filter</ref></type>
        <definition>fc::bloom_filter graphene::app::database_api_impl::_subscribe_filter</definition>
        <argsstring></argsstring>
        <name>_subscribe_filter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="419" column="33" bodyfile="libraries/app/database_api_impl.hxx" bodystart="419" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1database__api__impl_1acab1dea5c17660083df33c2bddc204e2" prot="public" static="no" mutable="no">
        <type>std::set&lt; account_id_type &gt;</type>
        <definition>std::set&lt;account_id_type&gt; graphene::app::database_api_impl::_subscribed_accounts</definition>
        <argsstring></argsstring>
        <name>_subscribed_accounts</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="420" column="16" bodyfile="libraries/app/database_api_impl.hxx" bodystart="420" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1database__api__impl_1af716153167cbb37816d69a69cd8391ee" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="classfc_1_1variant" kindref="compound">fc::variant</ref> &amp;)&gt;</type>
        <definition>std::function&lt;void(const fc::variant&amp;)&gt; graphene::app::database_api_impl::_subscribe_callback</definition>
        <argsstring></argsstring>
        <name>_subscribe_callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="422" column="21" bodyfile="libraries/app/database_api_impl.hxx" bodystart="422" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1database__api__impl_1adfbd822d409be041227ec58c94f95db8" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="classfc_1_1variant" kindref="compound">fc::variant</ref> &amp;)&gt;</type>
        <definition>std::function&lt;void(const fc::variant&amp;)&gt; graphene::app::database_api_impl::_pending_trx_callback</definition>
        <argsstring></argsstring>
        <name>_pending_trx_callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="423" column="21" bodyfile="libraries/app/database_api_impl.hxx" bodystart="423" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1database__api__impl_1a79f338b26855b0a580f74e47e0600758" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="classfc_1_1variant" kindref="compound">fc::variant</ref> &amp;)&gt;</type>
        <definition>std::function&lt;void(const fc::variant&amp;)&gt; graphene::app::database_api_impl::_block_applied_callback</definition>
        <argsstring></argsstring>
        <name>_block_applied_callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="424" column="21" bodyfile="libraries/app/database_api_impl.hxx" bodystart="424" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1database__api__impl_1ae432b4993936147dcd5e8ac87bc087eb" prot="public" static="no" mutable="no">
        <type>boost::signals2::scoped_connection</type>
        <definition>boost::signals2::scoped_connection graphene::app::database_api_impl::_new_connection</definition>
        <argsstring></argsstring>
        <name>_new_connection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="426" column="42" bodyfile="libraries/app/database_api_impl.hxx" bodystart="426" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1database__api__impl_1a08837ce80550808d16dc34e85258f40f" prot="public" static="no" mutable="no">
        <type>boost::signals2::scoped_connection</type>
        <definition>boost::signals2::scoped_connection graphene::app::database_api_impl::_change_connection</definition>
        <argsstring></argsstring>
        <name>_change_connection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="427" column="42" bodyfile="libraries/app/database_api_impl.hxx" bodystart="427" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1database__api__impl_1a499df6660549b1f8b430a8c4a612c72e" prot="public" static="no" mutable="no">
        <type>boost::signals2::scoped_connection</type>
        <definition>boost::signals2::scoped_connection graphene::app::database_api_impl::_removed_connection</definition>
        <argsstring></argsstring>
        <name>_removed_connection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="428" column="42" bodyfile="libraries/app/database_api_impl.hxx" bodystart="428" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1database__api__impl_1a3986f9637134d0f91d711c7ff4df7189" prot="public" static="no" mutable="no">
        <type>boost::signals2::scoped_connection</type>
        <definition>boost::signals2::scoped_connection graphene::app::database_api_impl::_applied_block_connection</definition>
        <argsstring></argsstring>
        <name>_applied_block_connection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="429" column="42" bodyfile="libraries/app/database_api_impl.hxx" bodystart="429" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1database__api__impl_1a3a55e04699d428f42c9a69672d488105" prot="public" static="no" mutable="no">
        <type>boost::signals2::scoped_connection</type>
        <definition>boost::signals2::scoped_connection graphene::app::database_api_impl::_pending_trx_connection</definition>
        <argsstring></argsstring>
        <name>_pending_trx_connection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="430" column="42" bodyfile="libraries/app/database_api_impl.hxx" bodystart="430" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1database__api__impl_1a466336fd22c476e6b2e0b4e52ef6dce5" prot="public" static="no" mutable="no">
        <type>map&lt; pair&lt; asset_id_type, asset_id_type &gt;, std::function&lt; void(const variant &amp;)&gt; &gt;</type>
        <definition>map&lt; pair&lt;asset_id_type,asset_id_type&gt;, std::function&lt;void(const variant&amp;)&gt; &gt; graphene::app::database_api_impl::_market_subscriptions</definition>
        <argsstring></argsstring>
        <name>_market_subscriptions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="432" column="11" bodyfile="libraries/app/database_api_impl.hxx" bodystart="432" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1database__api__impl_1ae878a059b25940c3128df69eac716387" prot="public" static="no" mutable="no">
        <type>const <ref refid="classgraphene_1_1api__helper__indexes_1_1amount__in__collateral__index" kindref="compound">graphene::api_helper_indexes::amount_in_collateral_index</ref> *</type>
        <definition>const graphene::api_helper_indexes::amount_in_collateral_index* graphene::app::database_api_impl::amount_in_collateral_index</definition>
        <argsstring></argsstring>
        <name>amount_in_collateral_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="434" column="70" bodyfile="libraries/app/database_api_impl.hxx" bodystart="434" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1database__api__impl_1a763e2b91c01dfb19f0c353fe63a880c2" prot="public" static="no" mutable="no">
        <type>const <ref refid="classgraphene_1_1api__helper__indexes_1_1asset__in__liquidity__pools__index" kindref="compound">graphene::api_helper_indexes::asset_in_liquidity_pools_index</ref> *</type>
        <definition>const graphene::api_helper_indexes::asset_in_liquidity_pools_index* graphene::app::database_api_impl::asset_in_liquidity_pools_index</definition>
        <argsstring></argsstring>
        <name>asset_in_liquidity_pools_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="435" column="74" bodyfile="libraries/app/database_api_impl.hxx" bodystart="435" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1database__api__impl_1a5540b0ca8c0efc0b013a292d73befce2" prot="public" static="no" mutable="no">
        <type>const <ref refid="classgraphene_1_1api__helper__indexes_1_1next__object__ids__index" kindref="compound">graphene::api_helper_indexes::next_object_ids_index</ref> *</type>
        <definition>const graphene::api_helper_indexes::next_object_ids_index* graphene::app::database_api_impl::next_object_ids_index</definition>
        <argsstring></argsstring>
        <name>next_object_ids_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="436" column="65" bodyfile="libraries/app/database_api_impl.hxx" bodystart="436" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ada366a6d7683a99bdfd996083a5c8a12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::app::database_api_impl::database_api_impl</definition>
        <argsstring>(graphene::chain::database &amp;db, const application_options *app_options)</argsstring>
        <name>database_api_impl</name>
        <param>
          <type><ref refid="classgraphene_1_1chain_1_1database" kindref="compound">graphene::chain::database</ref> &amp;</type>
          <declname>db</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1app_1_1application__options" kindref="compound">application_options</ref> *</type>
          <declname>app_options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="39" column="7" bodyfile="libraries/app/database_api.cpp" bodystart="69" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a89f8d316670134c3faa5fb07032603cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>graphene::app::database_api_impl::~database_api_impl</definition>
        <argsstring>()</argsstring>
        <name>~database_api_impl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="40" column="15" bodyfile="libraries/app/database_api.cpp" bodystart="124" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a57335b9cc2874e1f69e3ccb9d221bf93" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacefc_1a2e5e6bdb302dfb79e684336f3fbbd8bc" kindref="member">fc::variants</ref></type>
        <definition>fc::variants graphene::app::database_api_impl::get_objects</definition>
        <argsstring>(const vector&lt; object_id_type &gt; &amp;ids, optional&lt; bool &gt; subscribe) const</argsstring>
        <name>get_objects</name>
        <param>
          <type>const vector&lt; object_id_type &gt; &amp;</type>
          <declname>ids</declname>
        </param>
        <param>
          <type>optional&lt; bool &gt;</type>
          <declname>subscribe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="43" column="20" bodyfile="libraries/app/database_api.cpp" bodystart="140" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a9efad1951dada7a463e304d5ade154ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::database_api_impl::set_subscribe_callback</definition>
        <argsstring>(std::function&lt; void(const variant &amp;)&gt; cb, bool notify_remove_create)</argsstring>
        <name>set_subscribe_callback</name>
        <param>
          <type>std::function&lt; void(const variant &amp;)&gt;</type>
          <declname>cb</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>notify_remove_create</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="46" column="12" bodyfile="libraries/app/database_api.cpp" bodystart="172" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a4723adbefd08c756b2e866d36b6c6215" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::database_api_impl::set_auto_subscription</definition>
        <argsstring>(bool enable)</argsstring>
        <name>set_auto_subscription</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="47" column="12" bodyfile="libraries/app/database_api.cpp" bodystart="191" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a0ab92833cf9e6fa7b6a6b7472b2f36a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::database_api_impl::set_pending_transaction_callback</definition>
        <argsstring>(std::function&lt; void(const variant &amp;)&gt; cb)</argsstring>
        <name>set_pending_transaction_callback</name>
        <param>
          <type>std::function&lt; void(const variant &amp;)&gt;</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="48" column="12" bodyfile="libraries/app/database_api.cpp" bodystart="201" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1aaa7ad36ef0da4021fc4dea51449014bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::database_api_impl::set_block_applied_callback</definition>
        <argsstring>(std::function&lt; void(const variant &amp;block_id)&gt; cb)</argsstring>
        <name>set_block_applied_callback</name>
        <param>
          <type>std::function&lt; void(const variant &amp;block_id)&gt;</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="49" column="12" bodyfile="libraries/app/database_api.cpp" bodystart="211" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a10a111caefade7a34e2561598a19e4e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::database_api_impl::cancel_all_subscriptions</definition>
        <argsstring>(bool reset_callback, bool reset_market_subscriptions)</argsstring>
        <name>cancel_all_subscriptions</name>
        <param>
          <type>bool</type>
          <declname>reset_callback</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reset_market_subscriptions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="50" column="12" bodyfile="libraries/app/database_api.cpp" bodystart="221" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ae307a17a892e39521b222d0ed87c670e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>optional&lt; <ref refid="structgraphene_1_1app_1_1maybe__signed__block__header" kindref="compound">maybe_signed_block_header</ref> &gt;</type>
        <definition>optional&lt; maybe_signed_block_header &gt; graphene::app::database_api_impl::get_block_header</definition>
        <argsstring>(uint32_t block_num, bool with_witness_signature) const</argsstring>
        <name>get_block_header</name>
        <param>
          <type>uint32_t</type>
          <declname>block_num</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>with_witness_signature</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="53" column="16" bodyfile="libraries/app/database_api.cpp" bodystart="248" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ac142df8083ccdd157cf8f169a204b3fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>map&lt; uint32_t, optional&lt; <ref refid="structgraphene_1_1app_1_1maybe__signed__block__header" kindref="compound">maybe_signed_block_header</ref> &gt; &gt;</type>
        <definition>map&lt; uint32_t, optional&lt; maybe_signed_block_header &gt; &gt; graphene::app::database_api_impl::get_block_header_batch</definition>
        <argsstring>(const vector&lt; uint32_t &gt; &amp;block_nums, bool with_witness_signatures) const</argsstring>
        <name>get_block_header_batch</name>
        <param>
          <type>const vector&lt; uint32_t &gt; &amp;</type>
          <declname>block_nums</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>with_witness_signatures</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="54" column="11" bodyfile="libraries/app/database_api.cpp" bodystart="264" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ac58de247b5e405af56821a0d70f0770e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>optional&lt; <ref refid="classgraphene_1_1protocol_1_1signed__block" kindref="compound">signed_block</ref> &gt;</type>
        <definition>optional&lt; signed_block &gt; graphene::app::database_api_impl::get_block</definition>
        <argsstring>(uint32_t block_num) const</argsstring>
        <name>get_block</name>
        <param>
          <type>uint32_t</type>
          <declname>block_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="56" column="16" bodyfile="libraries/app/database_api.cpp" bodystart="280" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a93356646b379ee79ad8700e7d6a93b22" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1processed__transaction" kindref="compound">processed_transaction</ref></type>
        <definition>processed_transaction graphene::app::database_api_impl::get_transaction</definition>
        <argsstring>(uint32_t block_num, uint32_t trx_in_block) const</argsstring>
        <name>get_transaction</name>
        <param>
          <type>uint32_t</type>
          <declname>block_num</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>trx_in_block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="57" column="29" bodyfile="libraries/app/database_api.cpp" bodystart="299" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a12ce279b022e8ded590aaf2764f24b17" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgraphene_1_1chain_1_1chain__property__object" kindref="compound">chain_property_object</ref></type>
        <definition>chain_property_object graphene::app::database_api_impl::get_chain_properties</definition>
        <argsstring>() const</argsstring>
        <name>get_chain_properties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="60" column="29" bodyfile="libraries/app/database_api.cpp" bodystart="318" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a5ec39c51451ddba8fe390c0a174cdf3c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgraphene_1_1chain_1_1global__property__object" kindref="compound">global_property_object</ref></type>
        <definition>global_property_object graphene::app::database_api_impl::get_global_properties</definition>
        <argsstring>() const</argsstring>
        <name>get_global_properties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="61" column="30" bodyfile="libraries/app/database_api.cpp" bodystart="328" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a388576d4612e9d7b36511d0431c20f7c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1variant__object" kindref="compound">fc::variant_object</ref></type>
        <definition>fc::variant_object graphene::app::database_api_impl::get_config</definition>
        <argsstring>() const</argsstring>
        <name>get_config</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="62" column="26" bodyfile="libraries/app/database_api.cpp" bodystart="338" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1aac4b96fb3bb2446ebde410fa6a12fcc3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegraphene_1_1protocol_1a56354f39ed89f6a0a13fe90ba8228809" kindref="member">chain_id_type</ref></type>
        <definition>chain_id_type graphene::app::database_api_impl::get_chain_id</definition>
        <argsstring>() const</argsstring>
        <name>get_chain_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="63" column="21" bodyfile="libraries/app/database_api.cpp" bodystart="348" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a7d3a09112fe43b55cdb70c9654d6d9be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgraphene_1_1chain_1_1dynamic__global__property__object" kindref="compound">dynamic_global_property_object</ref></type>
        <definition>dynamic_global_property_object graphene::app::database_api_impl::get_dynamic_global_properties</definition>
        <argsstring>() const</argsstring>
        <name>get_dynamic_global_properties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="64" column="38" bodyfile="libraries/app/database_api.cpp" bodystart="358" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ae17dfe68734112261c5e52451ab727f3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>object_id_type</type>
        <definition>object_id_type graphene::app::database_api_impl::get_next_object_id</definition>
        <argsstring>(uint8_t space_id, uint8_t type_id, bool with_pending_transactions) const</argsstring>
        <name>get_next_object_id</name>
        <param>
          <type>uint8_t</type>
          <declname>space_id</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>type_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>with_pending_transactions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="65" column="22" bodyfile="libraries/app/database_api.cpp" bodystart="369" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1af65b9b9bb05f936dca2cebd177566a2e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; flat_set&lt; account_id_type &gt; &gt;</type>
        <definition>vector&lt; flat_set&lt; account_id_type &gt; &gt; graphene::app::database_api_impl::get_key_references</definition>
        <argsstring>(vector&lt; public_key_type &gt; key) const</argsstring>
        <name>get_key_references</name>
        <param>
          <type>vector&lt; public_key_type &gt;</type>
          <declname>key</declname>
          <defname>keys</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>all accounts that referr to the key or account id in their owner or active authorities. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="68" column="14" bodyfile="libraries/app/database_api.cpp" bodystart="394" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a80b46160a2181f5aa8cd3af6718793d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::app::database_api_impl::is_public_key_registered</definition>
        <argsstring>(string public_key) const</argsstring>
        <name>is_public_key_registered</name>
        <param>
          <type>string</type>
          <declname>public_key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="69" column="12" bodyfile="libraries/app/database_api.cpp" bodystart="452" bodyend="479"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a0808606b9d1aad5babf635a1b2607922" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; optional&lt; <ref refid="classgraphene_1_1chain_1_1account__object" kindref="compound">account_object</ref> &gt; &gt;</type>
        <definition>vector&lt; optional&lt; account_object &gt; &gt; graphene::app::database_api_impl::get_accounts</definition>
        <argsstring>(const vector&lt; std::string &gt; &amp;account_names_or_ids, optional&lt; bool &gt; subscribe) const</argsstring>
        <name>get_accounts</name>
        <param>
          <type>const vector&lt; std::string &gt; &amp;</type>
          <declname>account_names_or_ids</declname>
        </param>
        <param>
          <type>optional&lt; bool &gt;</type>
          <declname>subscribe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="72" column="14" bodyfile="libraries/app/database_api.cpp" bodystart="498" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ad7a3dd32adb8044faa14aafb88157d0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>map&lt; string, <ref refid="structgraphene_1_1app_1_1full__account" kindref="compound">full_account</ref>, std::less&lt;&gt; &gt;</type>
        <definition>std::map&lt; std::string, full_account, std::less&lt;&gt; &gt; graphene::app::database_api_impl::get_full_accounts</definition>
        <argsstring>(const vector&lt; string &gt; &amp;names_or_ids, const optional&lt; bool &gt; &amp;subscribe)</argsstring>
        <name>get_full_accounts</name>
        <param>
          <type>const vector&lt; string &gt; &amp;</type>
          <declname>names_or_ids</declname>
        </param>
        <param>
          <type>const optional&lt; bool &gt; &amp;</type>
          <declname>subscribe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="74" column="11" bodyfile="libraries/app/database_api.cpp" bodystart="522" bodyend="699"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a506e86129365333c2b8646065996cae9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1account__statistics__object" kindref="compound">account_statistics_object</ref> &gt;</type>
        <definition>vector&lt; account_statistics_object &gt; graphene::app::database_api_impl::get_top_voters</definition>
        <argsstring>(uint32_t limit) const</argsstring>
        <name>get_top_voters</name>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="76" column="14" bodyfile="libraries/app/database_api.cpp" bodystart="706" bodyend="725"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a091be4e3a512dd7b83a19c58632ad19b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>optional&lt; <ref refid="classgraphene_1_1chain_1_1account__object" kindref="compound">account_object</ref> &gt;</type>
        <definition>optional&lt; account_object &gt; graphene::app::database_api_impl::get_account_by_name</definition>
        <argsstring>(string name) const</argsstring>
        <name>get_account_by_name</name>
        <param>
          <type>string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="77" column="16" bodyfile="libraries/app/database_api.cpp" bodystart="732" bodyend="739"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ad041e8618ad380a6e68375c6dc540028" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; account_id_type &gt;</type>
        <definition>vector&lt; account_id_type &gt; graphene::app::database_api_impl::get_account_references</definition>
        <argsstring>(const std::string account_id_or_name) const</argsstring>
        <name>get_account_references</name>
        <param>
          <type>const std::string</type>
          <declname>account_id_or_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="78" column="14" bodyfile="libraries/app/database_api.cpp" bodystart="746" bodyend="765"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ac248983aae44dc9b647cdb801c6691f0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; optional&lt; <ref refid="classgraphene_1_1chain_1_1account__object" kindref="compound">account_object</ref> &gt; &gt;</type>
        <definition>vector&lt; optional&lt; account_object &gt; &gt; graphene::app::database_api_impl::lookup_account_names</definition>
        <argsstring>(const vector&lt; string &gt; &amp;account_names) const</argsstring>
        <name>lookup_account_names</name>
        <param>
          <type>const vector&lt; string &gt; &amp;</type>
          <declname>account_names</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="79" column="14" bodyfile="libraries/app/database_api.cpp" bodystart="772" bodyend="775"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ab5f1d6a4a91b21497cd8f5ff09b71130" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>map&lt; string, account_id_type, std::less&lt;&gt; &gt;</type>
        <definition>map&lt; string, account_id_type, std::less&lt;&gt; &gt; graphene::app::database_api_impl::lookup_accounts</definition>
        <argsstring>(const string &amp;lower_bound_name, uint32_t limit, const optional&lt; bool &gt; &amp;subscribe) const</argsstring>
        <name>lookup_accounts</name>
        <param>
          <type>const string &amp;</type>
          <declname>lower_bound_name</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <param>
          <type>const optional&lt; bool &gt; &amp;</type>
          <declname>subscribe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="80" column="11" bodyfile="libraries/app/database_api.cpp" bodystart="784" bodyend="811"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a838b2ae1c363d6db501483636ec5222e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t graphene::app::database_api_impl::get_account_count</definition>
        <argsstring>() const</argsstring>
        <name>get_account_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="83" column="16" bodyfile="libraries/app/database_api.cpp" bodystart="818" bodyend="821"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a8df3d2fdf444f1f87fd5b0f5700739ee" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &gt;</type>
        <definition>vector&lt; asset &gt; graphene::app::database_api_impl::get_account_balances</definition>
        <argsstring>(const std::string &amp;account_name_or_id, const flat_set&lt; asset_id_type &gt; &amp;assets) const</argsstring>
        <name>get_account_balances</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>account_name_or_id</declname>
        </param>
        <param>
          <type>const flat_set&lt; asset_id_type &gt; &amp;</type>
          <declname>assets</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="86" column="14" bodyfile="libraries/app/database_api.cpp" bodystart="835" bodyend="859"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a626d1937f8dffce8c892b7077be85505" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &gt;</type>
        <definition>vector&lt;asset&gt; graphene::app::database_api_impl::get_named_account_balances</definition>
        <argsstring>(const std::string &amp;name, const flat_set&lt; asset_id_type &gt; &amp;assets) const</argsstring>
        <name>get_named_account_balances</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const flat_set&lt; asset_id_type &gt; &amp;</type>
          <declname>assets</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="88" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1aef3840cb3c44793c9581f2ccc52bc33e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1balance__object" kindref="compound">balance_object</ref> &gt;</type>
        <definition>vector&lt; balance_object &gt; graphene::app::database_api_impl::get_balance_objects</definition>
        <argsstring>(const vector&lt; address &gt; &amp;addrs) const</argsstring>
        <name>get_balance_objects</name>
        <param>
          <type>const vector&lt; address &gt; &amp;</type>
          <declname>addrs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="89" column="14" bodyfile="libraries/app/database_api.cpp" bodystart="872" bodyend="893"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a6b2bdaaf14efcd053f6e21c0d33f1661" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &gt;</type>
        <definition>vector&lt; asset &gt; graphene::app::database_api_impl::get_vested_balances</definition>
        <argsstring>(const vector&lt; balance_id_type &gt; &amp;objs) const</argsstring>
        <name>get_vested_balances</name>
        <param>
          <type>const vector&lt; balance_id_type &gt; &amp;</type>
          <declname>objs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="90" column="14" bodyfile="libraries/app/database_api.cpp" bodystart="900" bodyend="911"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a9db99c2796a5723fdab8cddfe3e68385" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1vesting__balance__object" kindref="compound">vesting_balance_object</ref> &gt;</type>
        <definition>vector&lt; vesting_balance_object &gt; graphene::app::database_api_impl::get_vesting_balances</definition>
        <argsstring>(const std::string account_id_or_name) const</argsstring>
        <name>get_vesting_balances</name>
        <param>
          <type>const std::string</type>
          <declname>account_id_or_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="91" column="14" bodyfile="libraries/app/database_api.cpp" bodystart="918" bodyend="933"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a00b2ecfd8dfc971cca2b55839e60ae37" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t graphene::app::database_api_impl::get_asset_count</definition>
        <argsstring>() const</argsstring>
        <name>get_asset_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="94" column="16" bodyfile="libraries/app/database_api.cpp" bodystart="1002" bodyend="1005"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1adf3db752a9ba8e2e7ee3746878c28f7f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; optional&lt; <ref refid="structgraphene_1_1app_1_1extended__asset__object" kindref="compound">extended_asset_object</ref> &gt; &gt;</type>
        <definition>vector&lt; optional&lt; extended_asset_object &gt; &gt; graphene::app::database_api_impl::get_assets</definition>
        <argsstring>(const vector&lt; std::string &gt; &amp;asset_symbols_or_ids, optional&lt; bool &gt; subscribe) const</argsstring>
        <name>get_assets</name>
        <param>
          <type>const vector&lt; std::string &gt; &amp;</type>
          <declname>asset_symbols_or_ids</declname>
        </param>
        <param>
          <type>optional&lt; bool &gt;</type>
          <declname>subscribe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="95" column="14" bodyfile="libraries/app/database_api.cpp" bodystart="953" bodyend="970"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a4a0f59664d5abeeab1ca51a118170253" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1app_1_1extended__asset__object" kindref="compound">extended_asset_object</ref> &gt;</type>
        <definition>vector&lt; extended_asset_object &gt; graphene::app::database_api_impl::list_assets</definition>
        <argsstring>(const string &amp;lower_bound_symbol, uint32_t limit) const</argsstring>
        <name>list_assets</name>
        <param>
          <type>const string &amp;</type>
          <declname>lower_bound_symbol</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="97" column="24" bodyfile="libraries/app/database_api.cpp" bodystart="977" bodyend="995"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a7a2d4207d455bff60754603682f4d5b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; optional&lt; <ref refid="structgraphene_1_1app_1_1extended__asset__object" kindref="compound">extended_asset_object</ref> &gt; &gt;</type>
        <definition>vector&lt; optional&lt; extended_asset_object &gt; &gt; graphene::app::database_api_impl::lookup_asset_symbols</definition>
        <argsstring>(const vector&lt; string &gt; &amp;symbols_or_ids) const</argsstring>
        <name>lookup_asset_symbols</name>
        <param>
          <type>const vector&lt; string &gt; &amp;</type>
          <declname>symbols_or_ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="98" column="14" bodyfile="libraries/app/database_api.cpp" bodystart="1041" bodyend="1045"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a0241998fe02c90d26865415ce8ead82e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1app_1_1extended__asset__object" kindref="compound">extended_asset_object</ref> &gt;</type>
        <definition>vector&lt; extended_asset_object &gt; graphene::app::database_api_impl::get_assets_by_issuer</definition>
        <argsstring>(const std::string &amp;issuer_name_or_id, asset_id_type start, uint32_t limit) const</argsstring>
        <name>get_assets_by_issuer</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>issuer_name_or_id</declname>
        </param>
        <param>
          <type>asset_id_type</type>
          <declname>start</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="99" column="24" bodyfile="libraries/app/database_api.cpp" bodystart="1013" bodyend="1033"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ac5e0821636e116e7eefbb077e6ca8126" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref> &gt;</type>
        <definition>vector&lt; limit_order_object &gt; graphene::app::database_api_impl::get_limit_orders</definition>
        <argsstring>(const std::string &amp;a, const std::string &amp;b, uint32_t limit) const</argsstring>
        <name>get_limit_orders</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="103" column="22" bodyfile="libraries/app/database_api.cpp" bodystart="1058" bodyend="1071"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a6ba8ef267b61497d98b25fa598ae5853" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref> &gt;</type>
        <definition>vector&lt; limit_order_object &gt; graphene::app::database_api_impl::get_limit_orders_by_account</definition>
        <argsstring>(const string &amp;account_name_or_id, const optional&lt; uint32_t &gt; &amp;limit, const optional&lt; limit_order_id_type &gt; &amp;start_id)</argsstring>
        <name>get_limit_orders_by_account</name>
        <param>
          <type>const string &amp;</type>
          <declname>account_name_or_id</declname>
        </param>
        <param>
          <type>const optional&lt; uint32_t &gt; &amp;</type>
          <declname>limit</declname>
        </param>
        <param>
          <type>const optional&lt; limit_order_id_type &gt; &amp;</type>
          <declname>start_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="105" column="22" bodyfile="libraries/app/database_api.cpp" bodystart="1079" bodyend="1111"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ac1e87faca0ea7685d4981f560845a4c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref> &gt;</type>
        <definition>vector&lt; limit_order_object &gt; graphene::app::database_api_impl::get_account_limit_orders</definition>
        <argsstring>(const string &amp;account_name_or_id, const string &amp;base, const string &amp;quote, uint32_t limit, optional&lt; limit_order_id_type &gt; ostart_id, optional&lt; price &gt; ostart_price)</argsstring>
        <name>get_account_limit_orders</name>
        <param>
          <type>const string &amp;</type>
          <declname>account_name_or_id</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>quote</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <param>
          <type>optional&lt; limit_order_id_type &gt;</type>
          <declname>ostart_id</declname>
        </param>
        <param>
          <type>optional&lt; price &gt;</type>
          <declname>ostart_price</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="108" column="22" bodyfile="libraries/app/database_api.cpp" bodystart="1120" bodyend="1204"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a2d4ec3cb19106bb0127f6886e1cfa6a5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1call__order__object" kindref="compound">call_order_object</ref> &gt;</type>
        <definition>vector&lt; call_order_object &gt; graphene::app::database_api_impl::get_call_orders</definition>
        <argsstring>(const std::string &amp;a, uint32_t limit) const</argsstring>
        <name>get_call_orders</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="113" column="23" bodyfile="libraries/app/database_api.cpp" bodystart="1211" bodyend="1232"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1abd9e0f34cb481e41bb15aba956d48566" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1call__order__object" kindref="compound">call_order_object</ref> &gt;</type>
        <definition>vector&lt; call_order_object &gt; graphene::app::database_api_impl::get_call_orders_by_account</definition>
        <argsstring>(const std::string &amp;account_name_or_id, asset_id_type start, uint32_t limit) const</argsstring>
        <name>get_call_orders_by_account</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>account_name_or_id</declname>
        </param>
        <param>
          <type>asset_id_type</type>
          <declname>start</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="114" column="23" bodyfile="libraries/app/database_api.cpp" bodystart="1240" bodyend="1260"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ab457c81432a51ee1503b451b0d4ed76e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1force__settlement__object" kindref="compound">force_settlement_object</ref> &gt;</type>
        <definition>vector&lt; force_settlement_object &gt; graphene::app::database_api_impl::get_settle_orders</definition>
        <argsstring>(const std::string &amp;a, uint32_t limit) const</argsstring>
        <name>get_settle_orders</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="116" column="17" bodyfile="libraries/app/database_api.cpp" bodystart="1267" bodyend="1288"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a450c40ca59152d19bdc158ae7ad364fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1force__settlement__object" kindref="compound">force_settlement_object</ref> &gt;</type>
        <definition>vector&lt; force_settlement_object &gt; graphene::app::database_api_impl::get_settle_orders_by_account</definition>
        <argsstring>(const std::string &amp;account_name_or_id, force_settlement_id_type start, uint32_t limit) const</argsstring>
        <name>get_settle_orders_by_account</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>account_name_or_id</declname>
        </param>
        <param>
          <type>force_settlement_id_type</type>
          <declname>start</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="117" column="17" bodyfile="libraries/app/database_api.cpp" bodystart="1298" bodyend="1320"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1acd1ecdb949d3a7db0800adc4775b61f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1collateral__bid__object" kindref="compound">collateral_bid_object</ref> &gt;</type>
        <definition>vector&lt; collateral_bid_object &gt; graphene::app::database_api_impl::get_collateral_bids</definition>
        <argsstring>(const std::string &amp;asset, uint32_t limit, uint32_t start) const</argsstring>
        <name>get_collateral_bids</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>asset</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>start</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="120" column="19" bodyfile="libraries/app/database_api.cpp" bodystart="1336" bodyend="1358"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ae7aebb8dd3c0a3ebd55a63a0cb2f77dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::database_api_impl::subscribe_to_market</definition>
        <argsstring>(std::function&lt; void(const variant &amp;)&gt; callback, const std::string &amp;a, const std::string &amp;b)</argsstring>
        <name>subscribe_to_market</name>
        <param>
          <type>std::function&lt; void(const variant &amp;)&gt;</type>
          <declname>callback</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="123" column="12" bodyfile="libraries/app/database_api.cpp" bodystart="1366" bodyend="1375"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a50f5bf4428137943bd874d6e2883b4af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::database_api_impl::unsubscribe_from_market</definition>
        <argsstring>(const std::string &amp;a, const std::string &amp;b)</argsstring>
        <name>unsubscribe_from_market</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="125" column="12" bodyfile="libraries/app/database_api.cpp" bodystart="1382" bodyend="1390"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1aa40820c96b22c9b7ddde4280d6e91b0e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1app_1_1market__ticker" kindref="compound">market_ticker</ref></type>
        <definition>market_ticker graphene::app::database_api_impl::get_ticker</definition>
        <argsstring>(const string &amp;base, const string &amp;quote, bool skip_order_book=false) const</argsstring>
        <name>get_ticker</name>
        <param>
          <type>const string &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>quote</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>skip_order_book</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="127" column="42" bodyfile="libraries/app/database_api.cpp" bodystart="1397" bodyend="1424"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1aa78e27ca738205c4f82ec80d60d75740" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1app_1_1market__volume" kindref="compound">market_volume</ref></type>
        <definition>market_volume graphene::app::database_api_impl::get_24_volume</definition>
        <argsstring>(const string &amp;base, const string &amp;quote) const</argsstring>
        <name>get_24_volume</name>
        <param>
          <type>const string &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>quote</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="129" column="42" bodyfile="libraries/app/database_api.cpp" bodystart="1431" bodyend="1443"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a7450f6448b0868a4b611681545496bb6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1app_1_1order__book" kindref="compound">order_book</ref></type>
        <definition>order_book graphene::app::database_api_impl::get_order_book</definition>
        <argsstring>(const string &amp;base, const string &amp;quote, uint32_t limit) const</argsstring>
        <name>get_order_book</name>
        <param>
          <type>const string &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>quote</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="130" column="42" bodyfile="libraries/app/database_api.cpp" bodystart="1450" bodyend="1492"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a4c238daecb0b33712aafc96ccf671b33" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1app_1_1market__ticker" kindref="compound">market_ticker</ref> &gt;</type>
        <definition>vector&lt; market_ticker &gt; graphene::app::database_api_impl::get_top_markets</definition>
        <argsstring>(uint32_t limit) const</argsstring>
        <name>get_top_markets</name>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="132" column="27" bodyfile="libraries/app/database_api.cpp" bodystart="1499" bodyend="1525"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a3c665d79c3c25390ac5334d800aba7f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1app_1_1market__trade" kindref="compound">market_trade</ref> &gt;</type>
        <definition>vector&lt; market_trade &gt; graphene::app::database_api_impl::get_trade_history</definition>
        <argsstring>(const string &amp;base, const string &amp;quote, fc::time_point_sec start, fc::time_point_sec stop, uint32_t limit) const</argsstring>
        <name>get_trade_history</name>
        <param>
          <type>const string &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>quote</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1time__point__sec" kindref="compound">fc::time_point_sec</ref></type>
          <declname>start</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1time__point__sec" kindref="compound">fc::time_point_sec</ref></type>
          <declname>stop</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="133" column="28" bodyfile="libraries/app/database_api.cpp" bodystart="1536" bodyend="1626"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1afe049a1b99dd9e132fcdad54f52b2690" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1app_1_1market__trade" kindref="compound">market_trade</ref> &gt;</type>
        <definition>vector&lt; market_trade &gt; graphene::app::database_api_impl::get_trade_history_by_sequence</definition>
        <argsstring>(const string &amp;base, const string &amp;quote, int64_t start, fc::time_point_sec stop, uint32_t limit) const</argsstring>
        <name>get_trade_history_by_sequence</name>
        <param>
          <type>const string &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>quote</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>start</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1time__point__sec" kindref="compound">fc::time_point_sec</ref></type>
          <declname>stop</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="136" column="28" bodyfile="libraries/app/database_api.cpp" bodystart="1638" bodyend="1744"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1aea599e24e0302b62bc8ddb5c4b8149c1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1app_1_1extended__liquidity__pool__object" kindref="compound">extended_liquidity_pool_object</ref> &gt;</type>
        <definition>vector&lt; extended_liquidity_pool_object &gt; graphene::app::database_api_impl::get_liquidity_pools_by_one_asset</definition>
        <argsstring>(const std::string &amp;asset_symbol_or_id, const optional&lt; uint32_t &gt; &amp;limit, const optional&lt; liquidity_pool_id_type &gt; &amp;start_id, const optional&lt; bool &gt; &amp;with_statistics) const</argsstring>
        <name>get_liquidity_pools_by_one_asset</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>asset_symbol_or_id</declname>
        </param>
        <param>
          <type>const optional&lt; uint32_t &gt; &amp;</type>
          <declname>limit</declname>
        </param>
        <param>
          <type>const optional&lt; liquidity_pool_id_type &gt; &amp;</type>
          <declname>start_id</declname>
        </param>
        <param>
          <type>const optional&lt; bool &gt; &amp;</type>
          <declname>with_statistics</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="141" column="14" bodyfile="libraries/app/database_api.cpp" bodystart="1804" bodyend="1841"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a0770c55ef2273eb99085732c91648d7e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; optional&lt; <ref refid="structgraphene_1_1app_1_1extended__liquidity__pool__object" kindref="compound">extended_liquidity_pool_object</ref> &gt; &gt;</type>
        <definition>vector&lt; optional&lt; extended_liquidity_pool_object &gt; &gt; graphene::app::database_api_impl::get_liquidity_pools</definition>
        <argsstring>(const vector&lt; liquidity_pool_id_type &gt; &amp;ids, const optional&lt; bool &gt; &amp;subscribe, const optional&lt; bool &gt; &amp;with_statistics) const</argsstring>
        <name>get_liquidity_pools</name>
        <param>
          <type>const vector&lt; liquidity_pool_id_type &gt; &amp;</type>
          <declname>ids</declname>
        </param>
        <param>
          <type>const optional&lt; bool &gt; &amp;</type>
          <declname>subscribe</declname>
        </param>
        <param>
          <type>const optional&lt; bool &gt; &amp;</type>
          <declname>with_statistics</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="146" column="14" bodyfile="libraries/app/database_api.cpp" bodystart="1873" bodyend="1906"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1afdeff949d0b886350e7299f29b1cbe1d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; optional&lt; <ref refid="structgraphene_1_1app_1_1extended__liquidity__pool__object" kindref="compound">extended_liquidity_pool_object</ref> &gt; &gt;</type>
        <definition>vector&lt; optional&lt; extended_liquidity_pool_object &gt; &gt; graphene::app::database_api_impl::get_liquidity_pools_by_share_asset</definition>
        <argsstring>(const vector&lt; std::string &gt; &amp;asset_symbols_or_ids, const optional&lt; bool &gt; &amp;subscribe, const optional&lt; bool &gt; &amp;with_statistics) const</argsstring>
        <name>get_liquidity_pools_by_share_asset</name>
        <param>
          <type>const vector&lt; std::string &gt; &amp;</type>
          <declname>asset_symbols_or_ids</declname>
        </param>
        <param>
          <type>const optional&lt; bool &gt; &amp;</type>
          <declname>subscribe</declname>
        </param>
        <param>
          <type>const optional&lt; bool &gt; &amp;</type>
          <declname>with_statistics</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="150" column="14" bodyfile="libraries/app/database_api.cpp" bodystart="1919" bodyend="1951"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1aa546caab4093114a346ab5210f175dac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1app_1_1extended__liquidity__pool__object" kindref="compound">extended_liquidity_pool_object</ref> &gt;</type>
        <definition>vector&lt; extended_liquidity_pool_object &gt; graphene::app::database_api_impl::get_liquidity_pools_by_owner</definition>
        <argsstring>(const std::string &amp;account_name_or_id, const optional&lt; uint32_t &gt; &amp;limit, const optional&lt; asset_id_type &gt; &amp;start_id, const optional&lt; bool &gt; &amp;with_statistics) const</argsstring>
        <name>get_liquidity_pools_by_owner</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>account_name_or_id</declname>
        </param>
        <param>
          <type>const optional&lt; uint32_t &gt; &amp;</type>
          <declname>limit</declname>
        </param>
        <param>
          <type>const optional&lt; asset_id_type &gt; &amp;</type>
          <declname>start_id</declname>
        </param>
        <param>
          <type>const optional&lt; bool &gt; &amp;</type>
          <declname>with_statistics</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="154" column="14" bodyfile="libraries/app/database_api.cpp" bodystart="1966" bodyend="2003"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a07a69c909b7f1c3f07f94f0e72a49055" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; optional&lt; <ref refid="classgraphene_1_1chain_1_1witness__object" kindref="compound">witness_object</ref> &gt; &gt;</type>
        <definition>vector&lt; optional&lt; witness_object &gt; &gt; graphene::app::database_api_impl::get_witnesses</definition>
        <argsstring>(const vector&lt; witness_id_type &gt; &amp;witness_ids) const</argsstring>
        <name>get_witnesses</name>
        <param>
          <type>const vector&lt; witness_id_type &gt; &amp;</type>
          <declname>witness_ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="161" column="14" bodyfile="libraries/app/database_api.cpp" bodystart="2179" bodyend="2189"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1af30916c67c85018ff8443e57dac2868e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1optional" kindref="compound">fc::optional</ref>&lt; <ref refid="classgraphene_1_1chain_1_1witness__object" kindref="compound">witness_object</ref> &gt;</type>
        <definition>fc::optional&lt; witness_object &gt; graphene::app::database_api_impl::get_witness_by_account</definition>
        <argsstring>(const std::string &amp;account_id_or_name) const</argsstring>
        <name>get_witness_by_account</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>account_id_or_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="162" column="20" bodyfile="libraries/app/database_api.cpp" bodystart="2196" bodyend="2204"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1aeec543e4d39d2f170484fd49c6500f85" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>map&lt; string, witness_id_type, std::less&lt;&gt; &gt;</type>
        <definition>map&lt; string, witness_id_type, std::less&lt;&gt; &gt; graphene::app::database_api_impl::lookup_witness_accounts</definition>
        <argsstring>(const string &amp;lower_bound_name, uint32_t limit) const</argsstring>
        <name>lookup_witness_accounts</name>
        <param>
          <type>const string &amp;</type>
          <declname>lower_bound_name</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="163" column="11" bodyfile="libraries/app/database_api.cpp" bodystart="2212" bodyend="2243"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a4cfd97e7cea92f6dacedfc779a3dc239" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t graphene::app::database_api_impl::get_witness_count</definition>
        <argsstring>() const</argsstring>
        <name>get_witness_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="165" column="16" bodyfile="libraries/app/database_api.cpp" bodystart="2250" bodyend="2253"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1acab4f92a15d0509131a623e65c737de6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; optional&lt; <ref refid="classgraphene_1_1chain_1_1committee__member__object" kindref="compound">committee_member_object</ref> &gt; &gt;</type>
        <definition>vector&lt; optional&lt; committee_member_object &gt; &gt; graphene::app::database_api_impl::get_committee_members</definition>
        <argsstring>(const vector&lt; committee_member_id_type &gt; &amp;committee_member_ids) const</argsstring>
        <name>get_committee_members</name>
        <param>
          <type>const vector&lt; committee_member_id_type &gt; &amp;</type>
          <declname>committee_member_ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="168" column="14" bodyfile="libraries/app/database_api.cpp" bodystart="2267" bodyend="2278"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a8cef78e96fad36084b62d980a3315a10" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1optional" kindref="compound">fc::optional</ref>&lt; <ref refid="classgraphene_1_1chain_1_1committee__member__object" kindref="compound">committee_member_object</ref> &gt;</type>
        <definition>fc::optional&lt; committee_member_object &gt; graphene::app::database_api_impl::get_committee_member_by_account</definition>
        <argsstring>(const std::string &amp;account_id_or_name) const</argsstring>
        <name>get_committee_member_by_account</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>account_id_or_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="170" column="20" bodyfile="libraries/app/database_api.cpp" bodystart="2286" bodyend="2295"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ad15f14fc5c372b603013194e4c85cb8b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>map&lt; string, committee_member_id_type, std::less&lt;&gt; &gt;</type>
        <definition>map&lt; string, committee_member_id_type, std::less&lt;&gt; &gt; graphene::app::database_api_impl::lookup_committee_member_accounts</definition>
        <argsstring>(const string &amp;lower_bound_name, uint32_t limit) const</argsstring>
        <name>lookup_committee_member_accounts</name>
        <param>
          <type>const string &amp;</type>
          <declname>lower_bound_name</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="172" column="11" bodyfile="libraries/app/database_api.cpp" bodystart="2303" bodyend="2334"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a82895e5ebfb9aaaab364d4a353cacd7d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t graphene::app::database_api_impl::get_committee_count</definition>
        <argsstring>() const</argsstring>
        <name>get_committee_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="174" column="16" bodyfile="libraries/app/database_api.cpp" bodystart="2341" bodyend="2344"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a00bbbd4d1d45b765a672d23068bba1d4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1worker__object" kindref="compound">worker_object</ref> &gt;</type>
        <definition>vector&lt; worker_object &gt; graphene::app::database_api_impl::get_all_workers</definition>
        <argsstring>(const optional&lt; bool &gt; &amp;is_expired) const</argsstring>
        <name>get_all_workers</name>
        <param>
          <type>const optional&lt; bool &gt; &amp;</type>
          <declname>is_expired</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="177" column="14" bodyfile="libraries/app/database_api.cpp" bodystart="2358" bodyend="2384"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1aca8b6679de891aba8961537eb9a02896" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1worker__object" kindref="compound">worker_object</ref> &gt;</type>
        <definition>vector&lt; worker_object &gt; graphene::app::database_api_impl::get_workers_by_account</definition>
        <argsstring>(const std::string &amp;account_id_or_name) const</argsstring>
        <name>get_workers_by_account</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>account_id_or_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="178" column="14" bodyfile="libraries/app/database_api.cpp" bodystart="2391" bodyend="2403"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a9e6d2acff7e692f5ed8a95e16d513953" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t graphene::app::database_api_impl::get_worker_count</definition>
        <argsstring>() const</argsstring>
        <name>get_worker_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="179" column="16" bodyfile="libraries/app/database_api.cpp" bodystart="2410" bodyend="2413"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a9f3c59402a1776da2951fdd666e20a16" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; variant &gt;</type>
        <definition>vector&lt; variant &gt; graphene::app::database_api_impl::lookup_vote_ids</definition>
        <argsstring>(const vector&lt; vote_id_type &gt; &amp;votes) const</argsstring>
        <name>lookup_vote_ids</name>
        <param>
          <type>const vector&lt; vote_id_type &gt; &amp;</type>
          <declname>votes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="182" column="14" bodyfile="libraries/app/database_api.cpp" bodystart="2428" bodyend="2492"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a2ba80f79ad05b3a6fb2d1ea3df18eb95" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string graphene::app::database_api_impl::get_transaction_hex</definition>
        <argsstring>(const signed_transaction &amp;trx) const</argsstring>
        <name>get_transaction_hex</name>
        <param>
          <type>const signed_transaction &amp;</type>
          <declname>trx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="185" column="19" bodyfile="libraries/app/database_api.cpp" bodystart="2505" bodyend="2508"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a78e63e63b37ce0921f7b9bedcb3b8f36" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string graphene::app::database_api_impl::get_transaction_hex_without_sig</definition>
        <argsstring>(const transaction &amp;trx) const</argsstring>
        <name>get_transaction_hex_without_sig</name>
        <param>
          <type>const transaction &amp;</type>
          <declname>trx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="186" column="19" bodyfile="libraries/app/database_api.cpp" bodystart="2516" bodyend="2520"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a69312609009b9fcff77e931e70479b9d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>set&lt; public_key_type &gt;</type>
        <definition>set&lt; public_key_type &gt; graphene::app::database_api_impl::get_required_signatures</definition>
        <argsstring>(const signed_transaction &amp;trx, const flat_set&lt; public_key_type &gt; &amp;available_keys) const</argsstring>
        <name>get_required_signatures</name>
        <param>
          <type>const signed_transaction &amp;</type>
          <declname>trx</declname>
        </param>
        <param>
          <type>const flat_set&lt; public_key_type &gt; &amp;</type>
          <declname>available_keys</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="188" column="11" bodyfile="libraries/app/database_api.cpp" bodystart="2528" bodyend="2542"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1acef339ff42bfbf976567a5b876e14751" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>set&lt; public_key_type &gt;</type>
        <definition>set&lt; public_key_type &gt; graphene::app::database_api_impl::get_potential_signatures</definition>
        <argsstring>(const signed_transaction &amp;trx) const</argsstring>
        <name>get_potential_signatures</name>
        <param>
          <type>const signed_transaction &amp;</type>
          <declname>trx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="190" column="11" bodyfile="libraries/app/database_api.cpp" bodystart="2553" bodyend="2590"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1acc46cde78a2c224a99ea622865360ba6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>set&lt; address &gt;</type>
        <definition>set&lt; address &gt; graphene::app::database_api_impl::get_potential_address_signatures</definition>
        <argsstring>(const signed_transaction &amp;trx) const</argsstring>
        <name>get_potential_address_signatures</name>
        <param>
          <type>const signed_transaction &amp;</type>
          <declname>trx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="191" column="11" bodyfile="libraries/app/database_api.cpp" bodystart="2592" bodyend="2619"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a54dddff3398d303e7c9bdf1a1f2d2498" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::app::database_api_impl::verify_authority</definition>
        <argsstring>(const signed_transaction &amp;trx) const</argsstring>
        <name>verify_authority</name>
        <param>
          <type>const signed_transaction &amp;</type>
          <declname>trx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="192" column="12" bodyfile="libraries/app/database_api.cpp" bodystart="2626" bodyend="2637"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a86a8cf5fea3037c8388e8de9d14554fd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::app::database_api_impl::verify_account_authority</definition>
        <argsstring>(const string &amp;account_name_or_id, const flat_set&lt; public_key_type &gt; &amp;signers) const</argsstring>
        <name>verify_account_authority</name>
        <param>
          <type>const string &amp;</type>
          <declname>account_name_or_id</declname>
        </param>
        <param>
          <type>const flat_set&lt; public_key_type &gt; &amp;</type>
          <declname>signers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="193" column="12" bodyfile="libraries/app/database_api.cpp" bodystart="2645" bodyend="2669"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a294d0e741fa22072439875121f39eb43" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1processed__transaction" kindref="compound">processed_transaction</ref></type>
        <definition>processed_transaction graphene::app::database_api_impl::validate_transaction</definition>
        <argsstring>(const signed_transaction &amp;trx) const</argsstring>
        <name>validate_transaction</name>
        <param>
          <type>const signed_transaction &amp;</type>
          <declname>trx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="195" column="29" bodyfile="libraries/app/database_api.cpp" bodystart="2676" bodyend="2679"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a271b721629f59bb58e810163ddbea745" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classfc_1_1variant" kindref="compound">fc::variant</ref> &gt;</type>
        <definition>vector&lt; fc::variant &gt; graphene::app::database_api_impl::get_required_fees</definition>
        <argsstring>(const vector&lt; operation &gt; &amp;ops, const std::string &amp;asset_id_or_symbol) const</argsstring>
        <name>get_required_fees</name>
        <param>
          <type>const vector&lt; operation &gt; &amp;</type>
          <declname>ops</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>asset_id_or_symbol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="196" column="14" bodyfile="libraries/app/database_api.cpp" bodystart="2743" bodyend="2764"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a9a031701d262a0df8d6c527b46912f8b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1proposal__object" kindref="compound">proposal_object</ref> &gt;</type>
        <definition>vector&lt; proposal_object &gt; graphene::app::database_api_impl::get_proposed_transactions</definition>
        <argsstring>(const std::string account_id_or_name) const</argsstring>
        <name>get_proposed_transactions</name>
        <param>
          <type>const std::string</type>
          <declname>account_id_or_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="200" column="14" bodyfile="libraries/app/database_api.cpp" bodystart="2777" bodyend="2799"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a78d42d6340af3cbb9ceb22dcbd3504b5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1blinded__balance__object" kindref="compound">blinded_balance_object</ref> &gt;</type>
        <definition>vector&lt; blinded_balance_object &gt; graphene::app::database_api_impl::get_blinded_balances</definition>
        <argsstring>(const flat_set&lt; commitment_type &gt; &amp;commitments) const</argsstring>
        <name>get_blinded_balances</name>
        <param>
          <type>const flat_set&lt; commitment_type &gt; &amp;</type>
          <declname>commitments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="203" column="14" bodyfile="libraries/app/database_api.cpp" bodystart="2813" bodyend="2826"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ac017503c7373cb66869548eba592ac1b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1withdraw__permission__object" kindref="compound">withdraw_permission_object</ref> &gt;</type>
        <definition>vector&lt; withdraw_permission_object &gt; graphene::app::database_api_impl::get_withdraw_permissions_by_giver</definition>
        <argsstring>(const std::string account_id_or_name, withdraw_permission_id_type start, uint32_t limit) const</argsstring>
        <name>get_withdraw_permissions_by_giver</name>
        <param>
          <type>const std::string</type>
          <declname>account_id_or_name</declname>
        </param>
        <param>
          <type>withdraw_permission_id_type</type>
          <declname>start</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="206" column="14" bodyfile="libraries/app/database_api.cpp" bodystart="2842" bodyend="2866"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1af2c00286684d9a71be8df0df6aa0cc51" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1withdraw__permission__object" kindref="compound">withdraw_permission_object</ref> &gt;</type>
        <definition>vector&lt; withdraw_permission_object &gt; graphene::app::database_api_impl::get_withdraw_permissions_by_recipient</definition>
        <argsstring>(const std::string account_id_or_name, withdraw_permission_id_type start, uint32_t limit) const</argsstring>
        <name>get_withdraw_permissions_by_recipient</name>
        <param>
          <type>const std::string</type>
          <declname>account_id_or_name</declname>
        </param>
        <param>
          <type>withdraw_permission_id_type</type>
          <declname>start</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="209" column="14" bodyfile="libraries/app/database_api.cpp" bodystart="2876" bodyend="2899"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a85236e93aca11ee4ee77d04880aaa286" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>optional&lt; <ref refid="classgraphene_1_1chain_1_1htlc__object" kindref="compound">htlc_object</ref> &gt;</type>
        <definition>fc::optional&lt; htlc_object &gt; graphene::app::database_api_impl::get_htlc</definition>
        <argsstring>(htlc_id_type id, optional&lt; bool &gt; subscribe) const</argsstring>
        <name>get_htlc</name>
        <param>
          <type>htlc_id_type</type>
          <declname>id</declname>
        </param>
        <param>
          <type>optional&lt; bool &gt;</type>
          <declname>subscribe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="214" column="16" bodyfile="libraries/app/database_api.cpp" bodystart="2912" bodyend="2920"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a19769ebc5973a7a38cd6bc7ec33d1562" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1htlc__object" kindref="compound">htlc_object</ref> &gt;</type>
        <definition>vector&lt; htlc_object &gt; graphene::app::database_api_impl::get_htlc_by_from</definition>
        <argsstring>(const std::string account_id_or_name, htlc_id_type start, uint32_t limit) const</argsstring>
        <name>get_htlc_by_from</name>
        <param>
          <type>const std::string</type>
          <declname>account_id_or_name</declname>
        </param>
        <param>
          <type>htlc_id_type</type>
          <declname>start</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="215" column="14" bodyfile="libraries/app/database_api.cpp" bodystart="2928" bodyend="2950"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ac32f81181fd254d200f3790916dae095" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1htlc__object" kindref="compound">htlc_object</ref> &gt;</type>
        <definition>vector&lt; htlc_object &gt; graphene::app::database_api_impl::get_htlc_by_to</definition>
        <argsstring>(const std::string account_id_or_name, htlc_id_type start, uint32_t limit) const</argsstring>
        <name>get_htlc_by_to</name>
        <param>
          <type>const std::string</type>
          <declname>account_id_or_name</declname>
        </param>
        <param>
          <type>htlc_id_type</type>
          <declname>start</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="217" column="14" bodyfile="libraries/app/database_api.cpp" bodystart="2958" bodyend="2980"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a133faf3884cd7c0e337b41fea43e51ba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1htlc__object" kindref="compound">htlc_object</ref> &gt;</type>
        <definition>vector&lt; htlc_object &gt; graphene::app::database_api_impl::list_htlcs</definition>
        <argsstring>(const htlc_id_type lower_bound_id, uint32_t limit) const</argsstring>
        <name>list_htlcs</name>
        <param>
          <type>const htlc_id_type</type>
          <declname>lower_bound_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="219" column="14" bodyfile="libraries/app/database_api.cpp" bodystart="2987" bodyend="3004"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a05c344a5f21c141c00801803a3049789" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ASSET</type>
          </param>
        </templateparamlist>
        <type><ref refid="structgraphene_1_1app_1_1extended__asset__object" kindref="compound">extended_asset_object</ref></type>
        <definition>extended_asset_object graphene::app::database_api_impl::extend_asset</definition>
        <argsstring>(ASSET &amp;&amp;a) const</argsstring>
        <name>extend_asset</name>
        <param>
          <type>ASSET &amp;&amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="232" column="29" bodyfile="libraries/app/database_api_impl.hxx" bodystart="232" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ae5d6df57392d20ef07eddd897fef2aca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; optional&lt; <ref refid="structgraphene_1_1app_1_1extended__asset__object" kindref="compound">extended_asset_object</ref> &gt; &gt;</type>
        <definition>vector&lt; optional&lt; extended_asset_object &gt; &gt; graphene::app::database_api_impl::get_assets</definition>
        <argsstring>(const vector&lt; asset_id_type &gt; &amp;asset_ids, optional&lt; bool &gt; subscribe=optional&lt; bool &gt;()) const</argsstring>
        <name>get_assets</name>
        <param>
          <type>const vector&lt; asset_id_type &gt; &amp;</type>
          <declname>asset_ids</declname>
        </param>
        <param>
          <type>optional&lt; bool &gt;</type>
          <declname>subscribe</declname>
          <defval>optional&lt; bool &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="246" column="14" bodyfile="libraries/app/database_api.cpp" bodystart="3095" bodyend="3111"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a859d03ff9d2ca9a5bf65d60fe1d33ee8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref> &gt;</type>
        <definition>vector&lt; limit_order_object &gt; graphene::app::database_api_impl::get_limit_orders</definition>
        <argsstring>(const asset_id_type a, const asset_id_type b, const uint32_t limit) const</argsstring>
        <name>get_limit_orders</name>
        <param>
          <type>const asset_id_type</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const asset_id_type</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="254" column="14" bodyfile="libraries/app/database_api.cpp" bodystart="3114" bodyend="3149"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a62b9185af694c84733bebf2c7659249e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class LP</type>
          </param>
        </templateparamlist>
        <type><ref refid="structgraphene_1_1app_1_1extended__liquidity__pool__object" kindref="compound">extended_liquidity_pool_object</ref></type>
        <definition>extended_liquidity_pool_object graphene::app::database_api_impl::extend_liquidity_pool</definition>
        <argsstring>(LP &amp;&amp;a, bool with_stats) const</argsstring>
        <name>extend_liquidity_pool</name>
        <param>
          <type>LP &amp;&amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>with_stats</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="262" column="38" bodyfile="libraries/app/database_api_impl.hxx" bodystart="262" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1afb97dd83e705123d76fac5ff04bf28dc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename INDEX_TAG</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>X</declname>
            <defname>X</defname>
          </param>
        </templateparamlist>
        <type>vector&lt; <ref refid="structgraphene_1_1app_1_1extended__liquidity__pool__object" kindref="compound">extended_liquidity_pool_object</ref> &gt;</type>
        <definition>vector&lt;extended_liquidity_pool_object&gt; graphene::app::database_api_impl::get_liquidity_pools_by_asset_x</definition>
        <argsstring>(const optional&lt; uint32_t &gt; &amp;olimit, const optional&lt; liquidity_pool_id_type &gt; &amp;ostart_id, const optional&lt; bool &gt; &amp;with_statistics, X... x) const</argsstring>
        <name>get_liquidity_pools_by_asset_x</name>
        <param>
          <type>const optional&lt; uint32_t &gt; &amp;</type>
          <declname>olimit</declname>
        </param>
        <param>
          <type>const optional&lt; liquidity_pool_id_type &gt; &amp;</type>
          <declname>ostart_id</declname>
        </param>
        <param>
          <type>const optional&lt; bool &gt; &amp;</type>
          <declname>with_statistics</declname>
        </param>
        <param>
          <type>X...</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="278" column="14" bodyfile="libraries/app/database_api_impl.hxx" bodystart="278" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ad31f4a59a34a0ad6e411aa87e3f0d471" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::app::database_api_impl::get_whether_to_subscribe</definition>
        <argsstring>(optional&lt; bool &gt; subscribe) const</argsstring>
        <name>get_whether_to_subscribe</name>
        <param>
          <type>optional&lt; bool &gt;</type>
          <declname>subscribe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="317" column="12" bodyfile="libraries/app/database_api_impl.hxx" bodystart="317" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ae1d6f27c47fda9da08454bcbb4d1f218" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>vector&lt; char &gt;</type>
        <definition>vector&lt;char&gt; graphene::app::database_api_impl::get_subscription_key</definition>
        <argsstring>(const object_id_type &amp;item) const</argsstring>
        <name>get_subscription_key</name>
        <param>
          <type>const object_id_type &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="335" column="14" bodyfile="libraries/app/database_api_impl.hxx" bodystart="335" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ace6d4f51072f7f5b6786b0afa90e299c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void graphene::app::database_api_impl::subscribe_to_item</definition>
        <argsstring>(const T &amp;item) const</argsstring>
        <name>subscribe_to_item</name>
        <param>
          <type>const T &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="341" column="12" bodyfile="libraries/app/database_api_impl.hxx" bodystart="341" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a368d6ef9cbcfc57f682389d880c6e690" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool graphene::app::database_api_impl::is_subscribed_to_item</definition>
        <argsstring>(const T &amp;item) const</argsstring>
        <name>is_subscribed_to_item</name>
        <param>
          <type>const T &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="354" column="12" bodyfile="libraries/app/database_api_impl.hxx" bodystart="354" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a070c7127572da3986facf042c6668ccc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::app::database_api_impl::is_impacted_account</definition>
        <argsstring>(const flat_set&lt; account_id_type &gt; &amp;accounts)</argsstring>
        <name>is_impacted_account</name>
        <param>
          <type>const flat_set&lt; account_id_type &gt; &amp;</type>
          <declname>accounts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="364" column="12" bodyfile="libraries/app/database_api.cpp" bodystart="3151" bodyend="3159"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a4a86e1e60f29941254c6ce0d1c0aa50e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>const std::pair&lt; asset_id_type, asset_id_type &gt;</type>
        <definition>const std::pair&lt;asset_id_type,asset_id_type&gt; graphene::app::database_api_impl::get_order_market</definition>
        <argsstring>(const T &amp;order)</argsstring>
        <name>get_order_market</name>
        <param>
          <type>const T &amp;</type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="368" column="23" bodyfile="libraries/app/database_api_impl.hxx" bodystart="368" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a6b507ea1f58b046fce6c0a72e835f33e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::pair&lt; asset_id_type, asset_id_type &gt;</type>
        <definition>const std::pair&lt;asset_id_type,asset_id_type&gt; graphene::app::database_api_impl::get_order_market</definition>
        <argsstring>(const force_settlement_object &amp;order)</argsstring>
        <name>get_order_market</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1force__settlement__object" kindref="compound">force_settlement_object</ref> &amp;</type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="374" column="23" bodyfile="libraries/app/database_api_impl.hxx" bodystart="374" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ac70659cf33483f0113f2559eb18b6903" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void graphene::app::database_api_impl::enqueue_if_subscribed_to_market</definition>
        <argsstring>(const object *obj, market_queue_type &amp;queue, bool full_object=true)</argsstring>
        <name>enqueue_if_subscribed_to_market</name>
        <param>
          <type>const object *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="namespacegraphene_1_1app_1a2cf28592987d2d9365802435969eb2f6" kindref="member">market_queue_type</ref> &amp;</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>full_object</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="384" column="12" bodyfile="libraries/app/database_api_impl.hxx" bodystart="384" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a55ff9f5836e67fc803189fa184d8dbcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::database_api_impl::broadcast_updates</definition>
        <argsstring>(const vector&lt; variant &gt; &amp;updates)</argsstring>
        <name>broadcast_updates</name>
        <param>
          <type>const vector&lt; variant &gt; &amp;</type>
          <declname>updates</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="397" column="12" bodyfile="libraries/app/database_api.cpp" bodystart="3161" bodyend="3170"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a7cfc3b40b9187f22cc92d0859118edd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::database_api_impl::broadcast_market_updates</definition>
        <argsstring>(const market_queue_type &amp;queue)</argsstring>
        <name>broadcast_market_updates</name>
        <param>
          <type>const <ref refid="namespacegraphene_1_1app_1a2cf28592987d2d9365802435969eb2f6" kindref="member">market_queue_type</ref> &amp;</type>
          <declname>queue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="398" column="12" bodyfile="libraries/app/database_api.cpp" bodystart="3172" bodyend="3186"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1af32c7a64a34782f8cfc678098e63633a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::database_api_impl::handle_object_changed</definition>
        <argsstring>(bool force_notify, bool full_object, const vector&lt; object_id_type &gt; &amp;ids, const flat_set&lt; account_id_type &gt; &amp;impacted_accounts, std::function&lt; const object *(object_id_type id)&gt; find_object)</argsstring>
        <name>handle_object_changed</name>
        <param>
          <type>bool</type>
          <declname>force_notify</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>full_object</declname>
        </param>
        <param>
          <type>const vector&lt; object_id_type &gt; &amp;</type>
          <declname>ids</declname>
        </param>
        <param>
          <type>const flat_set&lt; account_id_type &gt; &amp;</type>
          <declname>impacted_accounts</declname>
        </param>
        <param>
          <type>std::function&lt; const object *(object_id_type id)&gt;</type>
          <declname>find_object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="399" column="12" bodyfile="libraries/app/database_api.cpp" bodystart="3222" bodyend="3279"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ad7e92705742642bcc7c856f03ed1e244" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::database_api_impl::on_objects_new</definition>
        <argsstring>(const vector&lt; object_id_type &gt; &amp;ids, const flat_set&lt; account_id_type &gt; &amp;impacted_accounts)</argsstring>
        <name>on_objects_new</name>
        <param>
          <type>const vector&lt; object_id_type &gt; &amp;</type>
          <declname>ids</declname>
        </param>
        <param>
          <type>const flat_set&lt; account_id_type &gt; &amp;</type>
          <declname>impacted_accounts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>called every time a block is applied to report the objects that were changed </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="406" column="12" bodyfile="libraries/app/database_api.cpp" bodystart="3206" bodyend="3212"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ad55c3a34c9ad6e65d4fe87261d76bef4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::database_api_impl::on_objects_changed</definition>
        <argsstring>(const vector&lt; object_id_type &gt; &amp;ids, const flat_set&lt; account_id_type &gt; &amp;impacted_accounts)</argsstring>
        <name>on_objects_changed</name>
        <param>
          <type>const vector&lt; object_id_type &gt; &amp;</type>
          <declname>ids</declname>
        </param>
        <param>
          <type>const flat_set&lt; account_id_type &gt; &amp;</type>
          <declname>impacted_accounts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="407" column="12" bodyfile="libraries/app/database_api.cpp" bodystart="3214" bodyend="3220"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a07b11af3581db3c1167026d69efbc26e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::database_api_impl::on_objects_removed</definition>
        <argsstring>(const vector&lt; object_id_type &gt; &amp;ids, const vector&lt; const object * &gt; &amp;objs, const flat_set&lt; account_id_type &gt; &amp;impacted_accounts)</argsstring>
        <name>on_objects_removed</name>
        <param>
          <type>const vector&lt; object_id_type &gt; &amp;</type>
          <declname>ids</declname>
        </param>
        <param>
          <type>const vector&lt; const object * &gt; &amp;</type>
          <declname>objs</declname>
        </param>
        <param>
          <type>const flat_set&lt; account_id_type &gt; &amp;</type>
          <declname>impacted_accounts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="408" column="12" bodyfile="libraries/app/database_api.cpp" bodystart="3188" bodyend="3204"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ae7b704ead77565a89c50fa327288d1a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::database_api_impl::on_applied_block</definition>
        <argsstring>()</argsstring>
        <name>on_applied_block</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>note: this method cannot yield because it is called in the middle of apply a block. </para>
        </detaileddescription>
        <inbodydescription>
<para>we need to ensure the <ref refid="classgraphene_1_1app_1_1database__api" kindref="compound">database_api</ref> is not deleted for the life of the async operation</para>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="410" column="12" bodyfile="libraries/app/database_api.cpp" bodystart="3284" bodyend="3336"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>graphene::app::database_api_impl</label>
        <link refid="classgraphene_1_1app_1_1database__api__impl"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>std::enable_shared_from_this&lt; database_api_impl &gt;</label>
      </node>
      <node id="3">
        <label>graphene::app::database_api_helper</label>
        <link refid="classgraphene_1_1app_1_1database__api__helper"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="14">
        <label>map&lt; pair&lt; asset_id_type, asset_id_type &gt;, std::function&lt; void(const variant &amp;)&gt; &gt;</label>
      </node>
      <node id="11">
        <label>graphene::api_helper_indexes::amount_in_collateral_index</label>
        <link refid="classgraphene_1_1api__helper__indexes_1_1amount__in__collateral__index"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>graphene::app::database_api_impl</label>
        <link refid="classgraphene_1_1app_1_1database__api__impl"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>asset_in_liquidity_pools_index</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>amount_in_collateral_index</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>_subscribe_filter</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>next_object_ids_index</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>_market_subscriptions</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>graphene::api_helper_indexes::next_object_ids_index</label>
        <link refid="classgraphene_1_1api__helper__indexes_1_1next__object__ids__index"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>graphene::api_helper_indexes::asset_in_liquidity_pools_index</label>
        <link refid="classgraphene_1_1api__helper__indexes_1_1asset__in__liquidity__pools__index"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>fc::bloom_filter</label>
        <link refid="classfc_1_1bloom__filter"/>
      </node>
      <node id="8">
        <label>fc::time_point_sec</label>
        <link refid="classfc_1_1time__point__sec"/>
      </node>
      <node id="6">
        <label>graphene::db::object_database</label>
        <link refid="classgraphene_1_1db_1_1object__database"/>
        <childnode refid="7" relation="usage">
          <edgelabel>_undo_db</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>std::enable_shared_from_this&lt; database_api_impl &gt;</label>
      </node>
      <node id="4">
        <label>graphene::app::application_options</label>
        <link refid="classgraphene_1_1app_1_1application__options"/>
      </node>
      <node id="5">
        <label>graphene::chain::database</label>
        <link refid="classgraphene_1_1chain_1_1database"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>_current_block_time</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>graphene::app::database_api_helper</label>
        <link refid="classgraphene_1_1app_1_1database__api__helper"/>
        <childnode refid="4" relation="usage">
          <edgelabel>_app_options</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>_db</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>graphene::db::undo_database</label>
        <link refid="classgraphene_1_1db_1_1undo__database"/>
      </node>
      <node id="10">
        <label>graphene::db::secondary_index</label>
        <link refid="classgraphene_1_1db_1_1secondary__index"/>
      </node>
    </collaborationgraph>
    <location file="libraries/app/database_api_impl.hxx" line="37" column="1" bodyfile="libraries/app/database_api_impl.hxx" bodystart="36" bodyend="437"/>
    <listofallmembers>
      <member refid="classgraphene_1_1app_1_1database__api__helper_1ac2880e144ca265f0ac59bb31aaf4a889" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>_app_options</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a3986f9637134d0f91d711c7ff4df7189" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>_applied_block_connection</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a79f338b26855b0a580f74e47e0600758" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>_block_applied_callback</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a08837ce80550808d16dc34e85258f40f" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>_change_connection</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__helper_1a5d29c9ad82ecfbb2a9ab6b4d2fb4e313" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>_db</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a4bfce46e305ae20b9925122fb709172f" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>_enabled_auto_subscription</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a466336fd22c476e6b2e0b4e52ef6dce5" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>_market_subscriptions</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ae432b4993936147dcd5e8ac87bc087eb" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>_new_connection</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a44bb83df538540ec0d969c739f28c589" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>_notify_remove_create</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1adfbd822d409be041227ec58c94f95db8" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>_pending_trx_callback</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a3a55e04699d428f42c9a69672d488105" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>_pending_trx_connection</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a499df6660549b1f8b430a8c4a612c72e" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>_removed_connection</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1af716153167cbb37816d69a69cd8391ee" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>_subscribe_callback</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1add7a21998f28a6c4aea41006eb1ff022" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>_subscribe_filter</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1acab1dea5c17660083df33c2bddc204e2" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>_subscribed_accounts</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ae878a059b25940c3128df69eac716387" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>amount_in_collateral_index</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a763e2b91c01dfb19f0c353fe63a880c2" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>asset_in_liquidity_pools_index</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a7cfc3b40b9187f22cc92d0859118edd7" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>broadcast_market_updates</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a55ff9f5836e67fc803189fa184d8dbcb" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>broadcast_updates</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__helper_1aa743b08bb41009aa39c51daf505cffe4" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>call_end_or_upper_bound</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__helper_1af3f38dde207b28e6c4e56b421b3d6ddb" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>call_end_or_upper_bound</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a10a111caefade7a34e2561598a19e4e7" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>cancel_all_subscriptions</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__helper_1a57f872ba11b3e28e7636545ef0728094" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>database_api_helper</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__helper_1ad4fdda5e6386d31015fd91d5db0c1b32" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>database_api_helper</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ada366a6d7683a99bdfd996083a5c8a12" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>database_api_impl</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ac70659cf33483f0113f2559eb18b6903" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>enqueue_if_subscribed_to_market</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a05c344a5f21c141c00801803a3049789" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>extend_asset</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a62b9185af694c84733bebf2c7659249e" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>extend_liquidity_pool</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1aa78e27ca738205c4f82ec80d60d75740" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_24_volume</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a8df3d2fdf444f1f87fd5b0f5700739ee" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_account_balances</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a091be4e3a512dd7b83a19c58632ad19b" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_account_by_name</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a838b2ae1c363d6db501483636ec5222e" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_account_count</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__helper_1ad57a0aa7f2cc9775c2458f5cb7b3cb19" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_account_from_string</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ac1e87faca0ea7685d4981f560845a4c3" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_account_limit_orders</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ad041e8618ad380a6e68375c6dc540028" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_account_references</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a0808606b9d1aad5babf635a1b2607922" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_accounts</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a00bbbd4d1d45b765a672d23068bba1d4" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_all_workers</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a00b2ecfd8dfc971cca2b55839e60ae37" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_asset_count</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__helper_1ad92ff45a2d96b10f3b613fbc8675febe" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_asset_from_string</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1adf3db752a9ba8e2e7ee3746878c28f7f" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_assets</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ae5d6df57392d20ef07eddd897fef2aca" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_assets</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a0241998fe02c90d26865415ce8ead82e" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_assets_by_issuer</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1aef3840cb3c44793c9581f2ccc52bc33e" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_balance_objects</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a78d42d6340af3cbb9ceb22dcbd3504b5" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_blinded_balances</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ac58de247b5e405af56821a0d70f0770e" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_block</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ae307a17a892e39521b222d0ed87c670e" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_block_header</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ac142df8083ccdd157cf8f169a204b3fe" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_block_header_batch</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a2d4ec3cb19106bb0127f6886e1cfa6a5" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_call_orders</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1abd9e0f34cb481e41bb15aba956d48566" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_call_orders_by_account</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1aac4b96fb3bb2446ebde410fa6a12fcc3" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_chain_id</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a12ce279b022e8ded590aaf2764f24b17" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_chain_properties</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1acd1ecdb949d3a7db0800adc4775b61f8" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_collateral_bids</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a82895e5ebfb9aaaab364d4a353cacd7d" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_committee_count</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a8cef78e96fad36084b62d980a3315a10" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_committee_member_by_account</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1acab4f92a15d0509131a623e65c737de6" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_committee_members</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a388576d4612e9d7b36511d0431c20f7c" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_config</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a7d3a09112fe43b55cdb70c9654d6d9be" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_dynamic_global_properties</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ad7a3dd32adb8044faa14aafb88157d0f" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_full_accounts</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a5ec39c51451ddba8fe390c0a174cdf3c" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_global_properties</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a85236e93aca11ee4ee77d04880aaa286" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_htlc</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a19769ebc5973a7a38cd6bc7ec33d1562" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_htlc_by_from</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ac32f81181fd254d200f3790916dae095" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_htlc_by_to</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1af65b9b9bb05f936dca2cebd177566a2e" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_key_references</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ac5e0821636e116e7eefbb077e6ca8126" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_limit_orders</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a859d03ff9d2ca9a5bf65d60fe1d33ee8" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_limit_orders</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a6ba8ef267b61497d98b25fa598ae5853" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_limit_orders_by_account</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a0770c55ef2273eb99085732c91648d7e" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_liquidity_pools</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1afb97dd83e705123d76fac5ff04bf28dc" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_liquidity_pools_by_asset_x</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1aea599e24e0302b62bc8ddb5c4b8149c1" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_liquidity_pools_by_one_asset</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1aa546caab4093114a346ab5210f175dac" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_liquidity_pools_by_owner</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1afdeff949d0b886350e7299f29b1cbe1d" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_liquidity_pools_by_share_asset</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a626d1937f8dffce8c892b7077be85505" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_named_account_balances</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ae17dfe68734112261c5e52451ab727f3" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_next_object_id</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a57335b9cc2874e1f69e3ccb9d221bf93" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_objects</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__helper_1a78bfa8142b4431eae91d450b87ca3af4" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_objects_by_x</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a7450f6448b0868a4b611681545496bb6" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_order_book</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a4a86e1e60f29941254c6ce0d1c0aa50e" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_order_market</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a6b507ea1f58b046fce6c0a72e835f33e" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_order_market</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1acc46cde78a2c224a99ea622865360ba6" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_potential_address_signatures</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1acef339ff42bfbf976567a5b876e14751" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_potential_signatures</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a9a031701d262a0df8d6c527b46912f8b" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_proposed_transactions</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a271b721629f59bb58e810163ddbea745" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_required_fees</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a69312609009b9fcff77e931e70479b9d" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_required_signatures</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ab457c81432a51ee1503b451b0d4ed76e" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_settle_orders</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a450c40ca59152d19bdc158ae7ad364fe" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_settle_orders_by_account</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ae1d6f27c47fda9da08454bcbb4d1f218" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_subscription_key</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1aa40820c96b22c9b7ddde4280d6e91b0e" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_ticker</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a4c238daecb0b33712aafc96ccf671b33" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_top_markets</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a506e86129365333c2b8646065996cae9" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_top_voters</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a3c665d79c3c25390ac5334d800aba7f8" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_trade_history</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1afe049a1b99dd9e132fcdad54f52b2690" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_trade_history_by_sequence</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a93356646b379ee79ad8700e7d6a93b22" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_transaction</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a2ba80f79ad05b3a6fb2d1ea3df18eb95" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_transaction_hex</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a78e63e63b37ce0921f7b9bedcb3b8f36" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_transaction_hex_without_sig</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a6b2bdaaf14efcd053f6e21c0d33f1661" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_vested_balances</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a9db99c2796a5723fdab8cddfe3e68385" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_vesting_balances</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ad31f4a59a34a0ad6e411aa87e3f0d471" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_whether_to_subscribe</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ac017503c7373cb66869548eba592ac1b" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_withdraw_permissions_by_giver</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1af2c00286684d9a71be8df0df6aa0cc51" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_withdraw_permissions_by_recipient</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1af30916c67c85018ff8443e57dac2868e" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_witness_by_account</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a4cfd97e7cea92f6dacedfc779a3dc239" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_witness_count</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a07a69c909b7f1c3f07f94f0e72a49055" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_witnesses</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a9e6d2acff7e692f5ed8a95e16d513953" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_worker_count</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1aca8b6679de891aba8961537eb9a02896" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_workers_by_account</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1af32c7a64a34782f8cfc678098e63633a" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>handle_object_changed</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a070c7127572da3986facf042c6668ccc" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>is_impacted_account</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a80b46160a2181f5aa8cd3af6718793d2" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>is_public_key_registered</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a368d6ef9cbcfc57f682389d880c6e690" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>is_subscribed_to_item</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a4a0f59664d5abeeab1ca51a118170253" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>list_assets</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a133faf3884cd7c0e337b41fea43e51ba" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>list_htlcs</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ac248983aae44dc9b647cdb801c6691f0" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>lookup_account_names</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ab5f1d6a4a91b21497cd8f5ff09b71130" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>lookup_accounts</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a7a2d4207d455bff60754603682f4d5b7" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>lookup_asset_symbols</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ad15f14fc5c372b603013194e4c85cb8b" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>lookup_committee_member_accounts</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a9f3c59402a1776da2951fdd666e20a16" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>lookup_vote_ids</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1aeec543e4d39d2f170484fd49c6500f85" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>lookup_witness_accounts</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__helper_1ad90d7425bba21f237fc228b3351d6270" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>make_tuple_if_multiple</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__helper_1a602a7d5cd75c9e94be1f49723536f3e7" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>make_tuple_if_multiple</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a5540b0ca8c0efc0b013a292d73befce2" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>next_object_ids_index</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ae7b704ead77565a89c50fa327288d1a1" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>on_applied_block</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ad55c3a34c9ad6e65d4fe87261d76bef4" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>on_objects_changed</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ad7e92705742642bcc7c856f03ed1e244" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>on_objects_new</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a07b11af3581db3c1167026d69efbc26e" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>on_objects_removed</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a4723adbefd08c756b2e866d36b6c6215" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>set_auto_subscription</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1aaa7ad36ef0da4021fc4dea51449014bf" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>set_block_applied_callback</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a0ab92833cf9e6fa7b6a6b7472b2f36a3" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>set_pending_transaction_callback</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a9efad1951dada7a463e304d5ade154ab" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>set_subscribe_callback</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ace6d4f51072f7f5b6786b0afa90e299c" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>subscribe_to_item</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ae7aebb8dd3c0a3ebd55a63a0cb2f77dc" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>subscribe_to_market</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a50f5bf4428137943bd874d6e2883b4af" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>unsubscribe_from_market</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a294d0e741fa22072439875121f39eb43" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>validate_transaction</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a86a8cf5fea3037c8388e8de9d14554fd" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>verify_account_authority</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a54dddff3398d303e7c9bdf1a1f2d2498" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>verify_authority</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a89f8d316670134c3faa5fb07032603cb" prot="public" virt="virtual"><scope>graphene::app::database_api_impl</scope><name>~database_api_impl</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
