<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classgraphene_1_1chain_1_1asset__object" kind="class" language="C++" prot="public">
    <compoundname>graphene::chain::asset_object</compoundname>
    <basecompoundref refid="classgraphene_1_1db_1_1abstract__object" prot="public" virt="non-virtual">graphene::db::abstract_object&lt; asset_object &gt;</basecompoundref>
    <derivedcompoundref refid="structgraphene_1_1app_1_1extended__asset__object" prot="public" virt="non-virtual">graphene::app::extended_asset_object</derivedcompoundref>
    <includes refid="asset__object_8hpp" local="no">asset_object.hpp</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1asset__object_1add8ca6d9e7e0468d2fac122e32a9601e" prot="public" static="yes" mutable="no">
        <type>constexpr uint8_t</type>
        <definition>constexpr uint8_t graphene::chain::asset_object::space_id</definition>
        <argsstring></argsstring>
        <name>space_id</name>
        <initializer>= protocol_ids</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="82" column="1" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1asset__object_1a6b28040667050c6a0c1db5b647bcbc73" prot="public" static="yes" mutable="no">
        <type>constexpr uint8_t</type>
        <definition>constexpr uint8_t graphene::chain::asset_object::type_id</definition>
        <argsstring></argsstring>
        <name>type_id</name>
        <initializer>= asset_object_type</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="83" column="1" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="83" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1asset__object_1a089165870abab6b77345acea240937b6" prot="public" static="no" mutable="no">
        <type>string</type>
        <definition>string graphene::chain::asset_object::symbol</definition>
        <argsstring></argsstring>
        <name>symbol</name>
        <briefdescription>
<para>Ticker symbol for this asset, i.e. &quot;USD&quot;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="133" column="1" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1asset__object_1a7169594e64f681273a6ece486de9ef38" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t graphene::chain::asset_object::precision</definition>
        <argsstring></argsstring>
        <name>precision</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Maximum number of digits after the decimal point (must be &lt;= 12) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="135" column="1" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1asset__object_1ad5274b71ad420b57da53c3ef80b95577" prot="public" static="no" mutable="no">
        <type>account_id_type</type>
        <definition>account_id_type graphene::chain::asset_object::issuer</definition>
        <argsstring></argsstring>
        <name>issuer</name>
        <briefdescription>
<para>ID of the account which issued this asset. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="137" column="1" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1asset__object_1a51510fee637f062e6db9cfc0986fcf49" prot="public" static="no" mutable="no">
        <type><ref refid="structgraphene_1_1protocol_1_1asset__options" kindref="compound">asset_options</ref></type>
        <definition>asset_options graphene::chain::asset_object::options</definition>
        <argsstring></argsstring>
        <name>options</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="139" column="1" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1asset__object_1a85367857043568d480de982ae1b6518c" prot="public" static="no" mutable="no">
        <type>asset_dynamic_data_id_type</type>
        <definition>asset_dynamic_data_id_type graphene::chain::asset_object::dynamic_asset_data_id</definition>
        <argsstring></argsstring>
        <name>dynamic_asset_data_id</name>
        <briefdescription>
<para>Current supply, fee pool, and collected fees are stored in a separate object as they change frequently. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="143" column="1" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1asset__object_1a5a69d1ef467d5eb7163fb4c301937066" prot="public" static="no" mutable="no">
        <type><ref refid="classfc_1_1optional" kindref="compound">optional</ref>&lt; asset_bitasset_data_id_type &gt;</type>
        <definition>optional&lt;asset_bitasset_data_id_type&gt; graphene::chain::asset_object::bitasset_data_id</definition>
        <argsstring></argsstring>
        <name>bitasset_data_id</name>
        <briefdescription>
<para>Extra data associated with BitAssets. This field is non-null if and only if <ref refid="classgraphene_1_1chain_1_1asset__object_1adebdf0e788fbe2e33510ac7e32aa804e" kindref="member">is_market_issued()</ref> returns true. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="145" column="1" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1asset__object_1a57ff2c36a04a2123d1dad48ea76049bc" prot="public" static="no" mutable="no">
        <type><ref refid="classfc_1_1optional" kindref="compound">optional</ref>&lt; account_id_type &gt;</type>
        <definition>optional&lt;account_id_type&gt; graphene::chain::asset_object::buyback_account</definition>
        <argsstring></argsstring>
        <name>buyback_account</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="147" column="1" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1asset__object_1a179fd11dac23e45085e27cca5ec8e794" prot="public" static="no" mutable="no">
        <type><ref refid="classfc_1_1optional" kindref="compound">optional</ref>&lt; liquidity_pool_id_type &gt;</type>
        <definition>optional&lt;liquidity_pool_id_type&gt; graphene::chain::asset_object::for_liquidity_pool</definition>
        <argsstring></argsstring>
        <name>for_liquidity_pool</name>
        <briefdescription>
<para>The ID of the liquidity pool if the asset is the share asset of a liquidity pool. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="150" column="1" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="150" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1ac15166dec400e72604ecdbb6d25ae800" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool graphene::chain::asset_object::is_valid_symbol</definition>
        <argsstring>(const string &amp;symbol)</argsstring>
        <name>is_valid_symbol</name>
        <param>
          <type>const string &amp;</type>
          <declname>symbol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function does not check if any registered asset has this symbol or not; it simply checks whether the symbol would be valid. <simplesect kind="return"><para>true if symbol is a valid ticker symbol; false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="88" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1adebdf0e788fbe2e33510ac7e32aa804e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::asset_object::is_market_issued</definition>
        <argsstring>() const </argsstring>
        <name>is_market_issued</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if this is a market-issued asset; false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="91" column="1" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="91" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1a7222ffbcd2b5cbe00a4002dd717e4353" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::asset_object::is_liquidity_pool_share_asset</definition>
        <argsstring>() const </argsstring>
        <name>is_liquidity_pool_share_asset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if this is a share asset of a liquidity pool; false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="93" column="1" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="93" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1a41ac7f0c909f35fb982b4abbb4ef1c04" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::asset_object::can_force_settle</definition>
        <argsstring>() const </argsstring>
        <name>can_force_settle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if users may request force-settlement of this market-issued asset; false otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="95" column="1" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="95" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1a51e79fcd5120826c0a54d3f31adc2d40" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::asset_object::can_global_settle</definition>
        <argsstring>() const </argsstring>
        <name>can_global_settle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the issuer of this market-issued asset may globally settle the asset; false otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="97" column="1" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="97" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1a7f9ef13eef4a7200ce3ab89b076ce48a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::asset_object::charges_market_fees</definition>
        <argsstring>() const </argsstring>
        <name>charges_market_fees</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if this asset charges a fee for the issuer on market operations; false otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="99" column="1" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="99" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1afa9ab58b0672eeb3d0a5bbe4b533a84f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::asset_object::is_transfer_restricted</definition>
        <argsstring>() const </argsstring>
        <name>is_transfer_restricted</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if this asset may only be transferred to/from the issuer or market orders </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="101" column="1" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="101" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1a50965e28f32b8b9656459e955c044e45" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::asset_object::can_override</definition>
        <argsstring>() const </argsstring>
        <name>can_override</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="102" column="1" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="102" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1a465f9c981c58c917ba624f046a4faf91" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::asset_object::allow_confidential</definition>
        <argsstring>() const </argsstring>
        <name>allow_confidential</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="103" column="1" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="103" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1aa80958612d73d8d79e19922ff488f615" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::asset_object::can_update_max_supply</definition>
        <argsstring>() const </argsstring>
        <name>can_update_max_supply</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if max supply of the asset can be updated </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="105" column="1" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="105" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1ac2cfe7604930f0628454e2a12208d300" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::asset_object::can_create_new_supply</definition>
        <argsstring>() const </argsstring>
        <name>can_create_new_supply</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if can create new supply for the asset </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="107" column="1" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1a95d2b14079463c0d3993d50a1b6a17c5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::asset_object::can_owner_update_mcr</definition>
        <argsstring>() const </argsstring>
        <name>can_owner_update_mcr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the asset owner can update MCR directly </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="109" column="1" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="109" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1acc4d19d3cc9c23eb6014f202cc965e6c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::asset_object::can_owner_update_icr</definition>
        <argsstring>() const </argsstring>
        <name>can_owner_update_icr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the asset owner can update ICR directly </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="111" column="1" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1a8f6657e8851cba631798a9054ca1298d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::asset_object::can_owner_update_mssr</definition>
        <argsstring>() const </argsstring>
        <name>can_owner_update_mssr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the asset owner can update MSSR directly </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="113" column="1" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="113" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1a7d8072234ad528c02eb309ea5ef33dfd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref></type>
        <definition>asset graphene::chain::asset_object::amount</definition>
        <argsstring>(share_type a) const </argsstring>
        <name>amount</name>
        <param>
          <type><ref refid="namespacegraphene_1_1protocol_1a69b2104c1c11eed2d17bd29b86713347" kindref="member">share_type</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Helper function to get an asset object with the given amount in this asset&apos;s type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="116" column="1" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="116" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1ab62905a87a7c14ba60547475a7292430" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref></type>
        <definition>asset asset_object::amount_from_string</definition>
        <argsstring>(string amount_string) const </argsstring>
        <name>amount_from_string</name>
        <param>
          <type>string</type>
          <declname>amount_string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a string amount (i.e. &quot;123.45&quot;) to an asset object with this asset&apos;s type The string may have a decimal and/or a negative sign. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="119" column="1" bodyfile="libraries/chain/asset_object.cpp" bodystart="150" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1a893a428ae64a08b2346b4cdf35bd7be5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string asset_object::amount_to_string</definition>
        <argsstring>(share_type amount) const </argsstring>
        <name>amount_to_string</name>
        <param>
          <type><ref refid="namespacegraphene_1_1protocol_1a69b2104c1c11eed2d17bd29b86713347" kindref="member">share_type</ref></type>
          <declname>amount</declname>
        </param>
        <briefdescription>
<para>Convert an asset to a textual representation, i.e. &quot;123.45&quot;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="121" column="1" bodyfile="libraries/chain/asset_object.cpp" bodystart="205" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1ab4cedf5d69891b6fa72645e550bbdfcb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>string</type>
        <definition>string graphene::chain::asset_object::amount_to_string</definition>
        <argsstring>(const asset &amp;amount) const </argsstring>
        <name>amount_to_string</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>amount</declname>
        </param>
        <briefdescription>
<para>Convert an asset to a textual representation, i.e. &quot;123.45&quot;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="123" column="1" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="123" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1a39a9dfe0de7766a0b4dfa46d0019fcd8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>string</type>
        <definition>string graphene::chain::asset_object::amount_to_pretty_string</definition>
        <argsstring>(share_type amount) const </argsstring>
        <name>amount_to_pretty_string</name>
        <param>
          <type><ref refid="namespacegraphene_1_1protocol_1a69b2104c1c11eed2d17bd29b86713347" kindref="member">share_type</ref></type>
          <declname>amount</declname>
        </param>
        <briefdescription>
<para>Convert an asset to a textual representation with symbol, i.e. &quot;123.45 USD&quot;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="126" column="1" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="126" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1a32a58326aad37a490ea0ab1645ec4cda" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>string</type>
        <definition>string graphene::chain::asset_object::amount_to_pretty_string</definition>
        <argsstring>(const asset &amp;amount) const </argsstring>
        <name>amount_to_pretty_string</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>amount</declname>
        </param>
        <briefdescription>
<para>Convert an asset to a textual representation with symbol, i.e. &quot;123.45 USD&quot;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="129" column="1" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="129" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1aea2a970fc575de18a3366ac1549b1f2b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>asset_id_type</type>
        <definition>asset_id_type graphene::chain::asset_object::get_id</definition>
        <argsstring>() const </argsstring>
        <name>get_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="152" column="1" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="152" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1a2a517881061a6f9b9b8437223e248994" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::asset_object::validate</definition>
        <argsstring>() const </argsstring>
        <name>validate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="154" column="1" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="154" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1ad03b18a7831cba17992b23b7637d4f55" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DB</type>
          </param>
        </templateparamlist>
        <type>const <ref refid="classgraphene_1_1chain_1_1asset__bitasset__data__object" kindref="compound">asset_bitasset_data_object</ref> &amp;</type>
        <definition>const asset_bitasset_data_object&amp; graphene::chain::asset_object::bitasset_data</definition>
        <argsstring>(const DB &amp;db) const </argsstring>
        <name>bitasset_data</name>
        <param>
          <type>const DB &amp;</type>
          <declname>db</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="165" column="1" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="165" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1aef760d90c565be1702501372ba244c11" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DB</type>
          </param>
        </templateparamlist>
        <type>const <ref refid="classgraphene_1_1chain_1_1asset__dynamic__data__object" kindref="compound">asset_dynamic_data_object</ref> &amp;</type>
        <definition>const asset_dynamic_data_object&amp; graphene::chain::asset_object::dynamic_data</definition>
        <argsstring>(const DB &amp;db) const </argsstring>
        <name>dynamic_data</name>
        <param>
          <type>const DB &amp;</type>
          <declname>db</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="174" column="1" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="174" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1a78faf9fefe83b3d0f1de70d089a4ec78" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DB</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacegraphene_1_1protocol_1a69b2104c1c11eed2d17bd29b86713347" kindref="member">share_type</ref></type>
        <definition>share_type graphene::chain::asset_object::reserved</definition>
        <argsstring>(const DB &amp;db) const </argsstring>
        <name>reserved</name>
        <param>
          <type>const DB &amp;</type>
          <declname>db</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The total amount of an asset that is reserved for future issuance. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="181" column="1" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="181" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1a71ba8139d1766733a0ba7f2d97485900" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DB</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool graphene::chain::asset_object::can_accumulate_fee</definition>
        <argsstring>(const DB &amp;db, const asset &amp;fee) const </argsstring>
        <name>can_accumulate_fee</name>
        <param>
          <type>const DB &amp;</type>
          <declname>db</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>fee</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if asset can accumulate fees in the given denomination </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="186" column="1" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="186" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1asset__object_1afaedc7114c558ff392fd9e8c1a13d604" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DB</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void graphene::chain::asset_object::accumulate_fee</definition>
        <argsstring>(DB &amp;db, const asset &amp;fee) const </argsstring>
        <name>accumulate_fee</name>
        <param>
          <type>DB &amp;</type>
          <declname>db</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>fee</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="200" column="1" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="200" bodyend="221"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>tracks the parameters of an asset</para><para>All assets have a globally unique symbol name that controls how they are traded and an issuer who has authority over the parameters of the asset. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1047">
        <label>graphene::db::abstract_object&lt; asset_object &gt;</label>
        <link refid="classgraphene_1_1db_1_1abstract__object"/>
        <childnode refid="1048" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1046">
        <label>graphene::chain::asset_object</label>
        <link refid="classgraphene_1_1chain_1_1asset__object"/>
        <childnode refid="1047" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1048">
        <label>graphene::db::object</label>
        <link refid="classgraphene_1_1db_1_1object"/>
      </node>
      <node id="1049">
        <label>graphene::app::extended_asset_object</label>
        <link refid="structgraphene_1_1app_1_1extended__asset__object"/>
        <childnode refid="1046" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1051">
        <label>graphene::db::abstract_object&lt; asset_object &gt;</label>
        <link refid="classgraphene_1_1db_1_1abstract__object"/>
        <childnode refid="1052" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1066">
        <label>fc::optional&lt; liquidity_pool_id_type &gt;</label>
        <link refid="classfc_1_1optional"/>
      </node>
      <node id="1060">
        <label>flat_set&lt; asset_id_type &gt;</label>
      </node>
      <node id="1062">
        <label>string</label>
      </node>
      <node id="1063">
        <label>graphene::protocol::price</label>
        <link refid="structgraphene_1_1protocol_1_1price"/>
        <childnode refid="1064" relation="usage">
          <edgelabel>base</edgelabel>
          <edgelabel>quote</edgelabel>
        </childnode>
      </node>
      <node id="1057">
        <label>graphene::protocol::additional_asset_options</label>
        <link refid="structgraphene_1_1protocol_1_1additional__asset__options"/>
        <childnode refid="1058" relation="usage">
          <edgelabel>taker_fee_percent</edgelabel>
          <edgelabel>reward_percent</edgelabel>
        </childnode>
        <childnode refid="1059" relation="usage">
          <edgelabel>whitelist_market_fee_sharing</edgelabel>
        </childnode>
      </node>
      <node id="1059">
        <label>fc::optional&lt; flat_set&lt; account_id_type &gt; &gt;</label>
        <link refid="classfc_1_1optional"/>
      </node>
      <node id="1068">
        <label>account_id_type</label>
      </node>
      <node id="1065">
        <label>flat_set&lt; account_id_type &gt;</label>
      </node>
      <node id="1061">
        <label>fc::safe&lt; int64_t &gt;</label>
        <link refid="structfc_1_1safe"/>
      </node>
      <node id="1055">
        <label>graphene::protocol::asset_options</label>
        <link refid="structgraphene_1_1protocol_1_1asset__options"/>
        <childnode refid="1056" relation="usage">
          <edgelabel>extensions</edgelabel>
        </childnode>
        <childnode refid="1060" relation="usage">
          <edgelabel>whitelist_markets</edgelabel>
          <edgelabel>blacklist_markets</edgelabel>
        </childnode>
        <childnode refid="1061" relation="usage">
          <edgelabel>max_market_fee</edgelabel>
          <edgelabel>max_supply</edgelabel>
        </childnode>
        <childnode refid="1062" relation="usage">
          <edgelabel>description</edgelabel>
        </childnode>
        <childnode refid="1063" relation="usage">
          <edgelabel>core_exchange_rate</edgelabel>
        </childnode>
        <childnode refid="1065" relation="usage">
          <edgelabel>whitelist_authorities</edgelabel>
          <edgelabel>blacklist_authorities</edgelabel>
        </childnode>
      </node>
      <node id="1054">
        <label>fc::optional&lt; asset_bitasset_data_id_type &gt;</label>
        <link refid="classfc_1_1optional"/>
      </node>
      <node id="1064">
        <label>graphene::protocol::asset</label>
        <link refid="structgraphene_1_1protocol_1_1asset"/>
        <childnode refid="1061" relation="usage">
          <edgelabel>amount</edgelabel>
        </childnode>
      </node>
      <node id="1050">
        <label>graphene::chain::asset_object</label>
        <link refid="classgraphene_1_1chain_1_1asset__object"/>
        <childnode refid="1051" relation="public-inheritance">
        </childnode>
        <childnode refid="1054" relation="usage">
          <edgelabel>bitasset_data_id</edgelabel>
        </childnode>
        <childnode refid="1055" relation="usage">
          <edgelabel>options</edgelabel>
        </childnode>
        <childnode refid="1066" relation="usage">
          <edgelabel>for_liquidity_pool</edgelabel>
        </childnode>
        <childnode refid="1067" relation="usage">
          <edgelabel>buyback_account</edgelabel>
        </childnode>
        <childnode refid="1068" relation="usage">
          <edgelabel>issuer</edgelabel>
        </childnode>
        <childnode refid="1062" relation="usage">
          <edgelabel>symbol</edgelabel>
        </childnode>
      </node>
      <node id="1053">
        <label>graphene::db::object_id_type</label>
        <link refid="structgraphene_1_1db_1_1object__id__type"/>
      </node>
      <node id="1052">
        <label>graphene::db::object</label>
        <link refid="classgraphene_1_1db_1_1object"/>
        <childnode refid="1053" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="1056">
        <label>graphene::protocol::extension&lt; additional_asset_options &gt;</label>
        <link refid="structgraphene_1_1protocol_1_1extension"/>
        <childnode refid="1057" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="1067">
        <label>fc::optional&lt; account_id_type &gt;</label>
        <link refid="classfc_1_1optional"/>
      </node>
      <node id="1058">
        <label>fc::optional&lt; uint16_t &gt;</label>
        <link refid="classfc_1_1optional"/>
      </node>
    </collaborationgraph>
    <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="80" column="1" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="79" bodyend="223"/>
    <listofallmembers>
      <member refid="classgraphene_1_1chain_1_1asset__object_1afaedc7114c558ff392fd9e8c1a13d604" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>accumulate_fee</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a465f9c981c58c917ba624f046a4faf91" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>allow_confidential</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a7d8072234ad528c02eb309ea5ef33dfd" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>amount</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1ab62905a87a7c14ba60547475a7292430" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>amount_from_string</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a39a9dfe0de7766a0b4dfa46d0019fcd8" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>amount_to_pretty_string</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a32a58326aad37a490ea0ab1645ec4cda" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>amount_to_pretty_string</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a893a428ae64a08b2346b4cdf35bd7be5" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>amount_to_string</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1ab4cedf5d69891b6fa72645e550bbdfcb" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>amount_to_string</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1ad03b18a7831cba17992b23b7637d4f55" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>bitasset_data</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a5a69d1ef467d5eb7163fb4c301937066" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>bitasset_data_id</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a57ff2c36a04a2123d1dad48ea76049bc" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>buyback_account</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a71ba8139d1766733a0ba7f2d97485900" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>can_accumulate_fee</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1ac2cfe7604930f0628454e2a12208d300" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>can_create_new_supply</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a41ac7f0c909f35fb982b4abbb4ef1c04" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>can_force_settle</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a51e79fcd5120826c0a54d3f31adc2d40" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>can_global_settle</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a50965e28f32b8b9656459e955c044e45" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>can_override</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1acc4d19d3cc9c23eb6014f202cc965e6c" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>can_owner_update_icr</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a95d2b14079463c0d3993d50a1b6a17c5" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>can_owner_update_mcr</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a8f6657e8851cba631798a9054ca1298d" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>can_owner_update_mssr</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1aa80958612d73d8d79e19922ff488f615" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>can_update_max_supply</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a7f9ef13eef4a7200ce3ab89b076ce48a" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>charges_market_fees</name></member>
      <member refid="classgraphene_1_1db_1_1abstract__object_1ac88be3ec7e745113b522a77fda236415" prot="public" virt="virtual"><scope>graphene::chain::asset_object</scope><name>clone</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a85367857043568d480de982ae1b6518c" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>dynamic_asset_data_id</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1aef760d90c565be1702501372ba244c11" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>dynamic_data</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a179fd11dac23e45085e27cca5ec8e794" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>for_liquidity_pool</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1aea2a970fc575de18a3366ac1549b1f2b" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>get_id</name></member>
      <member refid="classgraphene_1_1db_1_1object_1a2ce812569d565a45dda1420cfbdf79ad" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>id</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a7222ffbcd2b5cbe00a4002dd717e4353" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>is_liquidity_pool_share_asset</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1adebdf0e788fbe2e33510ac7e32aa804e" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>is_market_issued</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1afa9ab58b0672eeb3d0a5bbe4b533a84f" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>is_transfer_restricted</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1ac15166dec400e72604ecdbb6d25ae800" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>is_valid_symbol</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1ad5274b71ad420b57da53c3ef80b95577" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>issuer</name></member>
      <member refid="classgraphene_1_1db_1_1abstract__object_1ad7329292e8fa9035cf2596d72c4868b5" prot="public" virt="virtual"><scope>graphene::chain::asset_object</scope><name>move_from</name></member>
      <member refid="classgraphene_1_1db_1_1object_1a64864992a46d9d52836afe1a52a2e394" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>object</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a51510fee637f062e6db9cfc0986fcf49" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>options</name></member>
      <member refid="classgraphene_1_1db_1_1abstract__object_1ac4ac2d1b3162ff0ce00d050fd4184433" prot="public" virt="virtual"><scope>graphene::chain::asset_object</scope><name>pack</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a7169594e64f681273a6ece486de9ef38" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>precision</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a78faf9fefe83b3d0f1de70d089a4ec78" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>reserved</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1add8ca6d9e7e0468d2fac122e32a9601e" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>space_id</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a089165870abab6b77345acea240937b6" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>symbol</name></member>
      <member refid="classgraphene_1_1db_1_1abstract__object_1a8c952ac795604b0d1da988e88b8bb0fb" prot="public" virt="virtual"><scope>graphene::chain::asset_object</scope><name>to_variant</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a6b28040667050c6a0c1db5b647bcbc73" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>type_id</name></member>
      <member refid="classgraphene_1_1chain_1_1asset__object_1a2a517881061a6f9b9b8437223e248994" prot="public" virt="non-virtual"><scope>graphene::chain::asset_object</scope><name>validate</name></member>
      <member refid="classgraphene_1_1db_1_1object_1ac457a859418c22014c07a3bcdc67ed04" prot="public" virt="virtual"><scope>graphene::chain::asset_object</scope><name>~object</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
