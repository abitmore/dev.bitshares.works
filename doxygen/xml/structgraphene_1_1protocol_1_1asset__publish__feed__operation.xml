<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structgraphene_1_1protocol_1_1asset__publish__feed__operation" kind="struct" language="C++" prot="public">
    <compoundname>graphene::protocol::asset_publish_feed_operation</compoundname>
    <basecompoundref refid="structgraphene_1_1protocol_1_1base__operation" prot="public" virt="non-virtual">graphene::protocol::base_operation</basecompoundref>
    <includes refid="asset__ops_8hpp" local="no">asset_ops.hpp</includes>
    <innerclass refid="structgraphene_1_1protocol_1_1asset__publish__feed__operation_1_1ext" prot="public">graphene::protocol::asset_publish_feed_operation::ext</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1asset__publish__feed__operation_1_1fee__parameters__type" prot="public">graphene::protocol::asset_publish_feed_operation::fee_parameters_type</innerclass>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1asset__publish__feed__operation_1a9675e1200cec55276cc08a1741806bd3" prot="public" static="no" mutable="no">
        <type><ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref></type>
        <definition>asset graphene::protocol::asset_publish_feed_operation::fee</definition>
        <argsstring></argsstring>
        <name>fee</name>
        <briefdescription>
<para>paid for by publisher </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="467" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset_ops.hpp" bodystart="467" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1asset__publish__feed__operation_1ae1cfe13e0fc7d9c145401b9eca2a17e6" prot="public" static="no" mutable="no">
        <type>account_id_type</type>
        <definition>account_id_type graphene::protocol::asset_publish_feed_operation::publisher</definition>
        <argsstring></argsstring>
        <name>publisher</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="468" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset_ops.hpp" bodystart="468" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1asset__publish__feed__operation_1a1fdcd3c597d1ae15d00e1468439d737e" prot="public" static="no" mutable="no">
        <type>asset_id_type</type>
        <definition>asset_id_type graphene::protocol::asset_publish_feed_operation::asset_id</definition>
        <argsstring></argsstring>
        <name>asset_id</name>
        <briefdescription>
<para>asset for which the feed is published </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="469" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset_ops.hpp" bodystart="469" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1asset__publish__feed__operation_1abe64178cd09d6fb55ad940684e2073ca" prot="public" static="no" mutable="no">
        <type><ref refid="structgraphene_1_1protocol_1_1price__feed" kindref="compound">price_feed</ref></type>
        <definition>price_feed graphene::protocol::asset_publish_feed_operation::feed</definition>
        <argsstring></argsstring>
        <name>feed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="470" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset_ops.hpp" bodystart="470" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1asset__publish__feed__operation_1ab7fb39111eaad7483ce7bf24d021df85" prot="public" static="no" mutable="no">
        <type><ref refid="structgraphene_1_1protocol_1_1extension" kindref="compound">extension</ref>&lt; <ref refid="structgraphene_1_1protocol_1_1asset__publish__feed__operation_1_1ext" kindref="compound">ext</ref> &gt;</type>
        <definition>extension&lt;ext&gt; graphene::protocol::asset_publish_feed_operation::extensions</definition>
        <argsstring></argsstring>
        <name>extensions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="471" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset_ops.hpp" bodystart="471" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1asset__publish__feed__operation_1aad4cbde23089106e3d6d11dade15cbb7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>account_id_type</type>
        <definition>account_id_type graphene::protocol::asset_publish_feed_operation::fee_payer</definition>
        <argsstring>() const</argsstring>
        <name>fee_payer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="473" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset_ops.hpp" bodystart="473" bodyend="473"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1asset__publish__feed__operation_1ad9a56625142d8670f2e0febc8a42cb64" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void graphene::protocol::asset_publish_feed_operation::validate</definition>
        <argsstring>() const</argsstring>
        <name>validate</name>
        <reimplements refid="structgraphene_1_1protocol_1_1base__operation_1a23d617a6fa0921d3f5b51dd5167e7a29">validate</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="474" column="1" bodyfile="libraries/protocol/asset_ops.cpp" bodystart="166" bodyend="190"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Publish price feeds for market-issued assets</para><para>Price feed providers use this operation to publish their price feeds for market-issued assets. A price feed is used to tune the market for a particular market-issued asset. For each value in the feed, the median across all committee_member feeds for that asset is calculated and the market for the asset is configured with the median of that value. </para>    </briefdescription>
    <detaileddescription>
<para>The feed in the operation contains three prices: a call price limit, a short price limit, and a settlement price. The call limit price is structured as (collateral asset) / (debt asset) and the short limit price is structured as (asset for sale) / (collateral asset). Note that the asset IDs are opposite to eachother, so if we&apos;re publishing a feed for USD, the call limit price will be CORE/USD and the short limit price will be USD/CORE. The settlement price may be flipped either direction, as long as it is a ratio between the market-issued asset and its collateral. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="1083">
        <label>graphene::protocol::base_operation</label>
        <link refid="structgraphene_1_1protocol_1_1base__operation"/>
      </node>
      <node id="1082">
        <label>graphene::protocol::asset_publish_feed_operation</label>
        <link refid="structgraphene_1_1protocol_1_1asset__publish__feed__operation"/>
        <childnode refid="1083" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1091">
        <label>graphene::protocol::extension&lt; graphene::protocol::asset_publish_feed_operation::ext &gt;</label>
        <link refid="structgraphene_1_1protocol_1_1extension"/>
        <childnode refid="1092" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="1092">
        <label>graphene::protocol::asset_publish_feed_operation::ext</label>
        <link refid="structgraphene_1_1protocol_1_1asset__publish__feed__operation_1_1ext"/>
        <childnode refid="1093" relation="usage">
          <edgelabel>initial_collateral_ratio</edgelabel>
        </childnode>
      </node>
      <node id="1090">
        <label>graphene::protocol::price</label>
        <link refid="structgraphene_1_1protocol_1_1price"/>
        <childnode refid="1086" relation="usage">
          <edgelabel>base</edgelabel>
          <edgelabel>quote</edgelabel>
        </childnode>
      </node>
      <node id="1088">
        <label>account_id_type</label>
      </node>
      <node id="1087">
        <label>fc::safe&lt; int64_t &gt;</label>
        <link refid="structfc_1_1safe"/>
      </node>
      <node id="1089">
        <label>graphene::protocol::price_feed</label>
        <link refid="structgraphene_1_1protocol_1_1price__feed"/>
        <childnode refid="1090" relation="usage">
          <edgelabel>core_exchange_rate</edgelabel>
          <edgelabel>settlement_price</edgelabel>
        </childnode>
      </node>
      <node id="1085">
        <label>graphene::protocol::base_operation</label>
        <link refid="structgraphene_1_1protocol_1_1base__operation"/>
      </node>
      <node id="1086">
        <label>graphene::protocol::asset</label>
        <link refid="structgraphene_1_1protocol_1_1asset"/>
        <childnode refid="1087" relation="usage">
          <edgelabel>amount</edgelabel>
        </childnode>
      </node>
      <node id="1093">
        <label>fc::optional&lt; uint16_t &gt;</label>
        <link refid="classfc_1_1optional"/>
      </node>
      <node id="1084">
        <label>graphene::protocol::asset_publish_feed_operation</label>
        <link refid="structgraphene_1_1protocol_1_1asset__publish__feed__operation"/>
        <childnode refid="1085" relation="public-inheritance">
        </childnode>
        <childnode refid="1086" relation="usage">
          <edgelabel>fee</edgelabel>
        </childnode>
        <childnode refid="1088" relation="usage">
          <edgelabel>publisher</edgelabel>
        </childnode>
        <childnode refid="1089" relation="usage">
          <edgelabel>feed</edgelabel>
        </childnode>
        <childnode refid="1091" relation="usage">
          <edgelabel>extensions</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="458" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset_ops.hpp" bodystart="457" bodyend="475"/>
    <listofallmembers>
      <member refid="structgraphene_1_1protocol_1_1asset__publish__feed__operation_1a1fdcd3c597d1ae15d00e1468439d737e" prot="public" virt="non-virtual"><scope>graphene::protocol::asset_publish_feed_operation</scope><name>asset_id</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1aaccb0fa71ee529cf62324baaa99988fe" prot="public" virt="non-virtual"><scope>graphene::protocol::asset_publish_feed_operation</scope><name>calculate_data_fee</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1a0be44badcee9a648413eb906dac1d3b3" prot="public" virt="non-virtual"><scope>graphene::protocol::asset_publish_feed_operation</scope><name>calculate_fee</name></member>
      <member refid="structgraphene_1_1protocol_1_1asset__publish__feed__operation_1ab7fb39111eaad7483ce7bf24d021df85" prot="public" virt="non-virtual"><scope>graphene::protocol::asset_publish_feed_operation</scope><name>extensions</name></member>
      <member refid="structgraphene_1_1protocol_1_1asset__publish__feed__operation_1a9675e1200cec55276cc08a1741806bd3" prot="public" virt="non-virtual"><scope>graphene::protocol::asset_publish_feed_operation</scope><name>fee</name></member>
      <member refid="structgraphene_1_1protocol_1_1asset__publish__feed__operation_1aad4cbde23089106e3d6d11dade15cbb7" prot="public" virt="non-virtual"><scope>graphene::protocol::asset_publish_feed_operation</scope><name>fee_payer</name></member>
      <member refid="structgraphene_1_1protocol_1_1asset__publish__feed__operation_1abe64178cd09d6fb55ad940684e2073ca" prot="public" virt="non-virtual"><scope>graphene::protocol::asset_publish_feed_operation</scope><name>feed</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1a89ed7c6e7da93cd99bb41bc8d7e2627b" prot="public" virt="virtual"><scope>graphene::protocol::asset_publish_feed_operation</scope><name>get_required_active_authorities</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1aabc48ce97877c67ff560b94284a7c0bb" prot="public" virt="virtual"><scope>graphene::protocol::asset_publish_feed_operation</scope><name>get_required_authorities</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1a3251978e7bd0bb2f2fa23bcea5dee95c" prot="public" virt="virtual"><scope>graphene::protocol::asset_publish_feed_operation</scope><name>get_required_owner_authorities</name></member>
      <member refid="structgraphene_1_1protocol_1_1asset__publish__feed__operation_1ae1cfe13e0fc7d9c145401b9eca2a17e6" prot="public" virt="non-virtual"><scope>graphene::protocol::asset_publish_feed_operation</scope><name>publisher</name></member>
      <member refid="structgraphene_1_1protocol_1_1asset__publish__feed__operation_1ad9a56625142d8670f2e0febc8a42cb64" prot="public" virt="virtual"><scope>graphene::protocol::asset_publish_feed_operation</scope><name>validate</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1a485f3d3b963ff4c081af85945cf27774" prot="public" virt="non-virtual"><scope>graphene::protocol::asset_publish_feed_operation</scope><name>validate_parallel</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
