<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classgraphene_1_1app_1_1database__api__impl" kind="class" language="C++" prot="public">
    <compoundname>graphene::app::database_api_impl</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::enable_shared_from_this&lt; database_api_impl &gt;</basecompoundref>
    <includes refid="database__api__impl_8hxx" local="no">database_api_impl.hxx</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classgraphene_1_1app_1_1database__api__impl_1a44bb83df538540ec0d969c739f28c589" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool graphene::app::database_api_impl::_notify_remove_create</definition>
        <argsstring></argsstring>
        <name>_notify_remove_create</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="451" column="1" bodyfile="libraries/app/database_api_impl.hxx" bodystart="451" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1database__api__impl_1a4bfce46e305ae20b9925122fb709172f" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool graphene::app::database_api_impl::_enabled_auto_subscription</definition>
        <argsstring></argsstring>
        <name>_enabled_auto_subscription</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="452" column="1" bodyfile="libraries/app/database_api_impl.hxx" bodystart="452" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1database__api__impl_1add7a21998f28a6c4aea41006eb1ff022" prot="public" static="no" mutable="yes">
        <type><ref refid="classfc_1_1bloom__filter" kindref="compound">fc::bloom_filter</ref></type>
        <definition>fc::bloom_filter graphene::app::database_api_impl::_subscribe_filter</definition>
        <argsstring></argsstring>
        <name>_subscribe_filter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="454" column="1" bodyfile="libraries/app/database_api_impl.hxx" bodystart="454" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1database__api__impl_1acab1dea5c17660083df33c2bddc204e2" prot="public" static="no" mutable="no">
        <type>std::set&lt; account_id_type &gt;</type>
        <definition>std::set&lt;account_id_type&gt; graphene::app::database_api_impl::_subscribed_accounts</definition>
        <argsstring></argsstring>
        <name>_subscribed_accounts</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="455" column="1" bodyfile="libraries/app/database_api_impl.hxx" bodystart="455" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1database__api__impl_1af716153167cbb37816d69a69cd8391ee" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="classfc_1_1variant" kindref="compound">fc::variant</ref> &amp;)&gt;</type>
        <definition>std::function&lt;void(const fc::variant&amp;)&gt; graphene::app::database_api_impl::_subscribe_callback</definition>
        <argsstring></argsstring>
        <name>_subscribe_callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="457" column="1" bodyfile="libraries/app/database_api_impl.hxx" bodystart="457" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1database__api__impl_1adfbd822d409be041227ec58c94f95db8" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="classfc_1_1variant" kindref="compound">fc::variant</ref> &amp;)&gt;</type>
        <definition>std::function&lt;void(const fc::variant&amp;)&gt; graphene::app::database_api_impl::_pending_trx_callback</definition>
        <argsstring></argsstring>
        <name>_pending_trx_callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="458" column="1" bodyfile="libraries/app/database_api_impl.hxx" bodystart="458" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1database__api__impl_1a79f338b26855b0a580f74e47e0600758" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="classfc_1_1variant" kindref="compound">fc::variant</ref> &amp;)&gt;</type>
        <definition>std::function&lt;void(const fc::variant&amp;)&gt; graphene::app::database_api_impl::_block_applied_callback</definition>
        <argsstring></argsstring>
        <name>_block_applied_callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="459" column="1" bodyfile="libraries/app/database_api_impl.hxx" bodystart="459" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1database__api__impl_1ae432b4993936147dcd5e8ac87bc087eb" prot="public" static="no" mutable="no">
        <type>boost::signals2::scoped_connection</type>
        <definition>boost::signals2::scoped_connection graphene::app::database_api_impl::_new_connection</definition>
        <argsstring></argsstring>
        <name>_new_connection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="461" column="1" bodyfile="libraries/app/database_api_impl.hxx" bodystart="461" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1database__api__impl_1a08837ce80550808d16dc34e85258f40f" prot="public" static="no" mutable="no">
        <type>boost::signals2::scoped_connection</type>
        <definition>boost::signals2::scoped_connection graphene::app::database_api_impl::_change_connection</definition>
        <argsstring></argsstring>
        <name>_change_connection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="462" column="1" bodyfile="libraries/app/database_api_impl.hxx" bodystart="462" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1database__api__impl_1a499df6660549b1f8b430a8c4a612c72e" prot="public" static="no" mutable="no">
        <type>boost::signals2::scoped_connection</type>
        <definition>boost::signals2::scoped_connection graphene::app::database_api_impl::_removed_connection</definition>
        <argsstring></argsstring>
        <name>_removed_connection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="463" column="1" bodyfile="libraries/app/database_api_impl.hxx" bodystart="463" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1database__api__impl_1a3986f9637134d0f91d711c7ff4df7189" prot="public" static="no" mutable="no">
        <type>boost::signals2::scoped_connection</type>
        <definition>boost::signals2::scoped_connection graphene::app::database_api_impl::_applied_block_connection</definition>
        <argsstring></argsstring>
        <name>_applied_block_connection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="464" column="1" bodyfile="libraries/app/database_api_impl.hxx" bodystart="464" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1database__api__impl_1a3a55e04699d428f42c9a69672d488105" prot="public" static="no" mutable="no">
        <type>boost::signals2::scoped_connection</type>
        <definition>boost::signals2::scoped_connection graphene::app::database_api_impl::_pending_trx_connection</definition>
        <argsstring></argsstring>
        <name>_pending_trx_connection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="465" column="1" bodyfile="libraries/app/database_api_impl.hxx" bodystart="465" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1database__api__impl_1a466336fd22c476e6b2e0b4e52ef6dce5" prot="public" static="no" mutable="no">
        <type>map&lt; pair&lt; asset_id_type, asset_id_type &gt;, std::function&lt; void(const variant &amp;)&gt; &gt;</type>
        <definition>map&lt; pair&lt;asset_id_type,asset_id_type&gt;, std::function&lt;void(const variant&amp;)&gt; &gt; graphene::app::database_api_impl::_market_subscriptions</definition>
        <argsstring></argsstring>
        <name>_market_subscriptions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="467" column="1" bodyfile="libraries/app/database_api_impl.hxx" bodystart="467" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1database__api__impl_1a1da4ab9154f9a30bae71e183b202d1e1" prot="public" static="no" mutable="no">
        <type><ref refid="classgraphene_1_1chain_1_1database" kindref="compound">graphene::chain::database</ref> &amp;</type>
        <definition>graphene::chain::database&amp; graphene::app::database_api_impl::_db</definition>
        <argsstring></argsstring>
        <name>_db</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="469" column="1" bodyfile="libraries/app/database_api_impl.hxx" bodystart="469" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1database__api__impl_1adfa5d54e19c7fd76f2357dab88b305be" prot="public" static="no" mutable="no">
        <type>const <ref refid="classgraphene_1_1app_1_1application__options" kindref="compound">application_options</ref> *</type>
        <definition>const application_options* graphene::app::database_api_impl::_app_options</definition>
        <argsstring></argsstring>
        <name>_app_options</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="470" column="1" bodyfile="libraries/app/database_api_impl.hxx" bodystart="470" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1database__api__impl_1ae878a059b25940c3128df69eac716387" prot="public" static="no" mutable="no">
        <type>const <ref refid="classgraphene_1_1api__helper__indexes_1_1amount__in__collateral__index" kindref="compound">graphene::api_helper_indexes::amount_in_collateral_index</ref> *</type>
        <definition>const graphene::api_helper_indexes::amount_in_collateral_index* graphene::app::database_api_impl::amount_in_collateral_index</definition>
        <argsstring></argsstring>
        <name>amount_in_collateral_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="472" column="1" bodyfile="libraries/app/database_api_impl.hxx" bodystart="472" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1database__api__impl_1a763e2b91c01dfb19f0c353fe63a880c2" prot="public" static="no" mutable="no">
        <type>const <ref refid="classgraphene_1_1api__helper__indexes_1_1asset__in__liquidity__pools__index" kindref="compound">graphene::api_helper_indexes::asset_in_liquidity_pools_index</ref> *</type>
        <definition>const graphene::api_helper_indexes::asset_in_liquidity_pools_index* graphene::app::database_api_impl::asset_in_liquidity_pools_index</definition>
        <argsstring></argsstring>
        <name>asset_in_liquidity_pools_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="473" column="1" bodyfile="libraries/app/database_api_impl.hxx" bodystart="473" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ada366a6d7683a99bdfd996083a5c8a12" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::app::database_api_impl::database_api_impl</definition>
        <argsstring>(graphene::chain::database &amp;db, const application_options *app_options)</argsstring>
        <name>database_api_impl</name>
        <param>
          <type><ref refid="classgraphene_1_1chain_1_1database" kindref="compound">graphene::chain::database</ref> &amp;</type>
          <declname>db</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1app_1_1application__options" kindref="compound">application_options</ref> *</type>
          <declname>app_options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="39" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="55" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a89f8d316670134c3faa5fb07032603cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>graphene::app::database_api_impl::~database_api_impl</definition>
        <argsstring>()</argsstring>
        <name>~database_api_impl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="40" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="99" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a10174ed5a3ba9557db9f936e68341021" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacefc_1a2e5e6bdb302dfb79e684336f3fbbd8bc" kindref="member">fc::variants</ref></type>
        <definition>fc::variants graphene::app::database_api_impl::get_objects</definition>
        <argsstring>(const vector&lt; object_id_type &gt; &amp;ids, optional&lt; bool &gt; subscribe) const </argsstring>
        <name>get_objects</name>
        <param>
          <type>const vector&lt; object_id_type &gt; &amp;</type>
          <declname>ids</declname>
        </param>
        <param>
          <type>optional&lt; bool &gt;</type>
          <declname>subscribe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="43" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="115" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a9efad1951dada7a463e304d5ade154ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::database_api_impl::set_subscribe_callback</definition>
        <argsstring>(std::function&lt; void(const variant &amp;)&gt; cb, bool notify_remove_create)</argsstring>
        <name>set_subscribe_callback</name>
        <param>
          <type>std::function&lt; void(const variant &amp;)&gt;</type>
          <declname>cb</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>notify_remove_create</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="46" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="147" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a4723adbefd08c756b2e866d36b6c6215" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::database_api_impl::set_auto_subscription</definition>
        <argsstring>(bool enable)</argsstring>
        <name>set_auto_subscription</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="47" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="166" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a0ab92833cf9e6fa7b6a6b7472b2f36a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::database_api_impl::set_pending_transaction_callback</definition>
        <argsstring>(std::function&lt; void(const variant &amp;)&gt; cb)</argsstring>
        <name>set_pending_transaction_callback</name>
        <param>
          <type>std::function&lt; void(const variant &amp;)&gt;</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="48" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="176" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1aaa7ad36ef0da4021fc4dea51449014bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::database_api_impl::set_block_applied_callback</definition>
        <argsstring>(std::function&lt; void(const variant &amp;block_id)&gt; cb)</argsstring>
        <name>set_block_applied_callback</name>
        <param>
          <type>std::function&lt; void(const variant &amp;block_id)&gt;</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="49" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="186" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a10a111caefade7a34e2561598a19e4e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::database_api_impl::cancel_all_subscriptions</definition>
        <argsstring>(bool reset_callback, bool reset_market_subscriptions)</argsstring>
        <name>cancel_all_subscriptions</name>
        <param>
          <type>bool</type>
          <declname>reset_callback</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reset_market_subscriptions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="50" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="196" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1abddd3de3ec7554f51feca1d2c2449545" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>optional&lt; <ref refid="classgraphene_1_1protocol_1_1block__header" kindref="compound">block_header</ref> &gt;</type>
        <definition>optional&lt; block_header &gt; graphene::app::database_api_impl::get_block_header</definition>
        <argsstring>(uint32_t block_num) const </argsstring>
        <name>get_block_header</name>
        <param>
          <type>uint32_t</type>
          <declname>block_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="53" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="221" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a2af82d8456f2cb69c404d16afb507531" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>map&lt; uint32_t, optional&lt; <ref refid="classgraphene_1_1protocol_1_1block__header" kindref="compound">block_header</ref> &gt; &gt;</type>
        <definition>map&lt; uint32_t, optional&lt; block_header &gt; &gt; graphene::app::database_api_impl::get_block_header_batch</definition>
        <argsstring>(const vector&lt; uint32_t &gt; block_nums) const </argsstring>
        <name>get_block_header_batch</name>
        <param>
          <type>const vector&lt; uint32_t &gt;</type>
          <declname>block_nums</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="54" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="233" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a4f8ca77969a3a47743bdc66f021679f5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>optional&lt; <ref refid="classgraphene_1_1protocol_1_1signed__block" kindref="compound">signed_block</ref> &gt;</type>
        <definition>optional&lt; signed_block &gt; graphene::app::database_api_impl::get_block</definition>
        <argsstring>(uint32_t block_num) const </argsstring>
        <name>get_block</name>
        <param>
          <type>uint32_t</type>
          <declname>block_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="55" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="249" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a7431aaf8efbb6294542aab30e2ba0b6b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1processed__transaction" kindref="compound">processed_transaction</ref></type>
        <definition>processed_transaction graphene::app::database_api_impl::get_transaction</definition>
        <argsstring>(uint32_t block_num, uint32_t trx_in_block) const </argsstring>
        <name>get_transaction</name>
        <param>
          <type>uint32_t</type>
          <declname>block_num</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>trx_in_block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="56" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="268" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a7bbbd8340e3a055bc364347a274b4088" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgraphene_1_1chain_1_1chain__property__object" kindref="compound">chain_property_object</ref></type>
        <definition>chain_property_object graphene::app::database_api_impl::get_chain_properties</definition>
        <argsstring>() const </argsstring>
        <name>get_chain_properties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="59" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="287" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a725dc238410a57fc9196fb58a51651ca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgraphene_1_1chain_1_1global__property__object" kindref="compound">global_property_object</ref></type>
        <definition>global_property_object graphene::app::database_api_impl::get_global_properties</definition>
        <argsstring>() const </argsstring>
        <name>get_global_properties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="60" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="297" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1adc5103c45a6cdfb1fe22994a638b5e23" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1variant__object" kindref="compound">fc::variant_object</ref></type>
        <definition>fc::variant_object graphene::app::database_api_impl::get_config</definition>
        <argsstring>() const </argsstring>
        <name>get_config</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="61" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="307" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ae1ef8481ac7c44930bfe5be02f2e117c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegraphene_1_1protocol_1a56354f39ed89f6a0a13fe90ba8228809" kindref="member">chain_id_type</ref></type>
        <definition>chain_id_type graphene::app::database_api_impl::get_chain_id</definition>
        <argsstring>() const </argsstring>
        <name>get_chain_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="62" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="317" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a8b3661d0ff3e8a803dd482d78db969d4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgraphene_1_1chain_1_1dynamic__global__property__object" kindref="compound">dynamic_global_property_object</ref></type>
        <definition>dynamic_global_property_object graphene::app::database_api_impl::get_dynamic_global_properties</definition>
        <argsstring>() const </argsstring>
        <name>get_dynamic_global_properties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="63" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="327" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ac413a2c0d519844f64fcfdd42d6ed07c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; flat_set&lt; account_id_type &gt; &gt;</type>
        <definition>vector&lt; flat_set&lt; account_id_type &gt; &gt; graphene::app::database_api_impl::get_key_references</definition>
        <argsstring>(vector&lt; public_key_type &gt; key) const </argsstring>
        <name>get_key_references</name>
        <param>
          <type>vector&lt; public_key_type &gt;</type>
          <declname>key</declname>
          <defname>keys</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>all accounts that referr to the key or account id in their owner or active authorities. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="66" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="346" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a90693014fb37a83d5312e0ead1529545" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::app::database_api_impl::is_public_key_registered</definition>
        <argsstring>(string public_key) const </argsstring>
        <name>is_public_key_registered</name>
        <param>
          <type>string</type>
          <declname>public_key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="67" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="404" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ab3403f35315c6897e2a8c932d06d90ab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>account_id_type</type>
        <definition>account_id_type graphene::app::database_api_impl::get_account_id_from_string</definition>
        <argsstring>(const std::string &amp;name_or_id) const </argsstring>
        <name>get_account_id_from_string</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name_or_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a8a4126a29ea149d26c165600ec82308c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; optional&lt; <ref refid="classgraphene_1_1chain_1_1account__object" kindref="compound">account_object</ref> &gt; &gt;</type>
        <definition>vector&lt; optional&lt; account_object &gt; &gt; graphene::app::database_api_impl::get_accounts</definition>
        <argsstring>(const vector&lt; std::string &gt; &amp;account_names_or_ids, optional&lt; bool &gt; subscribe) const </argsstring>
        <name>get_accounts</name>
        <param>
          <type>const vector&lt; std::string &gt; &amp;</type>
          <declname>account_names_or_ids</declname>
        </param>
        <param>
          <type>optional&lt; bool &gt;</type>
          <declname>subscribe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="71" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="450" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a7d7b0e58cdc997f431dd80bfab9da0ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; string, <ref refid="structgraphene_1_1app_1_1full__account" kindref="compound">full_account</ref> &gt;</type>
        <definition>std::map&lt; std::string, full_account &gt; graphene::app::database_api_impl::get_full_accounts</definition>
        <argsstring>(const vector&lt; string &gt; &amp;names_or_ids, optional&lt; bool &gt; subscribe)</argsstring>
        <name>get_full_accounts</name>
        <param>
          <type>const vector&lt; string &gt; &amp;</type>
          <declname>names_or_ids</declname>
        </param>
        <param>
          <type>optional&lt; bool &gt;</type>
          <declname>subscribe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="73" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="479" bodyend="656"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1afff241ae460cd5a5f8b97f2c4131cedf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1account__statistics__object" kindref="compound">account_statistics_object</ref> &gt;</type>
        <definition>vector&lt; account_statistics_object &gt; graphene::app::database_api_impl::get_top_voters</definition>
        <argsstring>(uint32_t limit) const </argsstring>
        <name>get_top_voters</name>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="75" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="658" bodyend="677"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ac5c1fd29358dcde88ec644292de59304" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>optional&lt; <ref refid="classgraphene_1_1chain_1_1account__object" kindref="compound">account_object</ref> &gt;</type>
        <definition>optional&lt; account_object &gt; graphene::app::database_api_impl::get_account_by_name</definition>
        <argsstring>(string name) const </argsstring>
        <name>get_account_by_name</name>
        <param>
          <type>string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="76" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="684" bodyend="691"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a0f794f3c0a8ef81a30577bad0f407234" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; account_id_type &gt;</type>
        <definition>vector&lt; account_id_type &gt; graphene::app::database_api_impl::get_account_references</definition>
        <argsstring>(const std::string account_id_or_name) const </argsstring>
        <name>get_account_references</name>
        <param>
          <type>const std::string</type>
          <declname>account_id_or_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="77" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="698" bodyend="717"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1aea1a4b897b054bd5f080a41380325187" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; optional&lt; <ref refid="classgraphene_1_1chain_1_1account__object" kindref="compound">account_object</ref> &gt; &gt;</type>
        <definition>vector&lt; optional&lt; account_object &gt; &gt; graphene::app::database_api_impl::lookup_account_names</definition>
        <argsstring>(const vector&lt; string &gt; &amp;account_names) const </argsstring>
        <name>lookup_account_names</name>
        <param>
          <type>const vector&lt; string &gt; &amp;</type>
          <declname>account_names</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="78" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="724" bodyend="727"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a37ddf5c70d13f996627fa7d0600afa56" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>map&lt; string, account_id_type &gt;</type>
        <definition>map&lt; string, account_id_type &gt; graphene::app::database_api_impl::lookup_accounts</definition>
        <argsstring>(const string &amp;lower_bound_name, uint32_t limit, optional&lt; bool &gt; subscribe) const </argsstring>
        <name>lookup_accounts</name>
        <param>
          <type>const string &amp;</type>
          <declname>lower_bound_name</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <param>
          <type>optional&lt; bool &gt;</type>
          <declname>subscribe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="79" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="736" bodyend="763"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a533c834442d9e8fbaeae5eb24d4fe8c5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t graphene::app::database_api_impl::get_account_count</definition>
        <argsstring>() const </argsstring>
        <name>get_account_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="82" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="770" bodyend="773"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a055549cea17490afff9dac6d630dc00f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &gt;</type>
        <definition>vector&lt; asset &gt; graphene::app::database_api_impl::get_account_balances</definition>
        <argsstring>(const std::string &amp;account_name_or_id, const flat_set&lt; asset_id_type &gt; &amp;assets) const </argsstring>
        <name>get_account_balances</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>account_name_or_id</declname>
        </param>
        <param>
          <type>const flat_set&lt; asset_id_type &gt; &amp;</type>
          <declname>assets</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="85" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="787" bodyend="811"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a19c305c96963c8204e73496be2a3686c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &gt;</type>
        <definition>vector&lt;asset&gt; graphene::app::database_api_impl::get_named_account_balances</definition>
        <argsstring>(const std::string &amp;name, const flat_set&lt; asset_id_type &gt; &amp;assets) const </argsstring>
        <name>get_named_account_balances</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const flat_set&lt; asset_id_type &gt; &amp;</type>
          <declname>assets</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a4b67f755903be7bed1eb3f61366161ed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1balance__object" kindref="compound">balance_object</ref> &gt;</type>
        <definition>vector&lt; balance_object &gt; graphene::app::database_api_impl::get_balance_objects</definition>
        <argsstring>(const vector&lt; address &gt; &amp;addrs) const </argsstring>
        <name>get_balance_objects</name>
        <param>
          <type>const vector&lt; address &gt; &amp;</type>
          <declname>addrs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="88" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="824" bodyend="845"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a5b6aa904561263226f7a1c9e156f65e2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &gt;</type>
        <definition>vector&lt; asset &gt; graphene::app::database_api_impl::get_vested_balances</definition>
        <argsstring>(const vector&lt; balance_id_type &gt; &amp;objs) const </argsstring>
        <name>get_vested_balances</name>
        <param>
          <type>const vector&lt; balance_id_type &gt; &amp;</type>
          <declname>objs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="89" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="852" bodyend="863"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a6af355faed9f24cc2d194cfad42d356d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1vesting__balance__object" kindref="compound">vesting_balance_object</ref> &gt;</type>
        <definition>vector&lt; vesting_balance_object &gt; graphene::app::database_api_impl::get_vesting_balances</definition>
        <argsstring>(const std::string account_id_or_name) const </argsstring>
        <name>get_vesting_balances</name>
        <param>
          <type>const std::string</type>
          <declname>account_id_or_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="90" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="870" bodyend="885"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ab8fe38b14e9f6338ad37cfa9ebfc0a0c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t graphene::app::database_api_impl::get_asset_count</definition>
        <argsstring>() const </argsstring>
        <name>get_asset_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="93" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="957" bodyend="960"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1af3e92e9a866e031d0cf60d4abc9535f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>asset_id_type</type>
        <definition>asset_id_type graphene::app::database_api_impl::get_asset_id_from_string</definition>
        <argsstring>(const std::string &amp;symbol_or_id) const </argsstring>
        <name>get_asset_id_from_string</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>symbol_or_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1adabaa7294e88ec538087b166a1c75c14" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; optional&lt; <ref refid="structgraphene_1_1app_1_1extended__asset__object" kindref="compound">extended_asset_object</ref> &gt; &gt;</type>
        <definition>vector&lt; optional&lt; extended_asset_object &gt; &gt; graphene::app::database_api_impl::get_assets</definition>
        <argsstring>(const vector&lt; std::string &gt; &amp;asset_symbols_or_ids, optional&lt; bool &gt; subscribe) const </argsstring>
        <name>get_assets</name>
        <param>
          <type>const vector&lt; std::string &gt; &amp;</type>
          <declname>asset_symbols_or_ids</declname>
        </param>
        <param>
          <type>optional&lt; bool &gt;</type>
          <declname>subscribe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="95" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="905" bodyend="922"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a50271ce8eea13e6fd9f70ae379480b28" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1app_1_1extended__asset__object" kindref="compound">extended_asset_object</ref> &gt;</type>
        <definition>vector&lt; extended_asset_object &gt; graphene::app::database_api_impl::list_assets</definition>
        <argsstring>(const string &amp;lower_bound_symbol, uint32_t limit) const </argsstring>
        <name>list_assets</name>
        <param>
          <type>const string &amp;</type>
          <declname>lower_bound_symbol</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="97" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="929" bodyend="950"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1abdec67b9eb3e7b489808834310151e65" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; optional&lt; <ref refid="structgraphene_1_1app_1_1extended__asset__object" kindref="compound">extended_asset_object</ref> &gt; &gt;</type>
        <definition>vector&lt; optional&lt; extended_asset_object &gt; &gt; graphene::app::database_api_impl::lookup_asset_symbols</definition>
        <argsstring>(const vector&lt; string &gt; &amp;symbols_or_ids) const </argsstring>
        <name>lookup_asset_symbols</name>
        <param>
          <type>const vector&lt; string &gt; &amp;</type>
          <declname>symbols_or_ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="98" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="996" bodyend="1000"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a77b7dbf50bd779270cf31eb28f7f64be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1app_1_1extended__asset__object" kindref="compound">extended_asset_object</ref> &gt;</type>
        <definition>vector&lt; extended_asset_object &gt; graphene::app::database_api_impl::get_assets_by_issuer</definition>
        <argsstring>(const std::string &amp;issuer_name_or_id, asset_id_type start, uint32_t limit) const </argsstring>
        <name>get_assets_by_issuer</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>issuer_name_or_id</declname>
        </param>
        <param>
          <type>asset_id_type</type>
          <declname>start</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="99" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="968" bodyend="988"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ab34a6f802fb4a7fd170fb1d7cd855b9c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref> &gt;</type>
        <definition>vector&lt; limit_order_object &gt; graphene::app::database_api_impl::get_limit_orders</definition>
        <argsstring>(const std::string &amp;a, const std::string &amp;b, uint32_t limit) const </argsstring>
        <name>get_limit_orders</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="103" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1013" bodyend="1026"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a465a681bf2f974ddb46d4a060a54cda0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref> &gt;</type>
        <definition>vector&lt; limit_order_object &gt; graphene::app::database_api_impl::get_limit_orders_by_account</definition>
        <argsstring>(const string &amp;account_name_or_id, optional&lt; uint32_t &gt; limit, optional&lt; limit_order_id_type &gt; start_id)</argsstring>
        <name>get_limit_orders_by_account</name>
        <param>
          <type>const string &amp;</type>
          <declname>account_name_or_id</declname>
        </param>
        <param>
          <type>optional&lt; uint32_t &gt;</type>
          <declname>limit</declname>
        </param>
        <param>
          <type>optional&lt; limit_order_id_type &gt;</type>
          <declname>start_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="105" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1034" bodyend="1066"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ac1e87faca0ea7685d4981f560845a4c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref> &gt;</type>
        <definition>vector&lt; limit_order_object &gt; graphene::app::database_api_impl::get_account_limit_orders</definition>
        <argsstring>(const string &amp;account_name_or_id, const string &amp;base, const string &amp;quote, uint32_t limit, optional&lt; limit_order_id_type &gt; ostart_id, optional&lt; price &gt; ostart_price)</argsstring>
        <name>get_account_limit_orders</name>
        <param>
          <type>const string &amp;</type>
          <declname>account_name_or_id</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>quote</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <param>
          <type>optional&lt; limit_order_id_type &gt;</type>
          <declname>ostart_id</declname>
        </param>
        <param>
          <type>optional&lt; price &gt;</type>
          <declname>ostart_price</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="108" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1075" bodyend="1158"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a6b5c43a0c0471117d4605ed7135209f1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1call__order__object" kindref="compound">call_order_object</ref> &gt;</type>
        <definition>vector&lt; call_order_object &gt; graphene::app::database_api_impl::get_call_orders</definition>
        <argsstring>(const std::string &amp;a, uint32_t limit) const </argsstring>
        <name>get_call_orders</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="113" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1165" bodyend="1186"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a8c46414e35488fbe9b63256c7ca417bd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1call__order__object" kindref="compound">call_order_object</ref> &gt;</type>
        <definition>vector&lt; call_order_object &gt; graphene::app::database_api_impl::get_call_orders_by_account</definition>
        <argsstring>(const std::string &amp;account_name_or_id, asset_id_type start, uint32_t limit) const </argsstring>
        <name>get_call_orders_by_account</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>account_name_or_id</declname>
        </param>
        <param>
          <type>asset_id_type</type>
          <declname>start</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="114" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1194" bodyend="1214"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a7d64a3f69d163b86630d3bc1e9855594" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1force__settlement__object" kindref="compound">force_settlement_object</ref> &gt;</type>
        <definition>vector&lt; force_settlement_object &gt; graphene::app::database_api_impl::get_settle_orders</definition>
        <argsstring>(const std::string &amp;a, uint32_t limit) const </argsstring>
        <name>get_settle_orders</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="116" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1221" bodyend="1242"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a204e50c6a6a801e831d06dcd2287a202" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1force__settlement__object" kindref="compound">force_settlement_object</ref> &gt;</type>
        <definition>vector&lt; force_settlement_object &gt; graphene::app::database_api_impl::get_settle_orders_by_account</definition>
        <argsstring>(const std::string &amp;account_name_or_id, force_settlement_id_type start, uint32_t limit) const </argsstring>
        <name>get_settle_orders_by_account</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>account_name_or_id</declname>
        </param>
        <param>
          <type>force_settlement_id_type</type>
          <declname>start</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="117" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1252" bodyend="1274"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a508e311509df982cf71e0a49d7229340" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1call__order__object" kindref="compound">call_order_object</ref> &gt;</type>
        <definition>vector&lt; call_order_object &gt; graphene::app::database_api_impl::get_margin_positions</definition>
        <argsstring>(const std::string account_id_or_name) const </argsstring>
        <name>get_margin_positions</name>
        <param>
          <type>const std::string</type>
          <declname>account_id_or_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="120" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1282" bodyend="1299"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1aa7f25e9539123cc0ba1665c3d404f940" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1collateral__bid__object" kindref="compound">collateral_bid_object</ref> &gt;</type>
        <definition>vector&lt; collateral_bid_object &gt; graphene::app::database_api_impl::get_collateral_bids</definition>
        <argsstring>(const std::string &amp;asset, uint32_t limit, uint32_t start) const </argsstring>
        <name>get_collateral_bids</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>asset</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>start</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="121" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1307" bodyend="1337"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ae7aebb8dd3c0a3ebd55a63a0cb2f77dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::database_api_impl::subscribe_to_market</definition>
        <argsstring>(std::function&lt; void(const variant &amp;)&gt; callback, const std::string &amp;a, const std::string &amp;b)</argsstring>
        <name>subscribe_to_market</name>
        <param>
          <type>std::function&lt; void(const variant &amp;)&gt;</type>
          <declname>callback</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="124" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1345" bodyend="1354"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a50f5bf4428137943bd874d6e2883b4af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::database_api_impl::unsubscribe_from_market</definition>
        <argsstring>(const std::string &amp;a, const std::string &amp;b)</argsstring>
        <name>unsubscribe_from_market</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="126" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1361" bodyend="1369"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a774b85e60c95c5a60934242bfd1e5ebf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1app_1_1market__ticker" kindref="compound">market_ticker</ref></type>
        <definition>market_ticker graphene::app::database_api_impl::get_ticker</definition>
        <argsstring>(const string &amp;base, const string &amp;quote, bool skip_order_book=false) const </argsstring>
        <name>get_ticker</name>
        <param>
          <type>const string &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>quote</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>skip_order_book</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="128" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1376" bodyend="1403"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a74c11d1a6ada296392b91c6f6aab73bf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1app_1_1market__volume" kindref="compound">market_volume</ref></type>
        <definition>market_volume graphene::app::database_api_impl::get_24_volume</definition>
        <argsstring>(const string &amp;base, const string &amp;quote) const </argsstring>
        <name>get_24_volume</name>
        <param>
          <type>const string &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>quote</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="130" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1410" bodyend="1422"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a48454fe6a8019d002f6ecdbafc59ca97" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1app_1_1order__book" kindref="compound">order_book</ref></type>
        <definition>order_book graphene::app::database_api_impl::get_order_book</definition>
        <argsstring>(const string &amp;base, const string &amp;quote, unsigned limit=50) const </argsstring>
        <name>get_order_book</name>
        <param>
          <type>const string &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>quote</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>limit</declname>
          <defval>50</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="131" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1429" bodyend="1474"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a7443d8f6b3f645e670e3257159fb9d5b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1app_1_1market__ticker" kindref="compound">market_ticker</ref> &gt;</type>
        <definition>vector&lt; market_ticker &gt; graphene::app::database_api_impl::get_top_markets</definition>
        <argsstring>(uint32_t limit) const </argsstring>
        <name>get_top_markets</name>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="133" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1481" bodyend="1507"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a5a1dec96969a01f52afe2716480f5396" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1app_1_1market__trade" kindref="compound">market_trade</ref> &gt;</type>
        <definition>vector&lt; market_trade &gt; graphene::app::database_api_impl::get_trade_history</definition>
        <argsstring>(const string &amp;base, const string &amp;quote, fc::time_point_sec start, fc::time_point_sec stop, unsigned limit=100) const </argsstring>
        <name>get_trade_history</name>
        <param>
          <type>const string &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>quote</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1time__point__sec" kindref="compound">fc::time_point_sec</ref></type>
          <declname>start</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1time__point__sec" kindref="compound">fc::time_point_sec</ref></type>
          <declname>stop</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>limit</declname>
          <defval>100</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="134" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1518" bodyend="1608"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1aa4f19478fbdfa54472942c2e9ca0a9f2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1app_1_1market__trade" kindref="compound">market_trade</ref> &gt;</type>
        <definition>vector&lt; market_trade &gt; graphene::app::database_api_impl::get_trade_history_by_sequence</definition>
        <argsstring>(const string &amp;base, const string &amp;quote, int64_t start, fc::time_point_sec stop, unsigned limit=100) const </argsstring>
        <name>get_trade_history_by_sequence</name>
        <param>
          <type>const string &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>quote</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>start</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1time__point__sec" kindref="compound">fc::time_point_sec</ref></type>
          <declname>stop</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>limit</declname>
          <defval>100</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="137" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1620" bodyend="1726"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ab9b9c1e3bed0f34c9b3f0061688932c6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1app_1_1extended__liquidity__pool__object" kindref="compound">extended_liquidity_pool_object</ref> &gt;</type>
        <definition>vector&lt; extended_liquidity_pool_object &gt; graphene::app::database_api_impl::list_liquidity_pools</definition>
        <argsstring>(optional&lt; uint32_t &gt; limit=101, optional&lt; liquidity_pool_id_type &gt; start_id=optional&lt; liquidity_pool_id_type &gt;(), optional&lt; bool &gt; with_statistics=false) const </argsstring>
        <name>list_liquidity_pools</name>
        <param>
          <type>optional&lt; uint32_t &gt;</type>
          <declname>limit</declname>
          <defval>101</defval>
        </param>
        <param>
          <type>optional&lt; liquidity_pool_id_type &gt;</type>
          <declname>start_id</declname>
          <defval>optional&lt; liquidity_pool_id_type &gt;()</defval>
        </param>
        <param>
          <type>optional&lt; bool &gt;</type>
          <declname>with_statistics</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="142" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1745" bodyend="1775"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a5dfd63845c3aad6c28c9140d7089af8c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1app_1_1extended__liquidity__pool__object" kindref="compound">extended_liquidity_pool_object</ref> &gt;</type>
        <definition>vector&lt; extended_liquidity_pool_object &gt; graphene::app::database_api_impl::get_liquidity_pools_by_asset_a</definition>
        <argsstring>(std::string asset_symbol_or_id, optional&lt; uint32_t &gt; limit=101, optional&lt; liquidity_pool_id_type &gt; start_id=optional&lt; liquidity_pool_id_type &gt;(), optional&lt; bool &gt; with_statistics=false) const </argsstring>
        <name>get_liquidity_pools_by_asset_a</name>
        <param>
          <type>std::string</type>
          <declname>asset_symbol_or_id</declname>
        </param>
        <param>
          <type>optional&lt; uint32_t &gt;</type>
          <declname>limit</declname>
          <defval>101</defval>
        </param>
        <param>
          <type>optional&lt; liquidity_pool_id_type &gt;</type>
          <declname>start_id</declname>
          <defval>optional&lt; liquidity_pool_id_type &gt;()</defval>
        </param>
        <param>
          <type>optional&lt; bool &gt;</type>
          <declname>with_statistics</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="146" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1790" bodyend="1801"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ab97143e718a3a4f44c695774269928f1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1app_1_1extended__liquidity__pool__object" kindref="compound">extended_liquidity_pool_object</ref> &gt;</type>
        <definition>vector&lt; extended_liquidity_pool_object &gt; graphene::app::database_api_impl::get_liquidity_pools_by_asset_b</definition>
        <argsstring>(std::string asset_symbol_or_id, optional&lt; uint32_t &gt; limit=101, optional&lt; liquidity_pool_id_type &gt; start_id=optional&lt; liquidity_pool_id_type &gt;(), optional&lt; bool &gt; with_statistics=false) const </argsstring>
        <name>get_liquidity_pools_by_asset_b</name>
        <param>
          <type>std::string</type>
          <declname>asset_symbol_or_id</declname>
        </param>
        <param>
          <type>optional&lt; uint32_t &gt;</type>
          <declname>limit</declname>
          <defval>101</defval>
        </param>
        <param>
          <type>optional&lt; liquidity_pool_id_type &gt;</type>
          <declname>start_id</declname>
          <defval>optional&lt; liquidity_pool_id_type &gt;()</defval>
        </param>
        <param>
          <type>optional&lt; bool &gt;</type>
          <declname>with_statistics</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="151" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1816" bodyend="1827"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a486e8ca04bf30aa7400c902128b4938b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1app_1_1extended__liquidity__pool__object" kindref="compound">extended_liquidity_pool_object</ref> &gt;</type>
        <definition>vector&lt; extended_liquidity_pool_object &gt; graphene::app::database_api_impl::get_liquidity_pools_by_one_asset</definition>
        <argsstring>(const std::string &amp;asset_symbol_or_id, const optional&lt; uint32_t &gt; &amp;limit=101, const optional&lt; liquidity_pool_id_type &gt; &amp;start_id=optional&lt; liquidity_pool_id_type &gt;(), const optional&lt; bool &gt; &amp;with_statistics=false) const </argsstring>
        <name>get_liquidity_pools_by_one_asset</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>asset_symbol_or_id</declname>
        </param>
        <param>
          <type>const optional&lt; uint32_t &gt; &amp;</type>
          <declname>limit</declname>
          <defval>101</defval>
        </param>
        <param>
          <type>const optional&lt; liquidity_pool_id_type &gt; &amp;</type>
          <declname>start_id</declname>
          <defval>optional&lt; liquidity_pool_id_type &gt;()</defval>
        </param>
        <param>
          <type>const optional&lt; bool &gt; &amp;</type>
          <declname>with_statistics</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="156" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1842" bodyend="1879"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a779d3e038a9f514b7e29f57b6d99cad8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1app_1_1extended__liquidity__pool__object" kindref="compound">extended_liquidity_pool_object</ref> &gt;</type>
        <definition>vector&lt; extended_liquidity_pool_object &gt; graphene::app::database_api_impl::get_liquidity_pools_by_both_assets</definition>
        <argsstring>(std::string asset_symbol_or_id_a, std::string asset_symbol_or_id_b, optional&lt; uint32_t &gt; limit=101, optional&lt; liquidity_pool_id_type &gt; start_id=optional&lt; liquidity_pool_id_type &gt;(), optional&lt; bool &gt; with_statistics=false) const </argsstring>
        <name>get_liquidity_pools_by_both_assets</name>
        <param>
          <type>std::string</type>
          <declname>asset_symbol_or_id_a</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>asset_symbol_or_id_b</declname>
        </param>
        <param>
          <type>optional&lt; uint32_t &gt;</type>
          <declname>limit</declname>
          <defval>101</defval>
        </param>
        <param>
          <type>optional&lt; liquidity_pool_id_type &gt;</type>
          <declname>start_id</declname>
          <defval>optional&lt; liquidity_pool_id_type &gt;()</defval>
        </param>
        <param>
          <type>optional&lt; bool &gt;</type>
          <declname>with_statistics</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="161" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1896" bodyend="1933"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ad14cd3092f4a09e26181e1870e4a99be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; optional&lt; <ref refid="structgraphene_1_1app_1_1extended__liquidity__pool__object" kindref="compound">extended_liquidity_pool_object</ref> &gt; &gt;</type>
        <definition>vector&lt; optional&lt; extended_liquidity_pool_object &gt; &gt; graphene::app::database_api_impl::get_liquidity_pools</definition>
        <argsstring>(const vector&lt; liquidity_pool_id_type &gt; &amp;ids, optional&lt; bool &gt; subscribe=optional&lt; bool &gt;(), optional&lt; bool &gt; with_statistics=false) const </argsstring>
        <name>get_liquidity_pools</name>
        <param>
          <type>const vector&lt; liquidity_pool_id_type &gt; &amp;</type>
          <declname>ids</declname>
        </param>
        <param>
          <type>optional&lt; bool &gt;</type>
          <declname>subscribe</declname>
          <defval>optional&lt; bool &gt;()</defval>
        </param>
        <param>
          <type>optional&lt; bool &gt;</type>
          <declname>with_statistics</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="167" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1946" bodyend="1979"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ac0921dcc3cfb47d614899e64f3925925" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; optional&lt; <ref refid="structgraphene_1_1app_1_1extended__liquidity__pool__object" kindref="compound">extended_liquidity_pool_object</ref> &gt; &gt;</type>
        <definition>vector&lt; optional&lt; extended_liquidity_pool_object &gt; &gt; graphene::app::database_api_impl::get_liquidity_pools_by_share_asset</definition>
        <argsstring>(const vector&lt; std::string &gt; &amp;asset_symbols_or_ids, optional&lt; bool &gt; subscribe=optional&lt; bool &gt;(), optional&lt; bool &gt; with_statistics=false) const </argsstring>
        <name>get_liquidity_pools_by_share_asset</name>
        <param>
          <type>const vector&lt; std::string &gt; &amp;</type>
          <declname>asset_symbols_or_ids</declname>
        </param>
        <param>
          <type>optional&lt; bool &gt;</type>
          <declname>subscribe</declname>
          <defval>optional&lt; bool &gt;()</defval>
        </param>
        <param>
          <type>optional&lt; bool &gt;</type>
          <declname>with_statistics</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="171" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="1992" bodyend="2024"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a75195e7cebf8302e74b1f53f5cb3cdaa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1app_1_1extended__liquidity__pool__object" kindref="compound">extended_liquidity_pool_object</ref> &gt;</type>
        <definition>vector&lt; extended_liquidity_pool_object &gt; graphene::app::database_api_impl::get_liquidity_pools_by_owner</definition>
        <argsstring>(std::string account_name_or_id, optional&lt; uint32_t &gt; limit=101, optional&lt; asset_id_type &gt; start_id=optional&lt; asset_id_type &gt;(), optional&lt; bool &gt; with_statistics=false) const </argsstring>
        <name>get_liquidity_pools_by_owner</name>
        <param>
          <type>std::string</type>
          <declname>account_name_or_id</declname>
        </param>
        <param>
          <type>optional&lt; uint32_t &gt;</type>
          <declname>limit</declname>
          <defval>101</defval>
        </param>
        <param>
          <type>optional&lt; asset_id_type &gt;</type>
          <declname>start_id</declname>
          <defval>optional&lt; asset_id_type &gt;()</defval>
        </param>
        <param>
          <type>optional&lt; bool &gt;</type>
          <declname>with_statistics</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="175" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2039" bodyend="2076"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a02a1cbebce0918634c7bac919d4485cc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; optional&lt; <ref refid="classgraphene_1_1chain_1_1witness__object" kindref="compound">witness_object</ref> &gt; &gt;</type>
        <definition>vector&lt; optional&lt; witness_object &gt; &gt; graphene::app::database_api_impl::get_witnesses</definition>
        <argsstring>(const vector&lt; witness_id_type &gt; &amp;witness_ids) const </argsstring>
        <name>get_witnesses</name>
        <param>
          <type>const vector&lt; witness_id_type &gt; &amp;</type>
          <declname>witness_ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="182" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2089" bodyend="2099"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a1e69b6bee0247c19feb0d0e5c0a56742" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1optional" kindref="compound">fc::optional</ref>&lt; <ref refid="classgraphene_1_1chain_1_1witness__object" kindref="compound">witness_object</ref> &gt;</type>
        <definition>fc::optional&lt; witness_object &gt; graphene::app::database_api_impl::get_witness_by_account</definition>
        <argsstring>(const std::string account_id_or_name) const </argsstring>
        <name>get_witness_by_account</name>
        <param>
          <type>const std::string</type>
          <declname>account_id_or_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="183" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2106" bodyend="2114"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a8f5f1c58f52cd07b58c9c0e1dd72d57b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>map&lt; string, witness_id_type &gt;</type>
        <definition>map&lt; string, witness_id_type &gt; graphene::app::database_api_impl::lookup_witness_accounts</definition>
        <argsstring>(const string &amp;lower_bound_name, uint32_t limit) const </argsstring>
        <name>lookup_witness_accounts</name>
        <param>
          <type>const string &amp;</type>
          <declname>lower_bound_name</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="184" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2122" bodyend="2149"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ae9d23542c8f07a3d221ce95d37570fa1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t graphene::app::database_api_impl::get_witness_count</definition>
        <argsstring>() const </argsstring>
        <name>get_witness_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="185" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2156" bodyend="2159"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a3b2dca43bea0d0e738a89f289a3dd3e5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; optional&lt; <ref refid="classgraphene_1_1chain_1_1committee__member__object" kindref="compound">committee_member_object</ref> &gt; &gt;</type>
        <definition>vector&lt; optional&lt; committee_member_object &gt; &gt; graphene::app::database_api_impl::get_committee_members</definition>
        <argsstring>(const vector&lt; committee_member_id_type &gt; &amp;committee_member_ids) const </argsstring>
        <name>get_committee_members</name>
        <param>
          <type>const vector&lt; committee_member_id_type &gt; &amp;</type>
          <declname>committee_member_ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="188" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2173" bodyend="2184"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a7cb45406eed7bedad612ae846de68c25" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1optional" kindref="compound">fc::optional</ref>&lt; <ref refid="classgraphene_1_1chain_1_1committee__member__object" kindref="compound">committee_member_object</ref> &gt;</type>
        <definition>fc::optional&lt; committee_member_object &gt; graphene::app::database_api_impl::get_committee_member_by_account</definition>
        <argsstring>(const std::string account_id_or_name) const </argsstring>
        <name>get_committee_member_by_account</name>
        <param>
          <type>const std::string</type>
          <declname>account_id_or_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="190" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2192" bodyend="2201"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a0a15870d91e0d330094aaa203c7b7b70" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>map&lt; string, committee_member_id_type &gt;</type>
        <definition>map&lt; string, committee_member_id_type &gt; graphene::app::database_api_impl::lookup_committee_member_accounts</definition>
        <argsstring>(const string &amp;lower_bound_name, uint32_t limit) const </argsstring>
        <name>lookup_committee_member_accounts</name>
        <param>
          <type>const string &amp;</type>
          <declname>lower_bound_name</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="192" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2209" bodyend="2236"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a6b75f9f2f2e5e16251273cd2c45a9aeb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t graphene::app::database_api_impl::get_committee_count</definition>
        <argsstring>() const </argsstring>
        <name>get_committee_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="194" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2243" bodyend="2246"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a3c40f6804d7953d8a38ff5cae42cc9b9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1worker__object" kindref="compound">worker_object</ref> &gt;</type>
        <definition>vector&lt; worker_object &gt; graphene::app::database_api_impl::get_all_workers</definition>
        <argsstring>(const optional&lt; bool &gt; is_expired=optional&lt; bool &gt;()) const </argsstring>
        <name>get_all_workers</name>
        <param>
          <type>const optional&lt; bool &gt;</type>
          <declname>is_expired</declname>
          <defval>optional&lt; bool &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="197" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2260" bodyend="2286"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a921d38e533a7ca4526b40dc7527c06c6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1worker__object" kindref="compound">worker_object</ref> &gt;</type>
        <definition>vector&lt; worker_object &gt; graphene::app::database_api_impl::get_workers_by_account</definition>
        <argsstring>(const std::string account_id_or_name) const </argsstring>
        <name>get_workers_by_account</name>
        <param>
          <type>const std::string</type>
          <declname>account_id_or_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="198" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2293" bodyend="2305"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a5e26bc34c2c79ce035a70ec3fbd4386d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t graphene::app::database_api_impl::get_worker_count</definition>
        <argsstring>() const </argsstring>
        <name>get_worker_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="199" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2312" bodyend="2315"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a20ee8c93cf227bdba64f7d8fc7592882" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; variant &gt;</type>
        <definition>vector&lt; variant &gt; graphene::app::database_api_impl::lookup_vote_ids</definition>
        <argsstring>(const vector&lt; vote_id_type &gt; &amp;votes) const </argsstring>
        <name>lookup_vote_ids</name>
        <param>
          <type>const vector&lt; vote_id_type &gt; &amp;</type>
          <declname>votes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="202" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2330" bodyend="2394"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1afa428aee96cb8d2d4a0a599df13d2be3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string graphene::app::database_api_impl::get_transaction_hex</definition>
        <argsstring>(const signed_transaction &amp;trx) const </argsstring>
        <name>get_transaction_hex</name>
        <param>
          <type>const signed_transaction &amp;</type>
          <declname>trx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="205" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2407" bodyend="2410"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a28a73ba8de201171d8405b0e53bc1e2f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string graphene::app::database_api_impl::get_transaction_hex_without_sig</definition>
        <argsstring>(const transaction &amp;trx) const </argsstring>
        <name>get_transaction_hex_without_sig</name>
        <param>
          <type>const transaction &amp;</type>
          <declname>trx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="206" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2418" bodyend="2422"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a32c43accb6c3b451a09ac69ac32330b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>set&lt; public_key_type &gt;</type>
        <definition>set&lt; public_key_type &gt; graphene::app::database_api_impl::get_required_signatures</definition>
        <argsstring>(const signed_transaction &amp;trx, const flat_set&lt; public_key_type &gt; &amp;available_keys) const </argsstring>
        <name>get_required_signatures</name>
        <param>
          <type>const signed_transaction &amp;</type>
          <declname>trx</declname>
        </param>
        <param>
          <type>const flat_set&lt; public_key_type &gt; &amp;</type>
          <declname>available_keys</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="208" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2430" bodyend="2444"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a6db14440f360623c5fc78ed256879201" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>set&lt; public_key_type &gt;</type>
        <definition>set&lt; public_key_type &gt; graphene::app::database_api_impl::get_potential_signatures</definition>
        <argsstring>(const signed_transaction &amp;trx) const </argsstring>
        <name>get_potential_signatures</name>
        <param>
          <type>const signed_transaction &amp;</type>
          <declname>trx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="210" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2455" bodyend="2492"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a3326e8067727c3f7d11a6c694cdeb4d0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>set&lt; address &gt;</type>
        <definition>set&lt; address &gt; graphene::app::database_api_impl::get_potential_address_signatures</definition>
        <argsstring>(const signed_transaction &amp;trx) const </argsstring>
        <name>get_potential_address_signatures</name>
        <param>
          <type>const signed_transaction &amp;</type>
          <declname>trx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="211" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2494" bodyend="2521"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a50ade37c6b7750211b6aa6d8a2f48937" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::app::database_api_impl::verify_authority</definition>
        <argsstring>(const signed_transaction &amp;trx) const </argsstring>
        <name>verify_authority</name>
        <param>
          <type>const signed_transaction &amp;</type>
          <declname>trx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="212" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2528" bodyend="2539"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a42ec7156f59a86d00d97dc97871b0791" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::app::database_api_impl::verify_account_authority</definition>
        <argsstring>(const string &amp;account_name_or_id, const flat_set&lt; public_key_type &gt; &amp;signers) const </argsstring>
        <name>verify_account_authority</name>
        <param>
          <type>const string &amp;</type>
          <declname>account_name_or_id</declname>
        </param>
        <param>
          <type>const flat_set&lt; public_key_type &gt; &amp;</type>
          <declname>signers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="213" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2547" bodyend="2571"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a6cf52d3ec72f724ea0edb74411db197e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1processed__transaction" kindref="compound">processed_transaction</ref></type>
        <definition>processed_transaction graphene::app::database_api_impl::validate_transaction</definition>
        <argsstring>(const signed_transaction &amp;trx) const </argsstring>
        <name>validate_transaction</name>
        <param>
          <type>const signed_transaction &amp;</type>
          <declname>trx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="215" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2578" bodyend="2581"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a3375feb2e6c825a404b13f9306392b1c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classfc_1_1variant" kindref="compound">fc::variant</ref> &gt;</type>
        <definition>vector&lt; fc::variant &gt; graphene::app::database_api_impl::get_required_fees</definition>
        <argsstring>(const vector&lt; operation &gt; &amp;ops, const std::string &amp;asset_id_or_symbol) const </argsstring>
        <name>get_required_fees</name>
        <param>
          <type>const vector&lt; operation &gt; &amp;</type>
          <declname>ops</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>asset_id_or_symbol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="216" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2645" bodyend="2666"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1aa674547dfccd5142e20e289ea9fc6a53" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1proposal__object" kindref="compound">proposal_object</ref> &gt;</type>
        <definition>vector&lt; proposal_object &gt; graphene::app::database_api_impl::get_proposed_transactions</definition>
        <argsstring>(const std::string account_id_or_name) const </argsstring>
        <name>get_proposed_transactions</name>
        <param>
          <type>const std::string</type>
          <declname>account_id_or_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="220" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2679" bodyend="2701"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a7de551d4426d9a21993112bb3f35f4ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1blinded__balance__object" kindref="compound">blinded_balance_object</ref> &gt;</type>
        <definition>vector&lt; blinded_balance_object &gt; graphene::app::database_api_impl::get_blinded_balances</definition>
        <argsstring>(const flat_set&lt; commitment_type &gt; &amp;commitments) const </argsstring>
        <name>get_blinded_balances</name>
        <param>
          <type>const flat_set&lt; <ref refid="namespacefc_1_1ecc_1a582249fe15693cc9c040286a8ef296f8" kindref="member">commitment_type</ref> &gt; &amp;</type>
          <declname>commitments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="223" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2715" bodyend="2728"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1af81f5487f6e27c8878bf9a36eb359afa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1withdraw__permission__object" kindref="compound">withdraw_permission_object</ref> &gt;</type>
        <definition>vector&lt; withdraw_permission_object &gt; graphene::app::database_api_impl::get_withdraw_permissions_by_giver</definition>
        <argsstring>(const std::string account_id_or_name, withdraw_permission_id_type start, uint32_t limit) const </argsstring>
        <name>get_withdraw_permissions_by_giver</name>
        <param>
          <type>const std::string</type>
          <declname>account_id_or_name</declname>
        </param>
        <param>
          <type>withdraw_permission_id_type</type>
          <declname>start</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="226" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2744" bodyend="2768"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ac4c8dd7cf9468f15d4eabb52df8a12e7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1withdraw__permission__object" kindref="compound">withdraw_permission_object</ref> &gt;</type>
        <definition>vector&lt; withdraw_permission_object &gt; graphene::app::database_api_impl::get_withdraw_permissions_by_recipient</definition>
        <argsstring>(const std::string account_id_or_name, withdraw_permission_id_type start, uint32_t limit) const </argsstring>
        <name>get_withdraw_permissions_by_recipient</name>
        <param>
          <type>const std::string</type>
          <declname>account_id_or_name</declname>
        </param>
        <param>
          <type>withdraw_permission_id_type</type>
          <declname>start</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="229" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2778" bodyend="2801"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a4a9007de32e018cc817133a50ba23f5f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>optional&lt; <ref refid="classgraphene_1_1chain_1_1htlc__object" kindref="compound">htlc_object</ref> &gt;</type>
        <definition>fc::optional&lt; htlc_object &gt; graphene::app::database_api_impl::get_htlc</definition>
        <argsstring>(htlc_id_type id, optional&lt; bool &gt; subscribe) const </argsstring>
        <name>get_htlc</name>
        <param>
          <type>htlc_id_type</type>
          <declname>id</declname>
        </param>
        <param>
          <type>optional&lt; bool &gt;</type>
          <declname>subscribe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="234" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2814" bodyend="2822"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a1a4b9cebb410ca5decd42ba6d124eff1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1htlc__object" kindref="compound">htlc_object</ref> &gt;</type>
        <definition>vector&lt; htlc_object &gt; graphene::app::database_api_impl::get_htlc_by_from</definition>
        <argsstring>(const std::string account_id_or_name, htlc_id_type start, uint32_t limit) const </argsstring>
        <name>get_htlc_by_from</name>
        <param>
          <type>const std::string</type>
          <declname>account_id_or_name</declname>
        </param>
        <param>
          <type>htlc_id_type</type>
          <declname>start</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="235" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2830" bodyend="2852"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a52dbff18e73b4a29d5ae03c1041e65fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1htlc__object" kindref="compound">htlc_object</ref> &gt;</type>
        <definition>vector&lt; htlc_object &gt; graphene::app::database_api_impl::get_htlc_by_to</definition>
        <argsstring>(const std::string account_id_or_name, htlc_id_type start, uint32_t limit) const </argsstring>
        <name>get_htlc_by_to</name>
        <param>
          <type>const std::string</type>
          <declname>account_id_or_name</declname>
        </param>
        <param>
          <type>htlc_id_type</type>
          <declname>start</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="237" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2860" bodyend="2882"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ab4e7d2b03b7f54a595c8c8c2496b8a01" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1htlc__object" kindref="compound">htlc_object</ref> &gt;</type>
        <definition>vector&lt; htlc_object &gt; graphene::app::database_api_impl::list_htlcs</definition>
        <argsstring>(const htlc_id_type lower_bound_id, uint32_t limit) const </argsstring>
        <name>list_htlcs</name>
        <param>
          <type>const htlc_id_type</type>
          <declname>lower_bound_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="239" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2889" bodyend="2906"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ae29fd39df8422ae93fda61f4d8fd9b36" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1ticket__object" kindref="compound">ticket_object</ref> &gt;</type>
        <definition>vector&lt; ticket_object &gt; graphene::app::database_api_impl::list_tickets</definition>
        <argsstring>(optional&lt; uint32_t &gt; limit=101, optional&lt; ticket_id_type &gt; start_id=optional&lt; ticket_id_type &gt;()) const </argsstring>
        <name>list_tickets</name>
        <param>
          <type>optional&lt; uint32_t &gt;</type>
          <declname>limit</declname>
          <defval>101</defval>
        </param>
        <param>
          <type>optional&lt; ticket_id_type &gt;</type>
          <declname>start_id</declname>
          <defval>optional&lt; ticket_id_type &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="242" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2923" bodyend="2951"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a5c1cd36c6d899390b5a9a714d8d7bbc2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1ticket__object" kindref="compound">ticket_object</ref> &gt;</type>
        <definition>vector&lt; ticket_object &gt; graphene::app::database_api_impl::get_tickets_by_account</definition>
        <argsstring>(std::string account_name_or_id, optional&lt; uint32_t &gt; limit=101, optional&lt; ticket_id_type &gt; start_id=optional&lt; ticket_id_type &gt;()) const </argsstring>
        <name>get_tickets_by_account</name>
        <param>
          <type>std::string</type>
          <declname>account_name_or_id</declname>
        </param>
        <param>
          <type>optional&lt; uint32_t &gt;</type>
          <declname>limit</declname>
          <defval>101</defval>
        </param>
        <param>
          <type>optional&lt; ticket_id_type &gt;</type>
          <declname>start_id</declname>
          <defval>optional&lt; ticket_id_type &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="245" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="2964" bodyend="2995"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1af21ecb8db6145c300b0cb7c2e3eb459f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classgraphene_1_1chain_1_1account__object" kindref="compound">account_object</ref> *</type>
        <definition>const account_object * graphene::app::database_api_impl::get_account_from_string</definition>
        <argsstring>(const std::string &amp;name_or_id, bool throw_if_not_found=true) const </argsstring>
        <name>get_account_from_string</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name_or_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>throw_if_not_found</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="256" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="3003" bodyend="3021"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a87fe3dde7eaca519823e4b72be211c0f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ASSET</type>
          </param>
        </templateparamlist>
        <type><ref refid="structgraphene_1_1app_1_1extended__asset__object" kindref="compound">extended_asset_object</ref></type>
        <definition>extended_asset_object graphene::app::database_api_impl::extend_asset</definition>
        <argsstring>(ASSET &amp;&amp;a) const </argsstring>
        <name>extend_asset</name>
        <param>
          <type>ASSET &amp;&amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="264" column="1" bodyfile="libraries/app/database_api_impl.hxx" bodystart="264" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1afb38ce694c7f426fadee2d6fc24da7be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classgraphene_1_1chain_1_1asset__object" kindref="compound">asset_object</ref> *</type>
        <definition>const asset_object * graphene::app::database_api_impl::get_asset_from_string</definition>
        <argsstring>(const std::string &amp;symbol_or_id, bool throw_if_not_found=true) const </argsstring>
        <name>get_asset_from_string</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>symbol_or_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>throw_if_not_found</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="277" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="3023" bodyend="3041"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ae37ae8e6b54cbf59dc81a33e5584062f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; optional&lt; <ref refid="structgraphene_1_1app_1_1extended__asset__object" kindref="compound">extended_asset_object</ref> &gt; &gt;</type>
        <definition>vector&lt; optional&lt; extended_asset_object &gt; &gt; graphene::app::database_api_impl::get_assets</definition>
        <argsstring>(const vector&lt; asset_id_type &gt; &amp;asset_ids, optional&lt; bool &gt; subscribe=optional&lt; bool &gt;()) const </argsstring>
        <name>get_assets</name>
        <param>
          <type>const vector&lt; asset_id_type &gt; &amp;</type>
          <declname>asset_ids</declname>
        </param>
        <param>
          <type>optional&lt; bool &gt;</type>
          <declname>subscribe</declname>
          <defval>optional&lt; bool &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="280" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="3044" bodyend="3060"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a3d2d475d94b76c8fdf1b0087105cb5a6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref> &gt;</type>
        <definition>vector&lt; limit_order_object &gt; graphene::app::database_api_impl::get_limit_orders</definition>
        <argsstring>(const asset_id_type a, const asset_id_type b, const uint32_t limit) const </argsstring>
        <name>get_limit_orders</name>
        <param>
          <type>const asset_id_type</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const asset_id_type</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="288" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="3063" bodyend="3098"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a58b0c1691bbe90006649a33ce0ef59db" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class LP</type>
          </param>
        </templateparamlist>
        <type><ref refid="structgraphene_1_1app_1_1extended__liquidity__pool__object" kindref="compound">extended_liquidity_pool_object</ref></type>
        <definition>extended_liquidity_pool_object graphene::app::database_api_impl::extend_liquidity_pool</definition>
        <argsstring>(LP &amp;&amp;a, bool with_stats) const </argsstring>
        <name>extend_liquidity_pool</name>
        <param>
          <type>LP &amp;&amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>with_stats</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="296" column="1" bodyfile="libraries/app/database_api_impl.hxx" bodystart="296" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ae93d5c619a654adf2b700f9912945b51" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename X</type>
          </param>
        </templateparamlist>
        <type>vector&lt; <ref refid="structgraphene_1_1app_1_1extended__liquidity__pool__object" kindref="compound">extended_liquidity_pool_object</ref> &gt;</type>
        <definition>vector&lt;extended_liquidity_pool_object&gt; graphene::app::database_api_impl::get_liquidity_pools_by_asset_x</definition>
        <argsstring>(std::string asset_symbol_or_id, optional&lt; uint32_t &gt; olimit, optional&lt; liquidity_pool_id_type &gt; ostart_id, optional&lt; bool &gt; with_statistics) const </argsstring>
        <name>get_liquidity_pools_by_asset_x</name>
        <param>
          <type>std::string</type>
          <declname>asset_symbol_or_id</declname>
        </param>
        <param>
          <type>optional&lt; uint32_t &gt;</type>
          <declname>olimit</declname>
        </param>
        <param>
          <type>optional&lt; liquidity_pool_id_type &gt;</type>
          <declname>ostart_id</declname>
        </param>
        <param>
          <type>optional&lt; bool &gt;</type>
          <declname>with_statistics</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="312" column="1" bodyfile="libraries/app/database_api_impl.hxx" bodystart="312" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a31f2506dfe8e4e9bac4d689cd8cef2b7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::app::database_api_impl::get_whether_to_subscribe</definition>
        <argsstring>(optional&lt; bool &gt; subscribe) const </argsstring>
        <name>get_whether_to_subscribe</name>
        <param>
          <type>optional&lt; bool &gt;</type>
          <declname>subscribe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="352" column="1" bodyfile="libraries/app/database_api_impl.hxx" bodystart="352" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a14570ed6210976669e9a63c67f34a620" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>vector&lt; char &gt;</type>
        <definition>vector&lt;char&gt; graphene::app::database_api_impl::get_subscription_key</definition>
        <argsstring>(const object_id_type &amp;item) const </argsstring>
        <name>get_subscription_key</name>
        <param>
          <type>const object_id_type &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="370" column="1" bodyfile="libraries/app/database_api_impl.hxx" bodystart="370" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1aa57048eb9af8413ef0e2e5726b07ab34" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void graphene::app::database_api_impl::subscribe_to_item</definition>
        <argsstring>(const T &amp;item) const </argsstring>
        <name>subscribe_to_item</name>
        <param>
          <type>const T &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="376" column="1" bodyfile="libraries/app/database_api_impl.hxx" bodystart="376" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1afa0be562770d1f11ac9a9f741dc2e35b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool graphene::app::database_api_impl::is_subscribed_to_item</definition>
        <argsstring>(const T &amp;item) const </argsstring>
        <name>is_subscribed_to_item</name>
        <param>
          <type>const T &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="389" column="1" bodyfile="libraries/app/database_api_impl.hxx" bodystart="389" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a070c7127572da3986facf042c6668ccc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::app::database_api_impl::is_impacted_account</definition>
        <argsstring>(const flat_set&lt; account_id_type &gt; &amp;accounts)</argsstring>
        <name>is_impacted_account</name>
        <param>
          <type>const flat_set&lt; account_id_type &gt; &amp;</type>
          <declname>accounts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="399" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="3100" bodyend="3108"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a4a86e1e60f29941254c6ce0d1c0aa50e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>const std::pair&lt; asset_id_type, asset_id_type &gt;</type>
        <definition>const std::pair&lt;asset_id_type,asset_id_type&gt; graphene::app::database_api_impl::get_order_market</definition>
        <argsstring>(const T &amp;order)</argsstring>
        <name>get_order_market</name>
        <param>
          <type>const T &amp;</type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="403" column="1" bodyfile="libraries/app/database_api_impl.hxx" bodystart="403" bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a6b507ea1f58b046fce6c0a72e835f33e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::pair&lt; asset_id_type, asset_id_type &gt;</type>
        <definition>const std::pair&lt;asset_id_type,asset_id_type&gt; graphene::app::database_api_impl::get_order_market</definition>
        <argsstring>(const force_settlement_object &amp;order)</argsstring>
        <name>get_order_market</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1force__settlement__object" kindref="compound">force_settlement_object</ref> &amp;</type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="409" column="1" bodyfile="libraries/app/database_api_impl.hxx" bodystart="409" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ac70659cf33483f0113f2559eb18b6903" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void graphene::app::database_api_impl::enqueue_if_subscribed_to_market</definition>
        <argsstring>(const object *obj, market_queue_type &amp;queue, bool full_object=true)</argsstring>
        <name>enqueue_if_subscribed_to_market</name>
        <param>
          <type>const object *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="namespacegraphene_1_1app_1a26804ee36d39c9a57ef54ba85f3ca894" kindref="member">market_queue_type</ref> &amp;</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>full_object</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="419" column="1" bodyfile="libraries/app/database_api_impl.hxx" bodystart="419" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a55ff9f5836e67fc803189fa184d8dbcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::database_api_impl::broadcast_updates</definition>
        <argsstring>(const vector&lt; variant &gt; &amp;updates)</argsstring>
        <name>broadcast_updates</name>
        <param>
          <type>const vector&lt; variant &gt; &amp;</type>
          <declname>updates</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="432" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="3110" bodyend="3119"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a7cfc3b40b9187f22cc92d0859118edd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::database_api_impl::broadcast_market_updates</definition>
        <argsstring>(const market_queue_type &amp;queue)</argsstring>
        <name>broadcast_market_updates</name>
        <param>
          <type>const <ref refid="namespacegraphene_1_1app_1a26804ee36d39c9a57ef54ba85f3ca894" kindref="member">market_queue_type</ref> &amp;</type>
          <declname>queue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="433" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="3121" bodyend="3135"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1af32c7a64a34782f8cfc678098e63633a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::database_api_impl::handle_object_changed</definition>
        <argsstring>(bool force_notify, bool full_object, const vector&lt; object_id_type &gt; &amp;ids, const flat_set&lt; account_id_type &gt; &amp;impacted_accounts, std::function&lt; const object *(object_id_type id)&gt; find_object)</argsstring>
        <name>handle_object_changed</name>
        <param>
          <type>bool</type>
          <declname>force_notify</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>full_object</declname>
        </param>
        <param>
          <type>const vector&lt; object_id_type &gt; &amp;</type>
          <declname>ids</declname>
        </param>
        <param>
          <type>const flat_set&lt; account_id_type &gt; &amp;</type>
          <declname>impacted_accounts</declname>
        </param>
        <param>
          <type>std::function&lt; const object *(object_id_type id)&gt;</type>
          <declname>find_object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="434" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="3171" bodyend="3228"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ad7e92705742642bcc7c856f03ed1e244" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::database_api_impl::on_objects_new</definition>
        <argsstring>(const vector&lt; object_id_type &gt; &amp;ids, const flat_set&lt; account_id_type &gt; &amp;impacted_accounts)</argsstring>
        <name>on_objects_new</name>
        <param>
          <type>const vector&lt; object_id_type &gt; &amp;</type>
          <declname>ids</declname>
        </param>
        <param>
          <type>const flat_set&lt; account_id_type &gt; &amp;</type>
          <declname>impacted_accounts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>called every time a block is applied to report the objects that were changed </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="441" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="3155" bodyend="3161"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ad55c3a34c9ad6e65d4fe87261d76bef4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::database_api_impl::on_objects_changed</definition>
        <argsstring>(const vector&lt; object_id_type &gt; &amp;ids, const flat_set&lt; account_id_type &gt; &amp;impacted_accounts)</argsstring>
        <name>on_objects_changed</name>
        <param>
          <type>const vector&lt; object_id_type &gt; &amp;</type>
          <declname>ids</declname>
        </param>
        <param>
          <type>const flat_set&lt; account_id_type &gt; &amp;</type>
          <declname>impacted_accounts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="442" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="3163" bodyend="3169"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1a07b11af3581db3c1167026d69efbc26e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::database_api_impl::on_objects_removed</definition>
        <argsstring>(const vector&lt; object_id_type &gt; &amp;ids, const vector&lt; const object * &gt; &amp;objs, const flat_set&lt; account_id_type &gt; &amp;impacted_accounts)</argsstring>
        <name>on_objects_removed</name>
        <param>
          <type>const vector&lt; object_id_type &gt; &amp;</type>
          <declname>ids</declname>
        </param>
        <param>
          <type>const vector&lt; const object * &gt; &amp;</type>
          <declname>objs</declname>
        </param>
        <param>
          <type>const flat_set&lt; account_id_type &gt; &amp;</type>
          <declname>impacted_accounts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="443" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="3137" bodyend="3153"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1database__api__impl_1ae7b704ead77565a89c50fa327288d1a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::database_api_impl::on_applied_block</definition>
        <argsstring>()</argsstring>
        <name>on_applied_block</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>note: this method cannot yield because it is called in the middle of apply a block. </para>        </detaileddescription>
        <inbodydescription>
<para>we need to ensure the <ref refid="classgraphene_1_1app_1_1database__api" kindref="compound">database_api</ref> is not deleted for the life of the async operation </para>        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="445" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="3233" bodyend="3285"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2856">
        <label>graphene::app::database_api_impl</label>
        <link refid="classgraphene_1_1app_1_1database__api__impl"/>
        <childnode refid="2857" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2857">
        <label>std::enable_shared_from_this&lt; database_api_impl &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2868">
        <label>map&lt; pair&lt; asset_id_type, asset_id_type &gt;, std::function&lt; void(const variant &amp;)&gt; &gt;</label>
      </node>
      <node id="2862">
        <label>graphene::api_helper_indexes::amount_in_collateral_index</label>
        <link refid="classgraphene_1_1api__helper__indexes_1_1amount__in__collateral__index"/>
        <childnode refid="2861" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2858">
        <label>graphene::app::database_api_impl</label>
        <link refid="classgraphene_1_1app_1_1database__api__impl"/>
        <childnode refid="2859" relation="public-inheritance">
        </childnode>
        <childnode refid="2860" relation="usage">
          <edgelabel>asset_in_liquidity_pools_index</edgelabel>
        </childnode>
        <childnode refid="2862" relation="usage">
          <edgelabel>amount_in_collateral_index</edgelabel>
        </childnode>
        <childnode refid="2863" relation="usage">
          <edgelabel>_subscribe_filter</edgelabel>
        </childnode>
        <childnode refid="2864" relation="usage">
          <edgelabel>_app_options</edgelabel>
        </childnode>
        <childnode refid="2865" relation="usage">
          <edgelabel>_db</edgelabel>
        </childnode>
        <childnode refid="2868" relation="usage">
          <edgelabel>_market_subscriptions</edgelabel>
        </childnode>
      </node>
      <node id="2860">
        <label>graphene::api_helper_indexes::asset_in_liquidity_pools_index</label>
        <link refid="classgraphene_1_1api__helper__indexes_1_1asset__in__liquidity__pools__index"/>
        <childnode refid="2861" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2863">
        <label>fc::bloom_filter</label>
        <link refid="classfc_1_1bloom__filter"/>
      </node>
      <node id="2866">
        <label>graphene::db::object_database</label>
        <link refid="classgraphene_1_1db_1_1object__database"/>
        <childnode refid="2867" relation="usage">
          <edgelabel>_undo_db</edgelabel>
        </childnode>
      </node>
      <node id="2859">
        <label>std::enable_shared_from_this&lt; database_api_impl &gt;</label>
      </node>
      <node id="2864">
        <label>graphene::app::application_options</label>
        <link refid="classgraphene_1_1app_1_1application__options"/>
      </node>
      <node id="2865">
        <label>graphene::chain::database</label>
        <link refid="classgraphene_1_1chain_1_1database"/>
        <childnode refid="2866" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2867">
        <label>graphene::db::undo_database</label>
        <link refid="classgraphene_1_1db_1_1undo__database"/>
      </node>
      <node id="2861">
        <label>graphene::db::secondary_index</label>
        <link refid="classgraphene_1_1db_1_1secondary__index"/>
      </node>
    </collaborationgraph>
    <location file="libraries/app/database_api_impl.hxx" line="37" column="1" bodyfile="libraries/app/database_api_impl.hxx" bodystart="36" bodyend="474"/>
    <listofallmembers>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1adfa5d54e19c7fd76f2357dab88b305be" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>_app_options</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a3986f9637134d0f91d711c7ff4df7189" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>_applied_block_connection</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a79f338b26855b0a580f74e47e0600758" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>_block_applied_callback</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a08837ce80550808d16dc34e85258f40f" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>_change_connection</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a1da4ab9154f9a30bae71e183b202d1e1" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>_db</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a4bfce46e305ae20b9925122fb709172f" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>_enabled_auto_subscription</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a466336fd22c476e6b2e0b4e52ef6dce5" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>_market_subscriptions</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ae432b4993936147dcd5e8ac87bc087eb" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>_new_connection</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a44bb83df538540ec0d969c739f28c589" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>_notify_remove_create</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1adfbd822d409be041227ec58c94f95db8" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>_pending_trx_callback</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a3a55e04699d428f42c9a69672d488105" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>_pending_trx_connection</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a499df6660549b1f8b430a8c4a612c72e" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>_removed_connection</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1af716153167cbb37816d69a69cd8391ee" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>_subscribe_callback</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1add7a21998f28a6c4aea41006eb1ff022" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>_subscribe_filter</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1acab1dea5c17660083df33c2bddc204e2" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>_subscribed_accounts</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ae878a059b25940c3128df69eac716387" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>amount_in_collateral_index</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a763e2b91c01dfb19f0c353fe63a880c2" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>asset_in_liquidity_pools_index</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a7cfc3b40b9187f22cc92d0859118edd7" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>broadcast_market_updates</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a55ff9f5836e67fc803189fa184d8dbcb" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>broadcast_updates</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a10a111caefade7a34e2561598a19e4e7" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>cancel_all_subscriptions</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ada366a6d7683a99bdfd996083a5c8a12" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>database_api_impl</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ac70659cf33483f0113f2559eb18b6903" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>enqueue_if_subscribed_to_market</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a87fe3dde7eaca519823e4b72be211c0f" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>extend_asset</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a58b0c1691bbe90006649a33ce0ef59db" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>extend_liquidity_pool</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a74c11d1a6ada296392b91c6f6aab73bf" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_24_volume</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a055549cea17490afff9dac6d630dc00f" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_account_balances</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ac5c1fd29358dcde88ec644292de59304" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_account_by_name</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a533c834442d9e8fbaeae5eb24d4fe8c5" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_account_count</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1af21ecb8db6145c300b0cb7c2e3eb459f" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_account_from_string</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ab3403f35315c6897e2a8c932d06d90ab" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_account_id_from_string</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ac1e87faca0ea7685d4981f560845a4c3" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_account_limit_orders</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a0f794f3c0a8ef81a30577bad0f407234" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_account_references</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a8a4126a29ea149d26c165600ec82308c" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_accounts</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a3c40f6804d7953d8a38ff5cae42cc9b9" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_all_workers</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ab8fe38b14e9f6338ad37cfa9ebfc0a0c" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_asset_count</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1afb38ce694c7f426fadee2d6fc24da7be" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_asset_from_string</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1af3e92e9a866e031d0cf60d4abc9535f8" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_asset_id_from_string</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1adabaa7294e88ec538087b166a1c75c14" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_assets</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ae37ae8e6b54cbf59dc81a33e5584062f" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_assets</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a77b7dbf50bd779270cf31eb28f7f64be" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_assets_by_issuer</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a4b67f755903be7bed1eb3f61366161ed" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_balance_objects</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a7de551d4426d9a21993112bb3f35f4ad" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_blinded_balances</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a4f8ca77969a3a47743bdc66f021679f5" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_block</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1abddd3de3ec7554f51feca1d2c2449545" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_block_header</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a2af82d8456f2cb69c404d16afb507531" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_block_header_batch</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a6b5c43a0c0471117d4605ed7135209f1" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_call_orders</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a8c46414e35488fbe9b63256c7ca417bd" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_call_orders_by_account</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ae1ef8481ac7c44930bfe5be02f2e117c" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_chain_id</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a7bbbd8340e3a055bc364347a274b4088" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_chain_properties</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1aa7f25e9539123cc0ba1665c3d404f940" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_collateral_bids</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a6b75f9f2f2e5e16251273cd2c45a9aeb" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_committee_count</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a7cb45406eed7bedad612ae846de68c25" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_committee_member_by_account</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a3b2dca43bea0d0e738a89f289a3dd3e5" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_committee_members</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1adc5103c45a6cdfb1fe22994a638b5e23" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_config</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a8b3661d0ff3e8a803dd482d78db969d4" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_dynamic_global_properties</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a7d7b0e58cdc997f431dd80bfab9da0ea" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_full_accounts</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a725dc238410a57fc9196fb58a51651ca" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_global_properties</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a4a9007de32e018cc817133a50ba23f5f" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_htlc</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a1a4b9cebb410ca5decd42ba6d124eff1" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_htlc_by_from</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a52dbff18e73b4a29d5ae03c1041e65fe" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_htlc_by_to</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ac413a2c0d519844f64fcfdd42d6ed07c" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_key_references</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ab34a6f802fb4a7fd170fb1d7cd855b9c" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_limit_orders</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a3d2d475d94b76c8fdf1b0087105cb5a6" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_limit_orders</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a465a681bf2f974ddb46d4a060a54cda0" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_limit_orders_by_account</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ad14cd3092f4a09e26181e1870e4a99be" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_liquidity_pools</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a5dfd63845c3aad6c28c9140d7089af8c" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_liquidity_pools_by_asset_a</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ab97143e718a3a4f44c695774269928f1" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_liquidity_pools_by_asset_b</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ae93d5c619a654adf2b700f9912945b51" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_liquidity_pools_by_asset_x</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a779d3e038a9f514b7e29f57b6d99cad8" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_liquidity_pools_by_both_assets</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a486e8ca04bf30aa7400c902128b4938b" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_liquidity_pools_by_one_asset</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a75195e7cebf8302e74b1f53f5cb3cdaa" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_liquidity_pools_by_owner</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ac0921dcc3cfb47d614899e64f3925925" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_liquidity_pools_by_share_asset</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a508e311509df982cf71e0a49d7229340" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_margin_positions</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a19c305c96963c8204e73496be2a3686c" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_named_account_balances</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a10174ed5a3ba9557db9f936e68341021" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_objects</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a48454fe6a8019d002f6ecdbafc59ca97" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_order_book</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a4a86e1e60f29941254c6ce0d1c0aa50e" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_order_market</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a6b507ea1f58b046fce6c0a72e835f33e" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_order_market</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a3326e8067727c3f7d11a6c694cdeb4d0" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_potential_address_signatures</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a6db14440f360623c5fc78ed256879201" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_potential_signatures</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1aa674547dfccd5142e20e289ea9fc6a53" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_proposed_transactions</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a3375feb2e6c825a404b13f9306392b1c" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_required_fees</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a32c43accb6c3b451a09ac69ac32330b2" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_required_signatures</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a7d64a3f69d163b86630d3bc1e9855594" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_settle_orders</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a204e50c6a6a801e831d06dcd2287a202" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_settle_orders_by_account</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a14570ed6210976669e9a63c67f34a620" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_subscription_key</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a774b85e60c95c5a60934242bfd1e5ebf" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_ticker</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a5c1cd36c6d899390b5a9a714d8d7bbc2" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_tickets_by_account</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a7443d8f6b3f645e670e3257159fb9d5b" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_top_markets</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1afff241ae460cd5a5f8b97f2c4131cedf" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_top_voters</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a5a1dec96969a01f52afe2716480f5396" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_trade_history</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1aa4f19478fbdfa54472942c2e9ca0a9f2" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_trade_history_by_sequence</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a7431aaf8efbb6294542aab30e2ba0b6b" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_transaction</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1afa428aee96cb8d2d4a0a599df13d2be3" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_transaction_hex</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a28a73ba8de201171d8405b0e53bc1e2f" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_transaction_hex_without_sig</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a5b6aa904561263226f7a1c9e156f65e2" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_vested_balances</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a6af355faed9f24cc2d194cfad42d356d" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_vesting_balances</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a31f2506dfe8e4e9bac4d689cd8cef2b7" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_whether_to_subscribe</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1af81f5487f6e27c8878bf9a36eb359afa" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_withdraw_permissions_by_giver</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ac4c8dd7cf9468f15d4eabb52df8a12e7" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_withdraw_permissions_by_recipient</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a1e69b6bee0247c19feb0d0e5c0a56742" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_witness_by_account</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ae9d23542c8f07a3d221ce95d37570fa1" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_witness_count</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a02a1cbebce0918634c7bac919d4485cc" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_witnesses</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a5e26bc34c2c79ce035a70ec3fbd4386d" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_worker_count</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a921d38e533a7ca4526b40dc7527c06c6" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>get_workers_by_account</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1af32c7a64a34782f8cfc678098e63633a" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>handle_object_changed</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a070c7127572da3986facf042c6668ccc" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>is_impacted_account</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a90693014fb37a83d5312e0ead1529545" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>is_public_key_registered</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1afa0be562770d1f11ac9a9f741dc2e35b" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>is_subscribed_to_item</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a50271ce8eea13e6fd9f70ae379480b28" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>list_assets</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ab4e7d2b03b7f54a595c8c8c2496b8a01" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>list_htlcs</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ab9b9c1e3bed0f34c9b3f0061688932c6" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>list_liquidity_pools</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ae29fd39df8422ae93fda61f4d8fd9b36" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>list_tickets</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1aea1a4b897b054bd5f080a41380325187" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>lookup_account_names</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a37ddf5c70d13f996627fa7d0600afa56" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>lookup_accounts</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1abdec67b9eb3e7b489808834310151e65" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>lookup_asset_symbols</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a0a15870d91e0d330094aaa203c7b7b70" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>lookup_committee_member_accounts</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a20ee8c93cf227bdba64f7d8fc7592882" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>lookup_vote_ids</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a8f5f1c58f52cd07b58c9c0e1dd72d57b" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>lookup_witness_accounts</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ae7b704ead77565a89c50fa327288d1a1" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>on_applied_block</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ad55c3a34c9ad6e65d4fe87261d76bef4" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>on_objects_changed</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ad7e92705742642bcc7c856f03ed1e244" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>on_objects_new</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a07b11af3581db3c1167026d69efbc26e" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>on_objects_removed</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a4723adbefd08c756b2e866d36b6c6215" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>set_auto_subscription</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1aaa7ad36ef0da4021fc4dea51449014bf" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>set_block_applied_callback</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a0ab92833cf9e6fa7b6a6b7472b2f36a3" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>set_pending_transaction_callback</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a9efad1951dada7a463e304d5ade154ab" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>set_subscribe_callback</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1aa57048eb9af8413ef0e2e5726b07ab34" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>subscribe_to_item</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1ae7aebb8dd3c0a3ebd55a63a0cb2f77dc" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>subscribe_to_market</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a50f5bf4428137943bd874d6e2883b4af" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>unsubscribe_from_market</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a6cf52d3ec72f724ea0edb74411db197e" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>validate_transaction</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a42ec7156f59a86d00d97dc97871b0791" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>verify_account_authority</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a50ade37c6b7750211b6aa6d8a2f48937" prot="public" virt="non-virtual"><scope>graphene::app::database_api_impl</scope><name>verify_authority</name></member>
      <member refid="classgraphene_1_1app_1_1database__api__impl_1a89f8d316670134c3faa5fb07032603cb" prot="public" virt="virtual"><scope>graphene::app::database_api_impl</scope><name>~database_api_impl</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
