<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classgraphene_1_1app_1_1crypto__api" kind="class" language="C++" prot="public">
    <compoundname>graphene::app::crypto_api</compoundname>
    <includes refid="app_2include_2graphene_2app_2api_8hpp" local="no">api.hpp</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgraphene_1_1app_1_1crypto__api_1adcb829f4fc90959164d92b4b285e8085" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::app::crypto_api::crypto_api</definition>
        <argsstring>()</argsstring>
        <name>crypto_api</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/api.hpp" line="424" column="1" bodyfile="libraries/app/api.cpp" bodystart="686" bodyend="686"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1crypto__api_1a819517c27c9b5436cea4bd7114d68759" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacefc_1_1ecc_1a582249fe15693cc9c040286a8ef296f8" kindref="member">fc::ecc::commitment_type</ref></type>
        <definition>commitment_type graphene::app::crypto_api::blind</definition>
        <argsstring>(const fc::ecc::blind_factor_type &amp;blind, uint64_t value)</argsstring>
        <name>blind</name>
        <param>
          <type>const <ref refid="namespacefc_1_1ecc_1a3e4c1ecf3ceb1fb0d3aefa24532d0766" kindref="member">fc::ecc::blind_factor_type</ref> &amp;</type>
          <declname>blind</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Generates a pedersen commitment: *commit = blind * G + value * G2. The commitment is 33 bytes, the blinding factor is 32 bytes. For more information about pederson commitment check url <ulink url="https://en.wikipedia.org/wiki/Commitment_scheme">https://en.wikipedia.org/wiki/Commitment_scheme</ulink>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>blind</parametername>
</parameternamelist>
<parameterdescription>
<para>Sha-256 blind factor type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Positive 64-bit integer value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A 33-byte pedersen commitment: *commit = blind * G + value * G2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/api.hpp" line="434" column="1" bodyfile="libraries/app/api.cpp" bodystart="688" bodyend="691"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1crypto__api_1aa1a6caa5122568ca0ae4f5379a2d1943" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacefc_1_1ecc_1a3e4c1ecf3ceb1fb0d3aefa24532d0766" kindref="member">fc::ecc::blind_factor_type</ref></type>
        <definition>blind_factor_type graphene::app::crypto_api::blind_sum</definition>
        <argsstring>(const std::vector&lt; blind_factor_type &gt; &amp;blinds_in, uint32_t non_neg)</argsstring>
        <name>blind_sum</name>
        <param>
          <type>const std::vector&lt; <ref refid="namespacefc_1_1ecc_1a3e4c1ecf3ceb1fb0d3aefa24532d0766" kindref="member">blind_factor_type</ref> &gt; &amp;</type>
          <declname>blinds_in</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>non_neg</declname>
        </param>
        <briefdescription>
<para>Get sha-256 blind factor type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>blinds_in</parametername>
</parameternamelist>
<parameterdescription>
<para>List of sha-256 blind factor types </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>non_neg</parametername>
</parameternamelist>
<parameterdescription>
<para>32-bit integer value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A blind factor type </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/api.hpp" line="442" column="1" bodyfile="libraries/app/api.cpp" bodystart="693" bodyend="696"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1crypto__api_1ad9c6f9589828b10f4cc8bfe4a6a359d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::app::crypto_api::verify_sum</definition>
        <argsstring>(const std::vector&lt; commitment_type &gt; &amp;commits_in, const std::vector&lt; commitment_type &gt; &amp;neg_commits_in, int64_t excess)</argsstring>
        <name>verify_sum</name>
        <param>
          <type>const std::vector&lt; <ref refid="namespacefc_1_1ecc_1a582249fe15693cc9c040286a8ef296f8" kindref="member">commitment_type</ref> &gt; &amp;</type>
          <declname>commits_in</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespacefc_1_1ecc_1a582249fe15693cc9c040286a8ef296f8" kindref="member">commitment_type</ref> &gt; &amp;</type>
          <declname>neg_commits_in</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>excess</declname>
        </param>
        <briefdescription>
<para>Verifies that commits + neg_commits + excess == 0. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>commits_in</parametername>
</parameternamelist>
<parameterdescription>
<para>List of 33-byte pedersen commitments </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>neg_commits_in</parametername>
</parameternamelist>
<parameterdescription>
<para>List of 33-byte pedersen commitments </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>excess</parametername>
</parameternamelist>
<parameterdescription>
<para>Sum of two list of 33-byte pedersen commitments where sums the first set and subtracts the second </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Boolean - true in event of commits + neg_commits + excess == 0, otherwise false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/api.hpp" line="452" column="1" bodyfile="libraries/app/api.cpp" bodystart="698" bodyend="701"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1crypto__api_1a5310e5955a16937db91c99a8fea0ffe6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1app_1_1verify__range__result" kindref="compound">verify_range_result</ref></type>
        <definition>verify_range_result graphene::app::crypto_api::verify_range</definition>
        <argsstring>(const fc::ecc::commitment_type &amp;commit, const std::vector&lt; char &gt; &amp;proof)</argsstring>
        <name>verify_range</name>
        <param>
          <type>const <ref refid="namespacefc_1_1ecc_1a582249fe15693cc9c040286a8ef296f8" kindref="member">fc::ecc::commitment_type</ref> &amp;</type>
          <declname>commit</declname>
        </param>
        <param>
          <type>const std::vector&lt; char &gt; &amp;</type>
          <declname>proof</declname>
        </param>
        <briefdescription>
<para>Verifies range proof for 33-byte pedersen commitment. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>commit</parametername>
</parameternamelist>
<parameterdescription>
<para>33-byte pedersen commitment </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>proof</parametername>
</parameternamelist>
<parameterdescription>
<para>List of characters </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A structure with success, min and max values </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/api.hpp" line="464" column="1" bodyfile="libraries/app/api.cpp" bodystart="703" bodyend="708"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1crypto__api_1a1923d73235200a4f3da0a4d021a865d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; char &gt;</type>
        <definition>std::vector&lt; char &gt; graphene::app::crypto_api::range_proof_sign</definition>
        <argsstring>(uint64_t min_value, const commitment_type &amp;commit, const blind_factor_type &amp;commit_blind, const blind_factor_type &amp;nonce, int8_t base10_exp, uint8_t min_bits, uint64_t actual_value)</argsstring>
        <name>range_proof_sign</name>
        <param>
          <type>uint64_t</type>
          <declname>min_value</declname>
        </param>
        <param>
          <type>const <ref refid="namespacefc_1_1ecc_1a582249fe15693cc9c040286a8ef296f8" kindref="member">commitment_type</ref> &amp;</type>
          <declname>commit</declname>
        </param>
        <param>
          <type>const <ref refid="namespacefc_1_1ecc_1a3e4c1ecf3ceb1fb0d3aefa24532d0766" kindref="member">blind_factor_type</ref> &amp;</type>
          <declname>commit_blind</declname>
        </param>
        <param>
          <type>const <ref refid="namespacefc_1_1ecc_1a3e4c1ecf3ceb1fb0d3aefa24532d0766" kindref="member">blind_factor_type</ref> &amp;</type>
          <declname>nonce</declname>
        </param>
        <param>
          <type>int8_t</type>
          <declname>base10_exp</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>min_bits</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>actual_value</declname>
        </param>
        <briefdescription>
<para>Proves with respect to min_value the range for pedersen commitment which has the provided blinding factor and value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>min_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Positive 64-bit integer value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>commit</parametername>
</parameternamelist>
<parameterdescription>
<para>33-byte pedersen commitment </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>commit_blind</parametername>
</parameternamelist>
<parameterdescription>
<para>Sha-256 blind factor type for the correct digits </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nonce</parametername>
</parameternamelist>
<parameterdescription>
<para>Sha-256 blind factor type for our non-forged signatures </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>base10_exp</parametername>
</parameternamelist>
<parameterdescription>
<para>Exponents base 10 in range [-1 ; 18] inclusively </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>8-bit positive integer, must be in range [0 ; 64] inclusively </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>actual_value</parametername>
</parameternamelist>
<parameterdescription>
<para>64-bit positive integer, must be greater or equal min_value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A list of characters as proof in proof </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/api.hpp" line="478" column="1" bodyfile="libraries/app/api.cpp" bodystart="710" bodyend="719"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1crypto__api_1af49d58d9538c6908ea320887af07d9f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1app_1_1verify__range__proof__rewind__result" kindref="compound">verify_range_proof_rewind_result</ref></type>
        <definition>verify_range_proof_rewind_result graphene::app::crypto_api::verify_range_proof_rewind</definition>
        <argsstring>(const blind_factor_type &amp;nonce, const fc::ecc::commitment_type &amp;commit, const std::vector&lt; char &gt; &amp;proof)</argsstring>
        <name>verify_range_proof_rewind</name>
        <param>
          <type>const <ref refid="namespacefc_1_1ecc_1a3e4c1ecf3ceb1fb0d3aefa24532d0766" kindref="member">blind_factor_type</ref> &amp;</type>
          <declname>nonce</declname>
        </param>
        <param>
          <type>const <ref refid="namespacefc_1_1ecc_1a582249fe15693cc9c040286a8ef296f8" kindref="member">fc::ecc::commitment_type</ref> &amp;</type>
          <declname>commit</declname>
        </param>
        <param>
          <type>const std::vector&lt; char &gt; &amp;</type>
          <declname>proof</declname>
        </param>
        <briefdescription>
<para>Verifies range proof rewind for 33-byte pedersen commitment. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nonce</parametername>
</parameternamelist>
<parameterdescription>
<para>Sha-256 blind refactor type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>commit</parametername>
</parameternamelist>
<parameterdescription>
<para>33-byte pedersen commitment </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>proof</parametername>
</parameternamelist>
<parameterdescription>
<para>List of characters </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A structure with success, min, max, value_out, blind_out and message_out values </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/api.hpp" line="493" column="1" bodyfile="libraries/app/api.cpp" bodystart="721" bodyend="735"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1crypto__api_1a6765af523fc6dd5e75872782b4ee12b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfc_1_1ecc_1_1range__proof__info" kindref="compound">range_proof_info</ref></type>
        <definition>range_proof_info graphene::app::crypto_api::range_get_info</definition>
        <argsstring>(const std::vector&lt; char &gt; &amp;proof)</argsstring>
        <name>range_get_info</name>
        <param>
          <type>const std::vector&lt; char &gt; &amp;</type>
          <declname>proof</declname>
        </param>
        <briefdescription>
<para>Gets &quot;range proof&quot; info. The cli_wallet includes functionality for sending blind transfers in which the values of the input and outputs amounts are “blinded.” In the case where a transaction produces two or more outputs, (e.g. an amount to the intended recipient plus “change” back to the sender), a &quot;range proof&quot; must be supplied to prove that none of the outputs commit to a negative value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proof</parametername>
</parameternamelist>
<parameterdescription>
<para>List of proof&apos;s characters </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A range proof info structure with exponent, mantissa, min and max values </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/api.hpp" line="506" column="1" bodyfile="libraries/app/api.cpp" bodystart="737" bodyend="740"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classgraphene_1_1app_1_1crypto__api" kindref="compound">crypto_api</ref> class allows computations related to blinded transfers. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/app/include/graphene/app/api.hpp" line="422" column="1" bodyfile="libraries/app/include/graphene/app/api.hpp" bodystart="421" bodyend="507"/>
    <listofallmembers>
      <member refid="classgraphene_1_1app_1_1crypto__api_1a819517c27c9b5436cea4bd7114d68759" prot="public" virt="non-virtual"><scope>graphene::app::crypto_api</scope><name>blind</name></member>
      <member refid="classgraphene_1_1app_1_1crypto__api_1aa1a6caa5122568ca0ae4f5379a2d1943" prot="public" virt="non-virtual"><scope>graphene::app::crypto_api</scope><name>blind_sum</name></member>
      <member refid="classgraphene_1_1app_1_1crypto__api_1adcb829f4fc90959164d92b4b285e8085" prot="public" virt="non-virtual"><scope>graphene::app::crypto_api</scope><name>crypto_api</name></member>
      <member refid="classgraphene_1_1app_1_1crypto__api_1a6765af523fc6dd5e75872782b4ee12b2" prot="public" virt="non-virtual"><scope>graphene::app::crypto_api</scope><name>range_get_info</name></member>
      <member refid="classgraphene_1_1app_1_1crypto__api_1a1923d73235200a4f3da0a4d021a865d2" prot="public" virt="non-virtual"><scope>graphene::app::crypto_api</scope><name>range_proof_sign</name></member>
      <member refid="classgraphene_1_1app_1_1crypto__api_1a5310e5955a16937db91c99a8fea0ffe6" prot="public" virt="non-virtual"><scope>graphene::app::crypto_api</scope><name>verify_range</name></member>
      <member refid="classgraphene_1_1app_1_1crypto__api_1af49d58d9538c6908ea320887af07d9f3" prot="public" virt="non-virtual"><scope>graphene::app::crypto_api</scope><name>verify_range_proof_rewind</name></member>
      <member refid="classgraphene_1_1app_1_1crypto__api_1ad9c6f9589828b10f4cc8bfe4a6a359d3" prot="public" virt="non-virtual"><scope>graphene::app::crypto_api</scope><name>verify_sum</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
