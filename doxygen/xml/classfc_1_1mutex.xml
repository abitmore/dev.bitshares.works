<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classfc_1_1mutex" kind="class" language="C++" prot="public">
    <compoundname>fc::mutex</compoundname>
    <includes refid="mutex_8hpp" local="no">mutex.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classfc_1_1mutex_1a97a38fb4fbf7e8a915e878ad151b3afe" prot="private" static="no" mutable="no">
        <type><ref refid="classfc_1_1spin__yield__lock" kindref="compound">fc::spin_yield_lock</ref></type>
        <definition>fc::spin_yield_lock fc::mutex::m_blist_lock</definition>
        <argsstring></argsstring>
        <name>m_blist_lock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/mutex.hpp" line="103" column="1" bodyfile="libraries/fc/include/fc/thread/mutex.hpp" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classfc_1_1mutex_1a2f3f576709916c149834708b56c0c4fa" prot="private" static="no" mutable="no">
        <type><ref refid="structfc_1_1context" kindref="compound">fc::context</ref> *</type>
        <definition>fc::context* fc::mutex::m_blist</definition>
        <argsstring></argsstring>
        <name>m_blist</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/mutex.hpp" line="104" column="1" bodyfile="libraries/fc/include/fc/thread/mutex.hpp" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classfc_1_1mutex_1a3f2ed33bcc22177ac92049ca60a4675f" prot="private" static="no" mutable="no">
        <type>unsigned</type>
        <definition>unsigned fc::mutex::recursive_lock_count</definition>
        <argsstring></argsstring>
        <name>recursive_lock_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/mutex.hpp" line="105" column="1" bodyfile="libraries/fc/include/fc/thread/mutex.hpp" bodystart="105" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classfc_1_1mutex_1ac22379059fe8687ec5beb098ca606060" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::mutex::mutex</definition>
        <argsstring>()</argsstring>
        <name>mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/mutex.hpp" line="93" column="1" bodyfile="libraries/fc/src/thread/mutex.cpp" bodystart="10" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1mutex_1a135d5ee5d0422e223d0956caa928761b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::mutex::~mutex</definition>
        <argsstring>()</argsstring>
        <name>~mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/mutex.hpp" line="94" column="1" bodyfile="libraries/fc/src/thread/mutex.cpp" bodystart="15" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1mutex_1a6ee1f956f3714d91df52a736b496d993" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::mutex::try_lock</definition>
        <argsstring>()</argsstring>
        <name>try_lock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A mutex is considered to hold the lock when the current context is the tail in the wait queue. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/mutex.hpp" line="96" column="1" bodyfile="libraries/fc/src/thread/mutex.cpp" bodystart="83" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1mutex_1a992f444812ae4faebe485f3131d8a10b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::mutex::try_lock_for</definition>
        <argsstring>(const microseconds &amp;rel_time)</argsstring>
        <name>try_lock_for</name>
        <param>
          <type>const <ref refid="classfc_1_1microseconds" kindref="compound">microseconds</ref> &amp;</type>
          <declname>rel_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/mutex.hpp" line="97" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1mutex_1a6c203a83ae29c8566a5bbbc07bc33931" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::mutex::try_lock_until</definition>
        <argsstring>(const time_point &amp;abs_time)</argsstring>
        <name>try_lock_until</name>
        <param>
          <type>const <ref refid="classfc_1_1time__point" kindref="compound">time_point</ref> &amp;</type>
          <declname>abs_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/mutex.hpp" line="98" column="1" bodyfile="libraries/fc/src/thread/mutex.cpp" bodystart="101" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1mutex_1ad27acb6182f2c9999c2ac2d2463077c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::mutex::lock</definition>
        <argsstring>()</argsstring>
        <name>lock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/mutex.hpp" line="99" column="1" bodyfile="libraries/fc/src/thread/mutex.cpp" bodystart="136" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1mutex_1a9631571a059b48fe90022923795bfab4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::mutex::unlock</definition>
        <argsstring>()</argsstring>
        <name>unlock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/mutex.hpp" line="100" column="1" bodyfile="libraries/fc/src/thread/mutex.cpp" bodystart="194" bodyend="212"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>mutex </para>    </briefdescription>
    <detaileddescription>
<para>This mutex has an advantage over boost::mutex in that it does not involve any system calls, even in contention.</para><para>Uncontensted access is a simple compare and swap, no delay.</para><para>Contested access by different fibers in the same thread simply yields the thread until the lock is available. Actual delay is subject to the cooperative nature of other tasks in the fiber&apos;s thread.</para><para>Contested access by different threads requires a spin lock while the task is enqueued. Because the enqueue action is well-defined and &apos;short-lived&apos; time spent &apos;spinning&apos; should be minimal.</para><para>Cooperatively multi-tasked code must still worry about reentrancy. Suppose you have a thread sending a message across a socket, the socket members are thread safe, but the <computeroutput>write_message()</computeroutput> operation is not rentrant because the context could yield while waiting for a partial write to complete.</para><para>If while it has yielded another task in the same thread attempts to write a second message then you will get garbage out as both fibers take turns writing parts of their messages out of the socket.</para><para>Example problem: <programlisting><codeline><highlight class="normal">async(write_message);</highlight></codeline>
<codeline><highlight class="normal">async(write_message);</highlight></codeline>
<codeline><highlight class="normal">void<sp/>write_message()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sock-&gt;write(part1);<sp/>//<sp/>may<sp/>yield</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sock-&gt;write(part2);<sp/>//<sp/>may<sp/>yield</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sock-&gt;write(part3);<sp/>//<sp/>may<sp/>yield</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>The output could look something like:</para><para><programlisting><codeline><highlight class="normal">part1</highlight></codeline>
<codeline><highlight class="normal">part2</highlight></codeline>
<codeline><highlight class="normal">part1</highlight></codeline>
<codeline><highlight class="normal">part3</highlight></codeline>
<codeline><highlight class="normal">part2</highlight></codeline>
<codeline><highlight class="normal">part3</highlight></codeline>
</programlisting></para><para>What you want to happen is this:</para><para><programlisting><codeline><highlight class="normal">void<sp/>write_message()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>boost::unique_lock&lt;fc::mutex&gt;<sp/>lock(sock-&gt;write_lock);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sock-&gt;write(part1);<sp/>//<sp/>may<sp/>yield</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sock-&gt;write(part2);<sp/>//<sp/>may<sp/>yield</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sock-&gt;write(part3);<sp/>//<sp/>may<sp/>yield</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>Now if while writing the first message, someone attempts to write a second message second write will &apos;queue&apos; behind the first by &apos;blocking&apos; on the mutex.</para><para>As a result we now have to extend the normal discussion on thread-safe vs reentrant.</para><para><itemizedlist>
<listitem><para>prempt-thread-safe : the code may be called by multiple os threads at the same time.</para></listitem><listitem><para>coop-thread-safe : the code may be called by multiple contexts within the same thread.</para></listitem><listitem><para>thread-unsafe : the code may only be called by one context at a time for a set of data.</para></listitem></itemizedlist>
</para><para>In the example above, before we added the mutex the code was thread-unsafe After we added the mutex the code became coop-thread-safe, and potentially prempt-thread-safe</para><para>To be preempt-thread-safe any operations must be atomic or protected by a lock because the OS could switch you out between any two instructions.</para><para>To be coop-thread-safe all operations are &apos;atomic&apos; unless they span a &apos;yield&apos;. If they span a yield (such as writing parts of a message), then a mutex is required. </para>    </detaileddescription>
    <location file="libraries/fc/include/fc/thread/mutex.hpp" line="91" column="1" bodyfile="libraries/fc/include/fc/thread/mutex.hpp" bodystart="91" bodyend="106"/>
    <listofallmembers>
      <member refid="classfc_1_1mutex_1ad27acb6182f2c9999c2ac2d2463077c7" prot="public" virt="non-virtual"><scope>fc::mutex</scope><name>lock</name></member>
      <member refid="classfc_1_1mutex_1a2f3f576709916c149834708b56c0c4fa" prot="private" virt="non-virtual"><scope>fc::mutex</scope><name>m_blist</name></member>
      <member refid="classfc_1_1mutex_1a97a38fb4fbf7e8a915e878ad151b3afe" prot="private" virt="non-virtual"><scope>fc::mutex</scope><name>m_blist_lock</name></member>
      <member refid="classfc_1_1mutex_1ac22379059fe8687ec5beb098ca606060" prot="public" virt="non-virtual"><scope>fc::mutex</scope><name>mutex</name></member>
      <member refid="classfc_1_1mutex_1a3f2ed33bcc22177ac92049ca60a4675f" prot="private" virt="non-virtual"><scope>fc::mutex</scope><name>recursive_lock_count</name></member>
      <member refid="classfc_1_1mutex_1a6ee1f956f3714d91df52a736b496d993" prot="public" virt="non-virtual"><scope>fc::mutex</scope><name>try_lock</name></member>
      <member refid="classfc_1_1mutex_1a992f444812ae4faebe485f3131d8a10b" prot="public" virt="non-virtual"><scope>fc::mutex</scope><name>try_lock_for</name></member>
      <member refid="classfc_1_1mutex_1a6c203a83ae29c8566a5bbbc07bc33931" prot="public" virt="non-virtual"><scope>fc::mutex</scope><name>try_lock_until</name></member>
      <member refid="classfc_1_1mutex_1a9631571a059b48fe90022923795bfab4" prot="public" virt="non-virtual"><scope>fc::mutex</scope><name>unlock</name></member>
      <member refid="classfc_1_1mutex_1a135d5ee5d0422e223d0956caa928761b" prot="public" virt="non-virtual"><scope>fc::mutex</scope><name>~mutex</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
