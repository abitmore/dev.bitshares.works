<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="structgraphene_1_1protocol_1_1bitasset__options" kind="struct" language="C++" prot="public">
    <compoundname>graphene::protocol::bitasset_options</compoundname>
    <includes refid="asset__ops_8hpp" local="no">asset_ops.hpp</includes>
    <innerclass refid="structgraphene_1_1protocol_1_1bitasset__options_1_1ext" prot="public">graphene::protocol::bitasset_options::ext</innerclass>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1bitasset__options_1aca434c9332bb80a51ea1644403b9f4cc" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t graphene::protocol::bitasset_options::feed_lifetime_sec</definition>
        <argsstring></argsstring>
        <name>feed_lifetime_sec</name>
        <initializer>= <ref refid="protocol_2include_2graphene_2protocol_2config_8hpp_1a0ce06f10a711677251107caa0ac33dc6" kindref="member">GRAPHENE_DEFAULT_PRICE_FEED_LIFETIME</ref></initializer>
        <briefdescription>
<para>Time before a price feed expires. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="126" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset_ops.hpp" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1bitasset__options_1a7ab5de34e4e61645c5c2bee142146b2c" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t graphene::protocol::bitasset_options::minimum_feeds</definition>
        <argsstring></argsstring>
        <name>minimum_feeds</name>
        <initializer>= 1</initializer>
        <briefdescription>
<para>Minimum number of unexpired feeds required to extract a median feed from. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="128" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset_ops.hpp" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1bitasset__options_1a7bbe267228c39b9614f311daad0ac06e" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t graphene::protocol::bitasset_options::force_settlement_delay_sec</definition>
        <argsstring></argsstring>
        <name>force_settlement_delay_sec</name>
        <initializer>= <ref refid="protocol_2include_2graphene_2protocol_2config_8hpp_1a664f0f3802f2770f9c6268f50bb69ebc" kindref="member">GRAPHENE_DEFAULT_FORCE_SETTLEMENT_DELAY</ref></initializer>
        <briefdescription>
<para>This is the delay between the time a long requests settlement and the chain evaluates the settlement. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="130" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset_ops.hpp" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1bitasset__options_1a802bf9906028158da2abcf3d5f0b05e0" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t graphene::protocol::bitasset_options::force_settlement_offset_percent</definition>
        <argsstring></argsstring>
        <name>force_settlement_offset_percent</name>
        <initializer>= <ref refid="protocol_2include_2graphene_2protocol_2config_8hpp_1a8d59c575193fad3e084e5f4d0c9e1db4" kindref="member">GRAPHENE_DEFAULT_FORCE_SETTLEMENT_OFFSET</ref></initializer>
        <briefdescription>
<para>This is the percent to adjust the feed price in the short&apos;s favor in the event of a forced settlement. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="132" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset_ops.hpp" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1bitasset__options_1aac3a51ee4416a416b655264c9c78f6dc" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t graphene::protocol::bitasset_options::maximum_force_settlement_volume</definition>
        <argsstring></argsstring>
        <name>maximum_force_settlement_volume</name>
        <initializer>= <ref refid="protocol_2include_2graphene_2protocol_2config_8hpp_1adc5efb82601873c5bd188b5ba494967d" kindref="member">GRAPHENE_DEFAULT_FORCE_SETTLEMENT_MAX_VOLUME</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Force settlement volume can be limited such that only a certain percentage of the total existing supply of the asset may be force-settled within any given chain maintenance interval. This field stores the percentage of the current supply which may be force settled within the current maintenance interval. If force settlements come due in an interval in which the maximum volume has already been settled, the new settlements will be enqueued and processed at the beginning of the next maintenance interval. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="138" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset_ops.hpp" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1bitasset__options_1a66af73cb931cabfdc7047e2865853027" prot="public" static="no" mutable="no">
        <type>asset_id_type</type>
        <definition>asset_id_type graphene::protocol::bitasset_options::short_backing_asset</definition>
        <argsstring></argsstring>
        <name>short_backing_asset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This speicifies which asset type is used to collateralize short sales This field may only be updated if the current supply of the asset is zero. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="141" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset_ops.hpp" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1bitasset__options_1aad45480ce89015098c5fb48f9c276faa" prot="public" static="no" mutable="no">
        <type><ref refid="structgraphene_1_1protocol_1_1extension" kindref="compound">extension</ref>&lt; <ref refid="structgraphene_1_1protocol_1_1bitasset__options_1_1ext" kindref="compound">ext</ref> &gt;</type>
        <definition>extension&lt;ext&gt; graphene::protocol::bitasset_options::extensions</definition>
        <argsstring></argsstring>
        <name>extensions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="143" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset_ops.hpp" bodystart="143" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1bitasset__options_1aaaa5544be67404943992ea0c0890de66" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::protocol::bitasset_options::validate</definition>
        <argsstring>() const </argsstring>
        <name>validate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform internal consistency checks. <parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classfc_1_1exception" kindref="compound">fc::exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if any check fails </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="147" column="1" bodyfile="libraries/protocol/asset_ops.cpp" bodystart="233" bodyend="261"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="structgraphene_1_1protocol_1_1bitasset__options" kindref="compound">bitasset_options</ref> struct contains configurable options available only to BitAssets. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>Changes to this struct will break protocol compatibility </para></simplesect>
</para>    </detaileddescription>
    <collaborationgraph>
      <node id="1833">
        <label>graphene::protocol::bitasset_options</label>
        <link refid="structgraphene_1_1protocol_1_1bitasset__options"/>
        <childnode refid="1834" relation="usage">
          <edgelabel>extensions</edgelabel>
        </childnode>
      </node>
      <node id="1835">
        <label>graphene::protocol::bitasset_options::ext</label>
        <link refid="structgraphene_1_1protocol_1_1bitasset__options_1_1ext"/>
        <childnode refid="1836" relation="usage">
          <edgelabel>maximum_short_squeeze_ratio</edgelabel>
          <edgelabel>initial_collateral_ratio</edgelabel>
          <edgelabel>margin_call_fee_ratio</edgelabel>
          <edgelabel>force_settle_fee_percent</edgelabel>
          <edgelabel>maintenance_collateral_ratio</edgelabel>
        </childnode>
      </node>
      <node id="1836">
        <label>fc::optional&lt; uint16_t &gt;</label>
        <link refid="classfc_1_1optional"/>
      </node>
      <node id="1834">
        <label>graphene::protocol::extension&lt; graphene::protocol::bitasset_options::ext &gt;</label>
        <link refid="structgraphene_1_1protocol_1_1extension"/>
        <childnode refid="1835" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="109" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset_ops.hpp" bodystart="109" bodyend="148"/>
    <listofallmembers>
      <member refid="structgraphene_1_1protocol_1_1bitasset__options_1aad45480ce89015098c5fb48f9c276faa" prot="public" virt="non-virtual"><scope>graphene::protocol::bitasset_options</scope><name>extensions</name></member>
      <member refid="structgraphene_1_1protocol_1_1bitasset__options_1aca434c9332bb80a51ea1644403b9f4cc" prot="public" virt="non-virtual"><scope>graphene::protocol::bitasset_options</scope><name>feed_lifetime_sec</name></member>
      <member refid="structgraphene_1_1protocol_1_1bitasset__options_1a7bbe267228c39b9614f311daad0ac06e" prot="public" virt="non-virtual"><scope>graphene::protocol::bitasset_options</scope><name>force_settlement_delay_sec</name></member>
      <member refid="structgraphene_1_1protocol_1_1bitasset__options_1a802bf9906028158da2abcf3d5f0b05e0" prot="public" virt="non-virtual"><scope>graphene::protocol::bitasset_options</scope><name>force_settlement_offset_percent</name></member>
      <member refid="structgraphene_1_1protocol_1_1bitasset__options_1aac3a51ee4416a416b655264c9c78f6dc" prot="public" virt="non-virtual"><scope>graphene::protocol::bitasset_options</scope><name>maximum_force_settlement_volume</name></member>
      <member refid="structgraphene_1_1protocol_1_1bitasset__options_1a7ab5de34e4e61645c5c2bee142146b2c" prot="public" virt="non-virtual"><scope>graphene::protocol::bitasset_options</scope><name>minimum_feeds</name></member>
      <member refid="structgraphene_1_1protocol_1_1bitasset__options_1a66af73cb931cabfdc7047e2865853027" prot="public" virt="non-virtual"><scope>graphene::protocol::bitasset_options</scope><name>short_backing_asset</name></member>
      <member refid="structgraphene_1_1protocol_1_1bitasset__options_1aaaa5544be67404943992ea0c0890de66" prot="public" virt="non-virtual"><scope>graphene::protocol::bitasset_options</scope><name>validate</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
