<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classfc_1_1mutable__variant__object" kind="class" language="C++" prot="public">
    <compoundname>fc::mutable_variant_object</compoundname>
    <derivedcompoundref refid="classfc_1_1limited__mutable__variant__object" prot="public" virt="non-virtual">fc::limited_mutable_variant_object</derivedcompoundref>
    <includes refid="variant__object_8hpp" local="no">variant_object.hpp</includes>
      <sectiondef kind="user-defined">
      <header>Immutable Interface</header>
      <description><para>Calling these methods will not result in copies of the underlying type. </para>
</description>
      <memberdef kind="function" id="classfc_1_1mutable__variant__object_1a8c3f205309967abdb7fc54a6e87c2c76" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1mutable__variant__object_1aa1ee6b6af5b666fced4261b3fd808be0" kindref="member">iterator</ref></type>
        <definition>mutable_variant_object::iterator fc::mutable_variant_object::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant_object.hpp" line="124" column="16" bodyfile="libraries/fc/src/variant_object.cpp" bodystart="178" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1mutable__variant__object_1a4d3913ee42df2e7d83a1a2f39f14b1fd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1mutable__variant__object_1aa1ee6b6af5b666fced4261b3fd808be0" kindref="member">iterator</ref></type>
        <definition>mutable_variant_object::iterator fc::mutable_variant_object::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant_object.hpp" line="125" column="16" bodyfile="libraries/fc/src/variant_object.cpp" bodystart="183" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1mutable__variant__object_1adc3ed86b72879f95ffc2b9398a7995c8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1mutable__variant__object_1aa1ee6b6af5b666fced4261b3fd808be0" kindref="member">iterator</ref></type>
        <definition>mutable_variant_object::iterator fc::mutable_variant_object::find</definition>
        <argsstring>(const string &amp;key) const</argsstring>
        <name>find</name>
        <param>
          <type>const string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant_object.hpp" line="126" column="16" bodyfile="libraries/fc/src/variant_object.cpp" bodystart="198" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1mutable__variant__object_1affd5b9ab3085b88e1f314da0affaabfb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1mutable__variant__object_1aa1ee6b6af5b666fced4261b3fd808be0" kindref="member">iterator</ref></type>
        <definition>mutable_variant_object::iterator fc::mutable_variant_object::find</definition>
        <argsstring>(const char *key) const</argsstring>
        <name>find</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant_object.hpp" line="127" column="16" bodyfile="libraries/fc/src/variant_object.cpp" bodystart="203" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1mutable__variant__object_1a87ac08a28b843cc6342adb343edc85f6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
        <definition>const variant &amp; fc::mutable_variant_object::operator[]</definition>
        <argsstring>(const string &amp;key) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant_object.hpp" line="128" column="21" bodyfile="libraries/fc/src/variant_object.cpp" bodystart="232" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1mutable__variant__object_1ae0d3415028e74c088642234907ece532" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
        <definition>const variant &amp; fc::mutable_variant_object::operator[]</definition>
        <argsstring>(const char *key) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant_object.hpp" line="129" column="21" bodyfile="libraries/fc/src/variant_object.cpp" bodystart="237" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1mutable__variant__object_1a0612732e6fcc4b2017dd7f15590d16bd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t fc::mutable_variant_object::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant_object.hpp" line="130" column="14" bodyfile="libraries/fc/src/variant_object.cpp" bodystart="256" bodyend="259"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>mutable Interface</header>
      <description><para>Calling these methods will result in a copy of the underlying type being created if there is more than one reference to this object. </para>
</description>
      <memberdef kind="function" id="classfc_1_1mutable__variant__object_1a5da217a80318bf1587bae008741a0780" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::mutable_variant_object::reserve</definition>
        <argsstring>(size_t s)</argsstring>
        <name>reserve</name>
        <param>
          <type>size_t</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant_object.hpp" line="142" column="28" bodyfile="libraries/fc/src/variant_object.cpp" bodystart="311" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1mutable__variant__object_1a8726f8a8109d2173f1f3dc0eeb538b40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1mutable__variant__object_1aa1ee6b6af5b666fced4261b3fd808be0" kindref="member">iterator</ref></type>
        <definition>iterator fc::mutable_variant_object::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant_object.hpp" line="143" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1mutable__variant__object_1a60535beec8673ca0e8a774b2f32eaf42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1mutable__variant__object_1aa1ee6b6af5b666fced4261b3fd808be0" kindref="member">iterator</ref></type>
        <definition>iterator fc::mutable_variant_object::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant_object.hpp" line="144" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1mutable__variant__object_1ada38caab5cc7624046cc61fcd033c4db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::mutable_variant_object::erase</definition>
        <argsstring>(const string &amp;key)</argsstring>
        <name>erase</name>
        <param>
          <type>const string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant_object.hpp" line="145" column="28" bodyfile="libraries/fc/src/variant_object.cpp" bodystart="316" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1mutable__variant__object_1ae3b38166303f37671545d2a35ba23dc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1mutable__variant__object_1aa1ee6b6af5b666fced4261b3fd808be0" kindref="member">iterator</ref></type>
        <definition>mutable_variant_object::iterator fc::mutable_variant_object::find</definition>
        <argsstring>(const string &amp;key)</argsstring>
        <name>find</name>
        <param>
          <type>const string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="classfc_1_1mutable__variant__object_1a60535beec8673ca0e8a774b2f32eaf42" kindref="member">end()</ref> if key is not found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant_object.hpp" line="150" column="28" bodyfile="libraries/fc/src/variant_object.cpp" bodystart="215" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1mutable__variant__object_1a1236a6f2ce7aa5f42245bd7ee7335ac5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1mutable__variant__object_1aa1ee6b6af5b666fced4261b3fd808be0" kindref="member">iterator</ref></type>
        <definition>mutable_variant_object::iterator fc::mutable_variant_object::find</definition>
        <argsstring>(const char *key)</argsstring>
        <name>find</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant_object.hpp" line="151" column="28" bodyfile="libraries/fc/src/variant_object.cpp" bodystart="220" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1mutable__variant__object_1af9dc6ef0475bae644c8904eb4607b6e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1mutable__variant__object" kindref="compound">mutable_variant_object</ref> &amp;</type>
        <definition>mutable_variant_object &amp; fc::mutable_variant_object::set</definition>
        <argsstring>(string key, variant var)</argsstring>
        <name>set</name>
        <param>
          <type>string</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref></type>
          <declname>var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>replaces the value at <emphasis>key</emphasis> with <emphasis>var</emphasis> or insert&apos;s <emphasis>key</emphasis> if not found </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant_object.hpp" line="155" column="30" bodyfile="libraries/fc/src/variant_object.cpp" bodystart="329" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1mutable__variant__object_1abf0e2fbf4cc0976c5e780a0094c299d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1mutable__variant__object" kindref="compound">mutable_variant_object</ref> &amp;</type>
        <definition>mutable_variant_object &amp; fc::mutable_variant_object::operator()</definition>
        <argsstring>(string key, variant var, uint32_t max_depth=1)</argsstring>
        <name>operator()</name>
        <param>
          <type>string</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref></type>
          <declname>var</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Appends <emphasis>key</emphasis> and <emphasis>var</emphasis> without checking for duplicates, designed to simplify construction of dictionaries using (key,val)(key2,val2) syntax Convenience method to simplify the manual construction of <ref refid="classfc_1_1variant__object" kindref="compound">variant_object</ref>&apos;s</para>
<para>Instead of: <computeroutput><ref refid="classfc_1_1mutable__variant__object" kindref="compound">mutable_variant_object</ref>(&quot;c&quot;,c).set(&quot;a&quot;,a).set(&quot;b&quot;,b);</computeroutput></para>
<para>You can use: <computeroutput><ref refid="classfc_1_1mutable__variant__object" kindref="compound">mutable_variant_object</ref>( &quot;c&quot;, c )( &quot;b&quot;, b)( &quot;c&quot;,c )</computeroutput></para>
<para><simplesect kind="return"><para>*this;</para>
</simplesect>
Appends <emphasis>key</emphasis> and <emphasis>var</emphasis> without checking for duplicates, designed to simplify construction of dictionaries using (key,val)(key2,val2) syntax </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant_object.hpp" line="171" column="30" bodyfile="libraries/fc/src/variant_object.cpp" bodystart="346" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1mutable__variant__object_1a63d3e94812dffbe66e2413f6c7d74a7a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classfc_1_1mutable__variant__object" kindref="compound">mutable_variant_object</ref> &amp;</type>
        <definition>mutable_variant_object&amp; fc::mutable_variant_object::operator()</definition>
        <argsstring>(string key, T &amp;&amp;var, uint32_t max_depth)</argsstring>
        <name>operator()</name>
        <param>
          <type>string</type>
          <declname>key</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant_object.hpp" line="173" column="30" bodyfile="libraries/fc/include/fc/variant_object.hpp" bodystart="173" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1mutable__variant__object_1a4a6abfc7da25a302390f940f58154ff3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1mutable__variant__object" kindref="compound">mutable_variant_object</ref> &amp;</type>
        <definition>mutable_variant_object &amp; fc::mutable_variant_object::operator()</definition>
        <argsstring>(const variant_object &amp;vo)</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="classfc_1_1variant__object" kindref="compound">variant_object</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy a <ref refid="classfc_1_1variant__object" kindref="compound">variant_object</ref> into this <ref refid="classfc_1_1mutable__variant__object" kindref="compound">mutable_variant_object</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant_object.hpp" line="182" column="30" bodyfile="libraries/fc/src/variant_object.cpp" bodystart="352" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1mutable__variant__object_1a030da450c7e13f703aec3fd9b32a9ea0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1mutable__variant__object" kindref="compound">mutable_variant_object</ref> &amp;</type>
        <definition>mutable_variant_object &amp; fc::mutable_variant_object::operator()</definition>
        <argsstring>(const mutable_variant_object &amp;mvo)</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="classfc_1_1mutable__variant__object" kindref="compound">mutable_variant_object</ref> &amp;</type>
          <declname>mvo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy another <ref refid="classfc_1_1mutable__variant__object" kindref="compound">mutable_variant_object</ref> into this <ref refid="classfc_1_1mutable__variant__object" kindref="compound">mutable_variant_object</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant_object.hpp" line="186" column="30" bodyfile="libraries/fc/src/variant_object.cpp" bodystart="359" bodyend="366"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classfc_1_1mutable__variant__object_1af1bee50fbfdee30defa012c06dbe8107" prot="public" static="no">
        <type><ref refid="classfc_1_1variant__object_1_1entry" kindref="compound">variant_object::entry</ref></type>
        <definition>typedef variant_object::entry fc::mutable_variant_object::entry</definition>
        <argsstring></argsstring>
        <name>entry</name>
        <briefdescription>
<para>a key/value pair </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant_object.hpp" line="112" column="38" bodyfile="libraries/fc/include/fc/variant_object.hpp" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classfc_1_1mutable__variant__object_1aa1ee6b6af5b666fced4261b3fd808be0" prot="public" static="no">
        <type>std::vector&lt; <ref refid="classfc_1_1mutable__variant__object_1af1bee50fbfdee30defa012c06dbe8107" kindref="member">entry</ref> &gt;::<ref refid="classfc_1_1mutable__variant__object_1aa1ee6b6af5b666fced4261b3fd808be0" kindref="member">iterator</ref></type>
        <definition>typedef std::vector&lt; entry &gt;::iterator fc::mutable_variant_object::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant_object.hpp" line="114" column="44" bodyfile="libraries/fc/include/fc/variant_object.hpp" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classfc_1_1mutable__variant__object_1aaf119e677f1969d7b12699591f9bce34" prot="public" static="no">
        <type>std::vector&lt; <ref refid="classfc_1_1mutable__variant__object_1af1bee50fbfdee30defa012c06dbe8107" kindref="member">entry</ref> &gt;::<ref refid="classfc_1_1mutable__variant__object_1aaf119e677f1969d7b12699591f9bce34" kindref="member">const_iterator</ref></type>
        <definition>typedef std::vector&lt; entry &gt;::const_iterator fc::mutable_variant_object::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant_object.hpp" line="115" column="44" bodyfile="libraries/fc/include/fc/variant_object.hpp" bodystart="115" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classfc_1_1mutable__variant__object_1adbf8e143e76ccc77094c2e5978edc2de" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; std::vector&lt; <ref refid="classfc_1_1mutable__variant__object_1af1bee50fbfdee30defa012c06dbe8107" kindref="member">entry</ref> &gt; &gt;</type>
        <definition>std::unique_ptr&lt; std::vector&lt; entry &gt; &gt; fc::mutable_variant_object::_key_value</definition>
        <argsstring></argsstring>
        <name>_key_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant_object.hpp" line="216" column="23" bodyfile="libraries/fc/include/fc/variant_object.hpp" bodystart="216" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classfc_1_1mutable__variant__object_1a5176d6f7f43fdd9dbd614ce9b8f4b1fe" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class variant_object</definition>
        <argsstring></argsstring>
        <name>variant_object</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant_object.hpp" line="217" column="7" bodyfile="libraries/fc/include/fc/variant_object.hpp" bodystart="217" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classfc_1_1mutable__variant__object_1a686fa5ef8b868de88e082ac901b1bb63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
        <definition>variant &amp; fc::mutable_variant_object::operator[]</definition>
        <argsstring>(const string &amp;key)</argsstring>
        <name>operator[]</name>
        <param>
          <type>const string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant_object.hpp" line="132" column="15" bodyfile="libraries/fc/src/variant_object.cpp" bodystart="243" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1mutable__variant__object_1ad35da3501e3996a3ee8e78dca04dcdf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
        <definition>variant &amp; fc::mutable_variant_object::operator[]</definition>
        <argsstring>(const char *key)</argsstring>
        <name>operator[]</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant_object.hpp" line="133" column="15" bodyfile="libraries/fc/src/variant_object.cpp" bodystart="248" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1mutable__variant__object_1a9174ede4cf12018a50539611ee60b327" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>fc::mutable_variant_object::mutable_variant_object</definition>
        <argsstring>(T &amp;&amp;v)</argsstring>
        <name>mutable_variant_object</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant_object.hpp" line="191" column="16" bodyfile="libraries/fc/include/fc/variant_object.hpp" bodystart="191" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1mutable__variant__object_1adc24cccf7326c637e3f3e5c294744ba5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::mutable_variant_object::mutable_variant_object</definition>
        <argsstring>()</argsstring>
        <name>mutable_variant_object</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant_object.hpp" line="197" column="7" bodyfile="libraries/fc/src/variant_object.cpp" bodystart="261" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1mutable__variant__object_1aad0bfd86a84c14612685df931e43a67a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::mutable_variant_object::mutable_variant_object</definition>
        <argsstring>(string key, variant val)</argsstring>
        <name>mutable_variant_object</name>
        <param>
          <type>string</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>initializes the first key/value pair in the object </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant_object.hpp" line="200" column="7" bodyfile="libraries/fc/src/variant_object.cpp" bodystart="266" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1mutable__variant__object_1a0a04e324ffa2723ed554fbc563932427" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>fc::mutable_variant_object::mutable_variant_object</definition>
        <argsstring>(string key, T &amp;&amp;val)</argsstring>
        <name>mutable_variant_object</name>
        <param>
          <type>string</type>
          <declname>key</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant_object.hpp" line="202" column="7" bodyfile="libraries/fc/include/fc/variant_object.hpp" bodystart="202" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1mutable__variant__object_1a092bf4693b06cbe867239410ea780818" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::mutable_variant_object::mutable_variant_object</definition>
        <argsstring>(mutable_variant_object &amp;&amp;)</argsstring>
        <name>mutable_variant_object</name>
        <param>
          <type><ref refid="classfc_1_1mutable__variant__object" kindref="compound">mutable_variant_object</ref> &amp;&amp;</type>
          <defname>obj</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant_object.hpp" line="208" column="7" bodyfile="libraries/fc/src/variant_object.cpp" bodystart="282" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1mutable__variant__object_1ac73e3697d6dcf342320c88f393df2448" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::mutable_variant_object::mutable_variant_object</definition>
        <argsstring>(const mutable_variant_object &amp;)</argsstring>
        <name>mutable_variant_object</name>
        <param>
          <type>const <ref refid="classfc_1_1mutable__variant__object" kindref="compound">mutable_variant_object</ref> &amp;</type>
          <defname>obj</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant_object.hpp" line="209" column="7" bodyfile="libraries/fc/src/variant_object.cpp" bodystart="277" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1mutable__variant__object_1a4b88482826637d229a717451aced2464" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::mutable_variant_object::mutable_variant_object</definition>
        <argsstring>(const variant_object &amp;)</argsstring>
        <name>mutable_variant_object</name>
        <param>
          <type>const <ref refid="classfc_1_1variant__object" kindref="compound">variant_object</ref> &amp;</type>
          <defname>obj</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant_object.hpp" line="210" column="7" bodyfile="libraries/fc/src/variant_object.cpp" bodystart="272" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1mutable__variant__object_1a13c8383bf1636f5a8810cba585e571b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1mutable__variant__object" kindref="compound">mutable_variant_object</ref> &amp;</type>
        <definition>mutable_variant_object &amp; fc::mutable_variant_object::operator=</definition>
        <argsstring>(mutable_variant_object &amp;&amp;)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classfc_1_1mutable__variant__object" kindref="compound">mutable_variant_object</ref> &amp;&amp;</type>
          <defname>obj</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant_object.hpp" line="212" column="30" bodyfile="libraries/fc/src/variant_object.cpp" bodystart="293" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1mutable__variant__object_1a9bd4cf377f1b73daba3b6ebdb85b0456" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1mutable__variant__object" kindref="compound">mutable_variant_object</ref> &amp;</type>
        <definition>mutable_variant_object &amp; fc::mutable_variant_object::operator=</definition>
        <argsstring>(const mutable_variant_object &amp;)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classfc_1_1mutable__variant__object" kindref="compound">mutable_variant_object</ref> &amp;</type>
          <defname>obj</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant_object.hpp" line="213" column="30" bodyfile="libraries/fc/src/variant_object.cpp" bodystart="302" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1mutable__variant__object_1adfc6f75fd142cb8bc74cbdeb78437d59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1mutable__variant__object" kindref="compound">mutable_variant_object</ref> &amp;</type>
        <definition>mutable_variant_object &amp; fc::mutable_variant_object::operator=</definition>
        <argsstring>(const variant_object &amp;)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classfc_1_1variant__object" kindref="compound">variant_object</ref> &amp;</type>
          <defname>obj</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant_object.hpp" line="214" column="30" bodyfile="libraries/fc/src/variant_object.cpp" bodystart="287" bodyend="291"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An order-perserving dictionary of variant&apos;s. <linebreak/>
 </para>
    </briefdescription>
    <detaileddescription>
<para>Keys are kept in the order they are inserted. This dictionary implements copy-on-write</para>
<para><simplesect kind="note"><para>This class is not optimized for random-access on large sets of key-value pairs. </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>fc::mutable_variant_object</label>
        <link refid="classfc_1_1mutable__variant__object"/>
      </node>
      <node id="2">
        <label>fc::limited_mutable_variant_object</label>
        <link refid="classfc_1_1limited__mutable__variant__object"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="libraries/fc/include/fc/variant_object.hpp" line="109" column="1" bodyfile="libraries/fc/include/fc/variant_object.hpp" bodystart="108" bodyend="218"/>
    <listofallmembers>
      <member refid="classfc_1_1mutable__variant__object_1adbf8e143e76ccc77094c2e5978edc2de" prot="private" virt="non-virtual"><scope>fc::mutable_variant_object</scope><name>_key_value</name></member>
      <member refid="classfc_1_1mutable__variant__object_1a8c3f205309967abdb7fc54a6e87c2c76" prot="public" virt="non-virtual"><scope>fc::mutable_variant_object</scope><name>begin</name></member>
      <member refid="classfc_1_1mutable__variant__object_1a8726f8a8109d2173f1f3dc0eeb538b40" prot="public" virt="non-virtual"><scope>fc::mutable_variant_object</scope><name>begin</name></member>
      <member refid="classfc_1_1mutable__variant__object_1aaf119e677f1969d7b12699591f9bce34" prot="public" virt="non-virtual"><scope>fc::mutable_variant_object</scope><name>const_iterator</name></member>
      <member refid="classfc_1_1mutable__variant__object_1a4d3913ee42df2e7d83a1a2f39f14b1fd" prot="public" virt="non-virtual"><scope>fc::mutable_variant_object</scope><name>end</name></member>
      <member refid="classfc_1_1mutable__variant__object_1a60535beec8673ca0e8a774b2f32eaf42" prot="public" virt="non-virtual"><scope>fc::mutable_variant_object</scope><name>end</name></member>
      <member refid="classfc_1_1mutable__variant__object_1af1bee50fbfdee30defa012c06dbe8107" prot="public" virt="non-virtual"><scope>fc::mutable_variant_object</scope><name>entry</name></member>
      <member refid="classfc_1_1mutable__variant__object_1ada38caab5cc7624046cc61fcd033c4db" prot="public" virt="non-virtual"><scope>fc::mutable_variant_object</scope><name>erase</name></member>
      <member refid="classfc_1_1mutable__variant__object_1adc3ed86b72879f95ffc2b9398a7995c8" prot="public" virt="non-virtual"><scope>fc::mutable_variant_object</scope><name>find</name></member>
      <member refid="classfc_1_1mutable__variant__object_1affd5b9ab3085b88e1f314da0affaabfb" prot="public" virt="non-virtual"><scope>fc::mutable_variant_object</scope><name>find</name></member>
      <member refid="classfc_1_1mutable__variant__object_1ae3b38166303f37671545d2a35ba23dc6" prot="public" virt="non-virtual"><scope>fc::mutable_variant_object</scope><name>find</name></member>
      <member refid="classfc_1_1mutable__variant__object_1a1236a6f2ce7aa5f42245bd7ee7335ac5" prot="public" virt="non-virtual"><scope>fc::mutable_variant_object</scope><name>find</name></member>
      <member refid="classfc_1_1mutable__variant__object_1aa1ee6b6af5b666fced4261b3fd808be0" prot="public" virt="non-virtual"><scope>fc::mutable_variant_object</scope><name>iterator</name></member>
      <member refid="classfc_1_1mutable__variant__object_1a9174ede4cf12018a50539611ee60b327" prot="public" virt="non-virtual"><scope>fc::mutable_variant_object</scope><name>mutable_variant_object</name></member>
      <member refid="classfc_1_1mutable__variant__object_1adc24cccf7326c637e3f3e5c294744ba5" prot="public" virt="non-virtual"><scope>fc::mutable_variant_object</scope><name>mutable_variant_object</name></member>
      <member refid="classfc_1_1mutable__variant__object_1aad0bfd86a84c14612685df931e43a67a" prot="public" virt="non-virtual"><scope>fc::mutable_variant_object</scope><name>mutable_variant_object</name></member>
      <member refid="classfc_1_1mutable__variant__object_1a0a04e324ffa2723ed554fbc563932427" prot="public" virt="non-virtual"><scope>fc::mutable_variant_object</scope><name>mutable_variant_object</name></member>
      <member refid="classfc_1_1mutable__variant__object_1a092bf4693b06cbe867239410ea780818" prot="public" virt="non-virtual"><scope>fc::mutable_variant_object</scope><name>mutable_variant_object</name></member>
      <member refid="classfc_1_1mutable__variant__object_1ac73e3697d6dcf342320c88f393df2448" prot="public" virt="non-virtual"><scope>fc::mutable_variant_object</scope><name>mutable_variant_object</name></member>
      <member refid="classfc_1_1mutable__variant__object_1a4b88482826637d229a717451aced2464" prot="public" virt="non-virtual"><scope>fc::mutable_variant_object</scope><name>mutable_variant_object</name></member>
      <member refid="classfc_1_1mutable__variant__object_1abf0e2fbf4cc0976c5e780a0094c299d2" prot="public" virt="non-virtual"><scope>fc::mutable_variant_object</scope><name>operator()</name></member>
      <member refid="classfc_1_1mutable__variant__object_1a63d3e94812dffbe66e2413f6c7d74a7a" prot="public" virt="non-virtual"><scope>fc::mutable_variant_object</scope><name>operator()</name></member>
      <member refid="classfc_1_1mutable__variant__object_1a4a6abfc7da25a302390f940f58154ff3" prot="public" virt="non-virtual"><scope>fc::mutable_variant_object</scope><name>operator()</name></member>
      <member refid="classfc_1_1mutable__variant__object_1a030da450c7e13f703aec3fd9b32a9ea0" prot="public" virt="non-virtual"><scope>fc::mutable_variant_object</scope><name>operator()</name></member>
      <member refid="classfc_1_1mutable__variant__object_1a13c8383bf1636f5a8810cba585e571b9" prot="public" virt="non-virtual"><scope>fc::mutable_variant_object</scope><name>operator=</name></member>
      <member refid="classfc_1_1mutable__variant__object_1a9bd4cf377f1b73daba3b6ebdb85b0456" prot="public" virt="non-virtual"><scope>fc::mutable_variant_object</scope><name>operator=</name></member>
      <member refid="classfc_1_1mutable__variant__object_1adfc6f75fd142cb8bc74cbdeb78437d59" prot="public" virt="non-virtual"><scope>fc::mutable_variant_object</scope><name>operator=</name></member>
      <member refid="classfc_1_1mutable__variant__object_1a87ac08a28b843cc6342adb343edc85f6" prot="public" virt="non-virtual"><scope>fc::mutable_variant_object</scope><name>operator[]</name></member>
      <member refid="classfc_1_1mutable__variant__object_1ae0d3415028e74c088642234907ece532" prot="public" virt="non-virtual"><scope>fc::mutable_variant_object</scope><name>operator[]</name></member>
      <member refid="classfc_1_1mutable__variant__object_1a686fa5ef8b868de88e082ac901b1bb63" prot="public" virt="non-virtual"><scope>fc::mutable_variant_object</scope><name>operator[]</name></member>
      <member refid="classfc_1_1mutable__variant__object_1ad35da3501e3996a3ee8e78dca04dcdf9" prot="public" virt="non-virtual"><scope>fc::mutable_variant_object</scope><name>operator[]</name></member>
      <member refid="classfc_1_1mutable__variant__object_1a5da217a80318bf1587bae008741a0780" prot="public" virt="non-virtual"><scope>fc::mutable_variant_object</scope><name>reserve</name></member>
      <member refid="classfc_1_1mutable__variant__object_1af9dc6ef0475bae644c8904eb4607b6e0" prot="public" virt="non-virtual"><scope>fc::mutable_variant_object</scope><name>set</name></member>
      <member refid="classfc_1_1mutable__variant__object_1a0612732e6fcc4b2017dd7f15590d16bd" prot="public" virt="non-virtual"><scope>fc::mutable_variant_object</scope><name>size</name></member>
      <member refid="classfc_1_1mutable__variant__object_1a5176d6f7f43fdd9dbd614ce9b8f4b1fe" prot="private" virt="non-virtual"><scope>fc::mutable_variant_object</scope><name>variant_object</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
