<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classgraphene_1_1db_1_1simple__index" kind="class" language="C++" prot="public">
    <compoundname>graphene::db::simple_index</compoundname>
    <basecompoundref refid="classgraphene_1_1db_1_1index" prot="public" virt="non-virtual">graphene::db::index</basecompoundref>
    <includes refid="simple__index_8hpp" local="no">simple_index.hpp</includes>
    <innerclass refid="classgraphene_1_1db_1_1simple__index_1_1const__iterator" prot="public">graphene::db::simple_index::const_iterator</innerclass>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classgraphene_1_1db_1_1simple__index_1ae81c157928b113d0b0411588b454d1ce" prot="public" static="no">
        <type>T</type>
        <definition>using graphene::db::simple_index&lt; T &gt;::object_type =  T</definition>
        <argsstring></argsstring>
        <name>object_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/db/include/graphene/db/simple_index.hpp" line="41" column="1" bodyfile="libraries/db/include/graphene/db/simple_index.hpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classgraphene_1_1db_1_1simple__index_1aa4884a0dce75cec138c0fa744f759c8b" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::unique_ptr&lt; <ref refid="classgraphene_1_1db_1_1object" kindref="compound">object</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::unique_ptr&lt;object&gt; &gt; graphene::db::simple_index&lt; T &gt;::_objects</definition>
        <argsstring></argsstring>
        <name>_objects</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/db/include/graphene/db/simple_index.hpp" line="139" column="1" bodyfile="libraries/db/include/graphene/db/simple_index.hpp" bodystart="139" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgraphene_1_1db_1_1simple__index_1aa25decba8c3502467dfe170fcbe9a590" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>const <ref refid="classgraphene_1_1db_1_1object" kindref="compound">object</ref> &amp;</type>
        <definition>virtual const object&amp; graphene::db::simple_index&lt; T &gt;::create</definition>
        <argsstring>(const std::function&lt; void(object &amp;)&gt; &amp;constructor) override</argsstring>
        <name>create</name>
        <reimplements refid="classgraphene_1_1db_1_1index_1a5498269afc8b822043d4d1e0b7b5a75e">create</reimplements>
        <param>
          <type>const std::function&lt; void(<ref refid="classgraphene_1_1db_1_1object" kindref="compound">object</ref> &amp;)&gt; &amp;</type>
          <declname>constructor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Builds a new object and assigns it the next available ID and then initializes it with constructor and lastly inserts it into the index. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/db/include/graphene/db/simple_index.hpp" line="43" column="1" bodyfile="libraries/db/include/graphene/db/simple_index.hpp" bodystart="43" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1db_1_1simple__index_1af405a3f7b15ae28345edcc0a860acc6a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void graphene::db::simple_index&lt; T &gt;::modify</definition>
        <argsstring>(const object &amp;obj, const std::function&lt; void(object &amp;)&gt; &amp;modify_callback) override</argsstring>
        <name>modify</name>
        <reimplements refid="classgraphene_1_1db_1_1index_1a0c254d24ade94e0b586ba59c0bb2a764">modify</reimplements>
        <param>
          <type>const <ref refid="classgraphene_1_1db_1_1object" kindref="compound">object</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const std::function&lt; void(<ref refid="classgraphene_1_1db_1_1object" kindref="compound">object</ref> &amp;)&gt; &amp;</type>
          <declname>modify_callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/db/include/graphene/db/simple_index.hpp" line="56" column="1" bodyfile="libraries/db/include/graphene/db/simple_index.hpp" bodystart="56" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1db_1_1simple__index_1a02070d4bbe7e4c8a0480ef2db23a2bdf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>const <ref refid="classgraphene_1_1db_1_1object" kindref="compound">object</ref> &amp;</type>
        <definition>virtual const object&amp; graphene::db::simple_index&lt; T &gt;::insert</definition>
        <argsstring>(object &amp;&amp;obj) override</argsstring>
        <name>insert</name>
        <reimplements refid="classgraphene_1_1db_1_1index_1a51be62de2c4ca916d3b14c39499e13e4">insert</reimplements>
        <param>
          <type><ref refid="classgraphene_1_1db_1_1object" kindref="compound">object</ref> &amp;&amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Polymorphically insert by moving an object into the index. this should throw if the object is already in the database. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/db/include/graphene/db/simple_index.hpp" line="62" column="1" bodyfile="libraries/db/include/graphene/db/simple_index.hpp" bodystart="62" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1db_1_1simple__index_1a36d967926e4273ff93a59dd3f4160e3d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void graphene::db::simple_index&lt; T &gt;::remove</definition>
        <argsstring>(const object &amp;obj) override</argsstring>
        <name>remove</name>
        <reimplements refid="classgraphene_1_1db_1_1index_1a2c7bf27727205871ac7bdc9ff4598b1a">remove</reimplements>
        <param>
          <type>const <ref refid="classgraphene_1_1db_1_1object" kindref="compound">object</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/db/include/graphene/db/simple_index.hpp" line="72" column="1" bodyfile="libraries/db/include/graphene/db/simple_index.hpp" bodystart="72" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1db_1_1simple__index_1ad951abc2f20ca008951c5257ca5f2a92" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const <ref refid="classgraphene_1_1db_1_1object" kindref="compound">object</ref> *</type>
        <definition>virtual const object* graphene::db::simple_index&lt; T &gt;::find</definition>
        <argsstring>(object_id_type id) const override</argsstring>
        <name>find</name>
        <reimplements refid="classgraphene_1_1db_1_1index_1a9649d19814aa188652d6a643bfe134b7">find</reimplements>
        <param>
          <type><ref refid="structgraphene_1_1db_1_1object__id__type" kindref="compound">object_id_type</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the object with id or nullptr if not found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/db/include/graphene/db/simple_index.hpp" line="81" column="1" bodyfile="libraries/db/include/graphene/db/simple_index.hpp" bodystart="81" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1db_1_1simple__index_1a8d3a5fb4f7729874e2ee9218bca8ed7a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void graphene::db::simple_index&lt; T &gt;::inspect_all_objects</definition>
        <argsstring>(std::function&lt; void(const object &amp;)&gt; inspector) const override</argsstring>
        <name>inspect_all_objects</name>
        <reimplements refid="classgraphene_1_1db_1_1index_1a0d3d4f6b5fbc219f20ba40da9ad1e70c">inspect_all_objects</reimplements>
        <param>
          <type>std::function&lt; void(const <ref refid="classgraphene_1_1db_1_1object" kindref="compound">object</ref> &amp;)&gt;</type>
          <declname>inspector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/db/include/graphene/db/simple_index.hpp" line="91" column="1" bodyfile="libraries/db/include/graphene/db/simple_index.hpp" bodystart="91" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1db_1_1simple__index_1ae7fa291b5ca7f8e66498efdd16e1389d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classgraphene_1_1db_1_1simple__index_1_1const__iterator" kindref="compound">const_iterator</ref></type>
        <definition>const_iterator graphene::db::simple_index&lt; T &gt;::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/db/include/graphene/db/simple_index.hpp" line="134" column="1" bodyfile="libraries/db/include/graphene/db/simple_index.hpp" bodystart="134" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1db_1_1simple__index_1ad75ebd28fad0e41b5830fc2528321003" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classgraphene_1_1db_1_1simple__index_1_1const__iterator" kindref="compound">const_iterator</ref></type>
        <definition>const_iterator graphene::db::simple_index&lt; T &gt;::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/db/include/graphene/db/simple_index.hpp" line="135" column="1" bodyfile="libraries/db/include/graphene/db/simple_index.hpp" bodystart="135" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1db_1_1simple__index_1ae3c7f0fc2b4941ba0d60e53b0c39b1b7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t graphene::db::simple_index&lt; T &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/db/include/graphene/db/simple_index.hpp" line="137" column="1" bodyfile="libraries/db/include/graphene/db/simple_index.hpp" bodystart="137" bodyend="137"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A simple index uses a vector&lt;unique_ptr&lt;T&gt;&gt; to store data. </para>    </briefdescription>
    <detaileddescription>
<para>This index is preferred in situations where the data will never be removed from main memory and when access by ID is the only kind of access that is necessary. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="7329">
        <label>graphene::db::simple_index&lt; T &gt;</label>
        <link refid="classgraphene_1_1db_1_1simple__index"/>
        <childnode refid="7330" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7330">
        <label>graphene::db::index</label>
        <link refid="classgraphene_1_1db_1_1index"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7331">
        <label>graphene::db::simple_index&lt; T &gt;</label>
        <link refid="classgraphene_1_1db_1_1simple__index"/>
        <childnode refid="7332" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7332">
        <label>graphene::db::index</label>
        <link refid="classgraphene_1_1db_1_1index"/>
      </node>
    </collaborationgraph>
    <location file="libraries/db/include/graphene/db/simple_index.hpp" line="39" column="1" bodyfile="libraries/db/include/graphene/db/simple_index.hpp" bodystart="38" bodyend="140"/>
    <listofallmembers>
      <member refid="classgraphene_1_1db_1_1simple__index_1aa4884a0dce75cec138c0fa744f759c8b" prot="private" virt="non-virtual"><scope>graphene::db::simple_index</scope><name>_objects</name></member>
      <member refid="classgraphene_1_1db_1_1index_1afc4131ce3902af88a5c53cf0ab3d2cab" prot="public" virt="pure-virtual"><scope>graphene::db::simple_index</scope><name>add_observer</name></member>
      <member refid="classgraphene_1_1db_1_1simple__index_1ae7fa291b5ca7f8e66498efdd16e1389d" prot="public" virt="non-virtual"><scope>graphene::db::simple_index</scope><name>begin</name></member>
      <member refid="classgraphene_1_1db_1_1simple__index_1aa25decba8c3502467dfe170fcbe9a590" prot="public" virt="virtual"><scope>graphene::db::simple_index</scope><name>create</name></member>
      <member refid="classgraphene_1_1db_1_1simple__index_1ad75ebd28fad0e41b5830fc2528321003" prot="public" virt="non-virtual"><scope>graphene::db::simple_index</scope><name>end</name></member>
      <member refid="classgraphene_1_1db_1_1simple__index_1ad951abc2f20ca008951c5257ca5f2a92" prot="public" virt="virtual"><scope>graphene::db::simple_index</scope><name>find</name></member>
      <member refid="classgraphene_1_1db_1_1index_1a8afdd2aacd7a52c3c807be58340625a0" prot="public" virt="non-virtual"><scope>graphene::db::simple_index</scope><name>get</name></member>
      <member refid="classgraphene_1_1db_1_1index_1ab1bda1803d712322418bce3ca44d97b5" prot="public" virt="pure-virtual"><scope>graphene::db::simple_index</scope><name>get_next_id</name></member>
      <member refid="classgraphene_1_1db_1_1simple__index_1a02070d4bbe7e4c8a0480ef2db23a2bdf" prot="public" virt="virtual"><scope>graphene::db::simple_index</scope><name>insert</name></member>
      <member refid="classgraphene_1_1db_1_1simple__index_1a8d3a5fb4f7729874e2ee9218bca8ed7a" prot="public" virt="virtual"><scope>graphene::db::simple_index</scope><name>inspect_all_objects</name></member>
      <member refid="classgraphene_1_1db_1_1index_1a49bcbb20b44362f169bea6cdc336d319" prot="public" virt="pure-virtual"><scope>graphene::db::simple_index</scope><name>load</name></member>
      <member refid="classgraphene_1_1db_1_1simple__index_1af405a3f7b15ae28345edcc0a860acc6a" prot="public" virt="virtual"><scope>graphene::db::simple_index</scope><name>modify</name></member>
      <member refid="classgraphene_1_1db_1_1index_1a72af3b03d9e5f04f1e5ccfd519071d50" prot="public" virt="non-virtual" ambiguityscope="graphene::db::index::"><scope>graphene::db::simple_index</scope><name>modify</name></member>
      <member refid="classgraphene_1_1db_1_1index_1aefb954473263f0736d5ba394f5437ec1" prot="public" virt="pure-virtual"><scope>graphene::db::simple_index</scope><name>object_default</name></member>
      <member refid="classgraphene_1_1db_1_1index_1aaebd5c0ba3eb4e6ca9d0a82061e61793" prot="public" virt="pure-virtual"><scope>graphene::db::simple_index</scope><name>object_from_variant</name></member>
      <member refid="classgraphene_1_1db_1_1index_1a94bbe39fc8bba240fb1b6687036aa64a" prot="public" virt="pure-virtual"><scope>graphene::db::simple_index</scope><name>object_space_id</name></member>
      <member refid="classgraphene_1_1db_1_1simple__index_1ae81c157928b113d0b0411588b454d1ce" prot="public" virt="non-virtual"><scope>graphene::db::simple_index</scope><name>object_type</name></member>
      <member refid="classgraphene_1_1db_1_1index_1a8f4f84338efa7f8eac43c8df3c456634" prot="public" virt="pure-virtual"><scope>graphene::db::simple_index</scope><name>object_type_id</name></member>
      <member refid="classgraphene_1_1db_1_1index_1ab8aa118aac8da723cfd556078b498bec" prot="public" virt="pure-virtual"><scope>graphene::db::simple_index</scope><name>open</name></member>
      <member refid="classgraphene_1_1db_1_1simple__index_1a36d967926e4273ff93a59dd3f4160e3d" prot="public" virt="virtual"><scope>graphene::db::simple_index</scope><name>remove</name></member>
      <member refid="classgraphene_1_1db_1_1index_1aa67673bbad161259895135b897a562e0" prot="public" virt="pure-virtual"><scope>graphene::db::simple_index</scope><name>save</name></member>
      <member refid="classgraphene_1_1db_1_1index_1a09516872ec406c93645ed71c24884dc7" prot="public" virt="pure-virtual"><scope>graphene::db::simple_index</scope><name>set_next_id</name></member>
      <member refid="classgraphene_1_1db_1_1simple__index_1ae3c7f0fc2b4941ba0d60e53b0c39b1b7" prot="public" virt="non-virtual"><scope>graphene::db::simple_index</scope><name>size</name></member>
      <member refid="classgraphene_1_1db_1_1index_1a5e874427eaf74f45dbf23d148f2dc708" prot="public" virt="pure-virtual"><scope>graphene::db::simple_index</scope><name>use_next_id</name></member>
      <member refid="classgraphene_1_1db_1_1index_1af4ee3fd06ff2ebdaf0137f67c8820015" prot="public" virt="virtual"><scope>graphene::db::simple_index</scope><name>~index</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
