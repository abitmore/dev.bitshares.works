<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacegraphene_1_1app" kind="namespace" language="C++">
    <compoundname>graphene::app</compoundname>
    <innerclass refid="classgraphene_1_1app_1_1abstract__plugin" prot="public">graphene::app::abstract_plugin</innerclass>
    <innerclass refid="structgraphene_1_1app_1_1account__asset__balance" prot="public">graphene::app::account_asset_balance</innerclass>
    <innerclass refid="structgraphene_1_1app_1_1api__access" prot="public">graphene::app::api_access</innerclass>
    <innerclass refid="structgraphene_1_1app_1_1api__access__info" prot="public">graphene::app::api_access_info</innerclass>
    <innerclass refid="classgraphene_1_1app_1_1application" prot="public">graphene::app::application</innerclass>
    <innerclass refid="classgraphene_1_1app_1_1application__options" prot="public">graphene::app::application_options</innerclass>
    <innerclass refid="classgraphene_1_1app_1_1asset__api" prot="public">graphene::app::asset_api</innerclass>
    <innerclass refid="structgraphene_1_1app_1_1asset__holders" prot="public">graphene::app::asset_holders</innerclass>
    <innerclass refid="classgraphene_1_1app_1_1block__api" prot="public">graphene::app::block_api</innerclass>
    <innerclass refid="classgraphene_1_1app_1_1crypto__api" prot="public">graphene::app::crypto_api</innerclass>
    <innerclass refid="classgraphene_1_1app_1_1custom__operations__api" prot="public">graphene::app::custom_operations_api</innerclass>
    <innerclass refid="classgraphene_1_1app_1_1database__api" prot="public">graphene::app::database_api</innerclass>
    <innerclass refid="classgraphene_1_1app_1_1database__api__impl" prot="public">graphene::app::database_api_impl</innerclass>
    <innerclass refid="structgraphene_1_1app_1_1extended__asset__object" prot="public">graphene::app::extended_asset_object</innerclass>
    <innerclass refid="structgraphene_1_1app_1_1extended__liquidity__pool__object" prot="public">graphene::app::extended_liquidity_pool_object</innerclass>
    <innerclass refid="structgraphene_1_1app_1_1full__account" prot="public">graphene::app::full_account</innerclass>
    <innerclass refid="structgraphene_1_1app_1_1get__required__fees__helper" prot="public">graphene::app::get_required_fees_helper</innerclass>
    <innerclass refid="classgraphene_1_1app_1_1history__api" prot="public">graphene::app::history_api</innerclass>
    <innerclass refid="structgraphene_1_1app_1_1history__operation__detail" prot="public">graphene::app::history_operation_detail</innerclass>
    <innerclass refid="structgraphene_1_1app_1_1limit__order__group" prot="public">graphene::app::limit_order_group</innerclass>
    <innerclass refid="classgraphene_1_1app_1_1login__api" prot="public">graphene::app::login_api</innerclass>
    <innerclass refid="structgraphene_1_1app_1_1market__ticker" prot="public">graphene::app::market_ticker</innerclass>
    <innerclass refid="structgraphene_1_1app_1_1market__trade" prot="public">graphene::app::market_trade</innerclass>
    <innerclass refid="structgraphene_1_1app_1_1market__volume" prot="public">graphene::app::market_volume</innerclass>
    <innerclass refid="structgraphene_1_1app_1_1more__data" prot="public">graphene::app::more_data</innerclass>
    <innerclass refid="classgraphene_1_1app_1_1network__broadcast__api" prot="public">graphene::app::network_broadcast_api</innerclass>
    <innerclass refid="classgraphene_1_1app_1_1network__node__api" prot="public">graphene::app::network_node_api</innerclass>
    <innerclass refid="structgraphene_1_1app_1_1order" prot="public">graphene::app::order</innerclass>
    <innerclass refid="structgraphene_1_1app_1_1order__book" prot="public">graphene::app::order_book</innerclass>
    <innerclass refid="classgraphene_1_1app_1_1orders__api" prot="public">graphene::app::orders_api</innerclass>
    <innerclass refid="classgraphene_1_1app_1_1plugin" prot="public">graphene::app::plugin</innerclass>
    <innerclass refid="structgraphene_1_1app_1_1verify__range__proof__rewind__result" prot="public">graphene::app::verify_range_proof_rewind_result</innerclass>
    <innerclass refid="structgraphene_1_1app_1_1verify__range__result" prot="public">graphene::app::verify_range_result</innerclass>
    <innernamespace refid="namespacegraphene_1_1app_1_1detail">graphene::app::detail</innernamespace>
    <innernamespace refid="namespacegraphene_1_1app_1_1impl">graphene::app::impl</innernamespace>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacegraphene_1_1app_1a0d7b9dd9560bcbbbfe65c4562a17ceb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T graphene::app::dejsonify</definition>
        <argsstring>(const string &amp;s, uint32_t max_depth)</argsstring>
        <name>dejsonify</name>
        <param>
          <type>const string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>:: </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/plugin.hpp" line="123" column="1" bodyfile="libraries/app/include/graphene/app/plugin.hpp" bodystart="123" bodyend="126"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacegraphene_1_1app_1a26804ee36d39c9a57ef54ba85f3ca894" prot="public" static="no">
        <type>std::map&lt; std::pair&lt; graphene::chain::asset_id_type, graphene::chain::asset_id_type &gt;, std::vector&lt; <ref refid="classfc_1_1variant" kindref="compound">fc::variant</ref> &gt; &gt;</type>
        <definition>typedef std::map&lt; std::pair&lt;graphene::chain::asset_id_type, graphene::chain::asset_id_type&gt;, std::vector&lt;fc::variant&gt; &gt; graphene::app::market_queue_type</definition>
        <argsstring></argsstring>
        <name>market_queue_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api_impl.hxx" line="34" column="1" bodyfile="libraries/app/database_api_impl.hxx" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacegraphene_1_1app_1acff79f90fbb15c501c462c2621c052b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::load_configuration_options</definition>
        <argsstring>(const fc::path &amp;data_dir, const bpo::options_description &amp;cfg_options, bpo::variables_map &amp;options)</argsstring>
        <name>load_configuration_options</name>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">fc::path</ref> &amp;</type>
          <declname>data_dir</declname>
        </param>
        <param>
          <type>const bpo::options_description &amp;</type>
          <declname>cfg_options</declname>
        </param>
        <param>
          <type>bpo::variables_map &amp;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/config_util.cpp" line="326" column="1" bodyfile="libraries/app/config_util.cpp" bodystart="326" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1app_1aecfed3795b040035a074171c248c08d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::load_configuration_options</definition>
        <argsstring>(const fc::path &amp;data_dir, const boost::program_options::options_description &amp;cfg_options, boost::program_options::variables_map &amp;options)</argsstring>
        <name>load_configuration_options</name>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">fc::path</ref> &amp;</type>
          <declname>data_dir</declname>
        </param>
        <param>
          <type>const boost::program_options::options_description &amp;</type>
          <declname>cfg_options</declname>
        </param>
        <param>
          <type>boost::program_options::variables_map &amp;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/config_util.hpp" line="31" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1app_1acbd852a2885fb5bd35312a04bf192bd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string graphene::app::uint128_amount_to_string</definition>
        <argsstring>(const fc::uint128_t &amp;amount, const uint8_t precision)</argsstring>
        <name>uint128_amount_to_string</name>
        <param>
          <type>const fc::uint128_t &amp;</type>
          <declname>amount</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>precision</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/util.hpp" line="37" column="1" bodyfile="libraries/app/util.cpp" bodystart="42" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1app_1a7dfa3f93151c8127c89ab6e5dcd3cdf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string graphene::app::price_to_string</definition>
        <argsstring>(const graphene::protocol::price &amp;_price, const uint8_t base_precision, const uint8_t quote_precision)</argsstring>
        <name>price_to_string</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">graphene::protocol::price</ref> &amp;</type>
          <declname>_price</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>base_precision</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>quote_precision</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/util.hpp" line="38" column="1" bodyfile="libraries/app/util.cpp" bodystart="68" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1app_1ab0735634d911657e6f34b4734dfeaf0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string graphene::app::price_to_string</definition>
        <argsstring>(const graphene::protocol::price &amp;_price, const graphene::chain::asset_object &amp;_base, const graphene::chain::asset_object &amp;_quote)</argsstring>
        <name>price_to_string</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">graphene::protocol::price</ref> &amp;</type>
          <declname>_price</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1asset__object" kindref="compound">graphene::chain::asset_object</ref> &amp;</type>
          <declname>_base</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1asset__object" kindref="compound">graphene::chain::asset_object</ref> &amp;</type>
          <declname>_quote</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/util.hpp" line="41" column="1" bodyfile="libraries/app/util.cpp" bodystart="92" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1app_1a80b57dd51b4fdd0f9cce94a056f74cb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string graphene::app::price_diff_percent_string</definition>
        <argsstring>(const graphene::protocol::price &amp;old_price, const graphene::protocol::price &amp;new_price)</argsstring>
        <name>price_diff_percent_string</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">graphene::protocol::price</ref> &amp;</type>
          <declname>old_price</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">graphene::protocol::price</ref> &amp;</type>
          <declname>new_price</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/util.hpp" line="44" column="1" bodyfile="libraries/app/util.cpp" bodystart="104" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1app_1ab254b54cd162bbf71a38361cc20610da" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>fc::uint128_t</type>
        <definition>static fc::uint128_t graphene::app::to_capped_128</definition>
        <argsstring>(const uint256_t &amp;t)</argsstring>
        <name>to_capped_128</name>
        <param>
          <type>const uint256_t &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/util.cpp" line="35" column="1" bodyfile="libraries/app/util.cpp" bodystart="35" bodyend="40"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/app/api.cpp" line="56" column="1"/>
  </compounddef>
</doxygen>
