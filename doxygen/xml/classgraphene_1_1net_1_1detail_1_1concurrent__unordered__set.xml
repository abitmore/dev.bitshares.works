<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set" kind="class" language="C++" prot="public">
    <compoundname>graphene::net::detail::concurrent_unordered_set</compoundname>
    <basecompoundref prot="private" virt="non-virtual">std::unordered_set&lt; Key, std::hash&lt; Key &gt;, std::equal_to&lt; Key &gt; &gt;</basecompoundref>
    <includes refid="node__impl_8hxx" local="no">node_impl.hxx</includes>
    <templateparamlist>
      <param>
        <type>class Key</type>
      </param>
      <param>
        <type>class Hash</type>
        <defval>std::hash&lt;Key&gt;</defval>
      </param>
      <param>
        <type>class Pred</type>
        <defval>std::equal_to&lt;Key&gt;</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set_1a764661936b80e24649862738c39c0de0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::pair&lt; typename std::unordered_set&lt; Key, Hash, Pred &gt;::iterator, bool &gt;</type>
        <definition>std::pair&lt; typename std::unordered_set&lt;Key, Hash, Pred&gt;::iterator, bool&gt; graphene::net::detail::concurrent_unordered_set&lt; Key, Hash, Pred &gt;::emplace</definition>
        <argsstring>(Key key)</argsstring>
        <name>emplace</name>
        <param>
          <type>Key</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Insertion </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="79" column="15" bodyfile="libraries/net/node_impl.hxx" bodystart="79" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set_1a505b387d3d14c9d759b26c5246fc5a00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::pair&lt; typename std::unordered_set&lt; Key, Hash, Pred &gt;::iterator, bool &gt;</type>
        <definition>std::pair&lt; typename std::unordered_set&lt;Key, Hash, Pred&gt;::iterator, bool&gt; graphene::net::detail::concurrent_unordered_set&lt; Key, Hash, Pred &gt;::insert</definition>
        <argsstring>(const Key &amp;val)</argsstring>
        <name>insert</name>
        <param>
          <type>const Key &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="84" column="15" bodyfile="libraries/net/node_impl.hxx" bodystart="84" bodyend="88"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set_1a4c4c9c35c51e2e2caa8f83c9206bb6d5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t graphene::net::detail::concurrent_unordered_set&lt; Key, Hash, Pred &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Size </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="92" column="11" bodyfile="libraries/net/node_impl.hxx" bodystart="92" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set_1ae1ca0b55b21d5994e184db6bea9a30a1" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::net::detail::concurrent_unordered_set&lt; Key, Hash, Pred &gt;::empty</definition>
        <argsstring>() const noexcept</argsstring>
        <name>empty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="97" column="9" bodyfile="libraries/net/node_impl.hxx" bodystart="97" bodyend="101"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set_1afa3ade3b60effcec2222e1ebbe0317e6" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::concurrent_unordered_set&lt; Key, Hash, Pred &gt;::clear</definition>
        <argsstring>() noexcept</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removal </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="105" column="9" bodyfile="libraries/net/node_impl.hxx" bodystart="105" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set_1aeb6ef607525ea70e6fea08a131d01622" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::unordered_set&lt; Key, Hash, Pred &gt;::iterator</type>
        <definition>std::unordered_set&lt;Key, Hash, Pred&gt;::iterator graphene::net::detail::concurrent_unordered_set&lt; Key, Hash, Pred &gt;::erase</definition>
        <argsstring>(typename std::unordered_set&lt; Key, Hash, Pred &gt;::const_iterator itr)</argsstring>
        <name>erase</name>
        <param>
          <type>typename std::unordered_set&lt; Key, Hash, Pred &gt;::const_iterator</type>
          <declname>itr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="110" column="43" bodyfile="libraries/net/node_impl.hxx" bodystart="110" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set_1a51e53473fda3fb57acc7927c332fdfb9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t graphene::net::detail::concurrent_unordered_set&lt; Key, Hash, Pred &gt;::erase</definition>
        <argsstring>(const Key &amp;key)</argsstring>
        <name>erase</name>
        <param>
          <type>const Key &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="116" column="11" bodyfile="libraries/net/node_impl.hxx" bodystart="116" bodyend="120"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set_1aba8aefe79e31c2c2a649ace60f0bcd93" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::detail::concurrent_unordered_set&lt; Key, Hash, Pred &gt;::swap</definition>
        <argsstring>(typename std::unordered_set&lt; Key, Hash, Pred &gt; &amp;other) noexcept</argsstring>
        <name>swap</name>
        <param>
          <type>typename std::unordered_set&lt; Key, Hash, Pred &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Swap </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="124" column="9" bodyfile="libraries/net/node_impl.hxx" bodystart="124" bodyend="128"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set_1a1630ae81e3d1a6942544effb4c78fead" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::unordered_set&lt; Key, Hash, Pred &gt;::iterator</type>
        <definition>std::unordered_set&lt;Key, Hash, Pred&gt;::iterator graphene::net::detail::concurrent_unordered_set&lt; Key, Hash, Pred &gt;::begin</definition>
        <argsstring>() noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Iteration </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="132" column="43" bodyfile="libraries/net/node_impl.hxx" bodystart="132" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set_1aa390cbb6e754286921189d0e6b799397" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::unordered_set&lt; Key, Hash, Pred &gt;::const_iterator</type>
        <definition>std::unordered_set&lt;Key, Hash, Pred&gt;::const_iterator graphene::net::detail::concurrent_unordered_set&lt; Key, Hash, Pred &gt;::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="137" column="49" bodyfile="libraries/net/node_impl.hxx" bodystart="137" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set_1af47fd03f532a485a2b0ddd2b82877b73" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::unordered_set&lt; Key, Hash, Pred &gt;::local_iterator</type>
        <definition>std::unordered_set&lt;Key, Hash, Pred&gt;::local_iterator graphene::net::detail::concurrent_unordered_set&lt; Key, Hash, Pred &gt;::begin</definition>
        <argsstring>(size_t n)</argsstring>
        <name>begin</name>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="142" column="49" bodyfile="libraries/net/node_impl.hxx" bodystart="142" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set_1a74b1c84746570ea7ccf6e1e402da9254" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::unordered_set&lt; Key, Hash, Pred &gt;::const_local_iterator</type>
        <definition>std::unordered_set&lt;Key, Hash, Pred&gt;::const_local_iterator graphene::net::detail::concurrent_unordered_set&lt; Key, Hash, Pred &gt;::begin</definition>
        <argsstring>(size_t n) const</argsstring>
        <name>begin</name>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="147" column="55" bodyfile="libraries/net/node_impl.hxx" bodystart="147" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set_1aa91dc409366865c5bf97369eb3120f68" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::unordered_set&lt; Key, Hash, Pred &gt;::iterator</type>
        <definition>std::unordered_set&lt;Key, Hash, Pred&gt;::iterator graphene::net::detail::concurrent_unordered_set&lt; Key, Hash, Pred &gt;::end</definition>
        <argsstring>() noexcept</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="152" column="43" bodyfile="libraries/net/node_impl.hxx" bodystart="152" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set_1a0a06da0c50e88c4269bb447db8a8ca81" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::unordered_set&lt; Key, Hash, Pred &gt;::const_iterator</type>
        <definition>std::unordered_set&lt;Key, Hash, Pred&gt;::const_iterator graphene::net::detail::concurrent_unordered_set&lt; Key, Hash, Pred &gt;::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="157" column="49" bodyfile="libraries/net/node_impl.hxx" bodystart="157" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set_1af4c5b1f54de3b8b65af5d6711ff8a143" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::unordered_set&lt; Key, Hash, Pred &gt;::local_iterator</type>
        <definition>std::unordered_set&lt;Key, Hash, Pred&gt;::local_iterator graphene::net::detail::concurrent_unordered_set&lt; Key, Hash, Pred &gt;::end</definition>
        <argsstring>(size_t n)</argsstring>
        <name>end</name>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="162" column="49" bodyfile="libraries/net/node_impl.hxx" bodystart="162" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set_1a8b3db18e4fc573a2ffe29e618a8cfbac" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::unordered_set&lt; Key, Hash, Pred &gt;::const_local_iterator</type>
        <definition>std::unordered_set&lt;Key, Hash, Pred&gt;::const_local_iterator graphene::net::detail::concurrent_unordered_set&lt; Key, Hash, Pred &gt;::end</definition>
        <argsstring>(size_t n) const</argsstring>
        <name>end</name>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="167" column="55" bodyfile="libraries/net/node_impl.hxx" bodystart="167" bodyend="171"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set_1aa85547714531770f0a74e3834fce8374" prot="private" static="no" mutable="yes">
        <type><ref refid="classfc_1_1mutex" kindref="compound">fc::mutex</ref></type>
        <definition>fc::mutex graphene::net::detail::concurrent_unordered_set&lt; Key, Hash, Pred &gt;::mux</definition>
        <argsstring></argsstring>
        <name>mux</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="71" column="22" bodyfile="libraries/net/node_impl.hxx" bodystart="71" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set_1aaa10202ae400b4fc1096f3e7c8c5e307" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfc_1_1mutex" kindref="compound">fc::mutex</ref> &amp;</type>
        <definition>fc::mutex&amp; graphene::net::detail::concurrent_unordered_set&lt; Key, Hash, Pred &gt;::get_mutex</definition>
        <argsstring>() const</argsstring>
        <name>get_mutex</name>
        <briefdescription>
<para>Iterations require a lock. This exposes the mutex. Use with care (i.e. lock_guard) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="75" column="14" bodyfile="libraries/net/node_impl.hxx" bodystart="75" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set_1a101ef4148815748060b51cdb5b5b4ae6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::unordered_set&lt; Key, Hash, Pred &gt;::const_iterator</type>
        <definition>std::unordered_set&lt;Key, Hash, Pred&gt;::const_iterator graphene::net::detail::concurrent_unordered_set&lt; Key, Hash, Pred &gt;::find</definition>
        <argsstring>(Key key)</argsstring>
        <name>find</name>
        <param>
          <type>Key</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Search </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/node_impl.hxx" line="174" column="49" bodyfile="libraries/net/node_impl.hxx" bodystart="174" bodyend="178"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>std::unordered_set&lt; Key, std::hash&lt; Key &gt;, std::equal_to&lt; Key &gt; &gt;</label>
      </node>
      <node id="1">
        <label>graphene::net::detail::concurrent_unordered_set&lt; Key, Hash, Pred &gt;</label>
        <link refid="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set"/>
        <childnode refid="2" relation="private-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>std::unordered_set&lt; Key, std::hash&lt; Key &gt;, std::equal_to&lt; Key &gt; &gt;</label>
      </node>
      <node id="1">
        <label>graphene::net::detail::concurrent_unordered_set&lt; Key, Hash, Pred &gt;</label>
        <link refid="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set"/>
        <childnode refid="2" relation="private-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="libraries/net/node_impl.hxx" line="67" column="1" bodyfile="libraries/net/node_impl.hxx" bodystart="66" bodyend="177"/>
    <listofallmembers>
      <member refid="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set_1a1630ae81e3d1a6942544effb4c78fead" prot="public" virt="non-virtual"><scope>graphene::net::detail::concurrent_unordered_set</scope><name>begin</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set_1aa390cbb6e754286921189d0e6b799397" prot="public" virt="non-virtual"><scope>graphene::net::detail::concurrent_unordered_set</scope><name>begin</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set_1af47fd03f532a485a2b0ddd2b82877b73" prot="public" virt="non-virtual"><scope>graphene::net::detail::concurrent_unordered_set</scope><name>begin</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set_1a74b1c84746570ea7ccf6e1e402da9254" prot="public" virt="non-virtual"><scope>graphene::net::detail::concurrent_unordered_set</scope><name>begin</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set_1afa3ade3b60effcec2222e1ebbe0317e6" prot="public" virt="non-virtual"><scope>graphene::net::detail::concurrent_unordered_set</scope><name>clear</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set_1a764661936b80e24649862738c39c0de0" prot="public" virt="non-virtual"><scope>graphene::net::detail::concurrent_unordered_set</scope><name>emplace</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set_1ae1ca0b55b21d5994e184db6bea9a30a1" prot="public" virt="non-virtual"><scope>graphene::net::detail::concurrent_unordered_set</scope><name>empty</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set_1aa91dc409366865c5bf97369eb3120f68" prot="public" virt="non-virtual"><scope>graphene::net::detail::concurrent_unordered_set</scope><name>end</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set_1a0a06da0c50e88c4269bb447db8a8ca81" prot="public" virt="non-virtual"><scope>graphene::net::detail::concurrent_unordered_set</scope><name>end</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set_1af4c5b1f54de3b8b65af5d6711ff8a143" prot="public" virt="non-virtual"><scope>graphene::net::detail::concurrent_unordered_set</scope><name>end</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set_1a8b3db18e4fc573a2ffe29e618a8cfbac" prot="public" virt="non-virtual"><scope>graphene::net::detail::concurrent_unordered_set</scope><name>end</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set_1aeb6ef607525ea70e6fea08a131d01622" prot="public" virt="non-virtual"><scope>graphene::net::detail::concurrent_unordered_set</scope><name>erase</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set_1a51e53473fda3fb57acc7927c332fdfb9" prot="public" virt="non-virtual"><scope>graphene::net::detail::concurrent_unordered_set</scope><name>erase</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set_1a101ef4148815748060b51cdb5b5b4ae6" prot="public" virt="non-virtual"><scope>graphene::net::detail::concurrent_unordered_set</scope><name>find</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set_1aaa10202ae400b4fc1096f3e7c8c5e307" prot="public" virt="non-virtual"><scope>graphene::net::detail::concurrent_unordered_set</scope><name>get_mutex</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set_1a505b387d3d14c9d759b26c5246fc5a00" prot="public" virt="non-virtual"><scope>graphene::net::detail::concurrent_unordered_set</scope><name>insert</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set_1aa85547714531770f0a74e3834fce8374" prot="private" virt="non-virtual"><scope>graphene::net::detail::concurrent_unordered_set</scope><name>mux</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set_1a4c4c9c35c51e2e2caa8f83c9206bb6d5" prot="public" virt="non-virtual"><scope>graphene::net::detail::concurrent_unordered_set</scope><name>size</name></member>
      <member refid="classgraphene_1_1net_1_1detail_1_1concurrent__unordered__set_1aba8aefe79e31c2c2a649ace60f0bcd93" prot="public" virt="non-virtual"><scope>graphene::net::detail::concurrent_unordered_set</scope><name>swap</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
