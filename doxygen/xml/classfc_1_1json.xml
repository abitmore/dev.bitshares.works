<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classfc_1_1json" kind="class" language="C++" prot="public">
    <compoundname>fc::json</compoundname>
    <includes refid="json_8hpp" local="no">json.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classfc_1_1json_1a8554b1c7b658a170d4bc81d4bac798b1" prot="public" static="no" strong="no">
        <type></type>
        <name>parse_type</name>
        <enumvalue id="classfc_1_1json_1a8554b1c7b658a170d4bc81d4bac798b1af74410cf18f46cc6a24887c3815fd3c3" prot="public">
          <name>legacy_parser</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classfc_1_1json_1a8554b1c7b658a170d4bc81d4bac798b1ad13ac383403a7c2890dde8dc042e95c6" prot="public">
          <name>broken_nul_parser</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/json.hpp" line="21" column="1" bodyfile="libraries/fc/include/fc/io/json.hpp" bodystart="20" bodyend="29"/>
      </memberdef>
      <memberdef kind="enum" id="classfc_1_1json_1afbd7971f1c3f78682333330895f02e5d" prot="public" static="no" strong="no">
        <type></type>
        <name>output_formatting</name>
        <enumvalue id="classfc_1_1json_1afbd7971f1c3f78682333330895f02e5da3335effe22a8bbd67f2312fd58662269" prot="public">
          <name>stringify_large_ints_and_doubles</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classfc_1_1json_1afbd7971f1c3f78682333330895f02e5da062b267613c1279194db6111cfa0659f" prot="public">
          <name>legacy_generator</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/json.hpp" line="31" column="1" bodyfile="libraries/fc/include/fc/io/json.hpp" bodystart="30" bodyend="34"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classfc_1_1json_1a732d3ab762905f520532fa4043590df1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ostream" kindref="compound">ostream</ref> &amp;</type>
        <definition>ostream &amp; fc::json::to_stream</definition>
        <argsstring>(ostream &amp;out, const std::string &amp;)</argsstring>
        <name>to_stream</name>
        <param>
          <type><ref refid="classfc_1_1ostream" kindref="compound">ostream</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <defname>str</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/json.hpp" line="36" column="25" bodyfile="libraries/fc/src/io/json.cpp" bodystart="562" bodyend="566"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1json_1af4e017a1ae6f4cd01f6f7999cb896e08" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ostream" kindref="compound">ostream</ref> &amp;</type>
        <definition>ostream &amp; fc::json::to_stream</definition>
        <argsstring>(ostream &amp;out, const variant &amp;v, output_formatting format=stringify_large_ints_and_doubles, uint32_t max_depth=DEFAULT_MAX_RECURSION_DEPTH)</argsstring>
        <name>to_stream</name>
        <param>
          <type><ref refid="classfc_1_1ostream" kindref="compound">ostream</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1json_1afbd7971f1c3f78682333330895f02e5d" kindref="member">output_formatting</ref></type>
          <declname>format</declname>
          <defval><ref refid="classfc_1_1json_1afbd7971f1c3f78682333330895f02e5da3335effe22a8bbd67f2312fd58662269" kindref="member">stringify_large_ints_and_doubles</ref></defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval><ref refid="json_8hpp_1aee45ef1ffa047f0cdfef5fc453a98ac6" kindref="member">DEFAULT_MAX_RECURSION_DEPTH</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/json.hpp" line="37" column="25" bodyfile="libraries/fc/src/io/json.cpp" bodystart="794" bodyend="798"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1json_1a11cc517107b196d5ae60b97b7164924b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ostream" kindref="compound">ostream</ref> &amp;</type>
        <definition>ostream &amp; fc::json::to_stream</definition>
        <argsstring>(ostream &amp;out, const variants &amp;v, output_formatting format=stringify_large_ints_and_doubles, uint32_t max_depth=DEFAULT_MAX_RECURSION_DEPTH)</argsstring>
        <name>to_stream</name>
        <param>
          <type><ref refid="classfc_1_1ostream" kindref="compound">ostream</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="namespacefc_1a2e5e6bdb302dfb79e684336f3fbbd8bc" kindref="member">variants</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1json_1afbd7971f1c3f78682333330895f02e5d" kindref="member">output_formatting</ref></type>
          <declname>format</declname>
          <defval><ref refid="classfc_1_1json_1afbd7971f1c3f78682333330895f02e5da3335effe22a8bbd67f2312fd58662269" kindref="member">stringify_large_ints_and_doubles</ref></defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval><ref refid="json_8hpp_1aee45ef1ffa047f0cdfef5fc453a98ac6" kindref="member">DEFAULT_MAX_RECURSION_DEPTH</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/json.hpp" line="38" column="25" bodyfile="libraries/fc/src/io/json.cpp" bodystart="799" bodyend="803"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1json_1aa76522d05db5597e19cbe44e2e44c275" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ostream" kindref="compound">ostream</ref> &amp;</type>
        <definition>ostream &amp; fc::json::to_stream</definition>
        <argsstring>(ostream &amp;out, const variant_object &amp;v, output_formatting format=stringify_large_ints_and_doubles, uint32_t max_depth=DEFAULT_MAX_RECURSION_DEPTH)</argsstring>
        <name>to_stream</name>
        <param>
          <type><ref refid="classfc_1_1ostream" kindref="compound">ostream</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1variant__object" kindref="compound">variant_object</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1json_1afbd7971f1c3f78682333330895f02e5d" kindref="member">output_formatting</ref></type>
          <declname>format</declname>
          <defval><ref refid="classfc_1_1json_1afbd7971f1c3f78682333330895f02e5da3335effe22a8bbd67f2312fd58662269" kindref="member">stringify_large_ints_and_doubles</ref></defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval><ref refid="json_8hpp_1aee45ef1ffa047f0cdfef5fc453a98ac6" kindref="member">DEFAULT_MAX_RECURSION_DEPTH</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/json.hpp" line="39" column="25" bodyfile="libraries/fc/src/io/json.cpp" bodystart="804" bodyend="808"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1json_1a43b4958ac30dd62e90680ef5ba4dec9d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref></type>
        <definition>variant fc::json::from_stream</definition>
        <argsstring>(buffered_istream &amp;in, parse_type ptype=legacy_parser, uint32_t max_depth=DEFAULT_MAX_RECURSION_DEPTH)</argsstring>
        <name>from_stream</name>
        <param>
          <type><ref refid="classfc_1_1buffered__istream" kindref="compound">buffered_istream</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1json_1a8554b1c7b658a170d4bc81d4bac798b1" kindref="member">parse_type</ref></type>
          <declname>ptype</declname>
          <defval><ref refid="classfc_1_1json_1a8554b1c7b658a170d4bc81d4bac798b1af74410cf18f46cc6a24887c3815fd3c3" kindref="member">legacy_parser</ref></defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval><ref refid="json_8hpp_1aee45ef1ffa047f0cdfef5fc453a98ac6" kindref="member">DEFAULT_MAX_RECURSION_DEPTH</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/json.hpp" line="41" column="26" bodyfile="libraries/fc/src/io/json.cpp" bodystart="773" bodyend="792"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1json_1a2a9ee7bbc147d202bbb8ae96c4886403" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref></type>
        <definition>variant fc::json::from_string</definition>
        <argsstring>(const string &amp;utf8_str, parse_type ptype=legacy_parser, uint32_t max_depth=DEFAULT_MAX_RECURSION_DEPTH)</argsstring>
        <name>from_string</name>
        <param>
          <type>const string &amp;</type>
          <declname>utf8_str</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1json_1a8554b1c7b658a170d4bc81d4bac798b1" kindref="member">parse_type</ref></type>
          <declname>ptype</declname>
          <defval><ref refid="classfc_1_1json_1a8554b1c7b658a170d4bc81d4bac798b1af74410cf18f46cc6a24887c3815fd3c3" kindref="member">legacy_parser</ref></defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval><ref refid="json_8hpp_1aee45ef1ffa047f0cdfef5fc453a98ac6" kindref="member">DEFAULT_MAX_RECURSION_DEPTH</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/json.hpp" line="43" column="26" bodyfile="libraries/fc/src/io/json.cpp" bodystart="458" bodyend="463"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1json_1ae057e408a3a820bc04928ecc8fc26db5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacefc_1a2e5e6bdb302dfb79e684336f3fbbd8bc" kindref="member">variants</ref></type>
        <definition>variants fc::json::variants_from_string</definition>
        <argsstring>(const string &amp;utf8_str, parse_type ptype=legacy_parser, uint32_t max_depth=DEFAULT_MAX_RECURSION_DEPTH)</argsstring>
        <name>variants_from_string</name>
        <param>
          <type>const string &amp;</type>
          <declname>utf8_str</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1json_1a8554b1c7b658a170d4bc81d4bac798b1" kindref="member">parse_type</ref></type>
          <declname>ptype</declname>
          <defval><ref refid="classfc_1_1json_1a8554b1c7b658a170d4bc81d4bac798b1af74410cf18f46cc6a24887c3815fd3c3" kindref="member">legacy_parser</ref></defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval><ref refid="json_8hpp_1aee45ef1ffa047f0cdfef5fc453a98ac6" kindref="member">DEFAULT_MAX_RECURSION_DEPTH</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/json.hpp" line="44" column="26" bodyfile="libraries/fc/src/io/json.cpp" bodystart="465" bodyend="475"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1json_1a2ca87ad6ef4ccacc22605b3c2517daa3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>std::string fc::json::to_string</definition>
        <argsstring>(const variant &amp;v, output_formatting format=stringify_large_ints_and_doubles, uint32_t max_depth=DEFAULT_MAX_RECURSION_DEPTH)</argsstring>
        <name>to_string</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1json_1afbd7971f1c3f78682333330895f02e5d" kindref="member">output_formatting</ref></type>
          <declname>format</declname>
          <defval><ref refid="classfc_1_1json_1afbd7971f1c3f78682333330895f02e5da3335effe22a8bbd67f2312fd58662269" kindref="member">stringify_large_ints_and_doubles</ref></defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval><ref refid="json_8hpp_1aee45ef1ffa047f0cdfef5fc453a98ac6" kindref="member">DEFAULT_MAX_RECURSION_DEPTH</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/json.hpp" line="45" column="26" bodyfile="libraries/fc/src/io/json.cpp" bodystart="650" bodyend="655"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1json_1aec172d4ab75ce7237b17d98b1a40a571" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>std::string fc::json::to_pretty_string</definition>
        <argsstring>(const variant &amp;v, output_formatting format=stringify_large_ints_and_doubles, uint32_t max_depth=DEFAULT_MAX_RECURSION_DEPTH)</argsstring>
        <name>to_pretty_string</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1json_1afbd7971f1c3f78682333330895f02e5d" kindref="member">output_formatting</ref></type>
          <declname>format</declname>
          <defval><ref refid="classfc_1_1json_1afbd7971f1c3f78682333330895f02e5da3335effe22a8bbd67f2312fd58662269" kindref="member">stringify_large_ints_and_doubles</ref></defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval><ref refid="json_8hpp_1aee45ef1ffa047f0cdfef5fc453a98ac6" kindref="member">DEFAULT_MAX_RECURSION_DEPTH</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/json.hpp" line="46" column="26" bodyfile="libraries/fc/src/io/json.cpp" bodystart="748" bodyend="751"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1json_1aaa26b598006f30bca1b034b7cd70b4b1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::json::is_valid</definition>
        <argsstring>(const std::string &amp;json_str, parse_type ptype=legacy_parser, uint32_t max_depth=DEFAULT_MAX_RECURSION_DEPTH)</argsstring>
        <name>is_valid</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>json_str</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1json_1a8554b1c7b658a170d4bc81d4bac798b1" kindref="member">parse_type</ref></type>
          <declname>ptype</declname>
          <defval><ref refid="classfc_1_1json_1a8554b1c7b658a170d4bc81d4bac798b1af74410cf18f46cc6a24887c3815fd3c3" kindref="member">legacy_parser</ref></defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval><ref refid="json_8hpp_1aee45ef1ffa047f0cdfef5fc453a98ac6" kindref="member">DEFAULT_MAX_RECURSION_DEPTH</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/json.hpp" line="48" column="26" bodyfile="libraries/fc/src/io/json.cpp" bodystart="810" bodyend="818"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1json_1ad5755c5c32ee905ff3ad5016d529f4e2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void fc::json::save_to_file</definition>
        <argsstring>(const T &amp;v, const fc::path &amp;fi, bool pretty=true, output_formatting format=stringify_large_ints_and_doubles, uint32_t max_depth=DEFAULT_MAX_RECURSION_DEPTH)</argsstring>
        <name>save_to_file</name>
        <param>
          <type>const T &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">fc::path</ref> &amp;</type>
          <declname>fi</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>pretty</declname>
          <defval>true</defval>
        </param>
        <param>
          <type><ref refid="classfc_1_1json_1afbd7971f1c3f78682333330895f02e5d" kindref="member">output_formatting</ref></type>
          <declname>format</declname>
          <defval><ref refid="classfc_1_1json_1afbd7971f1c3f78682333330895f02e5da3335effe22a8bbd67f2312fd58662269" kindref="member">stringify_large_ints_and_doubles</ref></defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval><ref refid="json_8hpp_1aee45ef1ffa047f0cdfef5fc453a98ac6" kindref="member">DEFAULT_MAX_RECURSION_DEPTH</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/json.hpp" line="51" column="26" bodyfile="libraries/fc/include/fc/io/json.hpp" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1json_1a20beb42ce8c0fb339194c03f2c6214a5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::json::save_to_file</definition>
        <argsstring>(const variant &amp;v, const fc::path &amp;fi, bool pretty=true, output_formatting format=stringify_large_ints_and_doubles, uint32_t max_depth=DEFAULT_MAX_RECURSION_DEPTH)</argsstring>
        <name>save_to_file</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">fc::path</ref> &amp;</type>
          <declname>fi</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>pretty</declname>
          <defval>true</defval>
        </param>
        <param>
          <type><ref refid="classfc_1_1json_1afbd7971f1c3f78682333330895f02e5d" kindref="member">output_formatting</ref></type>
          <declname>format</declname>
          <defval><ref refid="classfc_1_1json_1afbd7971f1c3f78682333330895f02e5da3335effe22a8bbd67f2312fd58662269" kindref="member">stringify_large_ints_and_doubles</ref></defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval><ref refid="json_8hpp_1aee45ef1ffa047f0cdfef5fc453a98ac6" kindref="member">DEFAULT_MAX_RECURSION_DEPTH</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/json.hpp" line="56" column="26" bodyfile="libraries/fc/src/io/json.cpp" bodystart="753" bodyend="766"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1json_1a842b66c55bc641537ac1ad815d1d7b2b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref></type>
        <definition>variant fc::json::from_file</definition>
        <argsstring>(const fc::path &amp;p, parse_type ptype=legacy_parser, uint32_t max_depth=DEFAULT_MAX_RECURSION_DEPTH)</argsstring>
        <name>from_file</name>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">fc::path</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1json_1a8554b1c7b658a170d4bc81d4bac798b1" kindref="member">parse_type</ref></type>
          <declname>ptype</declname>
          <defval><ref refid="classfc_1_1json_1a8554b1c7b658a170d4bc81d4bac798b1af74410cf18f46cc6a24887c3815fd3c3" kindref="member">legacy_parser</ref></defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval><ref refid="json_8hpp_1aee45ef1ffa047f0cdfef5fc453a98ac6" kindref="member">DEFAULT_MAX_RECURSION_DEPTH</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/json.hpp" line="57" column="26" bodyfile="libraries/fc/src/io/json.cpp" bodystart="767" bodyend="772"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1json_1aa69abb6aa28711bd651cc608e69f793c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>static T fc::json::from_file</definition>
        <argsstring>(const fc::path &amp;p, parse_type ptype=legacy_parser, uint32_t max_depth=DEFAULT_MAX_RECURSION_DEPTH)</argsstring>
        <name>from_file</name>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">fc::path</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1json_1a8554b1c7b658a170d4bc81d4bac798b1" kindref="member">parse_type</ref></type>
          <declname>ptype</declname>
          <defval><ref refid="classfc_1_1json_1a8554b1c7b658a170d4bc81d4bac798b1af74410cf18f46cc6a24887c3815fd3c3" kindref="member">legacy_parser</ref></defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval><ref refid="json_8hpp_1aee45ef1ffa047f0cdfef5fc453a98ac6" kindref="member">DEFAULT_MAX_RECURSION_DEPTH</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/json.hpp" line="60" column="19" bodyfile="libraries/fc/include/fc/io/json.hpp" bodystart="60" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1json_1af86e71ac5c2a85aeae41b895b8037a99" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>string</type>
        <definition>static string fc::json::to_string</definition>
        <argsstring>(const T &amp;v, output_formatting format=stringify_large_ints_and_doubles, uint32_t max_depth=DEFAULT_MAX_RECURSION_DEPTH)</argsstring>
        <name>to_string</name>
        <param>
          <type>const T &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1json_1afbd7971f1c3f78682333330895f02e5d" kindref="member">output_formatting</ref></type>
          <declname>format</declname>
          <defval><ref refid="classfc_1_1json_1afbd7971f1c3f78682333330895f02e5da3335effe22a8bbd67f2312fd58662269" kindref="member">stringify_large_ints_and_doubles</ref></defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval><ref refid="json_8hpp_1aee45ef1ffa047f0cdfef5fc453a98ac6" kindref="member">DEFAULT_MAX_RECURSION_DEPTH</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/json.hpp" line="66" column="26" bodyfile="libraries/fc/include/fc/io/json.hpp" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1json_1a5367badb037158417d2a2662f2779b5d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>string</type>
        <definition>static string fc::json::to_pretty_string</definition>
        <argsstring>(const T &amp;v, output_formatting format=stringify_large_ints_and_doubles, uint32_t max_depth=DEFAULT_MAX_RECURSION_DEPTH)</argsstring>
        <name>to_pretty_string</name>
        <param>
          <type>const T &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1json_1afbd7971f1c3f78682333330895f02e5d" kindref="member">output_formatting</ref></type>
          <declname>format</declname>
          <defval><ref refid="classfc_1_1json_1afbd7971f1c3f78682333330895f02e5da3335effe22a8bbd67f2312fd58662269" kindref="member">stringify_large_ints_and_doubles</ref></defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval><ref refid="json_8hpp_1aee45ef1ffa047f0cdfef5fc453a98ac6" kindref="member">DEFAULT_MAX_RECURSION_DEPTH</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/json.hpp" line="72" column="26" bodyfile="libraries/fc/include/fc/io/json.hpp" bodystart="72" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1json_1aa1d34d44986fa97700b73895623b76f7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void fc::json::save_to_file</definition>
        <argsstring>(const T &amp;v, const std::string &amp;p, bool pretty=true, output_formatting format=stringify_large_ints_and_doubles, uint32_t max_depth=DEFAULT_MAX_RECURSION_DEPTH)</argsstring>
        <name>save_to_file</name>
        <param>
          <type>const T &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>pretty</declname>
          <defval>true</defval>
        </param>
        <param>
          <type><ref refid="classfc_1_1json_1afbd7971f1c3f78682333330895f02e5d" kindref="member">output_formatting</ref></type>
          <declname>format</declname>
          <defval><ref refid="classfc_1_1json_1afbd7971f1c3f78682333330895f02e5da3335effe22a8bbd67f2312fd58662269" kindref="member">stringify_large_ints_and_doubles</ref></defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval><ref refid="json_8hpp_1aee45ef1ffa047f0cdfef5fc453a98ac6" kindref="member">DEFAULT_MAX_RECURSION_DEPTH</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/json.hpp" line="78" column="22" bodyfile="libraries/fc/include/fc/io/json.hpp" bodystart="78" bodyend="81"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Provides interface for json serialization.</para>
<para>json strings are always UTF8 </para>
    </detaileddescription>
    <location file="libraries/fc/include/fc/io/json.hpp" line="18" column="1" bodyfile="libraries/fc/include/fc/io/json.hpp" bodystart="17" bodyend="82"/>
    <listofallmembers>
      <member refid="classfc_1_1json_1a8554b1c7b658a170d4bc81d4bac798b1ad13ac383403a7c2890dde8dc042e95c6" prot="public" virt="non-virtual"><scope>fc::json</scope><name>broken_nul_parser</name></member>
      <member refid="classfc_1_1json_1a842b66c55bc641537ac1ad815d1d7b2b" prot="public" virt="non-virtual"><scope>fc::json</scope><name>from_file</name></member>
      <member refid="classfc_1_1json_1aa69abb6aa28711bd651cc608e69f793c" prot="public" virt="non-virtual"><scope>fc::json</scope><name>from_file</name></member>
      <member refid="classfc_1_1json_1a43b4958ac30dd62e90680ef5ba4dec9d" prot="public" virt="non-virtual"><scope>fc::json</scope><name>from_stream</name></member>
      <member refid="classfc_1_1json_1a2a9ee7bbc147d202bbb8ae96c4886403" prot="public" virt="non-virtual"><scope>fc::json</scope><name>from_string</name></member>
      <member refid="classfc_1_1json_1aaa26b598006f30bca1b034b7cd70b4b1" prot="public" virt="non-virtual"><scope>fc::json</scope><name>is_valid</name></member>
      <member refid="classfc_1_1json_1afbd7971f1c3f78682333330895f02e5da062b267613c1279194db6111cfa0659f" prot="public" virt="non-virtual"><scope>fc::json</scope><name>legacy_generator</name></member>
      <member refid="classfc_1_1json_1a8554b1c7b658a170d4bc81d4bac798b1af74410cf18f46cc6a24887c3815fd3c3" prot="public" virt="non-virtual"><scope>fc::json</scope><name>legacy_parser</name></member>
      <member refid="classfc_1_1json_1afbd7971f1c3f78682333330895f02e5d" prot="public" virt="non-virtual"><scope>fc::json</scope><name>output_formatting</name></member>
      <member refid="classfc_1_1json_1a8554b1c7b658a170d4bc81d4bac798b1" prot="public" virt="non-virtual"><scope>fc::json</scope><name>parse_type</name></member>
      <member refid="classfc_1_1json_1ad5755c5c32ee905ff3ad5016d529f4e2" prot="public" virt="non-virtual"><scope>fc::json</scope><name>save_to_file</name></member>
      <member refid="classfc_1_1json_1a20beb42ce8c0fb339194c03f2c6214a5" prot="public" virt="non-virtual"><scope>fc::json</scope><name>save_to_file</name></member>
      <member refid="classfc_1_1json_1aa1d34d44986fa97700b73895623b76f7" prot="public" virt="non-virtual"><scope>fc::json</scope><name>save_to_file</name></member>
      <member refid="classfc_1_1json_1afbd7971f1c3f78682333330895f02e5da3335effe22a8bbd67f2312fd58662269" prot="public" virt="non-virtual"><scope>fc::json</scope><name>stringify_large_ints_and_doubles</name></member>
      <member refid="classfc_1_1json_1aec172d4ab75ce7237b17d98b1a40a571" prot="public" virt="non-virtual"><scope>fc::json</scope><name>to_pretty_string</name></member>
      <member refid="classfc_1_1json_1a5367badb037158417d2a2662f2779b5d" prot="public" virt="non-virtual"><scope>fc::json</scope><name>to_pretty_string</name></member>
      <member refid="classfc_1_1json_1a732d3ab762905f520532fa4043590df1" prot="public" virt="non-virtual"><scope>fc::json</scope><name>to_stream</name></member>
      <member refid="classfc_1_1json_1af4e017a1ae6f4cd01f6f7999cb896e08" prot="public" virt="non-virtual"><scope>fc::json</scope><name>to_stream</name></member>
      <member refid="classfc_1_1json_1a11cc517107b196d5ae60b97b7164924b" prot="public" virt="non-virtual"><scope>fc::json</scope><name>to_stream</name></member>
      <member refid="classfc_1_1json_1aa76522d05db5597e19cbe44e2e44c275" prot="public" virt="non-virtual"><scope>fc::json</scope><name>to_stream</name></member>
      <member refid="classfc_1_1json_1a2ca87ad6ef4ccacc22605b3c2517daa3" prot="public" virt="non-virtual"><scope>fc::json</scope><name>to_string</name></member>
      <member refid="classfc_1_1json_1af86e71ac5c2a85aeae41b895b8037a99" prot="public" virt="non-virtual"><scope>fc::json</scope><name>to_string</name></member>
      <member refid="classfc_1_1json_1ae057e408a3a820bc04928ecc8fc26db5" prot="public" virt="non-virtual"><scope>fc::json</scope><name>variants_from_string</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
