<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classgraphene_1_1db_1_1base__abstract__object" kind="class" language="C++" prot="public">
    <compoundname>graphene::db::base_abstract_object</compoundname>
    <basecompoundref refid="classgraphene_1_1db_1_1object" prot="public" virt="non-virtual">graphene::db::object</basecompoundref>
    <derivedcompoundref refid="classgraphene_1_1db_1_1abstract__object" prot="public" virt="non-virtual">graphene::db::abstract_object&lt; DerivedClass, SpaceID, TypeID &gt;</derivedcompoundref>
    <derivedcompoundref refid="classgraphene_1_1db_1_1annotated__object" prot="public" virt="non-virtual">graphene::db::annotated_object&lt; DerivedClass &gt;</derivedcompoundref>
    <includes refid="object_8hpp" local="no">object.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>DerivedClass</declname>
        <defname>DerivedClass</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgraphene_1_1db_1_1base__abstract__object_1af3a4c0e78138f72a0e5fd120f4105488" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::unique_ptr&lt; <ref refid="classgraphene_1_1db_1_1object" kindref="compound">object</ref> &gt;</type>
        <definition>std::unique_ptr&lt;object&gt; graphene::db::base_abstract_object&lt; DerivedClass &gt;::clone</definition>
        <argsstring>() const override</argsstring>
        <name>clone</name>
        <reimplements refid="classgraphene_1_1db_1_1object_1a338c362d7ad8dec65847ed1621b0364a">clone</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>these methods are implemented for derived classes by inheriting base_abstract_object&lt;DerivedClass&gt; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/db/include/graphene/db/object.hpp" line="92" column="1" bodyfile="libraries/db/include/graphene/db/object.hpp" bodystart="92" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1db_1_1base__abstract__object_1ae411f8719b1a5d32781c71a06c2b9386" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void graphene::db::base_abstract_object&lt; DerivedClass &gt;::move_from</definition>
        <argsstring>(object &amp;obj) override</argsstring>
        <name>move_from</name>
        <reimplements refid="classgraphene_1_1db_1_1object_1ac315191fdd4044fcda7133b33a2e1e8c">move_from</reimplements>
        <param>
          <type><ref refid="classgraphene_1_1db_1_1object" kindref="compound">object</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/db/include/graphene/db/object.hpp" line="97" column="1" bodyfile="libraries/db/include/graphene/db/object.hpp" bodystart="97" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1db_1_1base__abstract__object_1a7dd7f3ea796b0f3ec9b4899b3e33e4b2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classfc_1_1variant" kindref="compound">fc::variant</ref></type>
        <definition>fc::variant graphene::db::base_abstract_object&lt; DerivedClass &gt;::to_variant</definition>
        <argsstring>() const override</argsstring>
        <name>to_variant</name>
        <reimplements refid="classgraphene_1_1db_1_1object_1aca896a32d67ffbcddd2a831c87c24644">to_variant</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/db/include/graphene/db/object.hpp" line="101" column="1" bodyfile="libraries/db/include/graphene/db/object.hpp" bodystart="101" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1db_1_1base__abstract__object_1a9ba1e81bf5d130ad4f61cc95c8c9861f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::vector&lt; char &gt;</type>
        <definition>std::vector&lt;char&gt; graphene::db::base_abstract_object&lt; DerivedClass &gt;::pack</definition>
        <argsstring>() const override</argsstring>
        <name>pack</name>
        <reimplements refid="classgraphene_1_1db_1_1object_1ae0ac940716e76ee0876fbfc3023b26eb">pack</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/db/include/graphene/db/object.hpp" line="103" column="1" bodyfile="libraries/db/include/graphene/db/object.hpp" bodystart="103" bodyend="103"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Use the Curiously Recurring Template Pattern to automatically add the ability to clone, serialize, and move objects polymorphically. </para>    </briefdescription>
    <detaileddescription>
<para><ulink url="http://en.wikipedia.org/wiki/Curiously_recurring_template_pattern">http://en.wikipedia.org/wiki/Curiously_recurring_template_pattern</ulink> </para>    </detaileddescription>
    <inheritancegraph>
      <node id="1768">
        <label>graphene::db::base_abstract_object&lt; DerivedClass &gt;</label>
        <link refid="classgraphene_1_1db_1_1base__abstract__object"/>
        <childnode refid="1769" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1771">
        <label>graphene::db::annotated_object&lt; DerivedClass &gt;</label>
        <link refid="classgraphene_1_1db_1_1annotated__object"/>
        <childnode refid="1768" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1769">
        <label>graphene::db::object</label>
        <link refid="classgraphene_1_1db_1_1object"/>
      </node>
      <node id="1770">
        <label>graphene::db::abstract_object&lt; DerivedClass &gt;</label>
        <link refid="classgraphene_1_1db_1_1abstract__object"/>
        <childnode refid="1768" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1772">
        <label>graphene::db::base_abstract_object&lt; DerivedClass &gt;</label>
        <link refid="classgraphene_1_1db_1_1base__abstract__object"/>
        <childnode refid="1773" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1774">
        <label>graphene::db::object_id_type</label>
        <link refid="structgraphene_1_1db_1_1object__id__type"/>
      </node>
      <node id="1773">
        <label>graphene::db::object</label>
        <link refid="classgraphene_1_1db_1_1object"/>
        <childnode refid="1774" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="libraries/db/include/graphene/db/object.hpp" line="89" column="1" bodyfile="libraries/db/include/graphene/db/object.hpp" bodystart="88" bodyend="104"/>
    <listofallmembers>
      <member refid="classgraphene_1_1db_1_1base__abstract__object_1af3a4c0e78138f72a0e5fd120f4105488" prot="public" virt="virtual"><scope>graphene::db::base_abstract_object</scope><name>clone</name></member>
      <member refid="classgraphene_1_1db_1_1object_1a2ce812569d565a45dda1420cfbdf79ad" prot="public" virt="non-virtual"><scope>graphene::db::base_abstract_object</scope><name>id</name></member>
      <member refid="classgraphene_1_1db_1_1base__abstract__object_1ae411f8719b1a5d32781c71a06c2b9386" prot="public" virt="virtual"><scope>graphene::db::base_abstract_object</scope><name>move_from</name></member>
      <member refid="classgraphene_1_1db_1_1object_1ae57a6f64a9444b2f0fa0c937be480f54" prot="public" virt="non-virtual"><scope>graphene::db::base_abstract_object</scope><name>object</name></member>
      <member refid="classgraphene_1_1db_1_1object_1abc6d16d10de6c2e780d62918a458276f" prot="public" virt="non-virtual"><scope>graphene::db::base_abstract_object</scope><name>object</name></member>
      <member refid="classgraphene_1_1db_1_1base__abstract__object_1a9ba1e81bf5d130ad4f61cc95c8c9861f" prot="public" virt="virtual"><scope>graphene::db::base_abstract_object</scope><name>pack</name></member>
      <member refid="classgraphene_1_1db_1_1base__abstract__object_1a7dd7f3ea796b0f3ec9b4899b3e33e4b2" prot="public" virt="virtual"><scope>graphene::db::base_abstract_object</scope><name>to_variant</name></member>
      <member refid="classgraphene_1_1db_1_1object_1ae8f3fa315d81c80cd93cf5ea2853e65f" prot="public" virt="virtual"><scope>graphene::db::base_abstract_object</scope><name>~object</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
