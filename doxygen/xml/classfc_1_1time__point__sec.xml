<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classfc_1_1time__point__sec" kind="class" language="C++" prot="public">
    <compoundname>fc::time_point_sec</compoundname>
    <includes refid="time_8hpp" local="no">time.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classfc_1_1time__point__sec_1a427c180f974aef671d4347b0ac20f423" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t fc::time_point_sec::utc_seconds</definition>
        <argsstring></argsstring>
        <name>utc_seconds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/time.hpp" line="122" column="1" bodyfile="libraries/fc/include/fc/time.hpp" bodystart="122" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classfc_1_1time__point__sec_1a9a17a734d82a4475f5d238d07241dd8f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>fc::time_point_sec::time_point_sec</definition>
        <argsstring>()</argsstring>
        <name>time_point_sec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/time.hpp" line="77" column="1" bodyfile="libraries/fc/include/fc/time.hpp" bodystart="77" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1time__point__sec_1aecc6db02e42681cf377dd8f128567b94" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>fc::time_point_sec::time_point_sec</definition>
        <argsstring>(uint32_t seconds)</argsstring>
        <name>time_point_sec</name>
        <param>
          <type>uint32_t</type>
          <declname>seconds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/time.hpp" line="80" column="1" bodyfile="libraries/fc/include/fc/time.hpp" bodystart="80" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1time__point__sec_1af142f6b7a58ba2e24d82c6d931ea32bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>fc::time_point_sec::time_point_sec</definition>
        <argsstring>(const time_point &amp;t)</argsstring>
        <name>time_point_sec</name>
        <param>
          <type>const <ref refid="classfc_1_1time__point" kindref="compound">time_point</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/time.hpp" line="83" column="1" bodyfile="libraries/fc/include/fc/time.hpp" bodystart="83" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1time__point__sec_1a73dd13953a525b22dd371903d337c2c9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>fc::time_point_sec::operator time_point</definition>
        <argsstring>() const</argsstring>
        <name>operator time_point</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/time.hpp" line="89" column="1" bodyfile="libraries/fc/include/fc/time.hpp" bodystart="89" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1time__point__sec_1adb7ba1e3676c8074ce8f417e15a57ef7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t fc::time_point_sec::sec_since_epoch</definition>
        <argsstring>() const</argsstring>
        <name>sec_since_epoch</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/time.hpp" line="90" column="1" bodyfile="libraries/fc/include/fc/time.hpp" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1time__point__sec_1adf354265ae353527155c2cd9086f5d50" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfc_1_1time__point__sec" kindref="compound">time_point_sec</ref></type>
        <definition>time_point_sec fc::time_point_sec::operator=</definition>
        <argsstring>(const fc::time_point &amp;t)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classfc_1_1time__point" kindref="compound">fc::time_point</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/time.hpp" line="92" column="1" bodyfile="libraries/fc/include/fc/time.hpp" bodystart="92" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1time__point__sec_1a3bfad5ac28831576796cb103a3554abe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfc_1_1time__point__sec" kindref="compound">time_point_sec</ref> &amp;</type>
        <definition>time_point_sec&amp; fc::time_point_sec::operator+=</definition>
        <argsstring>(uint32_t m)</argsstring>
        <name>operator+=</name>
        <param>
          <type>uint32_t</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/time.hpp" line="103" column="1" bodyfile="libraries/fc/include/fc/time.hpp" bodystart="103" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1time__point__sec_1a2d1a748a9204795fb65ddf505fb81338" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfc_1_1time__point__sec" kindref="compound">time_point_sec</ref> &amp;</type>
        <definition>time_point_sec&amp; fc::time_point_sec::operator+=</definition>
        <argsstring>(microseconds m)</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="classfc_1_1microseconds" kindref="compound">microseconds</ref></type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/time.hpp" line="104" column="1" bodyfile="libraries/fc/include/fc/time.hpp" bodystart="104" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1time__point__sec_1a91ec1c14f3ca1d6ff920f58aff9142ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfc_1_1time__point__sec" kindref="compound">time_point_sec</ref> &amp;</type>
        <definition>time_point_sec&amp; fc::time_point_sec::operator-=</definition>
        <argsstring>(uint32_t m)</argsstring>
        <name>operator-=</name>
        <param>
          <type>uint32_t</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/time.hpp" line="105" column="1" bodyfile="libraries/fc/include/fc/time.hpp" bodystart="105" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1time__point__sec_1aedde881c34001b77d56113a122664a8c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfc_1_1time__point__sec" kindref="compound">time_point_sec</ref> &amp;</type>
        <definition>time_point_sec&amp; fc::time_point_sec::operator-=</definition>
        <argsstring>(microseconds m)</argsstring>
        <name>operator-=</name>
        <param>
          <type><ref refid="classfc_1_1microseconds" kindref="compound">microseconds</ref></type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/time.hpp" line="106" column="1" bodyfile="libraries/fc/include/fc/time.hpp" bodystart="106" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1time__point__sec_1a164110f5cea5ec455243a061e4267fa3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfc_1_1time__point__sec" kindref="compound">time_point_sec</ref></type>
        <definition>time_point_sec fc::time_point_sec::operator+</definition>
        <argsstring>(uint32_t offset) const</argsstring>
        <name>operator+</name>
        <param>
          <type>uint32_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/time.hpp" line="107" column="1" bodyfile="libraries/fc/include/fc/time.hpp" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1time__point__sec_1a9249354e81b17de7e676316145a1b2e6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfc_1_1time__point__sec" kindref="compound">time_point_sec</ref></type>
        <definition>time_point_sec fc::time_point_sec::operator-</definition>
        <argsstring>(uint32_t offset) const</argsstring>
        <name>operator-</name>
        <param>
          <type>uint32_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/time.hpp" line="108" column="1" bodyfile="libraries/fc/include/fc/time.hpp" bodystart="108" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1time__point__sec_1abc1b357da36369e9176d9fadc9fb2a80" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string fc::time_point_sec::to_non_delimited_iso_string</definition>
        <argsstring>() const</argsstring>
        <name>to_non_delimited_iso_string</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/time.hpp" line="115" column="1" bodyfile="libraries/fc/src/time.cpp" bodystart="18" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1time__point__sec_1af360be41ff03f367e179837f1c09c714" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string fc::time_point_sec::to_iso_string</definition>
        <argsstring>() const</argsstring>
        <name>to_iso_string</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/time.hpp" line="116" column="1" bodyfile="libraries/fc/src/time.cpp" bodystart="24" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1time__point__sec_1a335a0bbaf7cc5b2a2b71714e32cf8e01" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::time_point_sec::operator std::string</definition>
        <argsstring>() const</argsstring>
        <name>operator std::string</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/time.hpp" line="118" column="1" bodyfile="libraries/fc/src/time.cpp" bodystart="30" bodyend="33"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classfc_1_1time__point__sec_1a45d3b7342e76cfb07ef1845d75b57a39" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfc_1_1time__point__sec" kindref="compound">time_point_sec</ref></type>
        <definition>static time_point_sec fc::time_point_sec::maximum</definition>
        <argsstring>()</argsstring>
        <name>maximum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/time.hpp" line="86" column="1" bodyfile="libraries/fc/include/fc/time.hpp" bodystart="86" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1time__point__sec_1a9e403874fef172903950ad8d0f3120c6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfc_1_1time__point__sec" kindref="compound">time_point_sec</ref></type>
        <definition>static time_point_sec fc::time_point_sec::min</definition>
        <argsstring>()</argsstring>
        <name>min</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/time.hpp" line="87" column="1" bodyfile="libraries/fc/include/fc/time.hpp" bodystart="87" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1time__point__sec_1a022c1937dfc8fd289b6799ce115f8ff4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1time__point__sec" kindref="compound">time_point_sec</ref></type>
        <definition>time_point_sec fc::time_point_sec::from_iso_string</definition>
        <argsstring>(const std::string &amp;s)</argsstring>
        <name>from_iso_string</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/time.hpp" line="119" column="1" bodyfile="libraries/fc/src/time.cpp" bodystart="35" bodyend="44"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classfc_1_1time__point__sec_1adf55a60cc15afb538eb8d5bf3a838b35" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const time_point_sec &amp;a, const time_point_sec &amp;b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classfc_1_1time__point__sec" kindref="compound">time_point_sec</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1time__point__sec" kindref="compound">time_point_sec</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/time.hpp" line="97" column="1" bodyfile="libraries/fc/include/fc/time.hpp" bodystart="97" bodyend="97"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1time__point__sec_1aaaeb236eab5e19e5657e60b73c92e6c1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const time_point_sec &amp;a, const time_point_sec &amp;b)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classfc_1_1time__point__sec" kindref="compound">time_point_sec</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1time__point__sec" kindref="compound">time_point_sec</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/time.hpp" line="98" column="1" bodyfile="libraries/fc/include/fc/time.hpp" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1time__point__sec_1a2ad8fce220805a5529f16e6ac1698728" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const time_point_sec &amp;a, const time_point_sec &amp;b)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classfc_1_1time__point__sec" kindref="compound">time_point_sec</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1time__point__sec" kindref="compound">time_point_sec</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/time.hpp" line="99" column="1" bodyfile="libraries/fc/include/fc/time.hpp" bodystart="99" bodyend="99"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1time__point__sec_1a3e7839d4f7e9cc5a49d580b398b6ee5e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const time_point_sec &amp;a, const time_point_sec &amp;b)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classfc_1_1time__point__sec" kindref="compound">time_point_sec</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1time__point__sec" kindref="compound">time_point_sec</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/time.hpp" line="100" column="1" bodyfile="libraries/fc/include/fc/time.hpp" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1time__point__sec_1ad97eba5244d2729349e69939e68fc939" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const time_point_sec &amp;a, const time_point_sec &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classfc_1_1time__point__sec" kindref="compound">time_point_sec</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1time__point__sec" kindref="compound">time_point_sec</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/time.hpp" line="101" column="1" bodyfile="libraries/fc/include/fc/time.hpp" bodystart="101" bodyend="101"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1time__point__sec_1a9bbbbf540848bdf3829b810d542e8b4f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const time_point_sec &amp;a, const time_point_sec &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classfc_1_1time__point__sec" kindref="compound">time_point_sec</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1time__point__sec" kindref="compound">time_point_sec</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/time.hpp" line="102" column="1" bodyfile="libraries/fc/include/fc/time.hpp" bodystart="102" bodyend="102"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1time__point__sec_1a33d1bd167b2e7986485b0979250b4b55" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classfc_1_1time__point" kindref="compound">time_point</ref></type>
        <definition>time_point operator+</definition>
        <argsstring>(const time_point_sec &amp;t, const microseconds &amp;m)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classfc_1_1time__point__sec" kindref="compound">time_point_sec</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1microseconds" kindref="compound">microseconds</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/time.hpp" line="110" column="1" bodyfile="libraries/fc/include/fc/time.hpp" bodystart="110" bodyend="110"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1time__point__sec_1ab0485dce4d4b0fc5813b33818ff03692" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classfc_1_1time__point" kindref="compound">time_point</ref></type>
        <definition>time_point operator-</definition>
        <argsstring>(const time_point_sec &amp;t, const microseconds &amp;m)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classfc_1_1time__point__sec" kindref="compound">time_point_sec</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1microseconds" kindref="compound">microseconds</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/time.hpp" line="111" column="1" bodyfile="libraries/fc/include/fc/time.hpp" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1time__point__sec_1a40c52d6b3551ec223d707d9ba128dc9b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classfc_1_1microseconds" kindref="compound">microseconds</ref></type>
        <definition>microseconds operator-</definition>
        <argsstring>(const time_point_sec &amp;t, const time_point_sec &amp;m)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classfc_1_1time__point__sec" kindref="compound">time_point_sec</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1time__point__sec" kindref="compound">time_point_sec</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/time.hpp" line="112" column="1" bodyfile="libraries/fc/include/fc/time.hpp" bodystart="112" bodyend="112"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1time__point__sec_1a1a8ae19b63eb263fc2435ef5ac9bf4f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classfc_1_1microseconds" kindref="compound">microseconds</ref></type>
        <definition>microseconds operator-</definition>
        <argsstring>(const time_point &amp;t, const time_point_sec &amp;m)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classfc_1_1time__point" kindref="compound">time_point</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1time__point__sec" kindref="compound">time_point_sec</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/time.hpp" line="113" column="1" bodyfile="libraries/fc/include/fc/time.hpp" bodystart="113" bodyend="113"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A lower resolution <ref refid="classfc_1_1time__point" kindref="compound">time_point</ref> accurate only to seconds from 1970 </para>    </detaileddescription>
    <location file="libraries/fc/include/fc/time.hpp" line="75" column="1" bodyfile="libraries/fc/include/fc/time.hpp" bodystart="74" bodyend="123"/>
    <listofallmembers>
      <member refid="classfc_1_1time__point__sec_1a022c1937dfc8fd289b6799ce115f8ff4" prot="public" virt="non-virtual"><scope>fc::time_point_sec</scope><name>from_iso_string</name></member>
      <member refid="classfc_1_1time__point__sec_1a45d3b7342e76cfb07ef1845d75b57a39" prot="public" virt="non-virtual"><scope>fc::time_point_sec</scope><name>maximum</name></member>
      <member refid="classfc_1_1time__point__sec_1a9e403874fef172903950ad8d0f3120c6" prot="public" virt="non-virtual"><scope>fc::time_point_sec</scope><name>min</name></member>
      <member refid="classfc_1_1time__point__sec_1a335a0bbaf7cc5b2a2b71714e32cf8e01" prot="public" virt="non-virtual"><scope>fc::time_point_sec</scope><name>operator std::string</name></member>
      <member refid="classfc_1_1time__point__sec_1a73dd13953a525b22dd371903d337c2c9" prot="public" virt="non-virtual"><scope>fc::time_point_sec</scope><name>operator time_point</name></member>
      <member refid="classfc_1_1time__point__sec_1a9bbbbf540848bdf3829b810d542e8b4f" prot="public" virt="non-virtual"><scope>fc::time_point_sec</scope><name>operator!=</name></member>
      <member refid="classfc_1_1time__point__sec_1a164110f5cea5ec455243a061e4267fa3" prot="public" virt="non-virtual"><scope>fc::time_point_sec</scope><name>operator+</name></member>
      <member refid="classfc_1_1time__point__sec_1a33d1bd167b2e7986485b0979250b4b55" prot="public" virt="non-virtual"><scope>fc::time_point_sec</scope><name>operator+</name></member>
      <member refid="classfc_1_1time__point__sec_1a3bfad5ac28831576796cb103a3554abe" prot="public" virt="non-virtual"><scope>fc::time_point_sec</scope><name>operator+=</name></member>
      <member refid="classfc_1_1time__point__sec_1a2d1a748a9204795fb65ddf505fb81338" prot="public" virt="non-virtual"><scope>fc::time_point_sec</scope><name>operator+=</name></member>
      <member refid="classfc_1_1time__point__sec_1a9249354e81b17de7e676316145a1b2e6" prot="public" virt="non-virtual"><scope>fc::time_point_sec</scope><name>operator-</name></member>
      <member refid="classfc_1_1time__point__sec_1ab0485dce4d4b0fc5813b33818ff03692" prot="public" virt="non-virtual"><scope>fc::time_point_sec</scope><name>operator-</name></member>
      <member refid="classfc_1_1time__point__sec_1a40c52d6b3551ec223d707d9ba128dc9b" prot="public" virt="non-virtual"><scope>fc::time_point_sec</scope><name>operator-</name></member>
      <member refid="classfc_1_1time__point__sec_1a1a8ae19b63eb263fc2435ef5ac9bf4f1" prot="public" virt="non-virtual"><scope>fc::time_point_sec</scope><name>operator-</name></member>
      <member refid="classfc_1_1time__point__sec_1a91ec1c14f3ca1d6ff920f58aff9142ed" prot="public" virt="non-virtual"><scope>fc::time_point_sec</scope><name>operator-=</name></member>
      <member refid="classfc_1_1time__point__sec_1aedde881c34001b77d56113a122664a8c" prot="public" virt="non-virtual"><scope>fc::time_point_sec</scope><name>operator-=</name></member>
      <member refid="classfc_1_1time__point__sec_1adf55a60cc15afb538eb8d5bf3a838b35" prot="public" virt="non-virtual"><scope>fc::time_point_sec</scope><name>operator&lt;</name></member>
      <member refid="classfc_1_1time__point__sec_1a2ad8fce220805a5529f16e6ac1698728" prot="public" virt="non-virtual"><scope>fc::time_point_sec</scope><name>operator&lt;=</name></member>
      <member refid="classfc_1_1time__point__sec_1adf354265ae353527155c2cd9086f5d50" prot="public" virt="non-virtual"><scope>fc::time_point_sec</scope><name>operator=</name></member>
      <member refid="classfc_1_1time__point__sec_1ad97eba5244d2729349e69939e68fc939" prot="public" virt="non-virtual"><scope>fc::time_point_sec</scope><name>operator==</name></member>
      <member refid="classfc_1_1time__point__sec_1aaaeb236eab5e19e5657e60b73c92e6c1" prot="public" virt="non-virtual"><scope>fc::time_point_sec</scope><name>operator&gt;</name></member>
      <member refid="classfc_1_1time__point__sec_1a3e7839d4f7e9cc5a49d580b398b6ee5e" prot="public" virt="non-virtual"><scope>fc::time_point_sec</scope><name>operator&gt;=</name></member>
      <member refid="classfc_1_1time__point__sec_1adb7ba1e3676c8074ce8f417e15a57ef7" prot="public" virt="non-virtual"><scope>fc::time_point_sec</scope><name>sec_since_epoch</name></member>
      <member refid="classfc_1_1time__point__sec_1a9a17a734d82a4475f5d238d07241dd8f" prot="public" virt="non-virtual"><scope>fc::time_point_sec</scope><name>time_point_sec</name></member>
      <member refid="classfc_1_1time__point__sec_1aecc6db02e42681cf377dd8f128567b94" prot="public" virt="non-virtual"><scope>fc::time_point_sec</scope><name>time_point_sec</name></member>
      <member refid="classfc_1_1time__point__sec_1af142f6b7a58ba2e24d82c6d931ea32bd" prot="public" virt="non-virtual"><scope>fc::time_point_sec</scope><name>time_point_sec</name></member>
      <member refid="classfc_1_1time__point__sec_1af360be41ff03f367e179837f1c09c714" prot="public" virt="non-virtual"><scope>fc::time_point_sec</scope><name>to_iso_string</name></member>
      <member refid="classfc_1_1time__point__sec_1abc1b357da36369e9176d9fadc9fb2a80" prot="public" virt="non-virtual"><scope>fc::time_point_sec</scope><name>to_non_delimited_iso_string</name></member>
      <member refid="classfc_1_1time__point__sec_1a427c180f974aef671d4347b0ac20f423" prot="private" virt="non-virtual"><scope>fc::time_point_sec</scope><name>utc_seconds</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
