<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structgraphene_1_1protocol_1_1assert__operation" kind="struct" language="C++" prot="public">
    <compoundname>graphene::protocol::assert_operation</compoundname>
    <basecompoundref refid="structgraphene_1_1protocol_1_1base__operation" prot="public" virt="non-virtual">graphene::protocol::base_operation</basecompoundref>
    <includes refid="assert_8hpp" local="no">assert.hpp</includes>
    <innerclass refid="structgraphene_1_1protocol_1_1assert__operation_1_1fee__params__t" prot="public">graphene::protocol::assert_operation::fee_params_t</innerclass>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1assert__operation_1a710eb01d74bbbe646523a9937730166c" prot="public" static="no" mutable="no">
        <type><ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref></type>
        <definition>asset graphene::protocol::assert_operation::fee</definition>
        <argsstring></argsstring>
        <name>fee</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/assert.hpp" line="97" column="34" bodyfile="libraries/protocol/include/graphene/protocol/assert.hpp" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1assert__operation_1ad1d4c23dda8dc399664681bd3e27c5bc" prot="public" static="no" mutable="no">
        <type>account_id_type</type>
        <definition>account_id_type graphene::protocol::assert_operation::fee_paying_account</definition>
        <argsstring></argsstring>
        <name>fee_paying_account</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/assert.hpp" line="98" column="34" bodyfile="libraries/protocol/include/graphene/protocol/assert.hpp" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1assert__operation_1ae48b5f30385438d251a0ae4070c8c405" prot="public" static="no" mutable="no">
        <type>vector&lt; <ref refid="namespacegraphene_1_1protocol_1a94748a50b37ab05b15fb496d1b9f7685" kindref="member">predicate</ref> &gt;</type>
        <definition>vector&lt;predicate&gt; graphene::protocol::assert_operation::predicates</definition>
        <argsstring></argsstring>
        <name>predicates</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/assert.hpp" line="99" column="23" bodyfile="libraries/protocol/include/graphene/protocol/assert.hpp" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1assert__operation_1a6157cae006399ed0a3632af53a6233fd" prot="public" static="no" mutable="no">
        <type>flat_set&lt; account_id_type &gt;</type>
        <definition>flat_set&lt;account_id_type&gt; graphene::protocol::assert_operation::required_auths</definition>
        <argsstring></argsstring>
        <name>required_auths</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/assert.hpp" line="100" column="17" bodyfile="libraries/protocol/include/graphene/protocol/assert.hpp" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1assert__operation_1a959afa6003a198a80c7e12cc751d5e7e" prot="public" static="no" mutable="no">
        <type><ref refid="group__operations_1gabaddcaf5bde76414891b4c29031d9288" kindref="member">extensions_type</ref></type>
        <definition>extensions_type graphene::protocol::assert_operation::extensions</definition>
        <argsstring></argsstring>
        <name>extensions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/assert.hpp" line="101" column="34" bodyfile="libraries/protocol/include/graphene/protocol/assert.hpp" bodystart="101" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1assert__operation_1a6a890bfc1d7c98e9fa4e3de95ac01556" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>account_id_type</type>
        <definition>account_id_type graphene::protocol::assert_operation::fee_payer</definition>
        <argsstring>() const</argsstring>
        <name>fee_payer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/assert.hpp" line="103" column="23" bodyfile="libraries/protocol/include/graphene/protocol/assert.hpp" bodystart="103" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1assert__operation_1ab0164305cd157a52d4ef08f33b26ad04" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void graphene::protocol::assert_operation::validate</definition>
        <argsstring>() const</argsstring>
        <name>validate</name>
        <reimplements refid="structgraphene_1_1protocol_1_1base__operation_1a23d617a6fa0921d3f5b51dd5167e7a29">validate</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/assert.hpp" line="104" column="23" bodyfile="libraries/protocol/assert.cpp" bodystart="53" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1assert__operation_1afe24bf986a9c0756c586ff901c5dcf0a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegraphene_1_1protocol_1a69b2104c1c11eed2d17bd29b86713347" kindref="member">share_type</ref></type>
        <definition>share_type graphene::protocol::assert_operation::calculate_fee</definition>
        <argsstring>(const fee_params_t &amp;k) const</argsstring>
        <name>calculate_fee</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1assert__operation_1_1fee__params__t" kindref="compound">fee_params_t</ref> &amp;</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The fee for assert operations is proportional to their size, but cheaper than a data fee because they require no storage </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/assert.hpp" line="105" column="23" bodyfile="libraries/protocol/assert.cpp" bodystart="64" bodyend="67"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>assert that some conditions are true. </para>
    </briefdescription>
    <detaileddescription>
<para>This operation performs no changes to the database state, but can but used to verify pre or post conditions for other operations. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>graphene::protocol::assert_operation</label>
        <link refid="structgraphene_1_1protocol_1_1assert__operation"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>graphene::protocol::base_operation</label>
        <link refid="structgraphene_1_1protocol_1_1base__operation"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5">
        <label>fc::safe_base&lt; int64_t &gt;</label>
        <link refid="structfc_1_1safe__base"/>
      </node>
      <node id="1">
        <label>graphene::protocol::assert_operation</label>
        <link refid="structgraphene_1_1protocol_1_1assert__operation"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>fee</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>fee_paying_account</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>predicates</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>required_auths</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>account_id_type</label>
      </node>
      <node id="8">
        <label>flat_set&lt; account_id_type &gt;</label>
      </node>
      <node id="4">
        <label>fc::safe&lt; int64_t &gt;</label>
        <link refid="structfc_1_1safe"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>graphene::protocol::base_operation</label>
        <link refid="structgraphene_1_1protocol_1_1base__operation"/>
      </node>
      <node id="7">
        <label>vector&lt; fc::static_variant &gt;</label>
      </node>
      <node id="3">
        <label>graphene::protocol::asset</label>
        <link refid="structgraphene_1_1protocol_1_1asset"/>
        <childnode refid="4" relation="usage">
          <edgelabel>amount</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="libraries/protocol/include/graphene/protocol/assert.hpp" line="94" column="1" bodyfile="libraries/protocol/include/graphene/protocol/assert.hpp" bodystart="93" bodyend="106"/>
    <listofallmembers>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1aaccb0fa71ee529cf62324baaa99988fe" prot="public" virt="non-virtual"><scope>graphene::protocol::assert_operation</scope><name>calculate_data_fee</name></member>
      <member refid="structgraphene_1_1protocol_1_1assert__operation_1afe24bf986a9c0756c586ff901c5dcf0a" prot="public" virt="non-virtual"><scope>graphene::protocol::assert_operation</scope><name>calculate_fee</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1a0be44badcee9a648413eb906dac1d3b3" prot="public" virt="non-virtual" ambiguityscope="graphene::protocol::base_operation::"><scope>graphene::protocol::assert_operation</scope><name>calculate_fee</name></member>
      <member refid="structgraphene_1_1protocol_1_1assert__operation_1a959afa6003a198a80c7e12cc751d5e7e" prot="public" virt="non-virtual"><scope>graphene::protocol::assert_operation</scope><name>extensions</name></member>
      <member refid="structgraphene_1_1protocol_1_1assert__operation_1a710eb01d74bbbe646523a9937730166c" prot="public" virt="non-virtual"><scope>graphene::protocol::assert_operation</scope><name>fee</name></member>
      <member refid="structgraphene_1_1protocol_1_1assert__operation_1a6a890bfc1d7c98e9fa4e3de95ac01556" prot="public" virt="non-virtual"><scope>graphene::protocol::assert_operation</scope><name>fee_payer</name></member>
      <member refid="structgraphene_1_1protocol_1_1assert__operation_1ad1d4c23dda8dc399664681bd3e27c5bc" prot="public" virt="non-virtual"><scope>graphene::protocol::assert_operation</scope><name>fee_paying_account</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1a89ed7c6e7da93cd99bb41bc8d7e2627b" prot="public" virt="virtual"><scope>graphene::protocol::assert_operation</scope><name>get_required_active_authorities</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1aabc48ce97877c67ff560b94284a7c0bb" prot="public" virt="virtual"><scope>graphene::protocol::assert_operation</scope><name>get_required_authorities</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1a3251978e7bd0bb2f2fa23bcea5dee95c" prot="public" virt="virtual"><scope>graphene::protocol::assert_operation</scope><name>get_required_owner_authorities</name></member>
      <member refid="structgraphene_1_1protocol_1_1assert__operation_1ae48b5f30385438d251a0ae4070c8c405" prot="public" virt="non-virtual"><scope>graphene::protocol::assert_operation</scope><name>predicates</name></member>
      <member refid="structgraphene_1_1protocol_1_1assert__operation_1a6157cae006399ed0a3632af53a6233fd" prot="public" virt="non-virtual"><scope>graphene::protocol::assert_operation</scope><name>required_auths</name></member>
      <member refid="structgraphene_1_1protocol_1_1assert__operation_1ab0164305cd157a52d4ef08f33b26ad04" prot="public" virt="virtual"><scope>graphene::protocol::assert_operation</scope><name>validate</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1a485f3d3b963ff4c081af85945cf27774" prot="public" virt="non-virtual"><scope>graphene::protocol::assert_operation</scope><name>validate_parallel</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1a04ac6688e2df1d511514e4fc1983b828" prot="public" virt="virtual"><scope>graphene::protocol::assert_operation</scope><name>~base_operation</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
