<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classgraphene_1_1db_1_1index" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>graphene::db::index</compoundname>
    <derivedcompoundref refid="classgraphene_1_1db_1_1generic__index" prot="public" virt="non-virtual">graphene::db::generic_index&lt; T, boost::multi_index_container&lt; T, indexed_by&lt; ordered_unique&lt; tag&lt; by_id &gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt; &gt; &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="classgraphene_1_1db_1_1generic__index" prot="public" virt="non-virtual">graphene::db::generic_index&lt; ObjectType, MultiIndexType &gt;</derivedcompoundref>
    <derivedcompoundref refid="classgraphene_1_1db_1_1simple__index" prot="public" virt="non-virtual">graphene::db::simple_index&lt; T &gt;</derivedcompoundref>
    <includes refid="index_8hpp" local="no">index.hpp</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgraphene_1_1db_1_1index_1a0f198d6faca558c749b833ede04116b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual graphene::db::index::~index</definition>
        <argsstring>()</argsstring>
        <name>~index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/db/include/graphene/db/index.hpp" line="74" column="1" bodyfile="libraries/db/include/graphene/db/index.hpp" bodystart="74" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1db_1_1index_1a94bbe39fc8bba240fb1b6687036aa64a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>uint8_t</type>
        <definition>virtual uint8_t graphene::db::index::object_space_id</definition>
        <argsstring>() const =0</argsstring>
        <name>object_space_id</name>
        <reimplementedby refid="classgraphene_1_1db_1_1primary__index_1a5d878f7becdbb7b6d09ca5ca5fabf178">object_space_id</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/db/include/graphene/db/index.hpp" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1db_1_1index_1a8f4f84338efa7f8eac43c8df3c456634" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>uint8_t</type>
        <definition>virtual uint8_t graphene::db::index::object_type_id</definition>
        <argsstring>() const =0</argsstring>
        <name>object_type_id</name>
        <reimplementedby refid="classgraphene_1_1db_1_1primary__index_1afa6b9266cab104eb60f6491a92f70c12">object_type_id</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/db/include/graphene/db/index.hpp" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1db_1_1index_1ab1bda1803d712322418bce3ca44d97b5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="structgraphene_1_1db_1_1object__id__type" kindref="compound">object_id_type</ref></type>
        <definition>virtual object_id_type graphene::db::index::get_next_id</definition>
        <argsstring>() const =0</argsstring>
        <name>get_next_id</name>
        <reimplementedby refid="classgraphene_1_1db_1_1primary__index_1a513ac58b6767c204e34d41d5dbbe2c2a">get_next_id</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/db/include/graphene/db/index.hpp" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1db_1_1index_1a5e874427eaf74f45dbf23d148f2dc708" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void graphene::db::index::use_next_id</definition>
        <argsstring>()=0</argsstring>
        <name>use_next_id</name>
        <reimplementedby refid="classgraphene_1_1db_1_1primary__index_1aec0a52baa71b8de23292c608f50dd49b">use_next_id</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/db/include/graphene/db/index.hpp" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1db_1_1index_1a09516872ec406c93645ed71c24884dc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void graphene::db::index::set_next_id</definition>
        <argsstring>(object_id_type id)=0</argsstring>
        <name>set_next_id</name>
        <reimplementedby refid="classgraphene_1_1db_1_1primary__index_1aeb07aa08548cc15be065e1bf1328a00e">set_next_id</reimplementedby>
        <param>
          <type><ref refid="structgraphene_1_1db_1_1object__id__type" kindref="compound">object_id_type</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/db/include/graphene/db/index.hpp" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1db_1_1index_1a49bcbb20b44362f169bea6cdc336d319" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>const <ref refid="classgraphene_1_1db_1_1object" kindref="compound">object</ref> &amp;</type>
        <definition>virtual const object&amp; graphene::db::index::load</definition>
        <argsstring>(const std::vector&lt; char &gt; &amp;data)=0</argsstring>
        <name>load</name>
        <reimplementedby refid="classgraphene_1_1db_1_1primary__index_1af2e27f92e7a2c77e8e67f323bebe21ba">load</reimplementedby>
        <param>
          <type>const std::vector&lt; char &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/db/include/graphene/db/index.hpp" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1db_1_1index_1a51be62de2c4ca916d3b14c39499e13e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>const <ref refid="classgraphene_1_1db_1_1object" kindref="compound">object</ref> &amp;</type>
        <definition>virtual const object&amp; graphene::db::index::insert</definition>
        <argsstring>(object &amp;&amp;obj)=0</argsstring>
        <name>insert</name>
        <reimplementedby refid="classgraphene_1_1db_1_1generic__index_1ad41c7adc007eb1064065c4ee56017c5d">insert</reimplementedby>
        <reimplementedby refid="classgraphene_1_1db_1_1generic__index_1ad41c7adc007eb1064065c4ee56017c5d">insert</reimplementedby>
        <reimplementedby refid="classgraphene_1_1db_1_1simple__index_1a02070d4bbe7e4c8a0480ef2db23a2bdf">insert</reimplementedby>
        <reimplementedby refid="classgraphene_1_1db_1_1primary__index_1a6b9efacf15249bbe5650a179a14de3fc">insert</reimplementedby>
        <param>
          <type><ref refid="classgraphene_1_1db_1_1object" kindref="compound">object</ref> &amp;&amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Polymorphically insert by moving an object into the index. this should throw if the object is already in the database. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/db/include/graphene/db/index.hpp" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1db_1_1index_1a5498269afc8b822043d4d1e0b7b5a75e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>const <ref refid="classgraphene_1_1db_1_1object" kindref="compound">object</ref> &amp;</type>
        <definition>virtual const object&amp; graphene::db::index::create</definition>
        <argsstring>(const std::function&lt; void(object &amp;)&gt; &amp;constructor)=0</argsstring>
        <name>create</name>
        <reimplementedby refid="classgraphene_1_1db_1_1simple__index_1aa25decba8c3502467dfe170fcbe9a590">create</reimplementedby>
        <reimplementedby refid="classgraphene_1_1db_1_1generic__index_1a980c6c1e00630ff783bdd5d3e2ca11a1">create</reimplementedby>
        <reimplementedby refid="classgraphene_1_1db_1_1generic__index_1a980c6c1e00630ff783bdd5d3e2ca11a1">create</reimplementedby>
        <reimplementedby refid="classgraphene_1_1db_1_1primary__index_1a2a92435bc15bd2c4e160e5a56a321caf">create</reimplementedby>
        <param>
          <type>const std::function&lt; void(<ref refid="classgraphene_1_1db_1_1object" kindref="compound">object</ref> &amp;)&gt; &amp;</type>
          <declname>constructor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Builds a new object and assigns it the next available ID and then initializes it with constructor and lastly inserts it into the index. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/db/include/graphene/db/index.hpp" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1db_1_1index_1ab8aa118aac8da723cfd556078b498bec" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void graphene::db::index::open</definition>
        <argsstring>(const fc::path &amp;db)=0</argsstring>
        <name>open</name>
        <reimplementedby refid="classgraphene_1_1db_1_1primary__index_1a964b3f951cb36b7ae5507014e285d474">open</reimplementedby>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">fc::path</ref> &amp;</type>
          <declname>db</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Opens the index loading objects from a file </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/db/include/graphene/db/index.hpp" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1db_1_1index_1aa67673bbad161259895135b897a562e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void graphene::db::index::save</definition>
        <argsstring>(const fc::path &amp;db)=0</argsstring>
        <name>save</name>
        <reimplementedby refid="classgraphene_1_1db_1_1primary__index_1a66d305b9da07698740dc3f4f7f97154b">save</reimplementedby>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">fc::path</ref> &amp;</type>
          <declname>db</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/db/include/graphene/db/index.hpp" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1db_1_1index_1a9649d19814aa188652d6a643bfe134b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>const <ref refid="classgraphene_1_1db_1_1object" kindref="compound">object</ref> *</type>
        <definition>virtual const object* graphene::db::index::find</definition>
        <argsstring>(object_id_type id) const =0</argsstring>
        <name>find</name>
        <reimplementedby refid="classgraphene_1_1db_1_1simple__index_1ad951abc2f20ca008951c5257ca5f2a92">find</reimplementedby>
        <reimplementedby refid="classgraphene_1_1db_1_1generic__index_1a6f8e4f495a8b0555383ce4ba93892ce6">find</reimplementedby>
        <reimplementedby refid="classgraphene_1_1db_1_1generic__index_1a6f8e4f495a8b0555383ce4ba93892ce6">find</reimplementedby>
        <reimplementedby refid="classgraphene_1_1db_1_1primary__index_1a9905efcbf28d8288ddc35c7de26149c5">find</reimplementedby>
        <param>
          <type><ref refid="structgraphene_1_1db_1_1object__id__type" kindref="compound">object_id_type</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the object with id or nullptr if not found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/db/include/graphene/db/index.hpp" line="105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1db_1_1index_1a8afdd2aacd7a52c3c807be58340625a0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classgraphene_1_1db_1_1object" kindref="compound">object</ref> &amp;</type>
        <definition>const object&amp; graphene::db::index::get</definition>
        <argsstring>(object_id_type id) const</argsstring>
        <name>get</name>
        <param>
          <type><ref refid="structgraphene_1_1db_1_1object__id__type" kindref="compound">object_id_type</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This version will automatically check for nullptr and throw an exception if the object ID could not be found. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/db/include/graphene/db/index.hpp" line="111" column="1" bodyfile="libraries/db/include/graphene/db/index.hpp" bodystart="111" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1db_1_1index_1a0c254d24ade94e0b586ba59c0bb2a764" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void graphene::db::index::modify</definition>
        <argsstring>(const object &amp;obj, const std::function&lt; void(object &amp;)&gt; &amp;)=0</argsstring>
        <name>modify</name>
        <reimplementedby refid="classgraphene_1_1db_1_1simple__index_1af405a3f7b15ae28345edcc0a860acc6a">modify</reimplementedby>
        <reimplementedby refid="classgraphene_1_1db_1_1generic__index_1ab9a4fceebfed811e16d58c48f5827ae4">modify</reimplementedby>
        <reimplementedby refid="classgraphene_1_1db_1_1generic__index_1ab9a4fceebfed811e16d58c48f5827ae4">modify</reimplementedby>
        <reimplementedby refid="classgraphene_1_1db_1_1primary__index_1a3cb107388bbe893f692aea4817ad263b">modify</reimplementedby>
        <param>
          <type>const <ref refid="classgraphene_1_1db_1_1object" kindref="compound">object</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const std::function&lt; void(<ref refid="classgraphene_1_1db_1_1object" kindref="compound">object</ref> &amp;)&gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/db/include/graphene/db/index.hpp" line="118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1db_1_1index_1a2c7bf27727205871ac7bdc9ff4598b1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void graphene::db::index::remove</definition>
        <argsstring>(const object &amp;obj)=0</argsstring>
        <name>remove</name>
        <reimplementedby refid="classgraphene_1_1db_1_1simple__index_1a36d967926e4273ff93a59dd3f4160e3d">remove</reimplementedby>
        <reimplementedby refid="classgraphene_1_1db_1_1generic__index_1a20c1b60d4e22bac082a385574802d8c4">remove</reimplementedby>
        <reimplementedby refid="classgraphene_1_1db_1_1generic__index_1a20c1b60d4e22bac082a385574802d8c4">remove</reimplementedby>
        <reimplementedby refid="classgraphene_1_1db_1_1primary__index_1a42390d3be1f04919991aa5051c337d93">remove</reimplementedby>
        <param>
          <type>const <ref refid="classgraphene_1_1db_1_1object" kindref="compound">object</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/db/include/graphene/db/index.hpp" line="119" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1db_1_1index_1a72af3b03d9e5f04f1e5ccfd519071d50" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Object</type>
          </param>
          <param>
            <type>typename Lambda</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void graphene::db::index::modify</definition>
        <argsstring>(const Object &amp;obj, const Lambda &amp;l)</argsstring>
        <name>modify</name>
        <param>
          <type>const Object &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const Lambda &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When forming your lambda to modify obj, it is natural to have Object&amp; be the signature, but that is not compatible with the type erasue required by the virtual method. This method provides a helper to wrap the lambda in a form compatible with the virtual modify call. <simplesect kind="note"><para>Lambda should have the signature: void(Object&amp;) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/db/include/graphene/db/index.hpp" line="128" column="1" bodyfile="libraries/db/include/graphene/db/index.hpp" bodystart="128" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1db_1_1index_1a0d3d4f6b5fbc219f20ba40da9ad1e70c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void graphene::db::index::inspect_all_objects</definition>
        <argsstring>(std::function&lt; void(const object &amp;)&gt; inspector) const =0</argsstring>
        <name>inspect_all_objects</name>
        <reimplementedby refid="classgraphene_1_1db_1_1simple__index_1a8d3a5fb4f7729874e2ee9218bca8ed7a">inspect_all_objects</reimplementedby>
        <reimplementedby refid="classgraphene_1_1db_1_1generic__index_1a0f264abe12a00a53e174447244f7a22b">inspect_all_objects</reimplementedby>
        <reimplementedby refid="classgraphene_1_1db_1_1generic__index_1a0f264abe12a00a53e174447244f7a22b">inspect_all_objects</reimplementedby>
        <param>
          <type>std::function&lt; void(const <ref refid="classgraphene_1_1db_1_1object" kindref="compound">object</ref> &amp;)&gt;</type>
          <declname>inspector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/db/include/graphene/db/index.hpp" line="132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1db_1_1index_1a11118a11ceeb9853975f3e254038daa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void graphene::db::index::add_observer</definition>
        <argsstring>(const shared_ptr&lt; index_observer &gt; &amp;)=0</argsstring>
        <name>add_observer</name>
        <reimplementedby refid="classgraphene_1_1db_1_1primary__index_1a058b74247f1067580f95995bdbad911e">add_observer</reimplementedby>
        <param>
          <type>const shared_ptr&lt; <ref refid="classgraphene_1_1db_1_1index__observer" kindref="compound">index_observer</ref> &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/db/include/graphene/db/index.hpp" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1db_1_1index_1aaebd5c0ba3eb4e6ca9d0a82061e61793" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void graphene::db::index::object_from_variant</definition>
        <argsstring>(const fc::variant &amp;var, object &amp;obj, uint32_t max_depth) const =0</argsstring>
        <name>object_from_variant</name>
        <reimplementedby refid="classgraphene_1_1db_1_1primary__index_1a90f0474bc0996a94faa7f40213158a39">object_from_variant</reimplementedby>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">fc::variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classgraphene_1_1db_1_1object" kindref="compound">object</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/db/include/graphene/db/index.hpp" line="135" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1db_1_1index_1aefb954473263f0736d5ba394f5437ec1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void graphene::db::index::object_default</definition>
        <argsstring>(object &amp;obj) const =0</argsstring>
        <name>object_default</name>
        <reimplementedby refid="classgraphene_1_1db_1_1primary__index_1a444a7f0d30a921eec2bfc62959c3001a">object_default</reimplementedby>
        <param>
          <type><ref refid="classgraphene_1_1db_1_1object" kindref="compound">object</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/db/include/graphene/db/index.hpp" line="136" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>abstract base class for accessing objects indexed in various ways. </para>    </briefdescription>
    <detaileddescription>
<para>All indexes assume that there exists an object ID space that will grow forever in a seqential manner. These IDs are used to identify the index, type, and instance of the object.</para><para>Items in an index can only be modified via a call to modify and all references to objects outside of that callback are const references.</para><para>Most implementations will probably be some form of boost::multi_index_container which means that they can covnert a reference to an object to an iterator. When at all possible save a pointer/reference to your objects rather than constantly looking them up by ID. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="4614">
        <label>graphene::db::primary_index&lt; graphene::db::generic_index &gt;</label>
        <link refid="classgraphene_1_1db_1_1primary__index"/>
        <childnode refid="4613" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4615">
        <label>graphene::db::simple_index&lt; T &gt;</label>
        <link refid="classgraphene_1_1db_1_1simple__index"/>
        <childnode refid="4610" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4612">
        <label>graphene::db::sparse_index&lt; T &gt;</label>
        <link refid="structgraphene_1_1db_1_1sparse__index"/>
        <childnode refid="4611" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4611">
        <label>graphene::db::generic_index&lt; T, boost::multi_index_container&lt; T, indexed_by&lt; ordered_unique&lt; tag&lt; by_id &gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt; &gt; &gt; &gt;</label>
        <childnode refid="4610" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4613">
        <label>graphene::db::generic_index&lt; ObjectType, MultiIndexType &gt;</label>
        <link refid="classgraphene_1_1db_1_1generic__index"/>
        <childnode refid="4610" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4610">
        <label>graphene::db::index</label>
        <link refid="classgraphene_1_1db_1_1index"/>
      </node>
    </inheritancegraph>
    <location file="libraries/db/include/graphene/db/index.hpp" line="72" column="1" bodyfile="libraries/db/include/graphene/db/index.hpp" bodystart="71" bodyend="137"/>
    <listofallmembers>
      <member refid="classgraphene_1_1db_1_1index_1a11118a11ceeb9853975f3e254038daa5" prot="public" virt="pure-virtual"><scope>graphene::db::index</scope><name>add_observer</name></member>
      <member refid="classgraphene_1_1db_1_1index_1a5498269afc8b822043d4d1e0b7b5a75e" prot="public" virt="pure-virtual"><scope>graphene::db::index</scope><name>create</name></member>
      <member refid="classgraphene_1_1db_1_1index_1a9649d19814aa188652d6a643bfe134b7" prot="public" virt="pure-virtual"><scope>graphene::db::index</scope><name>find</name></member>
      <member refid="classgraphene_1_1db_1_1index_1a8afdd2aacd7a52c3c807be58340625a0" prot="public" virt="non-virtual"><scope>graphene::db::index</scope><name>get</name></member>
      <member refid="classgraphene_1_1db_1_1index_1ab1bda1803d712322418bce3ca44d97b5" prot="public" virt="pure-virtual"><scope>graphene::db::index</scope><name>get_next_id</name></member>
      <member refid="classgraphene_1_1db_1_1index_1a51be62de2c4ca916d3b14c39499e13e4" prot="public" virt="pure-virtual"><scope>graphene::db::index</scope><name>insert</name></member>
      <member refid="classgraphene_1_1db_1_1index_1a0d3d4f6b5fbc219f20ba40da9ad1e70c" prot="public" virt="pure-virtual"><scope>graphene::db::index</scope><name>inspect_all_objects</name></member>
      <member refid="classgraphene_1_1db_1_1index_1a49bcbb20b44362f169bea6cdc336d319" prot="public" virt="pure-virtual"><scope>graphene::db::index</scope><name>load</name></member>
      <member refid="classgraphene_1_1db_1_1index_1a0c254d24ade94e0b586ba59c0bb2a764" prot="public" virt="pure-virtual"><scope>graphene::db::index</scope><name>modify</name></member>
      <member refid="classgraphene_1_1db_1_1index_1a72af3b03d9e5f04f1e5ccfd519071d50" prot="public" virt="non-virtual"><scope>graphene::db::index</scope><name>modify</name></member>
      <member refid="classgraphene_1_1db_1_1index_1aefb954473263f0736d5ba394f5437ec1" prot="public" virt="pure-virtual"><scope>graphene::db::index</scope><name>object_default</name></member>
      <member refid="classgraphene_1_1db_1_1index_1aaebd5c0ba3eb4e6ca9d0a82061e61793" prot="public" virt="pure-virtual"><scope>graphene::db::index</scope><name>object_from_variant</name></member>
      <member refid="classgraphene_1_1db_1_1index_1a94bbe39fc8bba240fb1b6687036aa64a" prot="public" virt="pure-virtual"><scope>graphene::db::index</scope><name>object_space_id</name></member>
      <member refid="classgraphene_1_1db_1_1index_1a8f4f84338efa7f8eac43c8df3c456634" prot="public" virt="pure-virtual"><scope>graphene::db::index</scope><name>object_type_id</name></member>
      <member refid="classgraphene_1_1db_1_1index_1ab8aa118aac8da723cfd556078b498bec" prot="public" virt="pure-virtual"><scope>graphene::db::index</scope><name>open</name></member>
      <member refid="classgraphene_1_1db_1_1index_1a2c7bf27727205871ac7bdc9ff4598b1a" prot="public" virt="pure-virtual"><scope>graphene::db::index</scope><name>remove</name></member>
      <member refid="classgraphene_1_1db_1_1index_1aa67673bbad161259895135b897a562e0" prot="public" virt="pure-virtual"><scope>graphene::db::index</scope><name>save</name></member>
      <member refid="classgraphene_1_1db_1_1index_1a09516872ec406c93645ed71c24884dc7" prot="public" virt="pure-virtual"><scope>graphene::db::index</scope><name>set_next_id</name></member>
      <member refid="classgraphene_1_1db_1_1index_1a5e874427eaf74f45dbf23d148f2dc708" prot="public" virt="pure-virtual"><scope>graphene::db::index</scope><name>use_next_id</name></member>
      <member refid="classgraphene_1_1db_1_1index_1a0f198d6faca558c749b833ede04116b3" prot="public" virt="virtual"><scope>graphene::db::index</scope><name>~index</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
