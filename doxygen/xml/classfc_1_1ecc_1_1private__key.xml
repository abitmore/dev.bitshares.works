<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classfc_1_1ecc_1_1private__key" kind="class" language="C++" prot="public">
    <compoundname>fc::ecc::private_key</compoundname>
    <derivedcompoundref refid="classfc_1_1ecc_1_1extended__private__key" prot="public" virt="non-virtual">fc::ecc::extended_private_key</derivedcompoundref>
    <includes refid="elliptic_8hpp" local="no">elliptic.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classfc_1_1ecc_1_1private__key_1a9ba1d9483d6f93746bad10592468a33c" prot="private" static="no" mutable="no">
        <type><ref refid="classfc_1_1fwd" kindref="compound">fc::fwd</ref>&lt; <ref refid="classfc_1_1ecc_1_1detail_1_1private__key__impl" kindref="compound">detail::private_key_impl</ref>, 32 &gt;</type>
        <definition>fc::fwd&lt;detail::private_key_impl,32&gt; fc::ecc::private_key::my</definition>
        <argsstring></argsstring>
        <name>my</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="144" column="1" bodyfile="libraries/fc/include/fc/crypto/elliptic.hpp" bodystart="144" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classfc_1_1ecc_1_1private__key_1aee641a197bfa93b96eca0c79a348b4f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::ecc::private_key::private_key</definition>
        <argsstring>()</argsstring>
        <name>private_key</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="92" column="1" bodyfile="libraries/fc/src/crypto/elliptic_impl_priv.cpp" bodystart="32" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ecc_1_1private__key_1af661dbffcc6ab52220a9d1ce1ed2cf52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::ecc::private_key::private_key</definition>
        <argsstring>(private_key &amp;&amp;pk)</argsstring>
        <name>private_key</name>
        <param>
          <type><ref refid="classfc_1_1ecc_1_1private__key" kindref="compound">private_key</ref> &amp;&amp;</type>
          <declname>pk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="93" column="1" bodyfile="libraries/fc/src/crypto/elliptic_impl_priv.cpp" bodystart="36" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ecc_1_1private__key_1a5f83d375d76ffc530accc51fd22a1c20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::ecc::private_key::private_key</definition>
        <argsstring>(const private_key &amp;pk)</argsstring>
        <name>private_key</name>
        <param>
          <type>const <ref refid="classfc_1_1ecc_1_1private__key" kindref="compound">private_key</ref> &amp;</type>
          <declname>pk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="94" column="1" bodyfile="libraries/fc/src/crypto/elliptic_impl_priv.cpp" bodystart="34" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ecc_1_1private__key_1ad34b09556c29b636ee5a5ddfb392069f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::ecc::private_key::~private_key</definition>
        <argsstring>()</argsstring>
        <name>~private_key</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="95" column="1" bodyfile="libraries/fc/src/crypto/elliptic_impl_priv.cpp" bodystart="38" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ecc_1_1private__key_1a35e700049a1b301202a45bb4e46e8240" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ecc_1_1private__key" kindref="compound">private_key</ref> &amp;</type>
        <definition>private_key &amp; fc::ecc::private_key::operator=</definition>
        <argsstring>(private_key &amp;&amp;pk)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classfc_1_1ecc_1_1private__key" kindref="compound">private_key</ref> &amp;&amp;</type>
          <declname>pk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="97" column="1" bodyfile="libraries/fc/src/crypto/elliptic_impl_priv.cpp" bodystart="40" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ecc_1_1private__key_1a2cec7b462875dee7ccaa51d94185d9fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ecc_1_1private__key" kindref="compound">private_key</ref> &amp;</type>
        <definition>private_key &amp; fc::ecc::private_key::operator=</definition>
        <argsstring>(const private_key &amp;pk)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classfc_1_1ecc_1_1private__key" kindref="compound">private_key</ref> &amp;</type>
          <declname>pk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="98" column="1" bodyfile="libraries/fc/src/crypto/elliptic_impl_priv.cpp" bodystart="46" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ecc_1_1private__key_1a3f4ebf28bbeca720b1a5644cd61c5514" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ecc_1_1private__key" kindref="compound">private_key</ref></type>
        <definition>private_key fc::ecc::private_key::child</definition>
        <argsstring>(const fc::sha256 &amp;offset) const </argsstring>
        <name>child</name>
        <param>
          <type>const <ref refid="classfc_1_1sha256" kindref="compound">fc::sha256</ref> &amp;</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="103" column="1" bodyfile="libraries/fc/src/crypto/elliptic_common.cpp" bodystart="130" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ecc_1_1private__key_1a15a47874084bde1c5fa3029c07949ce5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacefc_1_1ecc_1aac05b92a409a08d0d6b06ce2d07eb54b" kindref="member">private_key_secret</ref></type>
        <definition>fc::sha256 fc::ecc::private_key::get_secret</definition>
        <argsstring>() const </argsstring>
        <name>get_secret</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="112" column="1" bodyfile="libraries/fc/src/crypto/elliptic_impl_priv.cpp" bodystart="59" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ecc_1_1private__key_1af6772cf5c06935ea50570ac07e00555c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>fc::ecc::private_key::operator private_key_secret</definition>
        <argsstring>() const </argsstring>
        <name>operator private_key_secret</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="114" column="1" bodyfile="libraries/fc/include/fc/crypto/elliptic.hpp" bodystart="114" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ecc_1_1private__key_1a7e9762515542f63dc6d9e99caae8d7a1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1sha512" kindref="compound">fc::sha512</ref></type>
        <definition>fc::sha512 fc::ecc::private_key::get_shared_secret</definition>
        <argsstring>(const public_key &amp;pub) const </argsstring>
        <name>get_shared_secret</name>
        <param>
          <type>const <ref refid="classfc_1_1ecc_1_1public__key" kindref="compound">public_key</ref> &amp;</type>
          <declname>pub</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Given a public key, calculatse a 512 bit shared secret between that key and this private key. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="120" column="1" bodyfile="libraries/fc/src/crypto/elliptic_secp256k1.cpp" bodystart="66" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ecc_1_1private__key_1ad98a33bbe6177347ccb41afdf75f3fc4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacefc_1_1ecc_1a8ac51b98c1c16deb73d228874c5294af" kindref="member">compact_signature</ref></type>
        <definition>compact_signature fc::ecc::private_key::sign_compact</definition>
        <argsstring>(const fc::sha256 &amp;digest, bool require_canonical=true) const </argsstring>
        <name>sign_compact</name>
        <param>
          <type>const <ref refid="classfc_1_1sha256" kindref="compound">fc::sha256</ref> &amp;</type>
          <declname>digest</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>require_canonical</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="122" column="1" bodyfile="libraries/fc/src/crypto/elliptic_impl_priv.cpp" bodystart="89" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ecc_1_1private__key_1a421959ce8545a10a7701da9acb37b8b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ecc_1_1public__key" kindref="compound">public_key</ref></type>
        <definition>public_key fc::ecc::private_key::get_public_key</definition>
        <argsstring>() const </argsstring>
        <name>get_public_key</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="124" column="1" bodyfile="libraries/fc/src/crypto/elliptic_impl_priv.cpp" bodystart="70" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ecc_1_1private__key_1ab76461199bc574b09381b6dbaef670c0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int fc::ecc::private_key::fingerprint</definition>
        <argsstring>() const </argsstring>
        <name>fingerprint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="139" column="1" bodyfile="libraries/fc/include/fc/crypto/elliptic.hpp" bodystart="139" bodyend="139"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classfc_1_1ecc_1_1private__key_1a047e701b70d0fcdcd3cd54a73c0af5a4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ecc_1_1private__key" kindref="compound">private_key</ref></type>
        <definition>private_key fc::ecc::private_key::generate</definition>
        <argsstring>()</argsstring>
        <name>generate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="100" column="1" bodyfile="libraries/fc/src/crypto/elliptic_common.cpp" bodystart="217" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ecc_1_1private__key_1abcc5312450e72cd78f78b7d2feb6c899" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ecc_1_1private__key" kindref="compound">private_key</ref></type>
        <definition>private_key fc::ecc::private_key::regenerate</definition>
        <argsstring>(const fc::sha256 &amp;secret)</argsstring>
        <name>regenerate</name>
        <param>
          <type>const <ref refid="classfc_1_1sha256" kindref="compound">fc::sha256</ref> &amp;</type>
          <declname>secret</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="101" column="1" bodyfile="libraries/fc/src/crypto/elliptic_impl_priv.cpp" bodystart="52" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ecc_1_1private__key_1a748751090ea736a761cd3af9633eb7de" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ecc_1_1private__key" kindref="compound">private_key</ref></type>
        <definition>private_key fc::ecc::private_key::generate_from_seed</definition>
        <argsstring>(const fc::sha256 &amp;seed, const fc::sha256 &amp;offset=fc::sha256())</argsstring>
        <name>generate_from_seed</name>
        <param>
          <type>const <ref refid="classfc_1_1sha256" kindref="compound">fc::sha256</ref> &amp;</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1sha256" kindref="compound">fc::sha256</ref> &amp;</type>
          <declname>offset</declname>
          <defval><ref refid="classfc_1_1sha256" kindref="compound">fc::sha256</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method of generation enables creating a new private key in a deterministic manner relative to an initial seed. A <ref refid="classfc_1_1ecc_1_1public__key" kindref="compound">public_key</ref> created from the seed can be multiplied by the offset to calculate the new public key without having to know the private key. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="110" column="1" bodyfile="libraries/fc/src/crypto/elliptic_common.cpp" bodystart="176" bodyend="197"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classfc_1_1ecc_1_1private__key_1af279e37c180aa326645bdb542b9be656" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const private_key &amp;a, const private_key &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classfc_1_1ecc_1_1private__key" kindref="compound">private_key</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1ecc_1_1private__key" kindref="compound">private_key</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="126" column="1" bodyfile="libraries/fc/include/fc/crypto/elliptic.hpp" bodystart="126" bodyend="129"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1ecc_1_1private__key_1a542c2210ae96b8326314deb182aef678" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const private_key &amp;a, const private_key &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classfc_1_1ecc_1_1private__key" kindref="compound">private_key</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1ecc_1_1private__key" kindref="compound">private_key</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="130" column="1" bodyfile="libraries/fc/include/fc/crypto/elliptic.hpp" bodystart="130" bodyend="133"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1ecc_1_1private__key_1a07832f781f3f9ce28ecba02777a9c6df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const private_key &amp;a, const private_key &amp;b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classfc_1_1ecc_1_1private__key" kindref="compound">private_key</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1ecc_1_1private__key" kindref="compound">private_key</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="134" column="1" bodyfile="libraries/fc/include/fc/crypto/elliptic.hpp" bodystart="134" bodyend="137"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classfc_1_1ecc_1_1private__key_1aed3c6f793e908352df0168444f6d652c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::ecc::private_key::private_key</definition>
        <argsstring>(EC_KEY *k)</argsstring>
        <name>private_key</name>
        <param>
          <type>EC_KEY *</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="142" column="1" bodyfile="libraries/fc/src/crypto/elliptic_impl_priv.cpp" bodystart="64" bodyend="68"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classfc_1_1ecc_1_1private__key_1ab1b4e5837f850939f06ae1e28636b21d" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1sha256" kindref="compound">fc::sha256</ref></type>
        <definition>fc::sha256 fc::ecc::private_key::get_secret</definition>
        <argsstring>(const EC_KEY *const k)</argsstring>
        <name>get_secret</name>
        <param>
          <type>const EC_KEY *const</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="143" column="1" bodyfile="libraries/fc/src/crypto/elliptic_common.cpp" bodystart="199" bodyend="215"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>an elliptic curve private key. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="5698">
        <label>fc::ecc::extended_private_key</label>
        <link refid="classfc_1_1ecc_1_1extended__private__key"/>
        <childnode refid="5697" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5697">
        <label>fc::ecc::private_key</label>
        <link refid="classfc_1_1ecc_1_1private__key"/>
      </node>
    </inheritancegraph>
    <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="90" column="1" bodyfile="libraries/fc/include/fc/crypto/elliptic.hpp" bodystart="89" bodyend="145"/>
    <listofallmembers>
      <member refid="classfc_1_1ecc_1_1private__key_1a3f4ebf28bbeca720b1a5644cd61c5514" prot="public" virt="non-virtual"><scope>fc::ecc::private_key</scope><name>child</name></member>
      <member refid="classfc_1_1ecc_1_1private__key_1ab76461199bc574b09381b6dbaef670c0" prot="public" virt="non-virtual"><scope>fc::ecc::private_key</scope><name>fingerprint</name></member>
      <member refid="classfc_1_1ecc_1_1private__key_1a047e701b70d0fcdcd3cd54a73c0af5a4" prot="public" virt="non-virtual"><scope>fc::ecc::private_key</scope><name>generate</name></member>
      <member refid="classfc_1_1ecc_1_1private__key_1a748751090ea736a761cd3af9633eb7de" prot="public" virt="non-virtual"><scope>fc::ecc::private_key</scope><name>generate_from_seed</name></member>
      <member refid="classfc_1_1ecc_1_1private__key_1a421959ce8545a10a7701da9acb37b8b4" prot="public" virt="non-virtual"><scope>fc::ecc::private_key</scope><name>get_public_key</name></member>
      <member refid="classfc_1_1ecc_1_1private__key_1a15a47874084bde1c5fa3029c07949ce5" prot="public" virt="non-virtual"><scope>fc::ecc::private_key</scope><name>get_secret</name></member>
      <member refid="classfc_1_1ecc_1_1private__key_1ab1b4e5837f850939f06ae1e28636b21d" prot="private" virt="non-virtual"><scope>fc::ecc::private_key</scope><name>get_secret</name></member>
      <member refid="classfc_1_1ecc_1_1private__key_1a7e9762515542f63dc6d9e99caae8d7a1" prot="public" virt="non-virtual"><scope>fc::ecc::private_key</scope><name>get_shared_secret</name></member>
      <member refid="classfc_1_1ecc_1_1private__key_1a9ba1d9483d6f93746bad10592468a33c" prot="private" virt="non-virtual"><scope>fc::ecc::private_key</scope><name>my</name></member>
      <member refid="classfc_1_1ecc_1_1private__key_1af6772cf5c06935ea50570ac07e00555c" prot="public" virt="non-virtual"><scope>fc::ecc::private_key</scope><name>operator private_key_secret</name></member>
      <member refid="classfc_1_1ecc_1_1private__key_1a542c2210ae96b8326314deb182aef678" prot="public" virt="non-virtual"><scope>fc::ecc::private_key</scope><name>operator!=</name></member>
      <member refid="classfc_1_1ecc_1_1private__key_1a07832f781f3f9ce28ecba02777a9c6df" prot="public" virt="non-virtual"><scope>fc::ecc::private_key</scope><name>operator&lt;</name></member>
      <member refid="classfc_1_1ecc_1_1private__key_1a35e700049a1b301202a45bb4e46e8240" prot="public" virt="non-virtual"><scope>fc::ecc::private_key</scope><name>operator=</name></member>
      <member refid="classfc_1_1ecc_1_1private__key_1a2cec7b462875dee7ccaa51d94185d9fa" prot="public" virt="non-virtual"><scope>fc::ecc::private_key</scope><name>operator=</name></member>
      <member refid="classfc_1_1ecc_1_1private__key_1af279e37c180aa326645bdb542b9be656" prot="public" virt="non-virtual"><scope>fc::ecc::private_key</scope><name>operator==</name></member>
      <member refid="classfc_1_1ecc_1_1private__key_1aee641a197bfa93b96eca0c79a348b4f4" prot="public" virt="non-virtual"><scope>fc::ecc::private_key</scope><name>private_key</name></member>
      <member refid="classfc_1_1ecc_1_1private__key_1af661dbffcc6ab52220a9d1ce1ed2cf52" prot="public" virt="non-virtual"><scope>fc::ecc::private_key</scope><name>private_key</name></member>
      <member refid="classfc_1_1ecc_1_1private__key_1a5f83d375d76ffc530accc51fd22a1c20" prot="public" virt="non-virtual"><scope>fc::ecc::private_key</scope><name>private_key</name></member>
      <member refid="classfc_1_1ecc_1_1private__key_1aed3c6f793e908352df0168444f6d652c" prot="private" virt="non-virtual"><scope>fc::ecc::private_key</scope><name>private_key</name></member>
      <member refid="classfc_1_1ecc_1_1private__key_1abcc5312450e72cd78f78b7d2feb6c899" prot="public" virt="non-virtual"><scope>fc::ecc::private_key</scope><name>regenerate</name></member>
      <member refid="classfc_1_1ecc_1_1private__key_1ad98a33bbe6177347ccb41afdf75f3fc4" prot="public" virt="non-virtual"><scope>fc::ecc::private_key</scope><name>sign_compact</name></member>
      <member refid="classfc_1_1ecc_1_1private__key_1ad34b09556c29b636ee5a5ddfb392069f" prot="public" virt="non-virtual"><scope>fc::ecc::private_key</scope><name>~private_key</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
