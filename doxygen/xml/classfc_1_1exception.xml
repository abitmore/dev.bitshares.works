<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classfc_1_1exception" kind="class" language="C++" prot="public">
    <compoundname>fc::exception</compoundname>
    <derivedcompoundref refid="classfc_1_1unhandled__exception" prot="public" virt="non-virtual">fc::unhandled_exception</derivedcompoundref>
    <includes refid="exception_8hpp" local="no">exception.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classfc_1_1exception_1a2635b9fb22bb7f1471b8353463ef9b66" prot="public" static="no">
        <name>code_enum</name>
        <enumvalue id="classfc_1_1exception_1a2635b9fb22bb7f1471b8353463ef9b66a6f4e6d3d84df9d159d7643c8d76a93b0" prot="public">
          <name>code_value</name>
          <initializer>= unspecified_exception_code</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="60" column="1" bodyfile="libraries/fc/include/fc/exception/exception.hpp" bodystart="59" bodyend="62"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classfc_1_1exception_1a91cc1ed42499761c2f750de4a89ce627" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; detail::exception_impl &gt;</type>
        <definition>std::unique_ptr&lt;detail::exception_impl&gt; fc::exception::my</definition>
        <argsstring></argsstring>
        <name>my</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="126" column="1" bodyfile="libraries/fc/include/fc/exception/exception.hpp" bodystart="126" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classfc_1_1exception_1a438cb875c834068b29e0a6cd3319e7f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::exception::exception</definition>
        <argsstring>(int64_t code=unspecified_exception_code, const std::string &amp;name_value=&quot;exception&quot;, const std::string &amp;what_value=&quot;unspecified&quot;)</argsstring>
        <name>exception</name>
        <param>
          <type>int64_t</type>
          <declname>code</declname>
          <defval><ref refid="namespacefc_1ab52b42f18c442a260897c74c66c3d35ca54c3c8b9caa13270a23c57af7bf9c52c" kindref="member">unspecified_exception_code</ref></defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name_value</declname>
          <defval>&quot;exception&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>what_value</declname>
          <defval>&quot;unspecified&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="64" column="1" bodyfile="libraries/fc/src/exception.cpp" bodystart="112" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1exception_1af4312be4f267fda7b0bf8bccbfac232b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::exception::exception</definition>
        <argsstring>(log_message &amp;&amp;, int64_t code=unspecified_exception_code, const std::string &amp;name_value=&quot;exception&quot;, const std::string &amp;what_value=&quot;unspecified&quot;)</argsstring>
        <name>exception</name>
        <param>
          <type><ref refid="classfc_1_1log__message" kindref="compound">log_message</ref> &amp;&amp;</type>
          <defname>msg</defname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>code</declname>
          <defval><ref refid="namespacefc_1ab52b42f18c442a260897c74c66c3d35ca54c3c8b9caa13270a23c57af7bf9c52c" kindref="member">unspecified_exception_code</ref></defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name_value</declname>
          <defval>&quot;exception&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>what_value</declname>
          <defval>&quot;unspecified&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="67" column="1" bodyfile="libraries/fc/src/exception.cpp" bodystart="122" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1exception_1a536774ba4cc639d3215bd91f412ffded" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::exception::exception</definition>
        <argsstring>(log_messages &amp;&amp;, int64_t code=unspecified_exception_code, const std::string &amp;name_value=&quot;exception&quot;, const std::string &amp;what_value=&quot;unspecified&quot;)</argsstring>
        <name>exception</name>
        <param>
          <type><ref refid="namespacefc_1a54370140f7c964a12e90393d525605d1" kindref="member">log_messages</ref> &amp;&amp;</type>
          <defname>msgs</defname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>code</declname>
          <defval><ref refid="namespacefc_1ab52b42f18c442a260897c74c66c3d35ca54c3c8b9caa13270a23c57af7bf9c52c" kindref="member">unspecified_exception_code</ref></defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name_value</declname>
          <defval>&quot;exception&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>what_value</declname>
          <defval>&quot;unspecified&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="70" column="1" bodyfile="libraries/fc/src/exception.cpp" bodystart="60" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1exception_1a57f2149839df7dc42ee356ca62a2dc90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::exception::exception</definition>
        <argsstring>(const log_messages &amp;, int64_t code=unspecified_exception_code, const std::string &amp;name_value=&quot;exception&quot;, const std::string &amp;what_value=&quot;unspecified&quot;)</argsstring>
        <name>exception</name>
        <param>
          <type>const <ref refid="namespacefc_1a54370140f7c964a12e90393d525605d1" kindref="member">log_messages</ref> &amp;</type>
          <defname>msgs</defname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>code</declname>
          <defval><ref refid="namespacefc_1ab52b42f18c442a260897c74c66c3d35ca54c3c8b9caa13270a23c57af7bf9c52c" kindref="member">unspecified_exception_code</ref></defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name_value</declname>
          <defval>&quot;exception&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>what_value</declname>
          <defval>&quot;unspecified&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="73" column="1" bodyfile="libraries/fc/src/exception.cpp" bodystart="71" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1exception_1ae8accd0c86f53a5f0c0c473609b642dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::exception::exception</definition>
        <argsstring>(const exception &amp;e)</argsstring>
        <name>exception</name>
        <param>
          <type>const <ref refid="classfc_1_1exception" kindref="compound">exception</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="77" column="1" bodyfile="libraries/fc/src/exception.cpp" bodystart="133" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1exception_1acb133b17f42ee76692b472e887373720" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::exception::exception</definition>
        <argsstring>(exception &amp;&amp;e)</argsstring>
        <name>exception</name>
        <param>
          <type><ref refid="classfc_1_1exception" kindref="compound">exception</ref> &amp;&amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="78" column="1" bodyfile="libraries/fc/src/exception.cpp" bodystart="136" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1exception_1a72f637422588d6f2e59ce35d53882522" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>fc::exception::~exception</definition>
        <argsstring>()</argsstring>
        <name>~exception</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="79" column="1" bodyfile="libraries/fc/src/exception.cpp" bodystart="143" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1exception_1ad6a754a30c9108d70e6c51dc843cf9ca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * fc::exception::name</definition>
        <argsstring>() const </argsstring>
        <name>name</name>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="81" column="1" bodyfile="libraries/fc/src/exception.cpp" bodystart="139" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1exception_1acdd7cc64e269737bc80b381f669ac0dd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t fc::exception::code</definition>
        <argsstring>() const </argsstring>
        <name>code</name>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="82" column="1" bodyfile="libraries/fc/src/exception.cpp" bodystart="141" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1exception_1a6380f00c6a848fd2066d7378e3db0efd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const char *</type>
        <definition>const char * fc::exception::what</definition>
        <argsstring>() const </argsstring>
        <name>what</name>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="83" column="1" bodyfile="libraries/fc/src/exception.cpp" bodystart="140" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1exception_1a4e5e68303775008c8ab16f05076bd0b9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="namespacefc_1a54370140f7c964a12e90393d525605d1" kindref="member">log_messages</ref> &amp;</type>
        <definition>const log_messages &amp; fc::exception::get_log</definition>
        <argsstring>() const </argsstring>
        <name>get_log</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a reference to log messages that have been added to this log. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="89" column="1" bodyfile="libraries/fc/src/exception.cpp" bodystart="172" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1exception_1a685fab238fa9b86dcf64b35417eb63b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::exception::append_log</definition>
        <argsstring>(log_message m)</argsstring>
        <name>append_log</name>
        <param>
          <type><ref refid="classfc_1_1log__message" kindref="compound">log_message</ref></type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="90" column="1" bodyfile="libraries/fc/src/exception.cpp" bodystart="173" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1exception_1aa95ac19693d33b865672c476ae30ba98" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>string fc::exception::to_detail_string</definition>
        <argsstring>(log_level ll=log_level::all) const </argsstring>
        <name>to_detail_string</name>
        <param>
          <type><ref refid="classfc_1_1log__level" kindref="compound">log_level</ref></type>
          <declname>ll</declname>
          <defval><ref refid="classfc_1_1log__level_1a5a5e31c4c1f38d9115ecbe44927fb2e4a890e233ab2c5d4db2a1c26a10bd2de7d" kindref="member">log_level::all</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generates a detailed string including file, line, method, and other information that is generally only useful for developers. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="97" column="1" bodyfile="libraries/fc/src/exception.cpp" bodystart="183" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1exception_1aaa91e0270d3f4eb1086bdba642ed6183" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>string fc::exception::to_string</definition>
        <argsstring>(log_level ll=log_level::info) const </argsstring>
        <name>to_string</name>
        <param>
          <type><ref refid="classfc_1_1log__level" kindref="compound">log_level</ref></type>
          <declname>ll</declname>
          <defval><ref refid="classfc_1_1log__level_1a5a5e31c4c1f38d9115ecbe44927fb2e4afe6da1f3a75c3911b0b59bffaea070e1" kindref="member">log_level::info</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generates a user-friendly error report. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="102" column="1" bodyfile="libraries/fc/src/exception.cpp" bodystart="227" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1exception_1a49eaf8214dd4e665c26215bbe6615cad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void fc::exception::dynamic_rethrow_exception</definition>
        <argsstring>() const </argsstring>
        <name>dynamic_rethrow_exception</name>
        <reimplementedby refid="classfc_1_1unhandled__exception_1a4c03c1b9b069df872cac977472d3bb94">dynamic_rethrow_exception</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Throw this exception as its most derived type.</para><para><simplesect kind="note"><para>does not return.</para></simplesect>
Rethrows the exception restoring the proper type based upon the error code. This is used to propagate exception types across conversions to/from JSON </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="109" column="1" bodyfile="libraries/fc/src/exception.cpp" bodystart="262" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1exception_1a11e8864fb3216e77e5110a820326c159" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::shared_ptr&lt; <ref refid="classfc_1_1exception" kindref="compound">exception</ref> &gt;</type>
        <definition>exception_ptr fc::exception::dynamic_copy_exception</definition>
        <argsstring>() const </argsstring>
        <name>dynamic_copy_exception</name>
        <reimplementedby refid="classfc_1_1unhandled__exception_1ab474b0a13415f960e247c7d9d791586c">dynamic_copy_exception</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to: <programlisting><codeline><highlight class="normal">try<sp/>{<sp/>throwAsDynamic_exception();<sp/>}</highlight></codeline>
<codeline><highlight class="normal">catch(<sp/>...<sp/>)<sp/>{<sp/>return<sp/>std::current_exception();<sp/>}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="118" column="1" bodyfile="libraries/fc/src/exception.cpp" bodystart="267" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1exception_1afb0e1fac60179c7b2e171c87d295f690" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1exception" kindref="compound">exception</ref> &amp;</type>
        <definition>exception &amp; fc::exception::operator=</definition>
        <argsstring>(const exception &amp;copy)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classfc_1_1exception" kindref="compound">exception</ref> &amp;</type>
          <declname>copy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="123" column="1" bodyfile="libraries/fc/src/exception.cpp" bodystart="296" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1exception_1a4f257882990e94900d31d030be6601b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1exception" kindref="compound">exception</ref> &amp;</type>
        <definition>exception &amp; fc::exception::operator=</definition>
        <argsstring>(exception &amp;&amp;copy)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classfc_1_1exception" kindref="compound">exception</ref> &amp;&amp;</type>
          <declname>copy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="124" column="1" bodyfile="libraries/fc/src/exception.cpp" bodystart="302" bodyend="306"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classfc_1_1exception_1a3b92a13e7d31aa508b7830390dc8382b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend void</type>
        <definition>void to_variant</definition>
        <argsstring>(const exception &amp;e, variant &amp;v, uint32_t max_depth)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1exception" kindref="compound">exception</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="120" column="1" bodyfile="libraries/fc/src/exception.cpp" bodystart="145" bodyend="157"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1exception_1aa6f65f5d56f4a6a7b2d9107b4bda2e33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend void</type>
        <definition>void from_variant</definition>
        <argsstring>(const variant &amp;e, exception &amp;ll, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1exception" kindref="compound">exception</ref> &amp;</type>
          <declname>ll</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="121" column="1" bodyfile="libraries/fc/src/exception.cpp" bodystart="158" bodyend="170"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Used to generate a useful error report when an exception is thrown.</para><para>At each level in the stack where the exception is caught and rethrown a new <ref refid="classfc_1_1log__message" kindref="compound">log_message</ref> is added to the exception. </para>    </briefdescription>
    <detaileddescription>
<para>exception&apos;s are designed to be serialized to a variant and deserialized from an variant.</para><para><simplesect kind="see"><para><ref refid="exception_8hpp_1a7590ddac4f181b661c3eeaf5feccc6ac" kindref="member">FC_THROW_EXCEPTION</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="exception_8hpp_1ad1d295500555ec25b5cc63a27c2eaa59" kindref="member">FC_RETHROW_EXCEPTION</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="exception_8hpp_1af3731d6e3beb140d9e652adf7a18113b" kindref="member">FC_RETHROW_EXCEPTIONS</ref> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="3059">
        <label>fc::exception</label>
        <link refid="classfc_1_1exception"/>
      </node>
      <node id="3060">
        <label>fc::unhandled_exception</label>
        <link refid="classfc_1_1unhandled__exception"/>
        <childnode refid="3059" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="libraries/fc/include/fc/exception/exception.hpp" line="57" column="1" bodyfile="libraries/fc/include/fc/exception/exception.hpp" bodystart="56" bodyend="127"/>
    <listofallmembers>
      <member refid="classfc_1_1exception_1a685fab238fa9b86dcf64b35417eb63b2" prot="public" virt="non-virtual"><scope>fc::exception</scope><name>append_log</name></member>
      <member refid="classfc_1_1exception_1acdd7cc64e269737bc80b381f669ac0dd" prot="public" virt="non-virtual"><scope>fc::exception</scope><name>code</name></member>
      <member refid="classfc_1_1exception_1a2635b9fb22bb7f1471b8353463ef9b66" prot="public" virt="non-virtual"><scope>fc::exception</scope><name>code_enum</name></member>
      <member refid="classfc_1_1exception_1a2635b9fb22bb7f1471b8353463ef9b66a6f4e6d3d84df9d159d7643c8d76a93b0" prot="public" virt="non-virtual"><scope>fc::exception</scope><name>code_value</name></member>
      <member refid="classfc_1_1exception_1a11e8864fb3216e77e5110a820326c159" prot="public" virt="virtual"><scope>fc::exception</scope><name>dynamic_copy_exception</name></member>
      <member refid="classfc_1_1exception_1a49eaf8214dd4e665c26215bbe6615cad" prot="public" virt="virtual"><scope>fc::exception</scope><name>dynamic_rethrow_exception</name></member>
      <member refid="classfc_1_1exception_1a438cb875c834068b29e0a6cd3319e7f3" prot="public" virt="non-virtual"><scope>fc::exception</scope><name>exception</name></member>
      <member refid="classfc_1_1exception_1af4312be4f267fda7b0bf8bccbfac232b" prot="public" virt="non-virtual"><scope>fc::exception</scope><name>exception</name></member>
      <member refid="classfc_1_1exception_1a536774ba4cc639d3215bd91f412ffded" prot="public" virt="non-virtual"><scope>fc::exception</scope><name>exception</name></member>
      <member refid="classfc_1_1exception_1a57f2149839df7dc42ee356ca62a2dc90" prot="public" virt="non-virtual"><scope>fc::exception</scope><name>exception</name></member>
      <member refid="classfc_1_1exception_1ae8accd0c86f53a5f0c0c473609b642dc" prot="public" virt="non-virtual"><scope>fc::exception</scope><name>exception</name></member>
      <member refid="classfc_1_1exception_1acb133b17f42ee76692b472e887373720" prot="public" virt="non-virtual"><scope>fc::exception</scope><name>exception</name></member>
      <member refid="classfc_1_1exception_1aa6f65f5d56f4a6a7b2d9107b4bda2e33" prot="public" virt="non-virtual"><scope>fc::exception</scope><name>from_variant</name></member>
      <member refid="classfc_1_1exception_1a4e5e68303775008c8ab16f05076bd0b9" prot="public" virt="non-virtual"><scope>fc::exception</scope><name>get_log</name></member>
      <member refid="classfc_1_1exception_1a91cc1ed42499761c2f750de4a89ce627" prot="protected" virt="non-virtual"><scope>fc::exception</scope><name>my</name></member>
      <member refid="classfc_1_1exception_1ad6a754a30c9108d70e6c51dc843cf9ca" prot="public" virt="non-virtual"><scope>fc::exception</scope><name>name</name></member>
      <member refid="classfc_1_1exception_1afb0e1fac60179c7b2e171c87d295f690" prot="public" virt="non-virtual"><scope>fc::exception</scope><name>operator=</name></member>
      <member refid="classfc_1_1exception_1a4f257882990e94900d31d030be6601b2" prot="public" virt="non-virtual"><scope>fc::exception</scope><name>operator=</name></member>
      <member refid="classfc_1_1exception_1aa95ac19693d33b865672c476ae30ba98" prot="public" virt="non-virtual"><scope>fc::exception</scope><name>to_detail_string</name></member>
      <member refid="classfc_1_1exception_1aaa91e0270d3f4eb1086bdba642ed6183" prot="public" virt="non-virtual"><scope>fc::exception</scope><name>to_string</name></member>
      <member refid="classfc_1_1exception_1a3b92a13e7d31aa508b7830390dc8382b" prot="public" virt="non-virtual"><scope>fc::exception</scope><name>to_variant</name></member>
      <member refid="classfc_1_1exception_1a6380f00c6a848fd2066d7378e3db0efd" prot="public" virt="virtual"><scope>fc::exception</scope><name>what</name></member>
      <member refid="classfc_1_1exception_1a72f637422588d6f2e59ce35d53882522" prot="public" virt="virtual"><scope>fc::exception</scope><name>~exception</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
