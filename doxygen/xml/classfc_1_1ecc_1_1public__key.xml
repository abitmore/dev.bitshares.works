<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classfc_1_1ecc_1_1public__key" kind="class" language="C++" prot="public">
    <compoundname>fc::ecc::public_key</compoundname>
    <derivedcompoundref refid="classfc_1_1ecc_1_1extended__public__key" prot="public" virt="non-virtual">fc::ecc::extended_public_key</derivedcompoundref>
    <includes refid="elliptic_8hpp" local="no">elliptic.hpp</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classfc_1_1ecc_1_1public__key_1ae1389c6c19ec8630ce31970de2294915" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class private_key</definition>
        <argsstring></argsstring>
        <name>private_key</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="79" column="1" bodyfile="libraries/fc/include/fc/crypto/elliptic.hpp" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1ecc_1_1public__key_1a4f2610bdec460bf2b0203684a9599da5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const public_key &amp;a, const public_key &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classfc_1_1ecc_1_1public__key" kindref="compound">public_key</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1ecc_1_1public__key" kindref="compound">public_key</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="62" column="1" bodyfile="libraries/fc/include/fc/crypto/elliptic.hpp" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1ecc_1_1public__key_1a5faa639eb95ed12c1be5d8ae65c7cb54" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const public_key &amp;a, const public_key &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classfc_1_1ecc_1_1public__key" kindref="compound">public_key</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1ecc_1_1public__key" kindref="compound">public_key</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="66" column="1" bodyfile="libraries/fc/include/fc/crypto/elliptic.hpp" bodystart="66" bodyend="69"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classfc_1_1ecc_1_1public__key_1a1df849a787f93cceef0d23222fdd4482" prot="private" static="no" mutable="no">
        <type><ref refid="classfc_1_1fwd" kindref="compound">fc::fwd</ref>&lt; <ref refid="classfc_1_1ecc_1_1detail_1_1public__key__impl" kindref="compound">detail::public_key_impl</ref>, 33 &gt;</type>
        <definition>fc::fwd&lt;detail::public_key_impl,33&gt; fc::ecc::public_key::my</definition>
        <argsstring></argsstring>
        <name>my</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="82" column="1" bodyfile="libraries/fc/include/fc/crypto/elliptic.hpp" bodystart="82" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classfc_1_1ecc_1_1public__key_1a36809db96f0dd7c702da3d80d512a24c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::ecc::public_key::public_key</definition>
        <argsstring>()</argsstring>
        <name>public_key</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="38" column="1" bodyfile="libraries/fc/src/crypto/elliptic_secp256k1.cpp" bodystart="77" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ecc_1_1public__key_1ae8fa92fd81301f57adccdbfa307c05b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::ecc::public_key::public_key</definition>
        <argsstring>(const public_key &amp;k)</argsstring>
        <name>public_key</name>
        <param>
          <type>const <ref refid="classfc_1_1ecc_1_1public__key" kindref="compound">public_key</ref> &amp;</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="39" column="1" bodyfile="libraries/fc/src/crypto/elliptic_secp256k1.cpp" bodystart="79" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ecc_1_1public__key_1a66dc1c404c6ff1d91d49eecf2e53a501" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::ecc::public_key::~public_key</definition>
        <argsstring>()</argsstring>
        <name>~public_key</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="40" column="1" bodyfile="libraries/fc/src/crypto/elliptic_secp256k1.cpp" bodystart="83" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ecc_1_1public__key_1a066502d87da28f82ccc3c6942491cd48" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacefc_1_1ecc_1a050b3233b3000ad6098af37f768aae7a" kindref="member">public_key_data</ref></type>
        <definition>public_key_data fc::ecc::public_key::serialize</definition>
        <argsstring>() const</argsstring>
        <name>serialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="41" column="1" bodyfile="libraries/fc/src/crypto/elliptic_secp256k1.cpp" bodystart="118" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ecc_1_1public__key_1ad66e70893ee796b7553b9c430dfc9b01" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacefc_1_1ecc_1a8d57c2b874d06c2f9e82f5161fdba5ca" kindref="member">public_key_point_data</ref></type>
        <definition>public_key_point_data fc::ecc::public_key::serialize_ecc_point</definition>
        <argsstring>() const</argsstring>
        <name>serialize_ecc_point</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="42" column="1" bodyfile="libraries/fc/src/crypto/elliptic_secp256k1.cpp" bodystart="124" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ecc_1_1public__key_1a4123143ccd9ce438a44a88738fc5e493" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>fc::ecc::public_key::operator public_key_data</definition>
        <argsstring>() const</argsstring>
        <name>operator public_key_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="44" column="1" bodyfile="libraries/fc/include/fc/crypto/elliptic.hpp" bodystart="44" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ecc_1_1public__key_1ab74d3843d36531fa314f18f4b833aa05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::ecc::public_key::public_key</definition>
        <argsstring>(const public_key_data &amp;v)</argsstring>
        <name>public_key</name>
        <param>
          <type>const <ref refid="namespacefc_1_1ecc_1a050b3233b3000ad6098af37f768aae7a" kindref="member">public_key_data</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="47" column="1" bodyfile="libraries/fc/src/crypto/elliptic_secp256k1.cpp" bodystart="151" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ecc_1_1public__key_1ad2d07d406b637abe5d58767f501829a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::ecc::public_key::public_key</definition>
        <argsstring>(const public_key_point_data &amp;v)</argsstring>
        <name>public_key</name>
        <param>
          <type>const <ref refid="namespacefc_1_1ecc_1a8d57c2b874d06c2f9e82f5161fdba5ca" kindref="member">public_key_point_data</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="48" column="1" bodyfile="libraries/fc/src/crypto/elliptic_secp256k1.cpp" bodystart="135" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ecc_1_1public__key_1a9bddb3f771958bbeefd71f3177640998" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::ecc::public_key::public_key</definition>
        <argsstring>(const compact_signature &amp;c, const fc::sha256 &amp;digest, bool check_canonical=true)</argsstring>
        <name>public_key</name>
        <param>
          <type>const <ref refid="namespacefc_1_1ecc_1a8ac51b98c1c16deb73d228874c5294af" kindref="member">compact_signature</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1sha256" kindref="compound">fc::sha256</ref> &amp;</type>
          <declname>digest</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>check_canonical</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="49" column="1" bodyfile="libraries/fc/src/crypto/elliptic_secp256k1.cpp" bodystart="156" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ecc_1_1public__key_1a18b332ed5ccee4bea959fb85120b2837" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ecc_1_1public__key" kindref="compound">public_key</ref></type>
        <definition>public_key fc::ecc::public_key::child</definition>
        <argsstring>(const fc::sha256 &amp;offset) const</argsstring>
        <name>child</name>
        <param>
          <type>const <ref refid="classfc_1_1sha256" kindref="compound">fc::sha256</ref> &amp;</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="51" column="1" bodyfile="libraries/fc/src/crypto/elliptic_common.cpp" bodystart="121" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ecc_1_1public__key_1a4d0285e78d1f43a8df59ab7d80c15cea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::ecc::public_key::valid</definition>
        <argsstring>() const</argsstring>
        <name>valid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="53" column="1" bodyfile="libraries/fc/src/crypto/elliptic_secp256k1.cpp" bodystart="97" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ecc_1_1public__key_1a5ae20818f3a50b2c14811378cd9e7c5a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ecc_1_1public__key" kindref="compound">public_key</ref></type>
        <definition>public_key fc::ecc::public_key::add</definition>
        <argsstring>(const fc::sha256 &amp;offset) const</argsstring>
        <name>add</name>
        <param>
          <type>const <ref refid="classfc_1_1sha256" kindref="compound">fc::sha256</ref> &amp;</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Computes new pubkey = regenerate(offset).pubkey + old pubkey = offset * G + 1 * old pubkey ?! </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="56" column="1" bodyfile="libraries/fc/src/crypto/elliptic_secp256k1.cpp" bodystart="102" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ecc_1_1public__key_1ac5218540b5d2ef38d8b13fa1a00a54f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::ecc::public_key::public_key</definition>
        <argsstring>(public_key &amp;&amp;pk)</argsstring>
        <name>public_key</name>
        <param>
          <type><ref refid="classfc_1_1ecc_1_1public__key" kindref="compound">public_key</ref> &amp;&amp;</type>
          <declname>pk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="58" column="1" bodyfile="libraries/fc/src/crypto/elliptic_secp256k1.cpp" bodystart="81" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ecc_1_1public__key_1a896c349b93b67c049c5f08c4cbb2b70f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ecc_1_1public__key" kindref="compound">public_key</ref> &amp;</type>
        <definition>public_key &amp; fc::ecc::public_key::operator=</definition>
        <argsstring>(public_key &amp;&amp;pk)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classfc_1_1ecc_1_1public__key" kindref="compound">public_key</ref> &amp;&amp;</type>
          <declname>pk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="59" column="1" bodyfile="libraries/fc/src/crypto/elliptic_secp256k1.cpp" bodystart="91" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ecc_1_1public__key_1a22e892436cb6e8d7e56b5125e32b9e9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ecc_1_1public__key" kindref="compound">public_key</ref> &amp;</type>
        <definition>public_key &amp; fc::ecc::public_key::operator=</definition>
        <argsstring>(const public_key &amp;pk)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classfc_1_1ecc_1_1public__key" kindref="compound">public_key</ref> &amp;</type>
          <declname>pk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="60" column="1" bodyfile="libraries/fc/src/crypto/elliptic_secp256k1.cpp" bodystart="85" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ecc_1_1public__key_1a21a7c7923e874f8e93410fdc6301a205" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string fc::ecc::public_key::to_base58</definition>
        <argsstring>() const</argsstring>
        <name>to_base58</name>
        <briefdescription>
<para>Allows to convert current public key object into base58 number. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="72" column="1" bodyfile="libraries/fc/src/crypto/elliptic_secp256k1.cpp" bodystart="112" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ecc_1_1public__key_1a3d7851242d88d7927653efcc3cd8c0ca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int fc::ecc::public_key::fingerprint</definition>
        <argsstring>() const</argsstring>
        <name>fingerprint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="76" column="1" bodyfile="libraries/fc/src/crypto/elliptic_common.cpp" bodystart="161" bodyend="167"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classfc_1_1ecc_1_1public__key_1a83b654848353a7b8a76c1d8ffc99f72d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string fc::ecc::public_key::to_base58</definition>
        <argsstring>(const public_key_data &amp;key)</argsstring>
        <name>to_base58</name>
        <param>
          <type>const <ref refid="namespacefc_1_1ecc_1a050b3233b3000ad6098af37f768aae7a" kindref="member">public_key_data</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="73" column="1" bodyfile="libraries/fc/src/crypto/elliptic_common.cpp" bodystart="138" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ecc_1_1public__key_1a9671dae78f391e2d1d6e8243432c8cb9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ecc_1_1public__key" kindref="compound">public_key</ref></type>
        <definition>public_key fc::ecc::public_key::from_base58</definition>
        <argsstring>(const std::string &amp;b58)</argsstring>
        <name>from_base58</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>b58</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="74" column="1" bodyfile="libraries/fc/src/crypto/elliptic_common.cpp" bodystart="148" bodyend="159"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classfc_1_1ecc_1_1public__key_1ab7b2750d0d495c6626eb4db478d10804" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ecc_1_1public__key" kindref="compound">public_key</ref></type>
        <definition>public_key fc::ecc::public_key::from_key_data</definition>
        <argsstring>(const public_key_data &amp;v)</argsstring>
        <name>from_key_data</name>
        <param>
          <type>const <ref refid="namespacefc_1_1ecc_1a050b3233b3000ad6098af37f768aae7a" kindref="member">public_key_data</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="80" column="1" bodyfile="libraries/fc/src/crypto/elliptic_common.cpp" bodystart="117" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ecc_1_1public__key_1a9746ab254e9edcf1ea990612708ca073" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::ecc::public_key::is_canonical</definition>
        <argsstring>(const compact_signature &amp;c)</argsstring>
        <name>is_canonical</name>
        <param>
          <type>const <ref refid="namespacefc_1_1ecc_1a8ac51b98c1c16deb73d228874c5294af" kindref="member">compact_signature</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="81" column="1" bodyfile="libraries/fc/src/crypto/elliptic_common.cpp" bodystart="169" bodyend="174"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>contains only the public point of an elliptic curve key. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="6774">
        <label>fc::ecc::extended_public_key</label>
        <link refid="classfc_1_1ecc_1_1extended__public__key"/>
        <childnode refid="6773" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6773">
        <label>fc::ecc::public_key</label>
        <link refid="classfc_1_1ecc_1_1public__key"/>
      </node>
    </inheritancegraph>
    <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="36" column="1" bodyfile="libraries/fc/include/fc/crypto/elliptic.hpp" bodystart="35" bodyend="83"/>
    <listofallmembers>
      <member refid="classfc_1_1ecc_1_1public__key_1a5ae20818f3a50b2c14811378cd9e7c5a" prot="public" virt="non-virtual"><scope>fc::ecc::public_key</scope><name>add</name></member>
      <member refid="classfc_1_1ecc_1_1public__key_1a18b332ed5ccee4bea959fb85120b2837" prot="public" virt="non-virtual"><scope>fc::ecc::public_key</scope><name>child</name></member>
      <member refid="classfc_1_1ecc_1_1public__key_1a3d7851242d88d7927653efcc3cd8c0ca" prot="public" virt="non-virtual"><scope>fc::ecc::public_key</scope><name>fingerprint</name></member>
      <member refid="classfc_1_1ecc_1_1public__key_1a9671dae78f391e2d1d6e8243432c8cb9" prot="public" virt="non-virtual"><scope>fc::ecc::public_key</scope><name>from_base58</name></member>
      <member refid="classfc_1_1ecc_1_1public__key_1ab7b2750d0d495c6626eb4db478d10804" prot="private" virt="non-virtual"><scope>fc::ecc::public_key</scope><name>from_key_data</name></member>
      <member refid="classfc_1_1ecc_1_1public__key_1a9746ab254e9edcf1ea990612708ca073" prot="private" virt="non-virtual"><scope>fc::ecc::public_key</scope><name>is_canonical</name></member>
      <member refid="classfc_1_1ecc_1_1public__key_1a1df849a787f93cceef0d23222fdd4482" prot="private" virt="non-virtual"><scope>fc::ecc::public_key</scope><name>my</name></member>
      <member refid="classfc_1_1ecc_1_1public__key_1a4123143ccd9ce438a44a88738fc5e493" prot="public" virt="non-virtual"><scope>fc::ecc::public_key</scope><name>operator public_key_data</name></member>
      <member refid="classfc_1_1ecc_1_1public__key_1a5faa639eb95ed12c1be5d8ae65c7cb54" prot="public" virt="non-virtual"><scope>fc::ecc::public_key</scope><name>operator!=</name></member>
      <member refid="classfc_1_1ecc_1_1public__key_1a896c349b93b67c049c5f08c4cbb2b70f" prot="public" virt="non-virtual"><scope>fc::ecc::public_key</scope><name>operator=</name></member>
      <member refid="classfc_1_1ecc_1_1public__key_1a22e892436cb6e8d7e56b5125e32b9e9d" prot="public" virt="non-virtual"><scope>fc::ecc::public_key</scope><name>operator=</name></member>
      <member refid="classfc_1_1ecc_1_1public__key_1a4f2610bdec460bf2b0203684a9599da5" prot="public" virt="non-virtual"><scope>fc::ecc::public_key</scope><name>operator==</name></member>
      <member refid="classfc_1_1ecc_1_1public__key_1ae1389c6c19ec8630ce31970de2294915" prot="private" virt="non-virtual"><scope>fc::ecc::public_key</scope><name>private_key</name></member>
      <member refid="classfc_1_1ecc_1_1public__key_1a36809db96f0dd7c702da3d80d512a24c" prot="public" virt="non-virtual"><scope>fc::ecc::public_key</scope><name>public_key</name></member>
      <member refid="classfc_1_1ecc_1_1public__key_1ae8fa92fd81301f57adccdbfa307c05b6" prot="public" virt="non-virtual"><scope>fc::ecc::public_key</scope><name>public_key</name></member>
      <member refid="classfc_1_1ecc_1_1public__key_1ab74d3843d36531fa314f18f4b833aa05" prot="public" virt="non-virtual"><scope>fc::ecc::public_key</scope><name>public_key</name></member>
      <member refid="classfc_1_1ecc_1_1public__key_1ad2d07d406b637abe5d58767f501829a1" prot="public" virt="non-virtual"><scope>fc::ecc::public_key</scope><name>public_key</name></member>
      <member refid="classfc_1_1ecc_1_1public__key_1a9bddb3f771958bbeefd71f3177640998" prot="public" virt="non-virtual"><scope>fc::ecc::public_key</scope><name>public_key</name></member>
      <member refid="classfc_1_1ecc_1_1public__key_1ac5218540b5d2ef38d8b13fa1a00a54f3" prot="public" virt="non-virtual"><scope>fc::ecc::public_key</scope><name>public_key</name></member>
      <member refid="classfc_1_1ecc_1_1public__key_1a066502d87da28f82ccc3c6942491cd48" prot="public" virt="non-virtual"><scope>fc::ecc::public_key</scope><name>serialize</name></member>
      <member refid="classfc_1_1ecc_1_1public__key_1ad66e70893ee796b7553b9c430dfc9b01" prot="public" virt="non-virtual"><scope>fc::ecc::public_key</scope><name>serialize_ecc_point</name></member>
      <member refid="classfc_1_1ecc_1_1public__key_1a21a7c7923e874f8e93410fdc6301a205" prot="public" virt="non-virtual"><scope>fc::ecc::public_key</scope><name>to_base58</name></member>
      <member refid="classfc_1_1ecc_1_1public__key_1a83b654848353a7b8a76c1d8ffc99f72d" prot="public" virt="non-virtual"><scope>fc::ecc::public_key</scope><name>to_base58</name></member>
      <member refid="classfc_1_1ecc_1_1public__key_1a4d0285e78d1f43a8df59ab7d80c15cea" prot="public" virt="non-virtual"><scope>fc::ecc::public_key</scope><name>valid</name></member>
      <member refid="classfc_1_1ecc_1_1public__key_1a66dc1c404c6ff1d91d49eecf2e53a501" prot="public" virt="non-virtual"><scope>fc::ecc::public_key</scope><name>~public_key</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
