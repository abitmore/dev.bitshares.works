<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structfc_1_1static__variant_1_1import__helper_3_01_t_00_01type__in__typelist_3_01_t_01_4_01_4" kind="struct" language="C++" prot="protected">
    <compoundname>fc::static_variant::import_helper&lt; T, type_in_typelist&lt; T &gt; &gt;</compoundname>
    <includes refid="static__variant_8hpp" local="no">static_variant.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structfc_1_1static__variant_1_1import__helper_3_01_t_00_01type__in__typelist_3_01_t_01_4_01_4_1a5ef1ae9af8589fc997aaf73864980680" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfc_1_1static__variant" kindref="compound">static_variant</ref></type>
        <definition>static static_variant fc::static_variant&lt; Types &gt;::import_helper&lt; T, type_in_typelist&lt; T &gt; &gt;::construct</definition>
        <argsstring>(const T &amp;t)</argsstring>
        <name>construct</name>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/static_variant.hpp" line="109" column="1" bodyfile="libraries/fc/include/fc/static_variant.hpp" bodystart="109" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="structfc_1_1static__variant_1_1import__helper_3_01_t_00_01type__in__typelist_3_01_t_01_4_01_4_1a4f8621ca600f5a9f9b4128bc11bd3e11" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfc_1_1static__variant" kindref="compound">static_variant</ref></type>
        <definition>static static_variant fc::static_variant&lt; Types &gt;::import_helper&lt; T, type_in_typelist&lt; T &gt; &gt;::construct</definition>
        <argsstring>(T &amp;&amp;t)</argsstring>
        <name>construct</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/static_variant.hpp" line="112" column="1" bodyfile="libraries/fc/include/fc/static_variant.hpp" bodystart="112" bodyend="114"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/fc/include/fc/static_variant.hpp" line="108" column="1" bodyfile="libraries/fc/include/fc/static_variant.hpp" bodystart="108" bodyend="115"/>
    <listofallmembers>
      <member refid="structfc_1_1static__variant_1_1import__helper_3_01_t_00_01type__in__typelist_3_01_t_01_4_01_4_1a5ef1ae9af8589fc997aaf73864980680" prot="public" virt="non-virtual"><scope>fc::static_variant::import_helper&lt; T, type_in_typelist&lt; T &gt; &gt;</scope><name>construct</name></member>
      <member refid="structfc_1_1static__variant_1_1import__helper_3_01_t_00_01type__in__typelist_3_01_t_01_4_01_4_1a4f8621ca600f5a9f9b4128bc11bd3e11" prot="public" virt="non-virtual"><scope>fc::static_variant::import_helper&lt; T, type_in_typelist&lt; T &gt; &gt;</scope><name>construct</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
