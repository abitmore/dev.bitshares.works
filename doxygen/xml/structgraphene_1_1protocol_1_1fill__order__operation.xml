<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="structgraphene_1_1protocol_1_1fill__order__operation" kind="struct" language="C++" prot="public">
    <compoundname>graphene::protocol::fill_order_operation</compoundname>
    <basecompoundref refid="structgraphene_1_1protocol_1_1base__operation" prot="public" virt="non-virtual">graphene::protocol::base_operation</basecompoundref>
    <includes refid="market_8hpp" local="no">market.hpp</includes>
    <innerclass refid="structgraphene_1_1protocol_1_1fill__order__operation_1_1fee__parameters__type" prot="public">graphene::protocol::fill_order_operation::fee_parameters_type</innerclass>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1fill__order__operation_1a1f1753a3115b8290a766043347e6cc9d" prot="public" static="no" mutable="no">
        <type><ref refid="structgraphene_1_1db_1_1object__id__type" kindref="compound">object_id_type</ref></type>
        <definition>object_id_type graphene::protocol::fill_order_operation::order_id</definition>
        <argsstring></argsstring>
        <name>order_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/market.hpp" line="151" column="1" bodyfile="libraries/protocol/include/graphene/protocol/market.hpp" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1fill__order__operation_1a48f5448e2ac1c4bbca3275b7f4c41a3d" prot="public" static="no" mutable="no">
        <type>account_id_type</type>
        <definition>account_id_type graphene::protocol::fill_order_operation::account_id</definition>
        <argsstring></argsstring>
        <name>account_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/market.hpp" line="152" column="1" bodyfile="libraries/protocol/include/graphene/protocol/market.hpp" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1fill__order__operation_1a364aebb371fdf0a0ab03119f41ee80e3" prot="public" static="no" mutable="no">
        <type><ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref></type>
        <definition>asset graphene::protocol::fill_order_operation::pays</definition>
        <argsstring></argsstring>
        <name>pays</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/market.hpp" line="153" column="1" bodyfile="libraries/protocol/include/graphene/protocol/market.hpp" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1fill__order__operation_1a46e1ad8889dff02756a140a794aef322" prot="public" static="no" mutable="no">
        <type><ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref></type>
        <definition>asset graphene::protocol::fill_order_operation::receives</definition>
        <argsstring></argsstring>
        <name>receives</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/market.hpp" line="154" column="1" bodyfile="libraries/protocol/include/graphene/protocol/market.hpp" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1fill__order__operation_1a68f6986e91892c78def8222a65e4b6a6" prot="public" static="no" mutable="no">
        <type><ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref></type>
        <definition>asset graphene::protocol::fill_order_operation::fee</definition>
        <argsstring></argsstring>
        <name>fee</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/market.hpp" line="155" column="1" bodyfile="libraries/protocol/include/graphene/protocol/market.hpp" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1fill__order__operation_1ab82caa75b0166c369f563fb9a6cc10df" prot="public" static="no" mutable="no">
        <type><ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref></type>
        <definition>price graphene::protocol::fill_order_operation::fill_price</definition>
        <argsstring></argsstring>
        <name>fill_price</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/market.hpp" line="156" column="1" bodyfile="libraries/protocol/include/graphene/protocol/market.hpp" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1fill__order__operation_1a38f3b237dd2ae48f34fe0ce5358b8b56" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool graphene::protocol::fill_order_operation::is_maker</definition>
        <argsstring></argsstring>
        <name>is_maker</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/market.hpp" line="157" column="1" bodyfile="libraries/protocol/include/graphene/protocol/market.hpp" bodystart="157" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1fill__order__operation_1a3309775f220b880cc33897bd7a5afa94" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>graphene::protocol::fill_order_operation::fill_order_operation</definition>
        <argsstring>()</argsstring>
        <name>fill_order_operation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/market.hpp" line="147" column="1" bodyfile="libraries/protocol/include/graphene/protocol/market.hpp" bodystart="147" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1fill__order__operation_1a2c3a48c8e20fefe3218ce76ca430a75c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>graphene::protocol::fill_order_operation::fill_order_operation</definition>
        <argsstring>(object_id_type o, account_id_type a, asset p, asset r, asset f, price fp, bool m)</argsstring>
        <name>fill_order_operation</name>
        <param>
          <type><ref refid="structgraphene_1_1db_1_1object__id__type" kindref="compound">object_id_type</ref></type>
          <declname>o</declname>
        </param>
        <param>
          <type>account_id_type</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref></type>
          <declname>fp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/market.hpp" line="148" column="1" bodyfile="libraries/protocol/include/graphene/protocol/market.hpp" bodystart="148" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1fill__order__operation_1a676e509d975150fa97419f539dad9638" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>pair&lt; asset_id_type, asset_id_type &gt;</type>
        <definition>pair&lt;asset_id_type,asset_id_type&gt; graphene::protocol::fill_order_operation::get_market</definition>
        <argsstring>() const </argsstring>
        <name>get_market</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/market.hpp" line="159" column="1" bodyfile="libraries/protocol/include/graphene/protocol/market.hpp" bodystart="159" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1fill__order__operation_1ad9601f932b833b902324c0e2d31127d2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>account_id_type</type>
        <definition>account_id_type graphene::protocol::fill_order_operation::fee_payer</definition>
        <argsstring>() const </argsstring>
        <name>fee_payer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/market.hpp" line="165" column="1" bodyfile="libraries/protocol/include/graphene/protocol/market.hpp" bodystart="165" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1fill__order__operation_1a63c0098329022a41a8256e51e8f0eac2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::protocol::fill_order_operation::validate</definition>
        <argsstring>() const </argsstring>
        <name>validate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/market.hpp" line="166" column="1" bodyfile="libraries/protocol/include/graphene/protocol/market.hpp" bodystart="166" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1fill__order__operation_1acc59e0b1b7851da627b0e029c132c56c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacegraphene_1_1protocol_1a69b2104c1c11eed2d17bd29b86713347" kindref="member">share_type</ref></type>
        <definition>share_type graphene::protocol::fill_order_operation::calculate_fee</definition>
        <argsstring>(const fee_parameters_type &amp;k) const </argsstring>
        <name>calculate_fee</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1fill__order__operation_1_1fee__parameters__type" kindref="compound">fee_parameters_type</ref> &amp;</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>This is a virtual operation; there is no fee. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/market.hpp" line="169" column="1" bodyfile="libraries/protocol/include/graphene/protocol/market.hpp" bodystart="169" bodyend="169"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>This is a virtual operation that is created while matching orders and emitted for the purpose of accurately tracking account history, accelerating a reindex. </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="3344">
        <label>graphene::protocol::base_operation</label>
        <link refid="structgraphene_1_1protocol_1_1base__operation"/>
      </node>
      <node id="3343">
        <label>graphene::protocol::fill_order_operation</label>
        <link refid="structgraphene_1_1protocol_1_1fill__order__operation"/>
        <childnode refid="3344" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3350">
        <label>graphene::protocol::price</label>
        <link refid="structgraphene_1_1protocol_1_1price"/>
        <childnode refid="3347" relation="usage">
          <edgelabel>base</edgelabel>
          <edgelabel>quote</edgelabel>
        </childnode>
      </node>
      <node id="3349">
        <label>account_id_type</label>
      </node>
      <node id="3348">
        <label>fc::safe&lt; int64_t &gt;</label>
        <link refid="structfc_1_1safe"/>
      </node>
      <node id="3346">
        <label>graphene::protocol::base_operation</label>
        <link refid="structgraphene_1_1protocol_1_1base__operation"/>
      </node>
      <node id="3347">
        <label>graphene::protocol::asset</label>
        <link refid="structgraphene_1_1protocol_1_1asset"/>
        <childnode refid="3348" relation="usage">
          <edgelabel>amount</edgelabel>
        </childnode>
      </node>
      <node id="3351">
        <label>graphene::db::object_id_type</label>
        <link refid="structgraphene_1_1db_1_1object__id__type"/>
      </node>
      <node id="3345">
        <label>graphene::protocol::fill_order_operation</label>
        <link refid="structgraphene_1_1protocol_1_1fill__order__operation"/>
        <childnode refid="3346" relation="public-inheritance">
        </childnode>
        <childnode refid="3347" relation="usage">
          <edgelabel>fee</edgelabel>
          <edgelabel>receives</edgelabel>
          <edgelabel>pays</edgelabel>
        </childnode>
        <childnode refid="3349" relation="usage">
          <edgelabel>account_id</edgelabel>
        </childnode>
        <childnode refid="3350" relation="usage">
          <edgelabel>fill_price</edgelabel>
        </childnode>
        <childnode refid="3351" relation="usage">
          <edgelabel>order_id</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="libraries/protocol/include/graphene/protocol/market.hpp" line="144" column="1" bodyfile="libraries/protocol/include/graphene/protocol/market.hpp" bodystart="143" bodyend="170"/>
    <listofallmembers>
      <member refid="structgraphene_1_1protocol_1_1fill__order__operation_1a48f5448e2ac1c4bbca3275b7f4c41a3d" prot="public" virt="non-virtual"><scope>graphene::protocol::fill_order_operation</scope><name>account_id</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1aaccb0fa71ee529cf62324baaa99988fe" prot="public" virt="non-virtual"><scope>graphene::protocol::fill_order_operation</scope><name>calculate_data_fee</name></member>
      <member refid="structgraphene_1_1protocol_1_1fill__order__operation_1acc59e0b1b7851da627b0e029c132c56c" prot="public" virt="non-virtual"><scope>graphene::protocol::fill_order_operation</scope><name>calculate_fee</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1afd01efa3e06367c572512e381b1106fb" prot="public" virt="non-virtual" ambiguityscope="graphene::protocol::base_operation::"><scope>graphene::protocol::fill_order_operation</scope><name>calculate_fee</name></member>
      <member refid="structgraphene_1_1protocol_1_1fill__order__operation_1a68f6986e91892c78def8222a65e4b6a6" prot="public" virt="non-virtual"><scope>graphene::protocol::fill_order_operation</scope><name>fee</name></member>
      <member refid="structgraphene_1_1protocol_1_1fill__order__operation_1ad9601f932b833b902324c0e2d31127d2" prot="public" virt="non-virtual"><scope>graphene::protocol::fill_order_operation</scope><name>fee_payer</name></member>
      <member refid="structgraphene_1_1protocol_1_1fill__order__operation_1a3309775f220b880cc33897bd7a5afa94" prot="public" virt="non-virtual"><scope>graphene::protocol::fill_order_operation</scope><name>fill_order_operation</name></member>
      <member refid="structgraphene_1_1protocol_1_1fill__order__operation_1a2c3a48c8e20fefe3218ce76ca430a75c" prot="public" virt="non-virtual"><scope>graphene::protocol::fill_order_operation</scope><name>fill_order_operation</name></member>
      <member refid="structgraphene_1_1protocol_1_1fill__order__operation_1ab82caa75b0166c369f563fb9a6cc10df" prot="public" virt="non-virtual"><scope>graphene::protocol::fill_order_operation</scope><name>fill_price</name></member>
      <member refid="structgraphene_1_1protocol_1_1fill__order__operation_1a676e509d975150fa97419f539dad9638" prot="public" virt="non-virtual"><scope>graphene::protocol::fill_order_operation</scope><name>get_market</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1aded12887f115b2bfa54ecd59540fa242" prot="public" virt="non-virtual"><scope>graphene::protocol::fill_order_operation</scope><name>get_required_active_authorities</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1a6ea245f980406ab52fdb90283e687d1c" prot="public" virt="non-virtual"><scope>graphene::protocol::fill_order_operation</scope><name>get_required_authorities</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1a0742a4b91de875366ec466a5b67b2811" prot="public" virt="non-virtual"><scope>graphene::protocol::fill_order_operation</scope><name>get_required_owner_authorities</name></member>
      <member refid="structgraphene_1_1protocol_1_1fill__order__operation_1a38f3b237dd2ae48f34fe0ce5358b8b56" prot="public" virt="non-virtual"><scope>graphene::protocol::fill_order_operation</scope><name>is_maker</name></member>
      <member refid="structgraphene_1_1protocol_1_1fill__order__operation_1a1f1753a3115b8290a766043347e6cc9d" prot="public" virt="non-virtual"><scope>graphene::protocol::fill_order_operation</scope><name>order_id</name></member>
      <member refid="structgraphene_1_1protocol_1_1fill__order__operation_1a364aebb371fdf0a0ab03119f41ee80e3" prot="public" virt="non-virtual"><scope>graphene::protocol::fill_order_operation</scope><name>pays</name></member>
      <member refid="structgraphene_1_1protocol_1_1fill__order__operation_1a46e1ad8889dff02756a140a794aef322" prot="public" virt="non-virtual"><scope>graphene::protocol::fill_order_operation</scope><name>receives</name></member>
      <member refid="structgraphene_1_1protocol_1_1fill__order__operation_1a63c0098329022a41a8256e51e8f0eac2" prot="public" virt="non-virtual"><scope>graphene::protocol::fill_order_operation</scope><name>validate</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1a41d0a14a070ac634be11f30dbf559935" prot="public" virt="non-virtual"><scope>graphene::protocol::fill_order_operation</scope><name>validate_parallel</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
