<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacegraphene_1_1chain_1_1detail" kind="namespace" language="C++">
    <compoundname>graphene::chain::detail</compoundname>
    <innerclass refid="structgraphene_1_1chain_1_1detail_1_1get__impacted__account__visitor" prot="public">graphene::chain::detail::get_impacted_account_visitor</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1detail_1_1pending__transactions__restorer" prot="public">graphene::chain::detail::pending_transactions_restorer</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1detail_1_1skip__flags__restorer" prot="public">graphene::chain::detail::skip_flags_restorer</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1detail_1_1vbo__mfs__key" prot="public">graphene::chain::detail::vbo_mfs_key</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1detail_1_1vesting__balance__object__equal" prot="public">graphene::chain::detail::vesting_balance_object_equal</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1detail_1_1vesting__balance__object__hash" prot="public">graphene::chain::detail::vesting_balance_object_hash</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1detail_1_1vote__recalc__options" prot="public">graphene::chain::detail::vote_recalc_options</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1detail_1_1vote__recalc__times" prot="public">graphene::chain::detail::vote_recalc_times</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacegraphene_1_1chain_1_1detail_1a5a92e5ab7f01d91df215f1f915b0cf46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::detail::check_asset_options_hf_1774</definition>
        <argsstring>(const fc::time_point_sec &amp;block_time, const asset_options &amp;options)</argsstring>
        <name>check_asset_options_hf_1774</name>
        <param>
          <type>const <ref refid="classfc_1_1time__point__sec" kindref="compound">fc::time_point_sec</ref> &amp;</type>
          <declname>block_time</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset__options" kindref="compound">asset_options</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/asset_evaluator.cpp" line="39" column="1" bodyfile="libraries/chain/asset_evaluator.cpp" bodystart="39" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1_1detail_1a7339011d7f285eee222ce85d8aafda2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::detail::check_bitasset_options_hf_bsip74</definition>
        <argsstring>(const fc::time_point_sec &amp;block_time, const bitasset_options &amp;options)</argsstring>
        <name>check_bitasset_options_hf_bsip74</name>
        <param>
          <type>const <ref refid="classfc_1_1time__point__sec" kindref="compound">fc::time_point_sec</ref> &amp;</type>
          <declname>block_time</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1bitasset__options" kindref="compound">bitasset_options</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/asset_evaluator.cpp" line="49" column="1" bodyfile="libraries/chain/asset_evaluator.cpp" bodystart="49" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1_1detail_1a4f1398617c79dde83a1e4df2f26135cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::detail::check_asset_options_hf_bsip81</definition>
        <argsstring>(const fc::time_point_sec &amp;block_time, const asset_options &amp;options)</argsstring>
        <name>check_asset_options_hf_bsip81</name>
        <param>
          <type>const <ref refid="classfc_1_1time__point__sec" kindref="compound">fc::time_point_sec</ref> &amp;</type>
          <declname>block_time</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset__options" kindref="compound">asset_options</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/asset_evaluator.cpp" line="58" column="1" bodyfile="libraries/chain/asset_evaluator.cpp" bodystart="58" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1_1detail_1a384f8071915bfe67aa3d575271d9d3c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::detail::check_asset_options_hf_bsip_48_75</definition>
        <argsstring>(const fc::time_point_sec &amp;block_time, const asset_options &amp;options)</argsstring>
        <name>check_asset_options_hf_bsip_48_75</name>
        <param>
          <type>const <ref refid="classfc_1_1time__point__sec" kindref="compound">fc::time_point_sec</ref> &amp;</type>
          <declname>block_time</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset__options" kindref="compound">asset_options</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/asset_evaluator.cpp" line="68" column="1" bodyfile="libraries/chain/asset_evaluator.cpp" bodystart="68" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1_1detail_1ae1d2df128531cf873678f351973ad5f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::detail::check_bitasset_options_hf_bsip_48_75</definition>
        <argsstring>(const fc::time_point_sec &amp;block_time, const bitasset_options &amp;options)</argsstring>
        <name>check_bitasset_options_hf_bsip_48_75</name>
        <param>
          <type>const <ref refid="classfc_1_1time__point__sec" kindref="compound">fc::time_point_sec</ref> &amp;</type>
          <declname>block_time</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1bitasset__options" kindref="compound">bitasset_options</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/asset_evaluator.cpp" line="80" column="1" bodyfile="libraries/chain/asset_evaluator.cpp" bodystart="80" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1_1detail_1a13a2075b9c4d9ad45a07adb508fda3a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::detail::check_asset_update_extensions_hf_bsip_48_75</definition>
        <argsstring>(const fc::time_point_sec &amp;block_time, const asset_update_operation::ext &amp;extensions)</argsstring>
        <name>check_asset_update_extensions_hf_bsip_48_75</name>
        <param>
          <type>const <ref refid="classfc_1_1time__point__sec" kindref="compound">fc::time_point_sec</ref> &amp;</type>
          <declname>block_time</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset__update__operation_1_1ext" kindref="compound">asset_update_operation::ext</ref> &amp;</type>
          <declname>extensions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/asset_evaluator.cpp" line="95" column="1" bodyfile="libraries/chain/asset_evaluator.cpp" bodystart="95" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1_1detail_1ae2667847d40292591cd7f0cb0fb3e358" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::detail::check_asset_publish_feed_extensions_hf_bsip77</definition>
        <argsstring>(const fc::time_point_sec &amp;block_time, const asset_publish_feed_operation::ext &amp;extensions)</argsstring>
        <name>check_asset_publish_feed_extensions_hf_bsip77</name>
        <param>
          <type>const <ref refid="classfc_1_1time__point__sec" kindref="compound">fc::time_point_sec</ref> &amp;</type>
          <declname>block_time</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset__publish__feed__operation_1_1ext" kindref="compound">asset_publish_feed_operation::ext</ref> &amp;</type>
          <declname>extensions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/asset_evaluator.cpp" line="109" column="1" bodyfile="libraries/chain/asset_evaluator.cpp" bodystart="109" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1_1detail_1ad216c2c88d2b24d023035c689199f371" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::detail::check_bitasset_options_hf_bsip77</definition>
        <argsstring>(const fc::time_point_sec &amp;block_time, const bitasset_options &amp;options)</argsstring>
        <name>check_bitasset_options_hf_bsip77</name>
        <param>
          <type>const <ref refid="classfc_1_1time__point__sec" kindref="compound">fc::time_point_sec</ref> &amp;</type>
          <declname>block_time</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1bitasset__options" kindref="compound">bitasset_options</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/asset_evaluator.cpp" line="121" column="1" bodyfile="libraries/chain/asset_evaluator.cpp" bodystart="121" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1_1detail_1a8c6812c7d500dd5ddb610efd459a3bfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::detail::check_bitasset_options_hf_bsip87</definition>
        <argsstring>(const fc::time_point_sec &amp;block_time, const bitasset_options &amp;options)</argsstring>
        <name>check_bitasset_options_hf_bsip87</name>
        <param>
          <type>const <ref refid="classfc_1_1time__point__sec" kindref="compound">fc::time_point_sec</ref> &amp;</type>
          <declname>block_time</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1bitasset__options" kindref="compound">bitasset_options</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/asset_evaluator.cpp" line="130" column="1" bodyfile="libraries/chain/asset_evaluator.cpp" bodystart="130" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1_1detail_1ae2d16f659a1c261c564706e58c2a13ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::detail::check_asset_claim_fees_hardfork_87_74_collatfee</definition>
        <argsstring>(const fc::time_point_sec &amp;block_time, const asset_claim_fees_operation &amp;op)</argsstring>
        <name>check_asset_claim_fees_hardfork_87_74_collatfee</name>
        <param>
          <type>const <ref refid="classfc_1_1time__point__sec" kindref="compound">fc::time_point_sec</ref> &amp;</type>
          <declname>block_time</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset__claim__fees__operation" kindref="compound">asset_claim_fees_operation</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/asset_evaluator.cpp" line="138" column="1" bodyfile="libraries/chain/asset_evaluator.cpp" bodystart="138" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1_1detail_1a5b5010443746742a2fe8300f73ed1566" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::detail::check_asset_options_hf_core2281</definition>
        <argsstring>(const fc::time_point_sec &amp;next_maint_time, const asset_options &amp;options)</argsstring>
        <name>check_asset_options_hf_core2281</name>
        <param>
          <type>const <ref refid="classfc_1_1time__point__sec" kindref="compound">fc::time_point_sec</ref> &amp;</type>
          <declname>next_maint_time</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset__options" kindref="compound">asset_options</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/asset_evaluator.cpp" line="147" column="1" bodyfile="libraries/chain/asset_evaluator.cpp" bodystart="147" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1_1detail_1a002f802751e33a258e826073d89cfbd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::detail::check_asset_options_hf_core2467</definition>
        <argsstring>(const fc::time_point_sec &amp;next_maint_time, const asset_options &amp;options)</argsstring>
        <name>check_asset_options_hf_core2467</name>
        <param>
          <type>const <ref refid="classfc_1_1time__point__sec" kindref="compound">fc::time_point_sec</ref> &amp;</type>
          <declname>next_maint_time</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset__options" kindref="compound">asset_options</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/asset_evaluator.cpp" line="161" column="1" bodyfile="libraries/chain/asset_evaluator.cpp" bodystart="161" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1_1detail_1ac5c2810759db63ad17f8ec2f351ad6dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::detail::check_bitasset_opts_hf_core2467</definition>
        <argsstring>(const fc::time_point_sec &amp;next_maint_time, const bitasset_options &amp;options)</argsstring>
        <name>check_bitasset_opts_hf_core2467</name>
        <param>
          <type>const <ref refid="classfc_1_1time__point__sec" kindref="compound">fc::time_point_sec</ref> &amp;</type>
          <declname>next_maint_time</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1bitasset__options" kindref="compound">bitasset_options</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/asset_evaluator.cpp" line="173" column="1" bodyfile="libraries/chain/asset_evaluator.cpp" bodystart="173" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1_1detail_1abee9ab90d1934ec993d2ae2ce4291ce8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegraphene_1_1protocol_1a69b2104c1c11eed2d17bd29b86713347" kindref="member">share_type</ref></type>
        <definition>share_type graphene::chain::detail::calculate_percent</definition>
        <argsstring>(const share_type &amp;value, uint16_t percent)</argsstring>
        <name>calculate_percent</name>
        <param>
          <type>const <ref refid="namespacegraphene_1_1protocol_1a69b2104c1c11eed2d17bd29b86713347" kindref="member">share_type</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>percent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/db_market.cpp" line="39" column="1" bodyfile="libraries/chain/db_market.cpp" bodystart="39" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1_1detail_1a03667a52b7be240e3b56fcf09b173aa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::detail::check_htlc_create_hf_bsip64</definition>
        <argsstring>(const fc::time_point_sec &amp;block_time, const htlc_create_operation &amp;op, const asset_object &amp;asset_to_transfer)</argsstring>
        <name>check_htlc_create_hf_bsip64</name>
        <param>
          <type>const <ref refid="classfc_1_1time__point__sec" kindref="compound">fc::time_point_sec</ref> &amp;</type>
          <declname>block_time</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1htlc__create__operation" kindref="compound">htlc_create_operation</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1asset__object" kindref="compound">asset_object</ref> &amp;</type>
          <declname>asset_to_transfer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/htlc_evaluator.cpp" line="34" column="1" bodyfile="libraries/chain/htlc_evaluator.cpp" bodystart="34" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1_1detail_1adb689511d6cdc8f9d9b46aa9941005d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::detail::check_htlc_redeem_hf_bsip64</definition>
        <argsstring>(const fc::time_point_sec &amp;block_time, const htlc_redeem_operation &amp;op, const htlc_object *htlc_obj)</argsstring>
        <name>check_htlc_redeem_hf_bsip64</name>
        <param>
          <type>const <ref refid="classfc_1_1time__point__sec" kindref="compound">fc::time_point_sec</ref> &amp;</type>
          <declname>block_time</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1htlc__redeem__operation" kindref="compound">htlc_redeem_operation</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1htlc__object" kindref="compound">htlc_object</ref> *</type>
          <declname>htlc_obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/htlc_evaluator.cpp" line="57" column="1" bodyfile="libraries/chain/htlc_evaluator.cpp" bodystart="57" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1_1detail_1a0726a159449fff20472ad910c3a6ff8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Lambda</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void graphene::chain::detail::with_skip_flags</definition>
        <argsstring>(database &amp;db, uint32_t skip_flags, Lambda callback)</argsstring>
        <name>with_skip_flags</name>
        <param>
          <type><ref refid="classgraphene_1_1chain_1_1database" kindref="compound">database</ref> &amp;</type>
          <declname>db</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>skip_flags</declname>
        </param>
        <param>
          <type>Lambda</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the skip_flags to the given value, call callback, then reset skip_flags to their previous value after callback is done. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/db_with.hpp" line="113" column="1" bodyfile="libraries/chain/include/graphene/chain/db_with.hpp" bodystart="113" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1_1detail_1a70f0b14f841b7731fbd6e68d4b6f1ed5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Lambda</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void graphene::chain::detail::without_pending_transactions</definition>
        <argsstring>(database &amp;db, std::vector&lt; processed_transaction &gt; &amp;&amp;pending_transactions, Lambda callback)</argsstring>
        <name>without_pending_transactions</name>
        <param>
          <type><ref refid="classgraphene_1_1chain_1_1database" kindref="compound">database</ref> &amp;</type>
          <declname>db</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="structgraphene_1_1protocol_1_1processed__transaction" kindref="compound">processed_transaction</ref> &gt; &amp;&amp;</type>
          <declname>pending_transactions</declname>
        </param>
        <param>
          <type>Lambda</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Empty pending_transactions, call callback, then reset pending_transactions after callback is done.</para><para>Pending transactions which no longer validate will be culled. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/db_with.hpp" line="132" column="1" bodyfile="libraries/chain/include/graphene/chain/db_with.hpp" bodystart="132" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1_1detail_1a7528055c48b6e603a8f4e15bc9654d57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::detail::_is_authorized_asset</definition>
        <argsstring>(const database &amp;d, const account_object &amp;acct, const asset_object &amp;asset_obj)</argsstring>
        <name>_is_authorized_asset</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1database" kindref="compound">database</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1account__object" kindref="compound">account_object</ref> &amp;</type>
          <declname>acct</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1asset__object" kindref="compound">asset_object</ref> &amp;</type>
          <declname>asset_obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/is_authorized_asset.hpp" line="34" column="1" bodyfile="libraries/chain/is_authorized_asset.cpp" bodystart="35" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1_1detail_1a8d845a5d9600381031796cecdd8a7cd0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t graphene::chain::detail::vbo_mfs_hash</definition>
        <argsstring>(const account_id_type &amp;account_id, const asset_id_type &amp;asset_id)</argsstring>
        <name>vbo_mfs_hash</name>
        <param>
          <type>const account_id_type &amp;</type>
          <declname>account_id</declname>
        </param>
        <param>
          <type>const asset_id_type &amp;</type>
          <declname>asset_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate a hash for account_id_type and asset_id. Use 48 bit value (see <ref refid="object__id_8hpp" kindref="compound">object_id.hpp</ref>) for account_id and XOR it with 24 bit for asset_id </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/vesting_balance_object.hpp" line="206" column="1" bodyfile="libraries/chain/include/graphene/chain/vesting_balance_object.hpp" bodystart="206" bodyend="209"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/chain/asset_evaluator.cpp" line="36" column="1"/>
  </compounddef>
</doxygen>
