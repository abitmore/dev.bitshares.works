<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classfc_1_1ip_1_1endpoint" kind="class" language="C++" prot="public">
    <compoundname>fc::ip::endpoint</compoundname>
    <includes refid="ip_8hpp" local="no">ip.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classfc_1_1ip_1_1endpoint_1ac2909bc9f20a8abc19aedcb594d78dae" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t fc::ip::endpoint::_port</definition>
        <argsstring></argsstring>
        <name>_port</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The compiler pads endpoint to a full 8 bytes, so while a port number is limited in range to 16 bits, we specify a full 32 bits so that memcmp can be used with sizeof(), otherwise 2 bytes will be &apos;random&apos; and you do not know where they are stored. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/ip.hpp" line="69" column="1" bodyfile="libraries/fc/include/fc/network/ip.hpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classfc_1_1ip_1_1endpoint_1a0b3d34e5da0af9c3025ed5deca747c0f" prot="private" static="no" mutable="no">
        <type><ref refid="classfc_1_1ip_1_1address" kindref="compound">address</ref></type>
        <definition>address fc::ip::endpoint::_ip</definition>
        <argsstring></argsstring>
        <name>_ip</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/ip.hpp" line="70" column="1" bodyfile="libraries/fc/include/fc/network/ip.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classfc_1_1ip_1_1endpoint_1ad3a1ad38684ecd7c145ab3d4142645f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::ip::endpoint::endpoint</definition>
        <argsstring>()</argsstring>
        <name>endpoint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/ip.hpp" line="45" column="1" bodyfile="libraries/fc/src/network/ip.cpp" bodystart="52" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ip_1_1endpoint_1a5105c2971d5a5d76a2ce87422d855233" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::ip::endpoint::endpoint</definition>
        <argsstring>(const address &amp;i, uint16_t p=0)</argsstring>
        <name>endpoint</name>
        <param>
          <type>const <ref refid="classfc_1_1ip_1_1address" kindref="compound">address</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>p</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/ip.hpp" line="46" column="1" bodyfile="libraries/fc/src/network/ip.cpp" bodystart="54" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ip_1_1endpoint_1a8a44fd8cffdec158ae2a548db5d64a56" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::ip::endpoint::operator string</definition>
        <argsstring>() const</argsstring>
        <name>operator string</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns &quot;IP:PORT&quot; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/ip.hpp" line="51" column="1" bodyfile="libraries/fc/src/network/ip.cpp" bodystart="87" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ip_1_1endpoint_1a3ec532f0d1fb4b815372fabdc19056f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void fc::ip::endpoint::set_port</definition>
        <argsstring>(uint16_t p)</argsstring>
        <name>set_port</name>
        <param>
          <type>uint16_t</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/ip.hpp" line="53" column="1" bodyfile="libraries/fc/include/fc/network/ip.hpp" bodystart="53" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ip_1_1endpoint_1ab243ed508cf8f9d34a32b2ece708466b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t fc::ip::endpoint::port</definition>
        <argsstring>() const</argsstring>
        <name>port</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/ip.hpp" line="54" column="1" bodyfile="libraries/fc/src/network/ip.cpp" bodystart="71" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1ip_1_1endpoint_1a61b2902b0e0e02172a60f3a17469f780" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classfc_1_1ip_1_1address" kindref="compound">address</ref> &amp;</type>
        <definition>const address &amp; fc::ip::endpoint::get_address</definition>
        <argsstring>() const</argsstring>
        <name>get_address</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/ip.hpp" line="55" column="1" bodyfile="libraries/fc/src/network/ip.cpp" bodystart="72" bodyend="72"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classfc_1_1ip_1_1endpoint_1a80c154405619b208c9d057d2c91958c9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">endpoint</ref></type>
        <definition>endpoint fc::ip::endpoint::from_string</definition>
        <argsstring>(const string &amp;s)</argsstring>
        <name>from_string</name>
        <param>
          <type>const string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts &quot;IP:PORT&quot; to an endpoint </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/ip.hpp" line="49" column="1" bodyfile="libraries/fc/src/network/ip.cpp" bodystart="74" bodyend="85"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classfc_1_1ip_1_1endpoint_1abbc398434e10da844dfb35060c472a25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const endpoint &amp;a, const endpoint &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">endpoint</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">endpoint</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/ip.hpp" line="57" column="1" bodyfile="libraries/fc/src/network/ip.cpp" bodystart="57" bodyend="59"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1ip_1_1endpoint_1a0cdcb0047f3ae66889d3a8d2d01a1a9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const endpoint &amp;a, const endpoint &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">endpoint</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">endpoint</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/ip.hpp" line="58" column="1" bodyfile="libraries/fc/src/network/ip.cpp" bodystart="60" bodyend="62"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1ip_1_1endpoint_1aa0defbdcb5d502ecbdfb035009e24f75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const endpoint &amp;a, const endpoint &amp;b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">endpoint</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">endpoint</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/ip.hpp" line="59" column="1" bodyfile="libraries/fc/src/network/ip.cpp" bodystart="64" bodyend="69"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/fc/include/fc/network/ip.hpp" line="43" column="1" bodyfile="libraries/fc/include/fc/network/ip.hpp" bodystart="43" bodyend="71"/>
    <listofallmembers>
      <member refid="classfc_1_1ip_1_1endpoint_1a0b3d34e5da0af9c3025ed5deca747c0f" prot="private" virt="non-virtual"><scope>fc::ip::endpoint</scope><name>_ip</name></member>
      <member refid="classfc_1_1ip_1_1endpoint_1ac2909bc9f20a8abc19aedcb594d78dae" prot="private" virt="non-virtual"><scope>fc::ip::endpoint</scope><name>_port</name></member>
      <member refid="classfc_1_1ip_1_1endpoint_1ad3a1ad38684ecd7c145ab3d4142645f6" prot="public" virt="non-virtual"><scope>fc::ip::endpoint</scope><name>endpoint</name></member>
      <member refid="classfc_1_1ip_1_1endpoint_1a5105c2971d5a5d76a2ce87422d855233" prot="public" virt="non-virtual"><scope>fc::ip::endpoint</scope><name>endpoint</name></member>
      <member refid="classfc_1_1ip_1_1endpoint_1a80c154405619b208c9d057d2c91958c9" prot="public" virt="non-virtual"><scope>fc::ip::endpoint</scope><name>from_string</name></member>
      <member refid="classfc_1_1ip_1_1endpoint_1a61b2902b0e0e02172a60f3a17469f780" prot="public" virt="non-virtual"><scope>fc::ip::endpoint</scope><name>get_address</name></member>
      <member refid="classfc_1_1ip_1_1endpoint_1a8a44fd8cffdec158ae2a548db5d64a56" prot="public" virt="non-virtual"><scope>fc::ip::endpoint</scope><name>operator string</name></member>
      <member refid="classfc_1_1ip_1_1endpoint_1a0cdcb0047f3ae66889d3a8d2d01a1a9e" prot="public" virt="non-virtual"><scope>fc::ip::endpoint</scope><name>operator!=</name></member>
      <member refid="classfc_1_1ip_1_1endpoint_1aa0defbdcb5d502ecbdfb035009e24f75" prot="public" virt="non-virtual"><scope>fc::ip::endpoint</scope><name>operator&lt;</name></member>
      <member refid="classfc_1_1ip_1_1endpoint_1abbc398434e10da844dfb35060c472a25" prot="public" virt="non-virtual"><scope>fc::ip::endpoint</scope><name>operator==</name></member>
      <member refid="classfc_1_1ip_1_1endpoint_1ab243ed508cf8f9d34a32b2ece708466b" prot="public" virt="non-virtual"><scope>fc::ip::endpoint</scope><name>port</name></member>
      <member refid="classfc_1_1ip_1_1endpoint_1a3ec532f0d1fb4b815372fabdc19056f6" prot="public" virt="non-virtual"><scope>fc::ip::endpoint</scope><name>set_port</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
