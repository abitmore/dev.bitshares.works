<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classgraphene_1_1app_1_1application" kind="class" language="C++" prot="public">
    <compoundname>graphene::app::application</compoundname>
    <includes refid="application_8hpp" local="no">application.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classgraphene_1_1app_1_1application_1a695e67b3eafbf752b6350c7313ef10f7" prot="public" static="no" mutable="no">
        <type>boost::signals2::signal&lt; void()&gt;</type>
        <definition>boost::signals2::signal&lt;void()&gt; graphene::app::application::syncing_finished</definition>
        <argsstring></argsstring>
        <name>syncing_finished</name>
        <briefdescription>
<para>Emitted when syncing finishes (is_finished_syncing will return true) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/application.hpp" line="147" column="1" bodyfile="libraries/app/include/graphene/app/application.hpp" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1application_1a668e7fd37142a4612699270e4fec37bc" prot="public" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classfc_1_1thread" kindref="compound">fc::thread</ref> &gt;</type>
        <definition>std::shared_ptr&lt;fc::thread&gt; graphene::app::application::elasticsearch_thread</definition>
        <argsstring></argsstring>
        <name>elasticsearch_thread</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/application.hpp" line="155" column="1" bodyfile="libraries/app/include/graphene/app/application.hpp" bodystart="155" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classgraphene_1_1app_1_1application_1a942969c3aa92dc532278d1126f811b70" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classgraphene_1_1app_1_1detail_1_1application__impl" kindref="compound">detail::application_impl</ref> &gt;</type>
        <definition>std::shared_ptr&lt;detail::application_impl&gt; graphene::app::application::my</definition>
        <argsstring></argsstring>
        <name>my</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/application.hpp" line="161" column="1" bodyfile="libraries/app/include/graphene/app/application.hpp" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1application_1a32ef9ba9a959799937668ad5a5d25cc0" prot="private" static="no" mutable="no">
        <type>boost::program_options::options_description</type>
        <definition>boost::program_options::options_description graphene::app::application::_cli_options</definition>
        <argsstring></argsstring>
        <name>_cli_options</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/application.hpp" line="163" column="1" bodyfile="libraries/app/include/graphene/app/application.hpp" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1app_1_1application_1a69237dc67886f006a99892de75ed0829" prot="private" static="no" mutable="no">
        <type>boost::program_options::options_description</type>
        <definition>boost::program_options::options_description graphene::app::application::_cfg_options</definition>
        <argsstring></argsstring>
        <name>_cfg_options</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/application.hpp" line="164" column="1" bodyfile="libraries/app/include/graphene/app/application.hpp" bodystart="164" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgraphene_1_1app_1_1application_1a26da774787b3b3b7ad711c91f2730984" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::app::application::application</definition>
        <argsstring>()</argsstring>
        <name>application</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/application.hpp" line="91" column="1" bodyfile="libraries/app/application.cpp" bodystart="1121" bodyend="1125"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1application_1a52c41787f656c18fadf1ab4ad80622f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::app::application::~application</definition>
        <argsstring>()</argsstring>
        <name>~application</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/application.hpp" line="92" column="1" bodyfile="libraries/app/application.cpp" bodystart="1127" bodyend="1131"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1application_1a29c6faba273632e19155b9d17659bdfb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::application::set_program_options</definition>
        <argsstring>(boost::program_options::options_description &amp;command_line_options, boost::program_options::options_description &amp;configuration_file_options) const</argsstring>
        <name>set_program_options</name>
        <param>
          <type>boost::program_options::options_description &amp;</type>
          <declname>command_line_options</declname>
        </param>
        <param>
          <type>boost::program_options::options_description &amp;</type>
          <declname>configuration_file_options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/application.hpp" line="94" column="1" bodyfile="libraries/app/application.cpp" bodystart="1133" bodyend="1283"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1application_1afaf945d62dba3aca4916a69da232fe81" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::application::initialize</definition>
        <argsstring>(const fc::path &amp;data_dir, std::shared_ptr&lt; boost::program_options::variables_map &gt; options) const</argsstring>
        <name>initialize</name>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">fc::path</ref> &amp;</type>
          <declname>data_dir</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; boost::program_options::variables_map &gt;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/application.hpp" line="96" column="1" bodyfile="libraries/app/application.cpp" bodystart="1285" bodyend="1291"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1application_1a6b01a275a74bbe1bebdaaa83257897bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::application::startup</definition>
        <argsstring>()</argsstring>
        <name>startup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/application.hpp" line="98" column="1" bodyfile="libraries/app/application.cpp" bodystart="1293" bodyend="1306"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1application_1ad89975a3ad9f2e31511a94a9e4d5630a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PluginType</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; PluginType &gt;</type>
        <definition>std::shared_ptr&lt;PluginType&gt; graphene::app::application::register_plugin</definition>
        <argsstring>(bool auto_load=false)</argsstring>
        <name>register_plugin</name>
        <param>
          <type>bool</type>
          <declname>auto_load</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/application.hpp" line="101" column="1" bodyfile="libraries/app/include/graphene/app/application.hpp" bodystart="101" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1application_1a8a9a475ccf5b1c271e757c7c52b8b80f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classgraphene_1_1app_1_1abstract__plugin" kindref="compound">abstract_plugin</ref> &gt;</type>
        <definition>std::shared_ptr&lt; abstract_plugin &gt; graphene::app::application::get_plugin</definition>
        <argsstring>(const string &amp;name) const</argsstring>
        <name>get_plugin</name>
        <param>
          <type>const string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/application.hpp" line="127" column="1" bodyfile="libraries/app/application.cpp" bodystart="1320" bodyend="1323"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1application_1a4484ef04016fe6d470d694376c3387a4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PluginType</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; PluginType &gt;</type>
        <definition>std::shared_ptr&lt;PluginType&gt; graphene::app::application::get_plugin</definition>
        <argsstring>(const string &amp;name) const</argsstring>
        <name>get_plugin</name>
        <param>
          <type>const string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/application.hpp" line="130" column="1" bodyfile="libraries/app/include/graphene/app/application.hpp" bodystart="130" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1application_1ac6be3372ebe64a14abe6d5c6a26b0f0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegraphene_1_1net_1ad094a2c7d7a7af4de90686134b89df03" kindref="member">net::node_ptr</ref></type>
        <definition>net::node_ptr graphene::app::application::p2p_node</definition>
        <argsstring>()</argsstring>
        <name>p2p_node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/application.hpp" line="138" column="1" bodyfile="libraries/app/application.cpp" bodystart="1330" bodyend="1333"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1application_1af856dd23a0f0c0d961022d8c453e47d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classgraphene_1_1chain_1_1database" kindref="compound">chain::database</ref> &gt;</type>
        <definition>std::shared_ptr&lt; chain::database &gt; graphene::app::application::chain_database</definition>
        <argsstring>() const</argsstring>
        <name>chain_database</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/application.hpp" line="139" column="1" bodyfile="libraries/app/application.cpp" bodystart="1335" bodyend="1338"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1application_1ab3a7cb3e8f8562a8d1c897103617d2ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::application::set_api_limit</definition>
        <argsstring>()</argsstring>
        <name>set_api_limit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/application.hpp" line="140" column="1" bodyfile="libraries/app/application.cpp" bodystart="1308" bodyend="1319"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1application_1a6901555c199caa9535f30375667df3f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::application::set_block_production</definition>
        <argsstring>(bool producing_blocks)</argsstring>
        <name>set_block_production</name>
        <param>
          <type>bool</type>
          <declname>producing_blocks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/application.hpp" line="141" column="1" bodyfile="libraries/app/application.cpp" bodystart="1340" bodyend="1343"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1application_1a5ec1e91d393732aca493f27265860ffb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1optional" kindref="compound">fc::optional</ref>&lt; <ref refid="structgraphene_1_1app_1_1api__access__info" kindref="compound">api_access_info</ref> &gt;</type>
        <definition>optional&lt; api_access_info &gt; graphene::app::application::get_api_access_info</definition>
        <argsstring>(const string &amp;username) const</argsstring>
        <name>get_api_access_info</name>
        <param>
          <type>const string &amp;</type>
          <declname>username</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/application.hpp" line="142" column="1" bodyfile="libraries/app/application.cpp" bodystart="1345" bodyend="1348"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1application_1a327e69e154b57da1da036166cb61d154" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::application::set_api_access_info</definition>
        <argsstring>(const string &amp;username, api_access_info &amp;&amp;permissions)</argsstring>
        <name>set_api_access_info</name>
        <param>
          <type>const string &amp;</type>
          <declname>username</declname>
        </param>
        <param>
          <type><ref refid="structgraphene_1_1app_1_1api__access__info" kindref="compound">api_access_info</ref> &amp;&amp;</type>
          <declname>permissions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/application.hpp" line="143" column="1" bodyfile="libraries/app/application.cpp" bodystart="1350" bodyend="1353"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1application_1a07a1d888d73b01eec7d6c7bfb5b2d79c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::app::application::is_finished_syncing</definition>
        <argsstring>() const</argsstring>
        <name>is_finished_syncing</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/application.hpp" line="145" column="1" bodyfile="libraries/app/application.cpp" bodystart="1355" bodyend="1358"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1application_1a27e57fad3d041f065c7a86d34e95cc81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classgraphene_1_1app_1_1application__options" kindref="compound">application_options</ref> &amp;</type>
        <definition>const application_options &amp; graphene::app::application::get_options</definition>
        <argsstring>()</argsstring>
        <name>get_options</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/application.hpp" line="149" column="1" bodyfile="libraries/app/application.cpp" bodystart="1370" bodyend="1373"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1application_1a90514b63263fff2f66d18f1c6b7e1b2c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::application::enable_plugin</definition>
        <argsstring>(const string &amp;name) const</argsstring>
        <name>enable_plugin</name>
        <param>
          <type>const string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/application.hpp" line="151" column="1" bodyfile="libraries/app/application.cpp" bodystart="1360" bodyend="1363"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1application_1aa2be7bd21116718e5c2b2b9374500aaa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::app::application::is_plugin_enabled</definition>
        <argsstring>(const string &amp;name) const</argsstring>
        <name>is_plugin_enabled</name>
        <param>
          <type>const string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/application.hpp" line="153" column="1" bodyfile="libraries/app/application.cpp" bodystart="1325" bodyend="1328"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classgraphene_1_1app_1_1application_1a3a350cbf1ce859781841462eee6f72ab" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::application::add_available_plugin</definition>
        <argsstring>(std::shared_ptr&lt; abstract_plugin &gt; p) const</argsstring>
        <name>add_available_plugin</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classgraphene_1_1app_1_1abstract__plugin" kindref="compound">abstract_plugin</ref> &gt;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Add an available plugin. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/application.hpp" line="159" column="1" bodyfile="libraries/app/application.cpp" bodystart="1365" bodyend="1368"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/app/include/graphene/app/application.hpp" line="89" column="1" bodyfile="libraries/app/include/graphene/app/application.hpp" bodystart="88" bodyend="165"/>
    <listofallmembers>
      <member refid="classgraphene_1_1app_1_1application_1a69237dc67886f006a99892de75ed0829" prot="private" virt="non-virtual"><scope>graphene::app::application</scope><name>_cfg_options</name></member>
      <member refid="classgraphene_1_1app_1_1application_1a32ef9ba9a959799937668ad5a5d25cc0" prot="private" virt="non-virtual"><scope>graphene::app::application</scope><name>_cli_options</name></member>
      <member refid="classgraphene_1_1app_1_1application_1a3a350cbf1ce859781841462eee6f72ab" prot="private" virt="non-virtual"><scope>graphene::app::application</scope><name>add_available_plugin</name></member>
      <member refid="classgraphene_1_1app_1_1application_1a26da774787b3b3b7ad711c91f2730984" prot="public" virt="non-virtual"><scope>graphene::app::application</scope><name>application</name></member>
      <member refid="classgraphene_1_1app_1_1application_1af856dd23a0f0c0d961022d8c453e47d1" prot="public" virt="non-virtual"><scope>graphene::app::application</scope><name>chain_database</name></member>
      <member refid="classgraphene_1_1app_1_1application_1a668e7fd37142a4612699270e4fec37bc" prot="public" virt="non-virtual"><scope>graphene::app::application</scope><name>elasticsearch_thread</name></member>
      <member refid="classgraphene_1_1app_1_1application_1a90514b63263fff2f66d18f1c6b7e1b2c" prot="public" virt="non-virtual"><scope>graphene::app::application</scope><name>enable_plugin</name></member>
      <member refid="classgraphene_1_1app_1_1application_1a5ec1e91d393732aca493f27265860ffb" prot="public" virt="non-virtual"><scope>graphene::app::application</scope><name>get_api_access_info</name></member>
      <member refid="classgraphene_1_1app_1_1application_1a27e57fad3d041f065c7a86d34e95cc81" prot="public" virt="non-virtual"><scope>graphene::app::application</scope><name>get_options</name></member>
      <member refid="classgraphene_1_1app_1_1application_1a8a9a475ccf5b1c271e757c7c52b8b80f" prot="public" virt="non-virtual"><scope>graphene::app::application</scope><name>get_plugin</name></member>
      <member refid="classgraphene_1_1app_1_1application_1a4484ef04016fe6d470d694376c3387a4" prot="public" virt="non-virtual"><scope>graphene::app::application</scope><name>get_plugin</name></member>
      <member refid="classgraphene_1_1app_1_1application_1afaf945d62dba3aca4916a69da232fe81" prot="public" virt="non-virtual"><scope>graphene::app::application</scope><name>initialize</name></member>
      <member refid="classgraphene_1_1app_1_1application_1a07a1d888d73b01eec7d6c7bfb5b2d79c" prot="public" virt="non-virtual"><scope>graphene::app::application</scope><name>is_finished_syncing</name></member>
      <member refid="classgraphene_1_1app_1_1application_1aa2be7bd21116718e5c2b2b9374500aaa" prot="public" virt="non-virtual"><scope>graphene::app::application</scope><name>is_plugin_enabled</name></member>
      <member refid="classgraphene_1_1app_1_1application_1a942969c3aa92dc532278d1126f811b70" prot="private" virt="non-virtual"><scope>graphene::app::application</scope><name>my</name></member>
      <member refid="classgraphene_1_1app_1_1application_1ac6be3372ebe64a14abe6d5c6a26b0f0b" prot="public" virt="non-virtual"><scope>graphene::app::application</scope><name>p2p_node</name></member>
      <member refid="classgraphene_1_1app_1_1application_1ad89975a3ad9f2e31511a94a9e4d5630a" prot="public" virt="non-virtual"><scope>graphene::app::application</scope><name>register_plugin</name></member>
      <member refid="classgraphene_1_1app_1_1application_1a327e69e154b57da1da036166cb61d154" prot="public" virt="non-virtual"><scope>graphene::app::application</scope><name>set_api_access_info</name></member>
      <member refid="classgraphene_1_1app_1_1application_1ab3a7cb3e8f8562a8d1c897103617d2ba" prot="public" virt="non-virtual"><scope>graphene::app::application</scope><name>set_api_limit</name></member>
      <member refid="classgraphene_1_1app_1_1application_1a6901555c199caa9535f30375667df3f0" prot="public" virt="non-virtual"><scope>graphene::app::application</scope><name>set_block_production</name></member>
      <member refid="classgraphene_1_1app_1_1application_1a29c6faba273632e19155b9d17659bdfb" prot="public" virt="non-virtual"><scope>graphene::app::application</scope><name>set_program_options</name></member>
      <member refid="classgraphene_1_1app_1_1application_1a6b01a275a74bbe1bebdaaa83257897bb" prot="public" virt="non-virtual"><scope>graphene::app::application</scope><name>startup</name></member>
      <member refid="classgraphene_1_1app_1_1application_1a695e67b3eafbf752b6350c7313ef10f7" prot="public" virt="non-virtual"><scope>graphene::app::application</scope><name>syncing_finished</name></member>
      <member refid="classgraphene_1_1app_1_1application_1a52c41787f656c18fadf1ab4ad80622f1" prot="public" virt="non-virtual"><scope>graphene::app::application</scope><name>~application</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
