<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structgraphene_1_1protocol_1_1public__key__type" kind="struct" language="C++" prot="public">
    <compoundname>graphene::protocol::public_key_type</compoundname>
    <includes refid="protocol_2include_2graphene_2protocol_2types_8hpp" local="no">types.hpp</includes>
    <innerclass refid="structgraphene_1_1protocol_1_1public__key__type_1_1binary__key" prot="public">graphene::protocol::public_key_type::binary_key</innerclass>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1public__key__type_1a2be7525f8b91c5e1b858f3d64e32707d" prot="public" static="no" mutable="no">
        <type><ref refid="namespacefc_1_1ecc_1a050b3233b3000ad6098af37f768aae7a" kindref="member">fc::ecc::public_key_data</ref></type>
        <definition>fc::ecc::public_key_data graphene::protocol::public_key_type::key_data</definition>
        <argsstring></argsstring>
        <name>key_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="283" column="1" bodyfile="libraries/protocol/include/graphene/protocol/types.hpp" bodystart="283" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1public__key__type_1a22259e15681273389e9909e952181e18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::protocol::public_key_type::public_key_type</definition>
        <argsstring>()</argsstring>
        <name>public_key_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="284" column="1" bodyfile="libraries/protocol/types.cpp" bodystart="35" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1public__key__type_1ae57be1b1f46292783be62fa84f201824" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::protocol::public_key_type::public_key_type</definition>
        <argsstring>(const fc::ecc::public_key_data &amp;data)</argsstring>
        <name>public_key_type</name>
        <param>
          <type>const <ref refid="namespacefc_1_1ecc_1a050b3233b3000ad6098af37f768aae7a" kindref="member">fc::ecc::public_key_data</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="285" column="1" bodyfile="libraries/protocol/types.cpp" bodystart="37" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1public__key__type_1a4cdb35f9db563561eadbe8d42d0a8f5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::protocol::public_key_type::public_key_type</definition>
        <argsstring>(const fc::ecc::public_key &amp;pubkey)</argsstring>
        <name>public_key_type</name>
        <param>
          <type>const <ref refid="classfc_1_1ecc_1_1public__key" kindref="compound">fc::ecc::public_key</ref> &amp;</type>
          <declname>pubkey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="286" column="1" bodyfile="libraries/protocol/types.cpp" bodystart="40" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1public__key__type_1a750b5c2929abc7f8106791a25e76249e" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::protocol::public_key_type::public_key_type</definition>
        <argsstring>(const std::string &amp;base58str)</argsstring>
        <name>public_key_type</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>base58str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="287" column="1" bodyfile="libraries/protocol/types.cpp" bodystart="43" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1public__key__type_1aa167a5a5a2c73ff0c0f0f3d255592cdf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::protocol::public_key_type::operator fc::ecc::public_key_data</definition>
        <argsstring>() const</argsstring>
        <name>operator fc::ecc::public_key_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="288" column="1" bodyfile="libraries/protocol/types.cpp" bodystart="57" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1public__key__type_1ab77b28cf07dde21c39ac3b68e4f11f9c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::protocol::public_key_type::operator fc::ecc::public_key</definition>
        <argsstring>() const</argsstring>
        <name>operator fc::ecc::public_key</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="289" column="1" bodyfile="libraries/protocol/types.cpp" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1public__key__type_1abc2929e6586e4202497e6d067092dc35" prot="public" static="no" const="yes" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::protocol::public_key_type::operator std::string</definition>
        <argsstring>() const</argsstring>
        <name>operator std::string</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="290" column="1" bodyfile="libraries/protocol/types.cpp" bodystart="67" bodyend="74"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structgraphene_1_1protocol_1_1public__key__type_1ae45fc6ccbbe67e543035c2e029c11d9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const public_key_type &amp;p1, const fc::ecc::public_key &amp;p2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1public__key__type" kindref="compound">public_key_type</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1ecc_1_1public__key" kindref="compound">fc::ecc::public_key</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="291" column="1" bodyfile="libraries/protocol/types.cpp" bodystart="76" bodyend="79"/>
      </memberdef>
      <memberdef kind="friend" id="structgraphene_1_1protocol_1_1public__key__type_1a250831242b09f812d0623bdd6f2c81b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const public_key_type &amp;p1, const public_key_type &amp;p2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1public__key__type" kindref="compound">public_key_type</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1public__key__type" kindref="compound">public_key_type</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="292" column="1" bodyfile="libraries/protocol/types.cpp" bodystart="81" bodyend="84"/>
      </memberdef>
      <memberdef kind="friend" id="structgraphene_1_1protocol_1_1public__key__type_1a74a83df5416e37eed8ecc6fd8955ae14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const public_key_type &amp;p1, const public_key_type &amp;p2)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1public__key__type" kindref="compound">public_key_type</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1public__key__type" kindref="compound">public_key_type</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="293" column="1" bodyfile="libraries/protocol/types.cpp" bodystart="86" bodyend="89"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="6368">
        <label>fc::zero_initialized_array&lt; unsigned char, 33 &gt;</label>
        <link refid="classfc_1_1zero__initialized__array"/>
      </node>
      <node id="6367">
        <label>graphene::protocol::public_key_type</label>
        <link refid="structgraphene_1_1protocol_1_1public__key__type"/>
        <childnode refid="6368" relation="usage">
          <edgelabel>key_data</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="277" column="1" bodyfile="libraries/protocol/include/graphene/protocol/types.hpp" bodystart="277" bodyend="294"/>
    <listofallmembers>
      <member refid="structgraphene_1_1protocol_1_1public__key__type_1a2be7525f8b91c5e1b858f3d64e32707d" prot="public" virt="non-virtual"><scope>graphene::protocol::public_key_type</scope><name>key_data</name></member>
      <member refid="structgraphene_1_1protocol_1_1public__key__type_1ab77b28cf07dde21c39ac3b68e4f11f9c" prot="public" virt="non-virtual"><scope>graphene::protocol::public_key_type</scope><name>operator fc::ecc::public_key</name></member>
      <member refid="structgraphene_1_1protocol_1_1public__key__type_1aa167a5a5a2c73ff0c0f0f3d255592cdf" prot="public" virt="non-virtual"><scope>graphene::protocol::public_key_type</scope><name>operator fc::ecc::public_key_data</name></member>
      <member refid="structgraphene_1_1protocol_1_1public__key__type_1abc2929e6586e4202497e6d067092dc35" prot="public" virt="non-virtual"><scope>graphene::protocol::public_key_type</scope><name>operator std::string</name></member>
      <member refid="structgraphene_1_1protocol_1_1public__key__type_1a74a83df5416e37eed8ecc6fd8955ae14" prot="public" virt="non-virtual"><scope>graphene::protocol::public_key_type</scope><name>operator!=</name></member>
      <member refid="structgraphene_1_1protocol_1_1public__key__type_1ae45fc6ccbbe67e543035c2e029c11d9a" prot="public" virt="non-virtual"><scope>graphene::protocol::public_key_type</scope><name>operator==</name></member>
      <member refid="structgraphene_1_1protocol_1_1public__key__type_1a250831242b09f812d0623bdd6f2c81b3" prot="public" virt="non-virtual"><scope>graphene::protocol::public_key_type</scope><name>operator==</name></member>
      <member refid="structgraphene_1_1protocol_1_1public__key__type_1a22259e15681273389e9909e952181e18" prot="public" virt="non-virtual"><scope>graphene::protocol::public_key_type</scope><name>public_key_type</name></member>
      <member refid="structgraphene_1_1protocol_1_1public__key__type_1ae57be1b1f46292783be62fa84f201824" prot="public" virt="non-virtual"><scope>graphene::protocol::public_key_type</scope><name>public_key_type</name></member>
      <member refid="structgraphene_1_1protocol_1_1public__key__type_1a4cdb35f9db563561eadbe8d42d0a8f5a" prot="public" virt="non-virtual"><scope>graphene::protocol::public_key_type</scope><name>public_key_type</name></member>
      <member refid="structgraphene_1_1protocol_1_1public__key__type_1a750b5c2929abc7f8106791a25e76249e" prot="public" virt="non-virtual"><scope>graphene::protocol::public_key_type</scope><name>public_key_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
