<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classfc_1_1variant" kind="class" language="C++" prot="public">
    <compoundname>fc::variant</compoundname>
    <includes refid="variant_8hpp" local="no">variant.hpp</includes>
    <innerclass refid="classfc_1_1variant_1_1visitor" prot="public">fc::variant::visitor</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classfc_1_1variant_1a8e472a4f69eccec5336dde2646c69c5f" prot="public" static="no">
        <name>type_id</name>
        <enumvalue id="classfc_1_1variant_1a8e472a4f69eccec5336dde2646c69c5fa5e16cde26441090f51ebd51c04d7a185" prot="public">
          <name>null_type</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classfc_1_1variant_1a8e472a4f69eccec5336dde2646c69c5fab2547aa70d744fdd14790e31df14bbe7" prot="public">
          <name>int64_type</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classfc_1_1variant_1a8e472a4f69eccec5336dde2646c69c5fa99f1bd3c719716a47670a71a406eff6c" prot="public">
          <name>uint64_type</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classfc_1_1variant_1a8e472a4f69eccec5336dde2646c69c5fa6c6595f9a12c6ca1664b2e5ad286bce9" prot="public">
          <name>double_type</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classfc_1_1variant_1a8e472a4f69eccec5336dde2646c69c5fafd4bc66170646a108792cdb339b23872" prot="public">
          <name>bool_type</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classfc_1_1variant_1a8e472a4f69eccec5336dde2646c69c5fa23b1f70051406849b91e76a91ab291e2" prot="public">
          <name>string_type</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classfc_1_1variant_1a8e472a4f69eccec5336dde2646c69c5faaf4b658450fa70459033b77c0cae75af" prot="public">
          <name>array_type</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classfc_1_1variant_1a8e472a4f69eccec5336dde2646c69c5fa44a37e1c4fe41b08ad5ea8ef8f480ecf" prot="public">
          <name>object_type</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classfc_1_1variant_1a8e472a4f69eccec5336dde2646c69c5fa57823fd7445ab1ebc8571811e76de5f5" prot="public">
          <name>blob_type</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="202" column="1" bodyfile="libraries/fc/include/fc/variant.hpp" bodystart="201" bodyend="212"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classfc_1_1variant_1a2c404100443f6bb59d1111a4a9e81a0d" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double fc::variant::_data</definition>
        <argsstring></argsstring>
        <name>_data</name>
        <briefdescription>
<para>Aligned according to double requirements. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="374" column="1" bodyfile="libraries/fc/include/fc/variant.hpp" bodystart="374" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classfc_1_1variant_1a5090657ca535e80faebf1fe72242cbbf" prot="private" static="no" mutable="no">
        <type>char</type>
        <definition>char fc::variant::_type[sizeof(void *)]</definition>
        <argsstring>[sizeof(void *)]</argsstring>
        <name>_type</name>
        <briefdescription>
<para>pad to void* size </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="375" column="1" bodyfile="libraries/fc/include/fc/variant.hpp" bodystart="375" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classfc_1_1variant_1ab18b9c0de85df3571204f86805bf6c5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::variant::variant</definition>
        <argsstring>()</argsstring>
        <name>variant</name>
        <briefdescription>
<para>Constructs a null_type variant. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="215" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="30" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1a46bbbb7cb665e68b4f823bdbae212d86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::variant::variant</definition>
        <argsstring>(std::nullptr_t, uint32_t max_depth=1)</argsstring>
        <name>variant</name>
        <param>
          <type>std::nullptr_t</type>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Constructs a null_type variant. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="217" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="35" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1a852b1c9cd9f40f7a0ec03ff09954ce2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::variant::variant</definition>
        <argsstring>(const char *str, uint32_t max_depth=1)</argsstring>
        <name>variant</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>- UTF8 string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_depth</parametername>
</parameternamelist>
<parameterdescription>
<para>- the maximum depth to recurse into </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="221" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="120" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1a244f02b7abe77cf1eeec1399c8c26d1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::variant::variant</definition>
        <argsstring>(char *str, uint32_t max_depth=1)</argsstring>
        <name>variant</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="222" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="114" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1a65d38e7daaf4164e10e7934e11429eb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::variant::variant</definition>
        <argsstring>(wchar_t *str, uint32_t max_depth=1)</argsstring>
        <name>variant</name>
        <param>
          <type>wchar_t *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="223" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="127" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1a195ced99c2b898c2307dc567bf0722e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::variant::variant</definition>
        <argsstring>(const wchar_t *str, uint32_t max_depth=1)</argsstring>
        <name>variant</name>
        <param>
          <type>const wchar_t *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="224" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="138" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1aaf9b9ebdb84d63cb19d1d8c3f3de3522" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::variant::variant</definition>
        <argsstring>(float val, uint32_t max_depth=1)</argsstring>
        <name>variant</name>
        <param>
          <type>float</type>
          <declname>val</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="225" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="96" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1a66672193cf0b9c66900ffa2debc50b2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::variant::variant</definition>
        <argsstring>(uint8_t val, uint32_t max_depth=1)</argsstring>
        <name>variant</name>
        <param>
          <type>uint8_t</type>
          <declname>val</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="226" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="40" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1aa366086788dca17c78eefa552af6e616" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::variant::variant</definition>
        <argsstring>(int8_t val, uint32_t max_depth=1)</argsstring>
        <name>variant</name>
        <param>
          <type>int8_t</type>
          <declname>val</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="227" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="46" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1a8c9eafc696312c6faca833fc55e14e91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::variant::variant</definition>
        <argsstring>(uint16_t val, uint32_t max_depth=1)</argsstring>
        <name>variant</name>
        <param>
          <type>uint16_t</type>
          <declname>val</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="228" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="52" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1af906d3ff0571bae3fd9e0f6d63976239" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::variant::variant</definition>
        <argsstring>(int16_t val, uint32_t max_depth=1)</argsstring>
        <name>variant</name>
        <param>
          <type>int16_t</type>
          <declname>val</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="229" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="58" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1ad37a8d61e8431c47398202221baffe9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::variant::variant</definition>
        <argsstring>(uint32_t val, uint32_t max_depth=1)</argsstring>
        <name>variant</name>
        <param>
          <type>uint32_t</type>
          <declname>val</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="230" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="64" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1a62cd441c3b55023220607373f96bf53b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::variant::variant</definition>
        <argsstring>(int32_t val, uint32_t max_depth=1)</argsstring>
        <name>variant</name>
        <param>
          <type>int32_t</type>
          <declname>val</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="231" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="70" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1ad31c68079c4fbdef6ed6cc84febfb66d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::variant::variant</definition>
        <argsstring>(uint64_t val, uint32_t max_depth=1)</argsstring>
        <name>variant</name>
        <param>
          <type>uint64_t</type>
          <declname>val</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="232" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="76" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1af4119875579d0e5b28756f117103049c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::variant::variant</definition>
        <argsstring>(int64_t val, uint32_t max_depth=1)</argsstring>
        <name>variant</name>
        <param>
          <type>int64_t</type>
          <declname>val</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="236" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="90" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1a176d99674a4ac7ec05a2dd350feda25a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::variant::variant</definition>
        <argsstring>(double val, uint32_t max_depth=1)</argsstring>
        <name>variant</name>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="237" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="102" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1a6ff171de5e14928015be43646ec9201c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::variant::variant</definition>
        <argsstring>(bool val, uint32_t max_depth=1)</argsstring>
        <name>variant</name>
        <param>
          <type>bool</type>
          <declname>val</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="238" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="108" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1a001beffb33e1527b336555ce2f7c082c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::variant::variant</definition>
        <argsstring>(blob val, uint32_t max_depth=1)</argsstring>
        <name>variant</name>
        <param>
          <type><ref refid="structfc_1_1blob" kindref="compound">blob</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="239" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="153" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1ad6d9b871d2b6334234d90bb99280e8f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::variant::variant</definition>
        <argsstring>(std::string val, uint32_t max_depth=1)</argsstring>
        <name>variant</name>
        <param>
          <type>std::string</type>
          <declname>val</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="240" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="148" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1ae1551800e5182ad627b6933fd682a1f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::variant::variant</definition>
        <argsstring>(variant_object, uint32_t max_depth=1)</argsstring>
        <name>variant</name>
        <param>
          <type><ref refid="classfc_1_1variant__object" kindref="compound">variant_object</ref></type>
          <defname>obj</defname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="241" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="159" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1a878ebf8db19f766efa9778cf2540c806" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::variant::variant</definition>
        <argsstring>(mutable_variant_object, uint32_t max_depth=1)</argsstring>
        <name>variant</name>
        <param>
          <type><ref refid="classfc_1_1mutable__variant__object" kindref="compound">mutable_variant_object</ref></type>
          <defname>obj</defname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="242" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="164" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1a7588f79a7a7531659c66d44830230df8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::variant::variant</definition>
        <argsstring>(variants, uint32_t max_depth=1)</argsstring>
        <name>variant</name>
        <param>
          <type><ref refid="namespacefc_1a2e5e6bdb302dfb79e684336f3fbbd8bc" kindref="member">variants</ref></type>
          <defname>arr</defname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="243" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="170" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1a4f5493c4a5be546f03b23e2d91e29e90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::variant::variant</definition>
        <argsstring>(const variant &amp;, uint32_t max_depth=1)</argsstring>
        <name>variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <defname>v</defname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="244" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="200" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1a6422d0a8dbe4d3b42ca12c2455bf2b38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::variant::variant</definition>
        <argsstring>(variant &amp;&amp;, uint32_t max_depth=1)</argsstring>
        <name>variant</name>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;&amp;</type>
          <defname>v</defname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="245" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="224" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1a0d4a392a86d2aae2bab4d21ee368c2cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::variant::~variant</definition>
        <argsstring>()</argsstring>
        <name>~variant</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="246" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="230" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1a327534c432bafeffa193555109c2dd6f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::variant::visit</definition>
        <argsstring>(const visitor &amp;v) const</argsstring>
        <name>visit</name>
        <param>
          <type>const <ref refid="classfc_1_1variant_1_1visitor" kindref="compound">visitor</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="266" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="271" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1afaae1df286ff97c83301eda21dbd51ea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1variant_1a8e472a4f69eccec5336dde2646c69c5f" kindref="member">type_id</ref></type>
        <definition>variant::type_id fc::variant::get_type</definition>
        <argsstring>() const</argsstring>
        <name>get_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="268" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="304" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1a531450deac912ee3e1bc606422714a68" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::variant::is_null</definition>
        <argsstring>() const</argsstring>
        <name>is_null</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="270" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="309" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1ac51c0354c1fcef2cc5ce43a5062e8de6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::variant::is_string</definition>
        <argsstring>() const</argsstring>
        <name>is_string</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="271" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="314" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1a99a395b36d39966512f7ac52473aeaaf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::variant::is_bool</definition>
        <argsstring>() const</argsstring>
        <name>is_bool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="272" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="318" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1a2ec4c0d3b694adcf41d846b8af9b610a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::variant::is_int64</definition>
        <argsstring>() const</argsstring>
        <name>is_int64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="273" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="330" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1ac06c2b8b4af18cefcaee6cd91b29b293" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::variant::is_uint64</definition>
        <argsstring>() const</argsstring>
        <name>is_uint64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="274" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="326" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1adf93b827afeac79e87d6a7e84341d6f2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::variant::is_double</definition>
        <argsstring>() const</argsstring>
        <name>is_double</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="275" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="322" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1aa542b555ee260a07e61a2d38ff765d87" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::variant::is_object</definition>
        <argsstring>() const</argsstring>
        <name>is_object</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="276" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="363" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1a102129c61e671e93d0d6899976fffc96" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::variant::is_array</definition>
        <argsstring>() const</argsstring>
        <name>is_array</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="277" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="368" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1adfc583823fe5ba9e4f7f1a7720796535" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::variant::is_blob</definition>
        <argsstring>() const</argsstring>
        <name>is_blob</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="278" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="372" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1a5c2238ce8bbeb5dc454134ec92624aab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::variant::is_numeric</definition>
        <argsstring>() const</argsstring>
        <name>is_numeric</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>int64, uint64, double,bool </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="282" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="348" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1a59f43987b39a2e02b9699e917f5cc3d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::variant::is_integer</definition>
        <argsstring>() const</argsstring>
        <name>is_integer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>int64, uint64, bool </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="286" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="335" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1ab5d7877d2c19dbd6ac9eac7a1205dbeb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t fc::variant::as_int64</definition>
        <argsstring>() const</argsstring>
        <name>as_int64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="288" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="377" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1a483bb1f23d9b71ae03e9ca03136ee453" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t fc::variant::as_uint64</definition>
        <argsstring>() const</argsstring>
        <name>as_uint64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="289" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="398" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1a86ffd49f6eec1c0fd16ead01e2735107" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::variant::as_bool</definition>
        <argsstring>() const</argsstring>
        <name>as_bool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="290" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="441" bodyend="467"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1a61f334febee9b226fb077f6da3c52276" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double fc::variant::as_double</definition>
        <argsstring>() const</argsstring>
        <name>as_double</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="291" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="420" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1aa475101b0f2181350d76a2fdc6cf7c76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfc_1_1blob" kindref="compound">blob</ref> &amp;</type>
        <definition>blob &amp; fc::variant::get_blob</definition>
        <argsstring>()</argsstring>
        <name>get_blob</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="293" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="503" bodyend="509"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1ae5eb8afda3a41fc20854875e4d91d5c8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structfc_1_1blob" kindref="compound">blob</ref> &amp;</type>
        <definition>const blob &amp; fc::variant::get_blob</definition>
        <argsstring>() const</argsstring>
        <name>get_blob</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="294" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="510" bodyend="516"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1a026901a2f99914f10aa5c516eca76d40" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfc_1_1blob" kindref="compound">blob</ref></type>
        <definition>blob fc::variant::as_blob</definition>
        <argsstring>() const</argsstring>
        <name>as_blob</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="295" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="518" bodyend="541"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1acbd70a93184e4277631f2a261acb707c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>string fc::variant::as_string</definition>
        <argsstring>() const</argsstring>
        <name>as_string</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert&apos;s double, ints, bools, etc to a string <parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>if</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classfc_1_1variant_1afaae1df286ff97c83301eda21dbd51ea" kindref="member">get_type()</ref> == array_type | <ref refid="classfc_1_1variant_1afaae1df286ff97c83301eda21dbd51ea" kindref="member">get_type()</ref> == object_type </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="300" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="469" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1a2ca9f4d2feb8c9743da4128b18bfa886" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const string &amp; fc::variant::get_string</definition>
        <argsstring>() const</argsstring>
        <name>get_string</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="classfc_1_1variant_1afaae1df286ff97c83301eda21dbd51ea" kindref="member">get_type()</ref> == string_type </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="303" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="575" bodyend="580"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1aea83c87e4e1b1e185f57717b4bd683a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacefc_1a2e5e6bdb302dfb79e684336f3fbbd8bc" kindref="member">variants</ref> &amp;</type>
        <definition>variants &amp; fc::variant::get_array</definition>
        <argsstring>()</argsstring>
        <name>get_array</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>if</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classfc_1_1variant_1afaae1df286ff97c83301eda21dbd51ea" kindref="member">get_type()</ref> != array_type | null_type </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="306" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="496" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1a5cb44834253397df276f5107cf9211b6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="namespacefc_1a2e5e6bdb302dfb79e684336f3fbbd8bc" kindref="member">variants</ref> &amp;</type>
        <definition>const variants &amp; fc::variant::get_array</definition>
        <argsstring>() const</argsstring>
        <name>get_array</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>if</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classfc_1_1variant_1afaae1df286ff97c83301eda21dbd51ea" kindref="member">get_type()</ref> != array_type </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="309" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="545" bodyend="550"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1a17a7054a10963360c6a14d60f6e30128" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1variant__object" kindref="compound">variant_object</ref> &amp;</type>
        <definition>variant_object &amp; fc::variant::get_object</definition>
        <argsstring>()</argsstring>
        <name>get_object</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>if</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classfc_1_1variant_1afaae1df286ff97c83301eda21dbd51ea" kindref="member">get_type()</ref> != object_type | null_type </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="312" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="554" bodyend="559"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1a3efce335057e900b569af78acb1cad6c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classfc_1_1variant__object" kindref="compound">variant_object</ref> &amp;</type>
        <definition>const variant_object &amp; fc::variant::get_object</definition>
        <argsstring>() const</argsstring>
        <name>get_object</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>if</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classfc_1_1variant_1afaae1df286ff97c83301eda21dbd51ea" kindref="member">get_type()</ref> != object_type </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="315" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="583" bodyend="588"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1afc8519b6b2c1c192506a10289196cbf5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
        <definition>const variant &amp; fc::variant::operator[]</definition>
        <argsstring>(const char *) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const char *</type>
          <defname>key</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="classfc_1_1variant_1aa542b555ee260a07e61a2d38ff765d87" kindref="member">is_object()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="318" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="561" bodyend="564"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1af88be0a0533f9d58f36d88339d42f9fd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
        <definition>const variant &amp; fc::variant::operator[]</definition>
        <argsstring>(size_t pos) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>size_t</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="classfc_1_1variant_1a102129c61e671e93d0d6899976fffc96" kindref="member">is_array()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="320" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="565" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1a67f6416c5dd1b9c53b4b20b73f9cd117" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t fc::variant::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="classfc_1_1variant_1a102129c61e671e93d0d6899976fffc96" kindref="member">is_array()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="322" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="570" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1aaaa1004a38092f16780a909fcc5e1f3c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T fc::variant::as</definition>
        <argsstring>(uint32_t max_depth) const</argsstring>
        <name>as</name>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>_types that use non-intrusive variant conversion can implement the following method to implement conversion from variant to T.</para><para><computeroutput> void from_variant( const Variant&amp; var, T&amp; val, uint32_t max_depth ) </computeroutput></para><para>The above form is not always convienant, so the this templated method is used to enable conversion from Variants to other types. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="337" column="1" bodyfile="libraries/fc/include/fc/variant.hpp" bodystart="337" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1ac926782d28fddeb093527e7f93971a06" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::variant::as</definition>
        <argsstring>(T &amp;v, uint32_t max_depth) const</argsstring>
        <name>as</name>
        <param>
          <type>T &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="345" column="1" bodyfile="libraries/fc/include/fc/variant.hpp" bodystart="345" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1a0dca5e5489ee3baac5bdab51417d9e02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
        <definition>variant &amp; fc::variant::operator=</definition>
        <argsstring>(variant &amp;&amp;v)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="350" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="235" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1af0367a0aa45efe02b3db8e17ce94e43e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
        <definition>variant &amp; fc::variant::operator=</definition>
        <argsstring>(const variant &amp;v)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="351" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="244" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1aec8b90765a89a37567b4b50aa0f61928" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
        <definition>variant&amp; fc::variant::operator=</definition>
        <argsstring>(T &amp;&amp;v)</argsstring>
        <name>operator=</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="354" column="1" bodyfile="libraries/fc/include/fc/variant.hpp" bodystart="354" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1a79a34980634bdeef0925549499578abf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>fc::variant::variant</definition>
        <argsstring>(const optional&lt; T &gt; &amp;v, uint32_t max_depth)</argsstring>
        <name>variant</name>
        <param>
          <type>const <ref refid="classfc_1_1optional" kindref="compound">optional</ref>&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="360" column="1" bodyfile="libraries/fc/include/fc/variant.hpp" bodystart="360" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1afc6cc8b866e32adf7b2ed664515c7496" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>fc::variant::variant</definition>
        <argsstring>(const T &amp;val, uint32_t max_depth)</argsstring>
        <name>variant</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="368" column="1" bodyfile="libraries/fc/include/fc/variant.hpp" bodystart="580" bodyend="584"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1variant_1a201c1ea686618f06d5839e541da3d641" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::variant::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="371" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="181" bodyend="198"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classfc_1_1variant_1ad018b1546087786204d81cc7d22afc32" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::variant::init</definition>
        <argsstring>()</argsstring>
        <name>init</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="373" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>stores null, int64, uint64, double, bool, string, std::vector&lt;variant&gt;, and <ref refid="classfc_1_1variant__object" kindref="compound">variant_object</ref>&apos;s. </para>    </briefdescription>
    <detaileddescription>
<para>variant&apos;s allocate everything but strings, arrays, and objects on the stack and are &apos;move aware&apos; for values allocated on the heap.</para><para>Memory usage on 64 bit systems is 16 bytes and 12 bytes on 32 bit systems. </para>    </detaileddescription>
    <location file="libraries/fc/include/fc/variant.hpp" line="199" column="1" bodyfile="libraries/fc/include/fc/variant.hpp" bodystart="198" bodyend="376"/>
    <listofallmembers>
      <member refid="classfc_1_1variant_1a2c404100443f6bb59d1111a4a9e81a0d" prot="private" virt="non-virtual"><scope>fc::variant</scope><name>_data</name></member>
      <member refid="classfc_1_1variant_1a5090657ca535e80faebf1fe72242cbbf" prot="private" virt="non-virtual"><scope>fc::variant</scope><name>_type</name></member>
      <member refid="classfc_1_1variant_1a8e472a4f69eccec5336dde2646c69c5faaf4b658450fa70459033b77c0cae75af" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>array_type</name></member>
      <member refid="classfc_1_1variant_1aaaa1004a38092f16780a909fcc5e1f3c" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>as</name></member>
      <member refid="classfc_1_1variant_1ac926782d28fddeb093527e7f93971a06" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>as</name></member>
      <member refid="classfc_1_1variant_1a026901a2f99914f10aa5c516eca76d40" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>as_blob</name></member>
      <member refid="classfc_1_1variant_1a86ffd49f6eec1c0fd16ead01e2735107" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>as_bool</name></member>
      <member refid="classfc_1_1variant_1a61f334febee9b226fb077f6da3c52276" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>as_double</name></member>
      <member refid="classfc_1_1variant_1ab5d7877d2c19dbd6ac9eac7a1205dbeb" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>as_int64</name></member>
      <member refid="classfc_1_1variant_1acbd70a93184e4277631f2a261acb707c" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>as_string</name></member>
      <member refid="classfc_1_1variant_1a483bb1f23d9b71ae03e9ca03136ee453" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>as_uint64</name></member>
      <member refid="classfc_1_1variant_1a8e472a4f69eccec5336dde2646c69c5fa57823fd7445ab1ebc8571811e76de5f5" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>blob_type</name></member>
      <member refid="classfc_1_1variant_1a8e472a4f69eccec5336dde2646c69c5fafd4bc66170646a108792cdb339b23872" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>bool_type</name></member>
      <member refid="classfc_1_1variant_1a201c1ea686618f06d5839e541da3d641" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>clear</name></member>
      <member refid="classfc_1_1variant_1a8e472a4f69eccec5336dde2646c69c5fa6c6595f9a12c6ca1664b2e5ad286bce9" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>double_type</name></member>
      <member refid="classfc_1_1variant_1aea83c87e4e1b1e185f57717b4bd683a5" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>get_array</name></member>
      <member refid="classfc_1_1variant_1a5cb44834253397df276f5107cf9211b6" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>get_array</name></member>
      <member refid="classfc_1_1variant_1aa475101b0f2181350d76a2fdc6cf7c76" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>get_blob</name></member>
      <member refid="classfc_1_1variant_1ae5eb8afda3a41fc20854875e4d91d5c8" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>get_blob</name></member>
      <member refid="classfc_1_1variant_1a17a7054a10963360c6a14d60f6e30128" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>get_object</name></member>
      <member refid="classfc_1_1variant_1a3efce335057e900b569af78acb1cad6c" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>get_object</name></member>
      <member refid="classfc_1_1variant_1a2ca9f4d2feb8c9743da4128b18bfa886" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>get_string</name></member>
      <member refid="classfc_1_1variant_1afaae1df286ff97c83301eda21dbd51ea" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>get_type</name></member>
      <member refid="classfc_1_1variant_1ad018b1546087786204d81cc7d22afc32" prot="private" virt="non-virtual"><scope>fc::variant</scope><name>init</name></member>
      <member refid="classfc_1_1variant_1a8e472a4f69eccec5336dde2646c69c5fab2547aa70d744fdd14790e31df14bbe7" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>int64_type</name></member>
      <member refid="classfc_1_1variant_1a102129c61e671e93d0d6899976fffc96" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>is_array</name></member>
      <member refid="classfc_1_1variant_1adfc583823fe5ba9e4f7f1a7720796535" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>is_blob</name></member>
      <member refid="classfc_1_1variant_1a99a395b36d39966512f7ac52473aeaaf" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>is_bool</name></member>
      <member refid="classfc_1_1variant_1adf93b827afeac79e87d6a7e84341d6f2" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>is_double</name></member>
      <member refid="classfc_1_1variant_1a2ec4c0d3b694adcf41d846b8af9b610a" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>is_int64</name></member>
      <member refid="classfc_1_1variant_1a59f43987b39a2e02b9699e917f5cc3d2" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>is_integer</name></member>
      <member refid="classfc_1_1variant_1a531450deac912ee3e1bc606422714a68" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>is_null</name></member>
      <member refid="classfc_1_1variant_1a5c2238ce8bbeb5dc454134ec92624aab" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>is_numeric</name></member>
      <member refid="classfc_1_1variant_1aa542b555ee260a07e61a2d38ff765d87" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>is_object</name></member>
      <member refid="classfc_1_1variant_1ac51c0354c1fcef2cc5ce43a5062e8de6" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>is_string</name></member>
      <member refid="classfc_1_1variant_1ac06c2b8b4af18cefcaee6cd91b29b293" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>is_uint64</name></member>
      <member refid="classfc_1_1variant_1a8e472a4f69eccec5336dde2646c69c5fa5e16cde26441090f51ebd51c04d7a185" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>null_type</name></member>
      <member refid="classfc_1_1variant_1a8e472a4f69eccec5336dde2646c69c5fa44a37e1c4fe41b08ad5ea8ef8f480ecf" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>object_type</name></member>
      <member refid="classfc_1_1variant_1a0dca5e5489ee3baac5bdab51417d9e02" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>operator=</name></member>
      <member refid="classfc_1_1variant_1af0367a0aa45efe02b3db8e17ce94e43e" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>operator=</name></member>
      <member refid="classfc_1_1variant_1aec8b90765a89a37567b4b50aa0f61928" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>operator=</name></member>
      <member refid="classfc_1_1variant_1afc8519b6b2c1c192506a10289196cbf5" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>operator[]</name></member>
      <member refid="classfc_1_1variant_1af88be0a0533f9d58f36d88339d42f9fd" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>operator[]</name></member>
      <member refid="classfc_1_1variant_1a67f6416c5dd1b9c53b4b20b73f9cd117" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>size</name></member>
      <member refid="classfc_1_1variant_1a8e472a4f69eccec5336dde2646c69c5fa23b1f70051406849b91e76a91ab291e2" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>string_type</name></member>
      <member refid="classfc_1_1variant_1a8e472a4f69eccec5336dde2646c69c5f" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>type_id</name></member>
      <member refid="classfc_1_1variant_1a8e472a4f69eccec5336dde2646c69c5fa99f1bd3c719716a47670a71a406eff6c" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>uint64_type</name></member>
      <member refid="classfc_1_1variant_1ab18b9c0de85df3571204f86805bf6c5e" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>variant</name></member>
      <member refid="classfc_1_1variant_1a46bbbb7cb665e68b4f823bdbae212d86" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>variant</name></member>
      <member refid="classfc_1_1variant_1a852b1c9cd9f40f7a0ec03ff09954ce2c" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>variant</name></member>
      <member refid="classfc_1_1variant_1a244f02b7abe77cf1eeec1399c8c26d1c" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>variant</name></member>
      <member refid="classfc_1_1variant_1a65d38e7daaf4164e10e7934e11429eb9" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>variant</name></member>
      <member refid="classfc_1_1variant_1a195ced99c2b898c2307dc567bf0722e9" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>variant</name></member>
      <member refid="classfc_1_1variant_1aaf9b9ebdb84d63cb19d1d8c3f3de3522" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>variant</name></member>
      <member refid="classfc_1_1variant_1a66672193cf0b9c66900ffa2debc50b2a" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>variant</name></member>
      <member refid="classfc_1_1variant_1aa366086788dca17c78eefa552af6e616" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>variant</name></member>
      <member refid="classfc_1_1variant_1a8c9eafc696312c6faca833fc55e14e91" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>variant</name></member>
      <member refid="classfc_1_1variant_1af906d3ff0571bae3fd9e0f6d63976239" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>variant</name></member>
      <member refid="classfc_1_1variant_1ad37a8d61e8431c47398202221baffe9d" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>variant</name></member>
      <member refid="classfc_1_1variant_1a62cd441c3b55023220607373f96bf53b" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>variant</name></member>
      <member refid="classfc_1_1variant_1ad31c68079c4fbdef6ed6cc84febfb66d" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>variant</name></member>
      <member refid="classfc_1_1variant_1af4119875579d0e5b28756f117103049c" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>variant</name></member>
      <member refid="classfc_1_1variant_1a176d99674a4ac7ec05a2dd350feda25a" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>variant</name></member>
      <member refid="classfc_1_1variant_1a6ff171de5e14928015be43646ec9201c" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>variant</name></member>
      <member refid="classfc_1_1variant_1a001beffb33e1527b336555ce2f7c082c" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>variant</name></member>
      <member refid="classfc_1_1variant_1ad6d9b871d2b6334234d90bb99280e8f3" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>variant</name></member>
      <member refid="classfc_1_1variant_1ae1551800e5182ad627b6933fd682a1f5" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>variant</name></member>
      <member refid="classfc_1_1variant_1a878ebf8db19f766efa9778cf2540c806" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>variant</name></member>
      <member refid="classfc_1_1variant_1a7588f79a7a7531659c66d44830230df8" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>variant</name></member>
      <member refid="classfc_1_1variant_1a4f5493c4a5be546f03b23e2d91e29e90" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>variant</name></member>
      <member refid="classfc_1_1variant_1a6422d0a8dbe4d3b42ca12c2455bf2b38" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>variant</name></member>
      <member refid="classfc_1_1variant_1a79a34980634bdeef0925549499578abf" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>variant</name></member>
      <member refid="classfc_1_1variant_1afc6cc8b866e32adf7b2ed664515c7496" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>variant</name></member>
      <member refid="classfc_1_1variant_1a327534c432bafeffa193555109c2dd6f" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>visit</name></member>
      <member refid="classfc_1_1variant_1a0d4a392a86d2aae2bab4d21ee368c2cb" prot="public" virt="non-virtual"><scope>fc::variant</scope><name>~variant</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
