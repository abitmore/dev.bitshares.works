<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structgraphene_1_1protocol_1_1variant__assertion_3_01fc_1_1optional_3_01static__variant_3_01_types_8_8_8_01_4_01_4_01_4" kind="struct" language="C++" prot="public">
    <compoundname>graphene::protocol::variant_assertion&lt; fc::optional&lt; static_variant&lt; Types... &gt; &gt; &gt;</compoundname>
    <includes refid="restriction__predicate_8hxx" local="no">restriction_predicate.hxx</includes>
    <templateparamlist>
      <param>
        <type>typename...</type>
        <declname>Types</declname>
        <defname>Types</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structgraphene_1_1protocol_1_1variant__assertion_3_01fc_1_1optional_3_01static__variant_3_01_types_8_8_8_01_4_01_4_01_4_1ab13e46e25a461d4f32fbdf27fccf2f88" prot="public" static="no">
        <type><ref refid="classfc_1_1static__variant" kindref="compound">static_variant</ref>&lt; Types... &gt;</type>
        <definition>using graphene::protocol::variant_assertion&lt; fc::optional&lt; static_variant&lt; Types... &gt; &gt; &gt;::Variant =  static_variant&lt;Types...&gt;</definition>
        <argsstring></argsstring>
        <name>Variant</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/restriction_predicate.hxx" line="430" column="1" bodyfile="libraries/protocol/custom_authorities/restriction_predicate.hxx" bodystart="430" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structgraphene_1_1protocol_1_1variant__assertion_3_01fc_1_1optional_3_01static__variant_3_01_types_8_8_8_01_4_01_4_01_4_1a4381b4fd9c77e730e2102832f38c25f4" prot="public" static="no">
        <type><ref refid="classfc_1_1optional" kindref="compound">fc::optional</ref>&lt; <ref refid="structgraphene_1_1protocol_1_1variant__assertion_3_01fc_1_1optional_3_01static__variant_3_01_types_8_8_8_01_4_01_4_01_4_1ab13e46e25a461d4f32fbdf27fccf2f88" kindref="member">Variant</ref> &gt;</type>
        <definition>using graphene::protocol::variant_assertion&lt; fc::optional&lt; static_variant&lt; Types... &gt; &gt; &gt;::Optional =  fc::optional&lt;Variant&gt;</definition>
        <argsstring></argsstring>
        <name>Optional</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/restriction_predicate.hxx" line="431" column="1" bodyfile="libraries/protocol/custom_authorities/restriction_predicate.hxx" bodystart="431" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1variant__assertion_3_01fc_1_1optional_3_01static__variant_3_01_types_8_8_8_01_4_01_4_01_4_1ab334e876f3a5446822c090d30a990915" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacegraphene_1_1protocol_1a7253c01693b853bacbc927c3430c9c5f" kindref="member">object_restriction_predicate</ref>&lt; <ref refid="structgraphene_1_1protocol_1_1variant__assertion_3_01fc_1_1optional_3_01static__variant_3_01_types_8_8_8_01_4_01_4_01_4_1a4381b4fd9c77e730e2102832f38c25f4" kindref="member">Optional</ref> &gt;</type>
        <definition>static object_restriction_predicate&lt;Optional&gt; graphene::protocol::variant_assertion&lt; fc::optional&lt; static_variant&lt; Types... &gt; &gt; &gt;::create</definition>
        <argsstring>(restriction::variant_assert_argument_type &amp;&amp;arg)</argsstring>
        <name>create</name>
        <param>
          <type><ref refid="structgraphene_1_1protocol_1_1restriction_1a4793cdff7586b6e4619a64954d9897ca" kindref="member">restriction::variant_assert_argument_type</ref> &amp;&amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/custom_authorities/restriction_predicate.hxx" line="432" column="1" bodyfile="libraries/protocol/custom_authorities/restriction_predicate.hxx" bodystart="432" bodyend="442"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/protocol/custom_authorities/restriction_predicate.hxx" line="429" column="1" bodyfile="libraries/protocol/custom_authorities/restriction_predicate.hxx" bodystart="429" bodyend="443"/>
    <listofallmembers>
      <member refid="structgraphene_1_1protocol_1_1variant__assertion_3_01fc_1_1optional_3_01static__variant_3_01_types_8_8_8_01_4_01_4_01_4_1ab334e876f3a5446822c090d30a990915" prot="public" virt="non-virtual"><scope>graphene::protocol::variant_assertion&lt; fc::optional&lt; static_variant&lt; Types... &gt; &gt; &gt;</scope><name>create</name></member>
      <member refid="structgraphene_1_1protocol_1_1variant__assertion_3_01fc_1_1optional_3_01static__variant_3_01_types_8_8_8_01_4_01_4_01_4_1a4381b4fd9c77e730e2102832f38c25f4" prot="public" virt="non-virtual"><scope>graphene::protocol::variant_assertion&lt; fc::optional&lt; static_variant&lt; Types... &gt; &gt; &gt;</scope><name>Optional</name></member>
      <member refid="structgraphene_1_1protocol_1_1variant__assertion_3_01fc_1_1optional_3_01static__variant_3_01_types_8_8_8_01_4_01_4_01_4_1ab13e46e25a461d4f32fbdf27fccf2f88" prot="public" virt="non-virtual"><scope>graphene::protocol::variant_assertion&lt; fc::optional&lt; static_variant&lt; Types... &gt; &gt; &gt;</scope><name>Variant</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
