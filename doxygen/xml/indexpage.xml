<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>BitShares Core</title>
    <detaileddescription>
<para><ulink url="https://github.com/bitshares/bitshares-core">BitShares Core</ulink> is the BitShares blockchain node software and command-line wallet software. For UI reference wallet software (browser-based wallet and desktop wallet) visit <ulink url="https://github.com/bitshares/bitshares-ui">BitShares UI</ulink>.</para><para>Visit <ulink url="https://bitshares.org/">BitShares.org</ulink> to learn about BitShares and join the community at <ulink url="https://bitsharestalk.org/">BitSharesTalk.org</ulink>.</para><para>Information for developers can be found in the <ulink url="https://github.com/bitshares/bitshares-core/wiki">Wiki</ulink> and the <ulink url="https://dev.bitshares.works/">BitShares Developer Portal</ulink>. Users interested in how BitShares works can go to the <ulink url="https://how.bitshares.works/">BitShares Documentation</ulink> site.</para><para>Visit <ulink url="https://github.com/bitshares/awesome-bitshares">Awesome BitShares</ulink> to find more resources and links E.G. chat groups, client libraries and extended APIs.</para><para><itemizedlist>
<listitem><para><ulink url="#getting-started">Getting Started</ulink></para></listitem><listitem><para><ulink url="#support">Support</ulink></para></listitem><listitem><para><ulink url="#using-built-in-apis">Using Built-In APIs</ulink></para></listitem><listitem><para><ulink url="#accessing-restrictable-node-api-sets">Accessing restrictable node API sets</ulink></para></listitem><listitem><para><ulink url="#faq">FAQ</ulink></para></listitem><listitem><para><ulink url="#license">License</ulink></para></listitem></itemizedlist>
</para><para><table rows="6" cols="2"><row>
<entry thead="yes"><para>Branch</para></entry><entry thead="yes"><para>Build Status  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>master</computeroutput></para></entry><entry thead="no"><para>[<image type="html" name="badge.svg?branch=master"></image>
](<ulink url="https://github.com/bitshares/bitshares-core/actions?query=workflow%3A">https://github.com/bitshares/bitshares-core/actions?query=workflow%3A</ulink>&quot;macOS&quot;+branch%3Amaster) [<image type="html" name="badge.svg?branch=master"></image>
](<ulink url="https://github.com/bitshares/bitshares-core/actions?query=workflow%3A">https://github.com/bitshares/bitshares-core/actions?query=workflow%3A</ulink>&quot;Ubuntu+Debug&quot;+branch%3Amaster) [<image type="html" name="badge.svg?branch=master"></image>
](<ulink url="https://github.com/bitshares/bitshares-core/actions?query=workflow%3A">https://github.com/bitshares/bitshares-core/actions?query=workflow%3A</ulink>&quot;Ubuntu+Release&quot;+branch%3Amaster) [<image type="html" name="badge.svg?branch=master"></image>
](<ulink url="https://github.com/bitshares/bitshares-core/actions?query=workflow%3A">https://github.com/bitshares/bitshares-core/actions?query=workflow%3A</ulink>&quot;Windows+MinGW64&quot;+branch%3Amaster) <ulink url="https://github.com/bitshares/bitshares-core/actions?query=workflow%3A%22Docker%22+branch%3Amaster"></ulink> </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>develop</computeroutput></para></entry><entry thead="no"><para>[<image type="html" name="badge.svg?branch=develop"></image>
](<ulink url="https://github.com/bitshares/bitshares-core/actions?query=workflow%3A">https://github.com/bitshares/bitshares-core/actions?query=workflow%3A</ulink>&quot;macOS&quot;+branch%3Adevelop) [<image type="html" name="badge.svg?branch=develop"></image>
](<ulink url="https://github.com/bitshares/bitshares-core/actions?query=workflow%3A">https://github.com/bitshares/bitshares-core/actions?query=workflow%3A</ulink>&quot;Ubuntu+Debug&quot;+branch%3Adevelop) [<image type="html" name="badge.svg?branch=develop"></image>
](<ulink url="https://github.com/bitshares/bitshares-core/actions?query=workflow%3A">https://github.com/bitshares/bitshares-core/actions?query=workflow%3A</ulink>&quot;Ubuntu+Release&quot;+branch%3Adevelop) [<image type="html" name="badge.svg?branch=develop"></image>
](<ulink url="https://github.com/bitshares/bitshares-core/actions?query=workflow%3A">https://github.com/bitshares/bitshares-core/actions?query=workflow%3A</ulink>&quot;Windows+MinGW64&quot;+branch%3Adevelop) <ulink url="https://github.com/bitshares/bitshares-core/actions?query=workflow%3A%22Docker%22+branch%3Adevelop"></ulink> </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>hardfork</computeroutput></para></entry><entry thead="no"><para>[<image type="html" name="badge.svg?branch=hardfork"></image>
](<ulink url="https://github.com/bitshares/bitshares-core/actions?query=workflow%3A">https://github.com/bitshares/bitshares-core/actions?query=workflow%3A</ulink>&quot;macOS&quot;+branch%3Ahardfork) [<image type="html" name="badge.svg?branch=hardfork"></image>
](<ulink url="https://github.com/bitshares/bitshares-core/actions?query=workflow%3A">https://github.com/bitshares/bitshares-core/actions?query=workflow%3A</ulink>&quot;Ubuntu+Debug&quot;+branch%3Ahardfork) [<image type="html" name="badge.svg?branch=hardfork"></image>
](<ulink url="https://github.com/bitshares/bitshares-core/actions?query=workflow%3A">https://github.com/bitshares/bitshares-core/actions?query=workflow%3A</ulink>&quot;Ubuntu+Release&quot;+branch%3Ahardfork) [<image type="html" name="badge.svg?branch=hardfork"></image>
](<ulink url="https://github.com/bitshares/bitshares-core/actions?query=workflow%3A">https://github.com/bitshares/bitshares-core/actions?query=workflow%3A</ulink>&quot;Windows+MinGW64&quot;+branch%3Ahardfork) <ulink url="https://github.com/bitshares/bitshares-core/actions?query=workflow%3A%22Docker%22+branch%3Ahardfork"></ulink> </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>testnet</computeroutput></para></entry><entry thead="no"><para>[<image type="html" name="badge.svg?branch=testnet"></image>
](<ulink url="https://github.com/bitshares/bitshares-core/actions?query=workflow%3A">https://github.com/bitshares/bitshares-core/actions?query=workflow%3A</ulink>&quot;macOS&quot;+branch%3Atestnet) [<image type="html" name="badge.svg?branch=testnet"></image>
](<ulink url="https://github.com/bitshares/bitshares-core/actions?query=workflow%3A">https://github.com/bitshares/bitshares-core/actions?query=workflow%3A</ulink>&quot;Ubuntu+Debug&quot;+branch%3Atestnet) [<image type="html" name="badge.svg?branch=testnet"></image>
](<ulink url="https://github.com/bitshares/bitshares-core/actions?query=workflow%3A">https://github.com/bitshares/bitshares-core/actions?query=workflow%3A</ulink>&quot;Ubuntu+Release&quot;+branch%3Atestnet) [<image type="html" name="badge.svg?branch=testnet"></image>
](<ulink url="https://github.com/bitshares/bitshares-core/actions?query=workflow%3A">https://github.com/bitshares/bitshares-core/actions?query=workflow%3A</ulink>&quot;Windows+MinGW64&quot;+branch%3Atestnet) <ulink url="https://github.com/bitshares/bitshares-core/actions?query=workflow%3A%22Docker%22+branch%3Atestnet"></ulink> </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>master</computeroutput> of <computeroutput>bitshares-fc</computeroutput></para></entry><entry thead="no"><para>[<image type="html" name="badge.svg?branch=master"></image>
](<ulink url="https://github.com/bitshares/bitshares-fc/actions?query=workflow%3A">https://github.com/bitshares/bitshares-fc/actions?query=workflow%3A</ulink>&quot;macOS&quot;+branch%3Amaster) [<image type="html" name="badge.svg?branch=master"></image>
](<ulink url="https://github.com/bitshares/bitshares-fc/actions?query=workflow%3A">https://github.com/bitshares/bitshares-fc/actions?query=workflow%3A</ulink>&quot;Ubuntu+Debug&quot;+branch%3Amaster) [<image type="html" name="badge.svg?branch=master"></image>
](<ulink url="https://github.com/bitshares/bitshares-fc/actions?query=workflow%3A">https://github.com/bitshares/bitshares-fc/actions?query=workflow%3A</ulink>&quot;Ubuntu+Release&quot;+branch%3Amaster) </para></entry></row>
</table>
</para><para><heading level="2">Getting Started </heading>
</para><para>Build instructions and additional documentation are available in the <ulink url="https://github.com/bitshares/bitshares-core/wiki">Wiki</ulink>.</para><para>Prebuilt binaries can be found in the <ulink url="https://github.com/bitshares/bitshares-core/releases">releases page</ulink> for download.</para><para><heading level="3">Installing Node and Command-Line Wallet Software</heading>
</para><para>We recommend building on Ubuntu 20.04 LTS (64-bit)</para><para><bold>Install Operating System Dependencies:</bold> <verbatim>sudo apt-get update
sudo apt-get install autoconf cmake make automake libtool git libboost-all-dev libssl-dev g++ libcurl4-openssl-dev doxygen
</verbatim></para><para><bold>Build Node And Command-Line Wallet:</bold> <verbatim>git clone https://github.com/bitshares/bitshares-core.git
cd bitshares-core
git checkout master # may substitute &quot;master&quot; with current release tag
git submodule update --init --recursive
mkdir build
cd build
cmake -DCMAKE_BUILD_TYPE=Release ..
make
</verbatim></para><para><bold>Upgrade Node And Command-Line Wallet:</bold> <verbatim>cd bitshares-core
git remote set-url origin https://github.com/bitshares/bitshares-core.git
git checkout master
git remote set-head origin --auto
git pull
git submodule update --init --recursive # this command may fail
git submodule sync --recursive
git submodule update --init --recursive
mkdir build
cd build
cmake -DCMAKE_BUILD_TYPE=Release ..
make
</verbatim></para><para><bold>NOTE:</bold></para><para><itemizedlist>
<listitem><para>BitShares requires a 64-bit operating system to build, and will not build on a 32-bit OS. Tested operating systems:<itemizedlist>
<listitem><para>Linux (heavily tested with Ubuntu LTS releases)</para></listitem><listitem><para>macOS (various versions)</para></listitem><listitem><para>Windows (various versions, Visual Studio and MinGW)</para></listitem><listitem><para>OpenBSD (various versions)</para></listitem></itemizedlist>
</para></listitem><listitem><para>BitShares requires <ulink url="https://www.boost.org/">Boost</ulink> libraries to build, supports version <computeroutput>1.58</computeroutput> to <computeroutput>1.74</computeroutput>. Newer versions may work, but have not been tested. If your system came pre-installed with a version of Boost libraries that you do not wish to use, you may manually build your preferred version and use it with BitShares by specifying it on the CMake command line.</para><para>Example: <computeroutput>cmake -DBOOST_ROOT=/path/to/boost ..</computeroutput></para></listitem><listitem><para>BitShares requires <ulink url="https://www.openssl.org/">OpenSSL</ulink> libraries to build, supports version <computeroutput>1.0.2</computeroutput> to <computeroutput>1.1.1</computeroutput>. If your system came pre-installed with a version of OpenSSL libraries that you do not wish to use, you may manually build your preferred version and use it with BitShares by specifying it on the CMake command line.</para><para>Example: <computeroutput>cmake -DOPENSSL_ROOT_DIR=/path/to/openssl ..</computeroutput></para></listitem></itemizedlist>
</para><para><heading level="3">Running and Stopping Node Software</heading>
</para><para><bold>Run Node Software:</bold></para><para>Stay on <computeroutput>bitshares-core/build</computeroutput> directory before you run the below <computeroutput>witness_node</computeroutput> command <verbatim>./programs/witness_node/witness_node
</verbatim></para><para>Under <computeroutput>build</computeroutput> directory the node run will automatically create the directory <computeroutput>witness_node_data_dir</computeroutput> along with config files underneath then start synchronizing the blockchain. It may take usually several hours to fully synchronize the blockchain data. The blockchain data will be stored under the directory <computeroutput>witness_node_data_dir</computeroutput>.</para><para><bold>Stop Node Software:</bold></para><para>For stopping the node run cleanly, you will need to access the node run terminal then press on <computeroutput>Ctrl+C</computeroutput> then wait for the run to stop, please note that it may take usually few minutes to exit the run. It&apos;s recommended to use linux command <ulink url="https://help.ubuntu.com/community/Screen">screen</ulink> to initiate the node run so you can go back to the node run screen to stop it.</para><para><bold>IMPORTANT:</bold> By default the node will start in reduced memory mode by using some of the commands detailed in <ulink url="https://github.com/bitshares/bitshares-core/wiki/Memory-reduction-for-nodes">Memory reduction for nodes</ulink>. In order to run a full node with all the account histories which usually unnecessary, you need to remove <computeroutput>partial-operations</computeroutput> and <computeroutput>max-ops-per-account</computeroutput> from your config file. Please note that currently(2018-10-17) a full node will need more than 160GB of RAM to operate and required memory is growing fast. Consider the following table as <bold>minimal requirements</bold> before running a node:</para><para><table rows="2" cols="4"><row>
<entry thead="yes"><para>Default </para></entry><entry thead="yes"><para>Full </para></entry><entry thead="yes"><para>Minimal </para></entry><entry thead="yes"><para>ElasticSearch  </para></entry></row>
<row>
<entry thead="no"><para>150G HDD, 16G RAM </para></entry><entry thead="no"><para>640G SSD, 64G RAM * </para></entry><entry thead="no"><para>120G HDD, 4G RAM </para></entry><entry thead="no"><para>1TB SSD, 32G RAM </para></entry></row>
</table>
<itemizedlist>
<listitem><para>For this setup, allocate at least 500GB of SSD as swap.</para></listitem></itemizedlist>
</para><para>To use the command-line wallet or other wallets / clients with the node, the node need to be started with RPC connection enabled, which can be done by starting the node with the <computeroutput>--rpc-endpoint</computeroutput> parameter, E.G. <verbatim>./programs/witness_node/witness_node --rpc-endpoint=127.0.0.1:8090
</verbatim></para><para>or configure it in the config file by editing <computeroutput>witness_node_data_dir/config.ini</computeroutput> as follows: <verbatim>rpc-endpoint = 127.0.0.1:8090
</verbatim></para><para>You can run the program with <computeroutput>--help</computeroutput> parameter to see more info: <verbatim>./programs/witness_node/witness_node --help
</verbatim></para><para><heading level="3">Using Command-Line Wallet</heading>
</para><para>Stay on <computeroutput>bitshares-core/build</computeroutput> directory before you run the below <computeroutput>cli_wallet</computeroutput> command <verbatim>./programs/cli_wallet/cli_wallet
</verbatim></para><para><bold>IMPORTANT:</bold> The <computeroutput>cli_wallet</computeroutput> or API interfaces to the node wouldn&apos;t be fully functional unless the node is fully synchronized with the blockchain. The <computeroutput>cli_wallet</computeroutput> command <computeroutput>info</computeroutput> will show result <computeroutput>head_block_age</computeroutput> which will tell you how far you are from the live current block of the blockchain.</para><para>To check your current block: <verbatim>new &gt;&gt;&gt; info
</verbatim></para><para>To query the blockchain, E.G. get info about an account: <verbatim>new &gt;&gt;&gt; get_account &lt;account_name_or_id&gt;
</verbatim></para><para>If you need to transact with your account but not only query, firstly set your initial password and unlock the wallet:</para><para><itemizedlist>
<listitem><para>For non-Windows operating systems, you can type the commands and press <computeroutput>[ENTER]</computeroutput>, then input the password and press <computeroutput>[ENTER]</computeroutput>, in this case the password won&apos;t show: <verbatim>new &gt;&gt;&gt; set_password [ENTER]
Enter password:
locked &gt;&gt;&gt; unlock [ENTER]
Enter password:
unlocked &gt;&gt;&gt;
</verbatim></para></listitem><listitem><para>For Windows, or you&apos;d like to show the password, type the commands with the password: <verbatim>new &gt;&gt;&gt; set_password &lt;PASSWORD&gt;
locked &gt;&gt;&gt; unlock &lt;PASSWORD&gt;
unlocked &gt;&gt;&gt;
</verbatim></para></listitem></itemizedlist>
</para><para>To be able to transact with your account, import the corresponding private keys: <verbatim>unlocked &gt;&gt;&gt; import_key &lt;ACCOUNT_NAME&gt; &lt;WIF_KEY&gt;
</verbatim></para><para>The private keys will be encrypted and stored in the wallet file, the file name is <computeroutput>wallet.json</computeroutput> by default. The private keys are accessible when the wallet is unlocked. <verbatim>unlocked &gt;&gt;&gt; dump_private_keys
</verbatim></para><para>Use <computeroutput>lock</computeroutput> command to make the private keys inaccessible. There is no auto-lock feature so far. <verbatim>unlocked &gt;&gt;&gt; lock
</verbatim></para><para>To import your initial (genesis) balances, import the private keys corresponding to the balances: <verbatim>unlocked &gt;&gt;&gt; import_balance &lt;ACCOUNT_NAME&gt; [&lt;WIF_KEY&gt; ...] true
</verbatim></para><para>Use <computeroutput>help</computeroutput> to see all available wallet commands. <verbatim>&gt;&gt;&gt; help
</verbatim></para><para>Use <computeroutput>gethelp &lt;COMMAND&gt;</computeroutput> to see more info about individual commands. E.G. <verbatim>&gt;&gt;&gt; gethelp get_order_book
</verbatim></para><para>The definition of all commands is available in the <ulink url="https://github.com/bitshares/bitshares-core/blob/master/libraries/wallet/include/graphene/wallet/wallet.hpp">wallet.hpp</ulink> souce code file. Corresponding documentation can be found in the <ulink url="https://doxygen.bitshares.org/classgraphene_1_1wallet_1_1wallet__api.html">Doxygen documentation</ulink>.</para><para>You can run the program with <computeroutput>--help</computeroutput> parameter to see more info: <verbatim>./programs/cli_wallet/cli_wallet --help
</verbatim></para><para>There is also some info in the <ulink url="https://github.com/bitshares/bitshares-core/wiki/CLI-Wallet-Cookbook">Wiki</ulink>.</para><para><heading level="2">Support </heading>
</para><para>Technical support is available in the <ulink url="https://bitsharestalk.org/index.php?board=45.0">BitSharesTalk technical support subforum</ulink>.</para><para>BitShares Core bugs can be reported directly to the <ulink url="https://github.com/bitshares/bitshares-core/issues">issue tracker</ulink>.</para><para>Questions can be posted in <ulink url="https://github.com/bitshares/bitshares-core/discussions">Github Discussions</ulink>.</para><para>BitShares UI bugs should be reported to the <ulink url="https://github.com/bitshares/bitshares-ui/issues">UI issue tracker</ulink>.</para><para>Up to date online Doxygen documentation can be found at <ulink url="https://doxygen.bitshares.org/hierarchy.html">Doxygen.BitShares.org</ulink>.</para><para><heading level="2">Using Built-In APIs </heading>
</para><para><heading level="3">Node API</heading>
</para><para>The <computeroutput>witness_node</computeroutput> software provides several different API sets, known as <emphasis>node API</emphasis>.</para><para>Each API set has its own ID and a name. When running <computeroutput>witness_node</computeroutput> with RPC connection enabled, initially two API sets are available:<itemizedlist>
<listitem><para>API set with ID <computeroutput>0</computeroutput> has name *&quot;database&quot;*, it provides read-only access to the database,</para></listitem><listitem><para>API set with ID <computeroutput>1</computeroutput> has name *&quot;login&quot;*, it is used to login and gain access to additional, restrictable API sets.</para></listitem></itemizedlist>
</para><para>Here is an example using <computeroutput>wscat</computeroutput> package from <computeroutput>npm</computeroutput> for websockets: <verbatim>$ npm install -g wscat
$ wscat -c ws://127.0.0.1:8090
&gt; {&quot;id&quot;:1, &quot;method&quot;:&quot;call&quot;, &quot;params&quot;:[0,&quot;get_accounts&quot;,[[&quot;1.2.0&quot;]]]}
&lt; {&quot;id&quot;:1,&quot;result&quot;:[{&quot;id&quot;:&quot;1.2.0&quot;,&quot;annotations&quot;:[],&quot;membership_expiration_date&quot;:&quot;1969-12-31T23:59:59&quot;,&quot;registrar&quot;:&quot;1.2.0&quot;,&quot;referrer&quot;:&quot;1.2.0&quot;,&quot;lifetime_referrer&quot;:&quot;1.2.0&quot;,&quot;network_fee_percentage&quot;:2000,&quot;lifetime_referrer_fee_percentage&quot;:8000,&quot;referrer_rewards_percentage&quot;:0,&quot;name&quot;:&quot;committee-account&quot;,&quot;owner&quot;:{&quot;weight_threshold&quot;:1,&quot;account_auths&quot;:[],&quot;key_auths&quot;:[],&quot;address_auths&quot;:[]},&quot;active&quot;:{&quot;weight_threshold&quot;:6,&quot;account_auths&quot;:[[&quot;1.2.5&quot;,1],[&quot;1.2.6&quot;,1],[&quot;1.2.7&quot;,1],[&quot;1.2.8&quot;,1],[&quot;1.2.9&quot;,1],[&quot;1.2.10&quot;,1],[&quot;1.2.11&quot;,1],[&quot;1.2.12&quot;,1],[&quot;1.2.13&quot;,1],[&quot;1.2.14&quot;,1]],&quot;key_auths&quot;:[],&quot;address_auths&quot;:[]},&quot;options&quot;:{&quot;memo_key&quot;:&quot;GPH1111111111111111111111111111111114T1Anm&quot;,&quot;voting_account&quot;:&quot;1.2.0&quot;,&quot;num_witness&quot;:0,&quot;num_committee&quot;:0,&quot;votes&quot;:[],&quot;extensions&quot;:[]},&quot;statistics&quot;:&quot;2.7.0&quot;,&quot;whitelisting_accounts&quot;:[],&quot;blacklisting_accounts&quot;:[]}]}
</verbatim></para><para>We can do the same thing using an HTTP client such as <computeroutput>curl</computeroutput> for APIs which do not require login or other session state: <verbatim>$ curl --data &apos;{&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;call&quot;, &quot;params&quot;: [0, &quot;get_accounts&quot;, [[&quot;1.2.0&quot;]]], &quot;id&quot;: 1}&apos; http://127.0.0.1:8090/
{&quot;id&quot;:1,&quot;result&quot;:[{&quot;id&quot;:&quot;1.2.0&quot;,&quot;annotations&quot;:[],&quot;membership_expiration_date&quot;:&quot;1969-12-31T23:59:59&quot;,&quot;registrar&quot;:&quot;1.2.0&quot;,&quot;referrer&quot;:&quot;1.2.0&quot;,&quot;lifetime_referrer&quot;:&quot;1.2.0&quot;,&quot;network_fee_percentage&quot;:2000,&quot;lifetime_referrer_fee_percentage&quot;:8000,&quot;referrer_rewards_percentage&quot;:0,&quot;name&quot;:&quot;committee-account&quot;,&quot;owner&quot;:{&quot;weight_threshold&quot;:1,&quot;account_auths&quot;:[],&quot;key_auths&quot;:[],&quot;address_auths&quot;:[]},&quot;active&quot;:{&quot;weight_threshold&quot;:6,&quot;account_auths&quot;:[[&quot;1.2.5&quot;,1],[&quot;1.2.6&quot;,1],[&quot;1.2.7&quot;,1],[&quot;1.2.8&quot;,1],[&quot;1.2.9&quot;,1],[&quot;1.2.10&quot;,1],[&quot;1.2.11&quot;,1],[&quot;1.2.12&quot;,1],[&quot;1.2.13&quot;,1],[&quot;1.2.14&quot;,1]],&quot;key_auths&quot;:[],&quot;address_auths&quot;:[]},&quot;options&quot;:{&quot;memo_key&quot;:&quot;GPH1111111111111111111111111111111114T1Anm&quot;,&quot;voting_account&quot;:&quot;1.2.0&quot;,&quot;num_witness&quot;:0,&quot;num_committee&quot;:0,&quot;votes&quot;:[],&quot;extensions&quot;:[]},&quot;statistics&quot;:&quot;2.7.0&quot;,&quot;whitelisting_accounts&quot;:[],&quot;blacklisting_accounts&quot;:[]}]}
</verbatim></para><para>When using an HTTP client, the API set ID can be replaced by the API set name, E.G. <verbatim>$ curl --data &apos;{&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;call&quot;, &quot;params&quot;: [&quot;database&quot;, &quot;get_accounts&quot;, [[&quot;1.2.0&quot;]]], &quot;id&quot;: 1}&apos; http://127.0.0.1:8090/
</verbatim></para><para>The definition of all node APIs is available in the source code files including <ulink url="https://github.com/bitshares/bitshares-core/blob/master/libraries/app/include/graphene/app/database_api.hpp">database_api.hpp</ulink> and <ulink url="https://github.com/bitshares/bitshares-core/blob/master/libraries/app/include/graphene/app/api.hpp">api.hpp</ulink>. Corresponding documentation can be found in Doxygen:<itemizedlist>
<listitem><para><ulink url="https://doxygen.bitshares.org/classgraphene_1_1app_1_1database__api.html">database API</ulink></para></listitem><listitem><para><ulink url="https://doxygen.bitshares.org/namespacegraphene_1_1app.html">other APIs</ulink></para></listitem></itemizedlist>
</para><para><heading level="3">Wallet API</heading>
</para><para>The <computeroutput>cli_wallet</computeroutput> program can also be configured to serve <bold>all of its commands</bold> as APIs, known as <emphasis>wallet API</emphasis>.</para><para>Start <computeroutput>cli_wallet</computeroutput> with RPC connection enabled: <verbatim>$ ./programs/cli_wallet/cli_wallet --rpc-http-endpoint=127.0.0.1:8093
</verbatim></para><para>Access the wallet API using an HTTP client: <verbatim>$ curl --data &apos;{&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;info&quot;, &quot;params&quot;: [], &quot;id&quot;: 1}&apos; http://127.0.0.1:8093/
$ curl --data &apos;{&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;get_account&quot;, &quot;params&quot;: [&quot;1.2.0&quot;], &quot;id&quot;: 1}&apos; http://127.0.0.1:8093/
</verbatim></para><para>Note: The syntax to access wallet API is a bit different than accessing node API.</para><para><bold>Important:</bold><itemizedlist>
<listitem><para>When RPC connection is enabled for <computeroutput>cli_wallet</computeroutput>, sensitive data E.G. private keys which is accessible via commands will be accessible via RPC too. It is recommended that only open network connection to localhost or trusted addresses E.G. configure a firewall.</para></listitem><listitem><para>When using wallet API, sensitive data E.G. the wallet password and private keys is transmitted as plain text, thus may be vulnerable to network sniffing. It is recommended that only use wallet API with localhost, or in a clean network, and / or use <computeroutput>--rpc-tls-endpoint</computeroutput> parameter to only serve wallet API via secure connections.</para></listitem></itemizedlist>
</para><para><heading level="2">Accessing restrictable node API sets </heading>
</para><para>You can restrict node API sets to particular users by specifying an <computeroutput>api-access</computeroutput> file in <computeroutput>config.ini</computeroutput> or by using the <computeroutput>--api-access /full/path/to/api-access.json</computeroutput> command-line option on node startup. Here is an example <computeroutput>api-access</computeroutput> file which allows user <computeroutput>bytemaster</computeroutput> with password <computeroutput>supersecret</computeroutput> to access four different API sets, while allowing any other user to access the three public API sets necessary to use the node: <verbatim>{
   &quot;permission_map&quot; :
   [
      [
         &quot;bytemaster&quot;,
         {
            &quot;password_hash_b64&quot; : &quot;9e9GF7ooXVb9k4BoSfNIPTelXeGOZ5DrgOYMj94elaY=&quot;,
            &quot;password_salt_b64&quot; : &quot;INDdM6iCi/8=&quot;,
            &quot;allowed_apis&quot; : [&quot;database_api&quot;, &quot;network_broadcast_api&quot;, &quot;history_api&quot;, &quot;network_node_api&quot;]
         }
      ],
      [
         &quot;*&quot;,
         {
            &quot;password_hash_b64&quot; : &quot;*&quot;,
            &quot;password_salt_b64&quot; : &quot;*&quot;,
            &quot;allowed_apis&quot; : [&quot;database_api&quot;, &quot;network_broadcast_api&quot;, &quot;history_api&quot;]
         }
      ]
   ]
}
</verbatim></para><para>Note: the <computeroutput>login</computeroutput> API set is always accessible.</para><para>Passwords are stored in <computeroutput>base64</computeroutput> as salted <computeroutput>sha256</computeroutput> hashes. A simple Python script, <ulink url="https://github.com/bitshares/bitshares-core/blob/master/programs/witness_node/saltpass.py"><computeroutput>saltpass.py</computeroutput></ulink> is avaliable to obtain hash and salt values from a password. A single asterisk <computeroutput>&quot;*&quot;</computeroutput> may be specified as username or password hash to accept any value.</para><para>With the above configuration, here is an example of how to call the <computeroutput>add_node</computeroutput> API from the <computeroutput>network_node</computeroutput> API set: <verbatim>{&quot;id&quot;:1, &quot;method&quot;:&quot;call&quot;, &quot;params&quot;:[1,&quot;login&quot;,[&quot;bytemaster&quot;, &quot;supersecret&quot;]]}
{&quot;id&quot;:2, &quot;method&quot;:&quot;call&quot;, &quot;params&quot;:[1,&quot;network_node&quot;,[]]}
{&quot;id&quot;:3, &quot;method&quot;:&quot;call&quot;, &quot;params&quot;:[2,&quot;add_node&quot;,[&quot;127.0.0.1:9090&quot;]]}
</verbatim></para><para>Note, the call to <computeroutput>network_node</computeroutput> is necessary to obtain the correct API set ID for the <computeroutput>network_node</computeroutput> API set. It is not guaranteed that the API set ID for the <computeroutput>network_node</computeroutput> API set will always be <computeroutput>2</computeroutput>.</para><para>The restricted API sets are accessible via HTTP too using <emphasis>basic access authentication</emphasis>. E.G. <verbatim>$ curl --data &apos;{&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;call&quot;, &quot;params&quot;: [&quot;network_node&quot;, &quot;add_node&quot;, [&quot;127.0.0.1:9090&quot;]], &quot;id&quot;: 1}&apos; http://bytemaster:supersecret@127.0.0.1:8090/
</verbatim></para><para>Our <computeroutput>doxygen</computeroutput> documentation contains the most up-to-date information about APIs for the <ulink url="https://doxygen.bitshares.org/namespacegraphene_1_1app.html">node</ulink> and the <ulink url="https://doxygen.bitshares.org/classgraphene_1_1wallet_1_1wallet__api.html">wallet</ulink>.</para><para><heading level="2">FAQ </heading>
</para><para><itemizedlist>
<listitem><para>Is there a way to generate help with parameter names and method descriptions?</para><para>Yes. Documentation of the code base, including APIs, can be generated using Doxygen. Simply run <computeroutput>doxygen</computeroutput> in this directory.</para><para>If both Doxygen and perl are available in your build environment, the command-line wallet&apos;s <computeroutput>help</computeroutput> and <computeroutput>gethelp</computeroutput> commands will display help generated from the doxygen documentation.</para><para>If your command-line wallet&apos;s <computeroutput>help</computeroutput> command displays descriptions without parameter names like <computeroutput>signed_transaction transfer(string, string, string, string, string, bool)</computeroutput> it means CMake was unable to find Doxygen or perl during configuration. If found, the output should look like this: <computeroutput>signed_transaction transfer(string from, string to, string amount, string asset_symbol, string memo, bool broadcast)</computeroutput></para></listitem><listitem><para>Is there a way to allow external program to drive <computeroutput>cli_wallet</computeroutput> via websocket, JSONRPC, or HTTP?</para><para>Yes. External programs may connect to the command-line wallet and make its calls over a websockets API. To do this, run the wallet in server mode, i.e. <computeroutput>cli_wallet -H &quot;127.0.0.1:9999&quot;</computeroutput> and then have the external program connect to it over the specified port (in this example, port 9999). Please check the <ulink url="#using-built-in-apis">&quot;Using Built-In APIs&quot;</ulink> section for more info.</para></listitem><listitem><para>Is there a way to access methods which require login over HTTP?</para><para>Yes. Most of the methods can be accessed by specifying the API name instead of an API ID. If an API is protected by a username and a password, it can be accessed by using <emphasis>basic access authentication</emphasis>. Please check the <ulink url="#accessing-restrictable-node-api-sets">&quot;Accessing restrictable node API sets&quot;</ulink> section for more info.</para><para>However, HTTP is not really designed for &quot;server push&quot; notifications, and we would have to figure out a way to queue notifications for a polling client. Websockets solves this problem. If you need to access the stateful methods, use Websockets.</para></listitem><listitem><para>What is the meaning of <computeroutput>a.b.c</computeroutput> numbers?</para><para>The first number specifies the <emphasis>space</emphasis>. Space <computeroutput>1</computeroutput> is for protocol objects, <computeroutput>2</computeroutput> is for implementation objects. Protocol space objects can appear on the wire, for example in the binary form of transactions. Implementation space objects cannot appear on the wire and solely exist for implementation purposes, such as optimization or internal bookkeeping.</para><para>The second number specifies the <emphasis>type</emphasis>. The type of the object determines what fields it has. For a complete list of type IDs, see <computeroutput>GRAPHENE_DEFINE_IDS(protocol, protocol_ids ...)</computeroutput> in <ulink url="https://github.com/bitshares/bitshares-core/blob/master/libraries/protocol/include/graphene/protocol/types.hpp">protocol/types.hpp</ulink> and <computeroutput>GRAPHENE_DEFINE_IDS(chain, implementation_ids ...)</computeroutput> in <ulink url="https://github.com/bitshares/bitshares-core/blob/master/libraries/chain/include/graphene/chain/types.hpp">chain/types.hpp</ulink>.</para><para>The third number specifies the <emphasis>instance</emphasis>. The instance of the object is different for each individual object.</para></listitem><listitem><para>The answer to the previous question was really confusing. Can you make it clearer?</para><para>All account IDs are of the form <computeroutput>1.2.x</computeroutput>. If you were the 9735th account to be registered, your account&apos;s ID will be <computeroutput>1.2.9735</computeroutput>. Account <computeroutput>0</computeroutput> is special (it&apos;s the &quot;committee account&quot;, which is controlled by the committee members and has a few abilities and restrictions other accounts do not).</para><para>All asset IDs are of the form <computeroutput>1.3.x</computeroutput>. If you were the 29th asset to be registered, your asset&apos;s ID will be <computeroutput>1.3.29</computeroutput>. Asset <computeroutput>0</computeroutput> is special (it&apos;s BTS, which is considered the &quot;core asset&quot;).</para><para>The first and second number together identify the kind of thing you&apos;re talking about (<computeroutput>1.2</computeroutput> for accounts, <computeroutput>1.3</computeroutput> for assets). The third number identifies the particular thing.</para></listitem><listitem><para>How do I get the <computeroutput>network_add_nodes</computeroutput> command to work? Why is it so complicated?</para><para>You need to follow the instructions in the <ulink url="#accessing-restrictable-node-api-sets">&quot;Accessing restrictable node API sets&quot;</ulink> section to allow a username/password access to the <computeroutput>network_node</computeroutput> API set. Then you need to pass the username/password to the <computeroutput>cli_wallet</computeroutput> on the command line.</para><para>It&apos;s set up this way so that the default configuration is secure even if the RPC port is publicly accessible. It&apos;s fine if your <computeroutput>witness_node</computeroutput> allows the general public to query the database or broadcast transactions (in fact, this is how the hosted web UI works). It&apos;s less fine if your <computeroutput>witness_node</computeroutput> allows the general public to control which p2p nodes it&apos;s connecting to. Therefore the API to add p2p connections needs to be set up with proper access controls.</para></listitem></itemizedlist>
</para><para><heading level="2">License </heading>
</para><para>BitShares Core is under the MIT license. See <ulink url="https://github.com/bitshares/bitshares-core/blob/master/LICENSE.txt">LICENSE</ulink> for more information. </para>    </detaileddescription>
  </compounddef>
</doxygen>
