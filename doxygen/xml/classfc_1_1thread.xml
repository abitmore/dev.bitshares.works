<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classfc_1_1thread" kind="class" language="C++" prot="public">
    <compoundname>fc::thread</compoundname>
    <includes refid="thread_8hpp" local="no">thread.hpp</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classfc_1_1thread_1a8dbbde064e87d4f173c888a978c5673d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class promise_base</definition>
        <argsstring></argsstring>
        <name>promise_base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="158" column="7" bodyfile="libraries/fc/include/fc/thread/thread.hpp" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1thread_1abbec2410b52ff3b0ae383de5cbe7bd99" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class task_base</definition>
        <argsstring></argsstring>
        <name>task_base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="159" column="7" bodyfile="libraries/fc/include/fc/thread/thread.hpp" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1thread_1adf6b3bf455e0a61e7d995a5fdd4b70fb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class thread_d</definition>
        <argsstring></argsstring>
        <name>thread_d</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="160" column="7" bodyfile="libraries/fc/include/fc/thread/thread.hpp" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1thread_1a6f4535025b9df015e1a7d35f4e2bbee7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class mutex</definition>
        <argsstring></argsstring>
        <name>mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="161" column="7" bodyfile="libraries/fc/include/fc/thread/thread.hpp" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1thread_1afd70f2f42de863b7d962c77e36055968" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class detail::worker_pool</definition>
        <argsstring></argsstring>
        <name>detail::worker_pool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="162" column="7" bodyfile="libraries/fc/include/fc/thread/thread.hpp" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1thread_1ada3298fdbc9d7da3c04887e131062bfb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class non_preemptable_scope_check</definition>
        <argsstring></argsstring>
        <name>non_preemptable_scope_check</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="169" column="7" bodyfile="libraries/fc/include/fc/thread/thread.hpp" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1thread_1a54075f83465583f175fea1384673e910" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend void *</type>
        <definition>void* detail::get_thread_specific_data</definition>
        <argsstring>(unsigned slot)</argsstring>
        <name>detail::get_thread_specific_data</name>
        <param>
          <type>unsigned</type>
          <declname>slot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="163" column="19"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1thread_1a737283c321c71d9dbc8e18bdc2bffb21" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend void</type>
        <definition>void detail::set_thread_specific_data</definition>
        <argsstring>(unsigned slot, void *new_value, void(*cleanup)(void *))</argsstring>
        <name>detail::set_thread_specific_data</name>
        <param>
          <type>unsigned</type>
          <declname>slot</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>cleanup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="164" column="19"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1thread_1a3df4541cfddbd2d06a2880dbd9d2a0d7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend unsigned</type>
        <definition>unsigned detail::get_next_unused_task_storage_slot</definition>
        <argsstring>()</argsstring>
        <name>detail::get_next_unused_task_storage_slot</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="165" column="23"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1thread_1a0af797fb528d666a56eff3dc50950e14" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend void *</type>
        <definition>void* detail::get_task_specific_data</definition>
        <argsstring>(unsigned slot)</argsstring>
        <name>detail::get_task_specific_data</name>
        <param>
          <type>unsigned</type>
          <declname>slot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="166" column="19"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1thread_1a3e7af3eff286dea559576b55f54e48cf" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend void</type>
        <definition>void detail::set_task_specific_data</definition>
        <argsstring>(unsigned slot, void *new_value, void(*cleanup)(void *))</argsstring>
        <name>detail::set_task_specific_data</name>
        <param>
          <type>unsigned</type>
          <declname>slot</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>cleanup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="167" column="19"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1thread_1a58c8b2ad0ea491a6642e5e1cbd358c89" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend void</type>
        <definition>void yield</definition>
        <argsstring>()</argsstring>
        <name>yield</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Yields to other ready tasks before returning. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="171" column="19" bodyfile="libraries/fc/src/thread/thread.cpp" bodystart="365" bodyend="367"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1thread_1a373416824c0ce69109a66cab75ed8b58" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend void</type>
        <definition>void usleep</definition>
        <argsstring>(const microseconds &amp;)</argsstring>
        <name>usleep</name>
        <param>
          <type>const <ref refid="classfc_1_1microseconds" kindref="compound">microseconds</ref> &amp;</type>
          <defname>u</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Yields to other ready tasks for u microseconds. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="172" column="19" bodyfile="libraries/fc/src/thread/thread.cpp" bodystart="368" bodyend="370"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1thread_1aabc626280163bf361476b53a3c52fae8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend void</type>
        <definition>void fc::thread::sleep_until</definition>
        <argsstring>(const time_point &amp;)</argsstring>
        <name>sleep_until</name>
        <param>
          <type>const <ref refid="classfc_1_1time__point" kindref="compound">time_point</ref> &amp;</type>
          <defname>tp</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Yields until the specified time in the future. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="173" column="19" bodyfile="libraries/fc/src/thread/thread.cpp" bodystart="371" bodyend="373"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1thread_1a1c1697e990eb784da313e6efac363d0f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend void</type>
        <definition>void fc::thread::exec</definition>
        <argsstring>()</argsstring>
        <name>exec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enters the main loop processing tasks until <ref refid="classfc_1_1thread_1a8448974169e17982207bf701e25d3c6b" kindref="member">quit()</ref> is called. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="174" column="19" bodyfile="libraries/fc/src/thread/thread.cpp" bodystart="375" bodyend="378"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1thread_1ae70e5eef71c6b5c481841735c3f38e3e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend int</type>
        <definition>int wait_any</definition>
        <argsstring>(std::vector&lt; promise_base::ptr &gt; &amp;&amp;v, const microseconds &amp;)</argsstring>
        <name>wait_any</name>
        <param>
          <type>std::vector&lt; <ref refid="classfc_1_1promise__base_1a981f5f6eb5de005018991933ca06580d" kindref="member">promise_base::ptr</ref> &gt; &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1microseconds" kindref="compound">microseconds</ref> &amp;</type>
          <defname>timeout_us</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="175" column="18" bodyfile="libraries/fc/src/thread/thread.cpp" bodystart="380" bodyend="383"/>
      </memberdef>
      <memberdef kind="friend" id="classfc_1_1thread_1a99af97d17539f4d461e53f55fe659f0a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend int</type>
        <definition>int fc::thread::wait_any_until</definition>
        <argsstring>(std::vector&lt; promise_base::ptr &gt; &amp;&amp;v, const time_point &amp;tp)</argsstring>
        <name>wait_any_until</name>
        <param>
          <type>std::vector&lt; <ref refid="classfc_1_1promise__base_1a981f5f6eb5de005018991933ca06580d" kindref="member">promise_base::ptr</ref> &gt; &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1time__point" kindref="compound">time_point</ref> &amp;</type>
          <declname>tp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="176" column="18" bodyfile="libraries/fc/src/thread/thread.cpp" bodystart="385" bodyend="388"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classfc_1_1thread_1afd478698d7da5a7da8f1f3e2db000d80" prot="private" static="no" mutable="no">
        <type>class <ref refid="classfc_1_1thread__d" kindref="compound">thread_d</ref> *</type>
        <definition>class thread_d* fc::thread::my</definition>
        <argsstring></argsstring>
        <name>my</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="191" column="22" bodyfile="libraries/fc/include/fc/thread/thread.hpp" bodystart="191" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classfc_1_1thread_1a1c833219c9a76553f5e13c915da736b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::thread::thread</definition>
        <argsstring>(const std::string &amp;name=&quot;&quot;, thread_idle_notifier *notifier=0)</argsstring>
        <name>thread</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type><ref refid="classfc_1_1thread__idle__notifier" kindref="compound">thread_idle_notifier</ref> *</type>
          <declname>notifier</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="41" column="7" bodyfile="libraries/fc/src/thread/thread.cpp" bodystart="74" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1thread_1a01a8d18b207df6efb6e34f37981707d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::thread::thread</definition>
        <argsstring>(thread &amp;&amp;m)=delete</argsstring>
        <name>thread</name>
        <param>
          <type><ref refid="classfc_1_1thread" kindref="compound">thread</ref> &amp;&amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="42" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1thread_1ac1cda1aeac47261bc10fa47227b0db6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1thread" kindref="compound">thread</ref> &amp;</type>
        <definition>thread&amp; fc::thread::operator=</definition>
        <argsstring>(thread &amp;&amp;t)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classfc_1_1thread" kindref="compound">thread</ref> &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="43" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1thread_1a660ddc4775b1e67d4646f838e654929b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const string &amp;</type>
        <definition>const string &amp; fc::thread::name</definition>
        <argsstring>() const</argsstring>
        <name>name</name>
        <briefdescription>
<para>returns the name given by <ref refid="classfc_1_1thread_1a508504e749a3d0321bd4ea502b694507" kindref="member">set_name()</ref> for this thread </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="58" column="20" bodyfile="libraries/fc/src/thread/thread.cpp" bodystart="138" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1thread_1a508504e749a3d0321bd4ea502b694507" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::thread::set_name</definition>
        <argsstring>(const string &amp;n)</argsstring>
        <name>set_name</name>
        <param>
          <type>const string &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>associates a name with this thread. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="63" column="19" bodyfile="libraries/fc/src/thread/thread.cpp" bodystart="143" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1thread_1a69b2d5329243ae2085cb45caf16708de" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * fc::thread::current_task_desc</definition>
        <argsstring>() const</argsstring>
        <name>current_task_desc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="65" column="18" bodyfile="libraries/fc/src/thread/thread.cpp" bodystart="154" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1thread_1a18b90284b19d01d9216dc2eed7d857af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::thread::debug</definition>
        <argsstring>(const std::string &amp;d)</argsstring>
        <name>debug</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>print debug info about the state of every context / promise. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is helpful to figure out where your program is &apos;hung&apos; by listing every async operation (context) and what it is blocked on (future). <linebreak/>
</para>
<para><simplesect kind="note"><para>debug info is more useful if you provide a description for your async tasks and promises. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="76" column="15" bodyfile="libraries/fc/src/thread/thread.cpp" bodystart="161" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1thread_1a68713143fa7331450ac0ff22798c0280" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Functor</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto fc::thread::async</definition>
        <argsstring>(Functor &amp;&amp;f, const char *desc FC_TASK_NAME_DEFAULT_ARG, priority prio=priority()) -&gt; fc::future&lt; decltype(f())&gt;</argsstring>
        <name>async</name>
        <param>
          <type>Functor &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const char *desc</type>
          <declname>FC_TASK_NAME_DEFAULT_ARG</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1priority" kindref="compound">priority</ref></type>
          <declname>prio</declname>
          <defval><ref refid="classfc_1_1priority" kindref="compound">priority</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calls function <computeroutput>f</computeroutput> in this thread and returns a future&lt;T&gt; that can be used to wait on the result. <linebreak/>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>the operation to perform </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prio</parametername>
</parameternamelist>
<parameterdescription>
<para>the priority relative to other tasks </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="87" column="12" bodyfile="libraries/fc/include/fc/thread/thread.hpp" bodystart="87" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1thread_1a078342ffb2e8eeaaaf3279d70bb5dc88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::thread::poke</definition>
        <argsstring>()</argsstring>
        <name>poke</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="97" column="12" bodyfile="libraries/fc/src/thread/thread.cpp" bodystart="340" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1thread_1a88fec428662bea5940f6772aa341340c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Functor</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto fc::thread::schedule</definition>
        <argsstring>(Functor &amp;&amp;f, const fc::time_point &amp;when, const char *desc FC_TASK_NAME_DEFAULT_ARG, priority prio=priority()) -&gt; fc::future&lt; decltype(f())&gt;</argsstring>
        <name>schedule</name>
        <param>
          <type>Functor &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1time__point" kindref="compound">fc::time_point</ref> &amp;</type>
          <declname>when</declname>
        </param>
        <param>
          <type>const char *desc</type>
          <declname>FC_TASK_NAME_DEFAULT_ARG</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1priority" kindref="compound">priority</ref></type>
          <declname>prio</declname>
          <defval><ref refid="classfc_1_1priority" kindref="compound">priority</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calls function <computeroutput>f</computeroutput> in this thread and returns a future&lt;T&gt; that can be used to wait on the result.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>the method to be called </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prio</parametername>
</parameternamelist>
<parameterdescription>
<para>the priority of this method relative to others </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>when</parametername>
</parameternamelist>
<parameterdescription>
<para>determines when this call will happen, as soon as possible after <computeroutput>when</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="110" column="12" bodyfile="libraries/fc/include/fc/thread/thread.hpp" bodystart="110" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1thread_1a8448974169e17982207bf701e25d3c6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::thread::quit</definition>
        <argsstring>()</argsstring>
        <name>quit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method will cancel all pending tasks causing them to throw cmt::error::thread_quit.</para>
<para>If the <emphasis>current</emphasis> thread is not <computeroutput>this</computeroutput> thread, then the <emphasis>current</emphasis> thread will wait for <computeroutput>this</computeroutput> thread to exit.</para>
<para>This is a blocking wait via <computeroutput>boost::thread::join</computeroutput> and other tasks in the <emphasis>current</emphasis> thread will not run while waiting for <computeroutput>this</computeroutput> thread to quit.</para>
<para><xrefsect id="todo_1_todo000001"><xreftitle>Todo</xreftitle><xrefdescription><para>make quit non-blocking of the calling thread by eliminating the call to <computeroutput>boost::thread::join</computeroutput> </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="133" column="12" bodyfile="libraries/fc/src/thread/thread.cpp" bodystart="174" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1thread_1a3c58725daa689dc1f27732172ee4ce60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::thread::signal</definition>
        <argsstring>(int)</argsstring>
        <name>signal</name>
        <param>
          <type>int</type>
          <defname>sig</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send signal to underlying native thread. Only for Linux and macOS </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="138" column="12" bodyfile="libraries/fc/src/thread/thread.cpp" bodystart="167" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1thread_1a19fe3c355355148888a8698c6cc326d7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::thread::is_running</definition>
        <argsstring>() const</argsstring>
        <name>is_running</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true unless <ref refid="classfc_1_1thread_1a8448974169e17982207bf701e25d3c6b" kindref="member">quit()</ref> has been called. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="143" column="12" bodyfile="libraries/fc/src/thread/thread.cpp" bodystart="264" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1thread_1a69849a1a9947518a72ad66956b0154b0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::thread::is_current</definition>
        <argsstring>() const</argsstring>
        <name>is_current</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="144" column="12" bodyfile="libraries/fc/src/thread/thread.cpp" bodystart="479" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1thread_1abf3c53b7863e1fda044a0e76d6014a30" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1priority" kindref="compound">priority</ref></type>
        <definition>priority fc::thread::current_priority</definition>
        <argsstring>() const</argsstring>
        <name>current_priority</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="146" column="16" bodyfile="libraries/fc/src/thread/thread.cpp" bodystart="269" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1thread_1af3d2588beda9af16c03b193e9452ff64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::thread::~thread</definition>
        <argsstring>()</argsstring>
        <name>~thread</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="147" column="7" bodyfile="libraries/fc/src/thread/thread.cpp" bodystart="116" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1thread_1a6bd3eb18f213b661380a46417be69ccd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int fc::thread::wait_any</definition>
        <argsstring>(const fc::future&lt; T1 &gt; &amp;f1, const fc::future&lt; T2 &gt; &amp;f2, const microseconds &amp;timeout_us=microseconds::maximum())</argsstring>
        <name>wait_any</name>
        <param>
          <type>const <ref refid="classfc_1_1future" kindref="compound">fc::future</ref>&lt; T1 &gt; &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1future" kindref="compound">fc::future</ref>&lt; T2 &gt; &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1microseconds" kindref="compound">microseconds</ref> &amp;</type>
          <declname>timeout_us</declname>
          <defval><ref refid="classfc_1_1microseconds_1a83490e326e43e94a2b9f2d23b5645455" kindref="member">microseconds::maximum</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="150" column="12" bodyfile="libraries/fc/include/fc/thread/thread.hpp" bodystart="150" bodyend="155"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classfc_1_1thread_1a21e963c53c2219f519bcf378f4def1a4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1thread" kindref="compound">thread</ref> &amp;</type>
        <definition>thread &amp; fc::thread::current</definition>
        <argsstring>()</argsstring>
        <name>current</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the current thread. Note: Creates <ref refid="classfc_1_1thread" kindref="compound">fc::thread</ref> object (but not a boost thread) if no current thread assigned yet (this can happend if <ref refid="classfc_1_1thread_1a21e963c53c2219f519bcf378f4def1a4" kindref="member">current()</ref> is called from the main thread of application or from an existing &quot;unknown&quot; boost thread). In such cases, <ref refid="classfc_1_1thread__d" kindref="compound">thread_d</ref> doesn&apos;t have access boost::thread object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="51" column="21" bodyfile="libraries/fc/src/thread/thread.cpp" bodystart="125" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1thread_1abeba4036f046cd32dd661499cb8e6755" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::thread::cleanup</definition>
        <argsstring>()</argsstring>
        <name>cleanup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="52" column="22" bodyfile="libraries/fc/src/thread/thread.cpp" bodystart="131" bodyend="136"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classfc_1_1thread_1a364cf7894d1220cb0a149704dd6ad010" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::thread::thread</definition>
        <argsstring>(class thread_d *)</argsstring>
        <name>thread</name>
        <param>
          <type>class <ref refid="classfc_1_1thread__d" kindref="compound">thread_d</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="157" column="7" bodyfile="libraries/fc/src/thread/thread.cpp" bodystart="112" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1thread_1a091448aaafef646dc9542e7ea5228daf" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::thread::wait_until</definition>
        <argsstring>(promise_base::ptr &amp;&amp;v, const time_point &amp;tp)</argsstring>
        <name>wait_until</name>
        <param>
          <type><ref refid="classfc_1_1promise__base_1a981f5f6eb5de005018991933ca06580d" kindref="member">promise_base::ptr</ref> &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1time__point" kindref="compound">time_point</ref> &amp;</type>
          <declname>tp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="177" column="12" bodyfile="libraries/fc/src/thread/thread.cpp" bodystart="390" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1thread_1a3cb29251b75caec24328e14bcd4fc0a4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::thread::notify</definition>
        <argsstring>(const promise_base::ptr &amp;v)</argsstring>
        <name>notify</name>
        <param>
          <type>const <ref refid="classfc_1_1promise__base_1a981f5f6eb5de005018991933ca06580d" kindref="member">promise_base::ptr</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="178" column="12" bodyfile="libraries/fc/src/thread/thread.cpp" bodystart="422" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1thread_1adb1267fef4ed5208981e0d61be27828e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::thread::yield</definition>
        <argsstring>(bool reschedule=true)</argsstring>
        <name>yield</name>
        <param>
          <type>bool</type>
          <declname>reschedule</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="180" column="12" bodyfile="libraries/fc/src/thread/thread.cpp" bodystart="277" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1thread_1af2da8c07b27f49f3d6b88966f6c5c754" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::thread::sleep_until</definition>
        <argsstring>(const time_point &amp;t)</argsstring>
        <name>sleep_until</name>
        <param>
          <type>const <ref refid="classfc_1_1time__point" kindref="compound">time_point</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="181" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1thread_1a1c1697e990eb784da313e6efac363d0f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::thread::exec</definition>
        <argsstring>()</argsstring>
        <name>exec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="182" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1thread_1a44ed5bb67cc558e49b4a51a305d3858e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fc::thread::wait_any_until</definition>
        <argsstring>(std::vector&lt; promise_base::ptr &gt; &amp;&amp;v, const time_point &amp;)</argsstring>
        <name>wait_any_until</name>
        <param>
          <type>std::vector&lt; <ref refid="classfc_1_1promise__base_1a981f5f6eb5de005018991933ca06580d" kindref="member">promise_base::ptr</ref> &gt; &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1time__point" kindref="compound">time_point</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="183" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1thread_1a273d84587a74e79bc0b586324eaa79c0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::thread::async_task</definition>
        <argsstring>(task_base *t, const priority &amp;p)</argsstring>
        <name>async_task</name>
        <param>
          <type><ref refid="classfc_1_1task__base" kindref="compound">task_base</ref> *</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1priority" kindref="compound">priority</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="185" column="12" bodyfile="libraries/fc/src/thread/thread.cpp" bodystart="336" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1thread_1ab6b1aaff0f79bcda893ec3173a825ec8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::thread::async_task</definition>
        <argsstring>(task_base *t, const priority &amp;p, const time_point &amp;tp)</argsstring>
        <name>async_task</name>
        <param>
          <type><ref refid="classfc_1_1task__base" kindref="compound">task_base</ref> *</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1priority" kindref="compound">priority</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1time__point" kindref="compound">time_point</ref> &amp;</type>
          <declname>tp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="186" column="12" bodyfile="libraries/fc/src/thread/thread.cpp" bodystart="345" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1thread_1a2c8d4de183cc21699a70afda0f95cc28" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::thread::notify_task_has_been_canceled</definition>
        <argsstring>()</argsstring>
        <name>notify_task_has_been_canceled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="188" column="12" bodyfile="libraries/fc/src/thread/thread.cpp" bodystart="484" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1thread_1a63ec000baaf60f877f967529beca537d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::thread::unblock</definition>
        <argsstring>(fc::context *c)</argsstring>
        <name>unblock</name>
        <param>
          <type><ref refid="structfc_1_1context" kindref="compound">fc::context</ref> *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="189" column="12" bodyfile="libraries/fc/src/thread/thread.cpp" bodystart="489" bodyend="492"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/fc/include/fc/thread/thread.hpp" line="39" column="15" bodyfile="libraries/fc/include/fc/thread/thread.hpp" bodystart="39" bodyend="192"/>
    <listofallmembers>
      <member refid="classfc_1_1thread_1a68713143fa7331450ac0ff22798c0280" prot="public" virt="non-virtual"><scope>fc::thread</scope><name>async</name></member>
      <member refid="classfc_1_1thread_1a273d84587a74e79bc0b586324eaa79c0" prot="private" virt="non-virtual"><scope>fc::thread</scope><name>async_task</name></member>
      <member refid="classfc_1_1thread_1ab6b1aaff0f79bcda893ec3173a825ec8" prot="private" virt="non-virtual"><scope>fc::thread</scope><name>async_task</name></member>
      <member refid="classfc_1_1thread_1abeba4036f046cd32dd661499cb8e6755" prot="public" virt="non-virtual"><scope>fc::thread</scope><name>cleanup</name></member>
      <member refid="classfc_1_1thread_1a21e963c53c2219f519bcf378f4def1a4" prot="public" virt="non-virtual"><scope>fc::thread</scope><name>current</name></member>
      <member refid="classfc_1_1thread_1abf3c53b7863e1fda044a0e76d6014a30" prot="public" virt="non-virtual"><scope>fc::thread</scope><name>current_priority</name></member>
      <member refid="classfc_1_1thread_1a69b2d5329243ae2085cb45caf16708de" prot="public" virt="non-virtual"><scope>fc::thread</scope><name>current_task_desc</name></member>
      <member refid="classfc_1_1thread_1a18b90284b19d01d9216dc2eed7d857af" prot="public" virt="non-virtual"><scope>fc::thread</scope><name>debug</name></member>
      <member refid="classfc_1_1thread_1a3df4541cfddbd2d06a2880dbd9d2a0d7" prot="private" virt="non-virtual"><scope>fc::thread</scope><name>detail::get_next_unused_task_storage_slot</name></member>
      <member refid="classfc_1_1thread_1a0af797fb528d666a56eff3dc50950e14" prot="private" virt="non-virtual"><scope>fc::thread</scope><name>detail::get_task_specific_data</name></member>
      <member refid="classfc_1_1thread_1a54075f83465583f175fea1384673e910" prot="private" virt="non-virtual"><scope>fc::thread</scope><name>detail::get_thread_specific_data</name></member>
      <member refid="classfc_1_1thread_1a3e7af3eff286dea559576b55f54e48cf" prot="private" virt="non-virtual"><scope>fc::thread</scope><name>detail::set_task_specific_data</name></member>
      <member refid="classfc_1_1thread_1a737283c321c71d9dbc8e18bdc2bffb21" prot="private" virt="non-virtual"><scope>fc::thread</scope><name>detail::set_thread_specific_data</name></member>
      <member refid="classfc_1_1thread_1afd70f2f42de863b7d962c77e36055968" prot="public" virt="non-virtual"><scope>fc::thread</scope><name>detail::worker_pool</name></member>
      <member refid="classfc_1_1thread_1a1c1697e990eb784da313e6efac363d0f" prot="private" virt="non-virtual"><scope>fc::thread</scope><name>exec</name></member>
      <member refid="classfc_1_1thread_1a1c1697e990eb784da313e6efac363d0f" prot="private" virt="non-virtual"><scope>fc::thread</scope><name>exec</name></member>
      <member refid="classfc_1_1thread_1a69849a1a9947518a72ad66956b0154b0" prot="public" virt="non-virtual"><scope>fc::thread</scope><name>is_current</name></member>
      <member refid="classfc_1_1thread_1a19fe3c355355148888a8698c6cc326d7" prot="public" virt="non-virtual"><scope>fc::thread</scope><name>is_running</name></member>
      <member refid="classfc_1_1thread_1a6f4535025b9df015e1a7d35f4e2bbee7" prot="private" virt="non-virtual"><scope>fc::thread</scope><name>mutex</name></member>
      <member refid="classfc_1_1thread_1afd478698d7da5a7da8f1f3e2db000d80" prot="private" virt="non-virtual"><scope>fc::thread</scope><name>my</name></member>
      <member refid="classfc_1_1thread_1a660ddc4775b1e67d4646f838e654929b" prot="public" virt="non-virtual"><scope>fc::thread</scope><name>name</name></member>
      <member refid="classfc_1_1thread_1ada3298fdbc9d7da3c04887e131062bfb" prot="private" virt="non-virtual"><scope>fc::thread</scope><name>non_preemptable_scope_check</name></member>
      <member refid="classfc_1_1thread_1a3cb29251b75caec24328e14bcd4fc0a4" prot="private" virt="non-virtual"><scope>fc::thread</scope><name>notify</name></member>
      <member refid="classfc_1_1thread_1a2c8d4de183cc21699a70afda0f95cc28" prot="private" virt="non-virtual"><scope>fc::thread</scope><name>notify_task_has_been_canceled</name></member>
      <member refid="classfc_1_1thread_1ac1cda1aeac47261bc10fa47227b0db6b" prot="public" virt="non-virtual"><scope>fc::thread</scope><name>operator=</name></member>
      <member refid="classfc_1_1thread_1a078342ffb2e8eeaaaf3279d70bb5dc88" prot="public" virt="non-virtual"><scope>fc::thread</scope><name>poke</name></member>
      <member refid="classfc_1_1thread_1a8dbbde064e87d4f173c888a978c5673d" prot="private" virt="non-virtual"><scope>fc::thread</scope><name>promise_base</name></member>
      <member refid="classfc_1_1thread_1a8448974169e17982207bf701e25d3c6b" prot="public" virt="non-virtual"><scope>fc::thread</scope><name>quit</name></member>
      <member refid="classfc_1_1thread_1a88fec428662bea5940f6772aa341340c" prot="public" virt="non-virtual"><scope>fc::thread</scope><name>schedule</name></member>
      <member refid="classfc_1_1thread_1a508504e749a3d0321bd4ea502b694507" prot="public" virt="non-virtual"><scope>fc::thread</scope><name>set_name</name></member>
      <member refid="classfc_1_1thread_1a3c58725daa689dc1f27732172ee4ce60" prot="public" virt="non-virtual"><scope>fc::thread</scope><name>signal</name></member>
      <member refid="classfc_1_1thread_1aabc626280163bf361476b53a3c52fae8" prot="private" virt="non-virtual"><scope>fc::thread</scope><name>sleep_until</name></member>
      <member refid="classfc_1_1thread_1af2da8c07b27f49f3d6b88966f6c5c754" prot="private" virt="non-virtual"><scope>fc::thread</scope><name>sleep_until</name></member>
      <member refid="classfc_1_1thread_1abbec2410b52ff3b0ae383de5cbe7bd99" prot="private" virt="non-virtual"><scope>fc::thread</scope><name>task_base</name></member>
      <member refid="classfc_1_1thread_1a1c833219c9a76553f5e13c915da736b9" prot="public" virt="non-virtual"><scope>fc::thread</scope><name>thread</name></member>
      <member refid="classfc_1_1thread_1a01a8d18b207df6efb6e34f37981707d7" prot="public" virt="non-virtual"><scope>fc::thread</scope><name>thread</name></member>
      <member refid="classfc_1_1thread_1a364cf7894d1220cb0a149704dd6ad010" prot="private" virt="non-virtual"><scope>fc::thread</scope><name>thread</name></member>
      <member refid="classfc_1_1thread_1adf6b3bf455e0a61e7d995a5fdd4b70fb" prot="private" virt="non-virtual"><scope>fc::thread</scope><name>thread_d</name></member>
      <member refid="classfc_1_1thread_1a63ec000baaf60f877f967529beca537d" prot="private" virt="non-virtual"><scope>fc::thread</scope><name>unblock</name></member>
      <member refid="classfc_1_1thread_1a373416824c0ce69109a66cab75ed8b58" prot="private" virt="non-virtual"><scope>fc::thread</scope><name>usleep</name></member>
      <member refid="classfc_1_1thread_1a6bd3eb18f213b661380a46417be69ccd" prot="public" virt="non-virtual"><scope>fc::thread</scope><name>wait_any</name></member>
      <member refid="classfc_1_1thread_1ae70e5eef71c6b5c481841735c3f38e3e" prot="private" virt="non-virtual"><scope>fc::thread</scope><name>wait_any</name></member>
      <member refid="classfc_1_1thread_1a99af97d17539f4d461e53f55fe659f0a" prot="private" virt="non-virtual"><scope>fc::thread</scope><name>wait_any_until</name></member>
      <member refid="classfc_1_1thread_1a44ed5bb67cc558e49b4a51a305d3858e" prot="private" virt="non-virtual"><scope>fc::thread</scope><name>wait_any_until</name></member>
      <member refid="classfc_1_1thread_1a091448aaafef646dc9542e7ea5228daf" prot="private" virt="non-virtual"><scope>fc::thread</scope><name>wait_until</name></member>
      <member refid="classfc_1_1thread_1a58c8b2ad0ea491a6642e5e1cbd358c89" prot="private" virt="non-virtual"><scope>fc::thread</scope><name>yield</name></member>
      <member refid="classfc_1_1thread_1adb1267fef4ed5208981e0d61be27828e" prot="private" virt="non-virtual"><scope>fc::thread</scope><name>yield</name></member>
      <member refid="classfc_1_1thread_1af3d2588beda9af16c03b193e9452ff64" prot="public" virt="non-virtual"><scope>fc::thread</scope><name>~thread</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
