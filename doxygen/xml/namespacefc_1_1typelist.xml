<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespacefc_1_1typelist" kind="namespace" language="C++">
    <compoundname>fc::typelist</compoundname>
    <innerclass refid="structfc_1_1typelist_1_1builder" prot="public">fc::typelist::builder</innerclass>
    <innerclass refid="structfc_1_1typelist_1_1invert__filter" prot="public">fc::typelist::invert_filter</innerclass>
    <innerclass refid="structfc_1_1typelist_1_1list" prot="public">fc::typelist::list</innerclass>
    <innernamespace refid="namespacefc_1_1typelist_1_1impl">fc::typelist::impl</innernamespace>
    <innernamespace refid="namespacefc_1_1typelist_1_1runtime">fc::typelist::runtime</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacefc_1_1typelist_1a90fa70e36f0b2634bba25408f40a0d16" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename List</type>
          </param>
          <param>
            <type>template&lt; typename... &gt; class</type>
            <declname>Delegate</declname>
            <defname>Delegate</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structfc_1_1typelist_1_1impl_1_1apply" kindref="compound">impl::apply</ref>&lt; List, Delegate &gt;::type</type>
        <definition>using fc::typelist::apply = typedef typename impl::apply&lt;List, Delegate&gt;::type</definition>
        <argsstring></argsstring>
        <name>apply</name>
        <briefdescription>
<para>Apply a list of types as arguments to another template. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/reflect/typelist.hpp" line="142" column="1" bodyfile="libraries/fc/include/fc/reflect/typelist.hpp" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefc_1_1typelist_1ad6cff0cd8c45c506a34052f254f40d13" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Lists</declname>
            <defname>Lists</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structfc_1_1typelist_1_1impl_1_1concat" kindref="compound">impl::concat</ref>&lt; Lists... &gt;::type</type>
        <definition>using fc::typelist::concat = typedef typename impl::concat&lt;Lists...&gt;::type</definition>
        <argsstring></argsstring>
        <name>concat</name>
        <briefdescription>
<para>Concatenate two or more typelists together. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/reflect/typelist.hpp" line="150" column="1" bodyfile="libraries/fc/include/fc/reflect/typelist.hpp" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefc_1_1typelist_1a321d10f917634a0e1df9edd21dc44aba" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>count</declname>
            <defname>count</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structfc_1_1typelist_1_1impl_1_1make__sequence" kindref="compound">impl::make_sequence</ref>&lt; count &gt;::type</type>
        <definition>using fc::typelist::make_sequence = typedef typename impl::make_sequence&lt;count&gt;::type</definition>
        <argsstring></argsstring>
        <name>make_sequence</name>
        <briefdescription>
<para>Create a list of sequential integers ranging from [0, count) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/reflect/typelist.hpp" line="154" column="1" bodyfile="libraries/fc/include/fc/reflect/typelist.hpp" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefc_1_1typelist_1a970b3620a2d0606bf5bd667e96beb7fd" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename List</type>
          </param>
          <param>
            <type>typename Transformer</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structfc_1_1typelist_1_1impl_1_1transform" kindref="compound">impl::transform</ref>&lt; List, Transformer &gt;::type</type>
        <definition>using fc::typelist::transform = typedef typename impl::transform&lt;List, Transformer&gt;::type</definition>
        <argsstring></argsstring>
        <name>transform</name>
        <briefdescription>
<para>Transform elements of a typelist. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/reflect/typelist.hpp" line="170" column="1" bodyfile="libraries/fc/include/fc/reflect/typelist.hpp" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefc_1_1typelist_1a811391fe452821488a39e86020430403" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>TypeLists</declname>
            <defname>TypeLists</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structfc_1_1typelist_1_1impl_1_1concat__unique" kindref="compound">impl::concat_unique</ref>&lt; <ref refid="structfc_1_1typelist_1_1list" kindref="compound">list</ref>&lt;&gt;, TypeLists... &gt;::type</type>
        <definition>using fc::typelist::concat_unique = typedef typename impl::concat_unique&lt;list&lt;&gt;, TypeLists...&gt;::type</definition>
        <argsstring></argsstring>
        <name>concat_unique</name>
        <briefdescription>
<para>Remove duplicate items from one or more typelists and concatenate them all together. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/reflect/typelist.hpp" line="182" column="1" bodyfile="libraries/fc/include/fc/reflect/typelist.hpp" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefc_1_1typelist_1aaa116e950fc09b22f6957ece3d18134c" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename List</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>index</declname>
            <defname>index</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structfc_1_1typelist_1_1impl_1_1at" kindref="compound">impl::at</ref>&lt; List, <ref refid="namespacefc_1_1typelist_1a72db6acd060613e962db7a950973097a" kindref="member">index</ref> &gt;::type</type>
        <definition>using fc::typelist::at = typedef typename impl::at&lt;List, index&gt;::type</definition>
        <argsstring></argsstring>
        <name>at</name>
        <briefdescription>
<para>Get the type at the specified list index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/reflect/typelist.hpp" line="186" column="1" bodyfile="libraries/fc/include/fc/reflect/typelist.hpp" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefc_1_1typelist_1a6257cef811f1ca5263e351d2a7f525fa" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename List</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacefc_1_1typelist_1aaa116e950fc09b22f6957ece3d18134c" kindref="member">at</ref>&lt; List, 0 &gt;</type>
        <definition>using fc::typelist::first = typedef at&lt;List, 0&gt;</definition>
        <argsstring></argsstring>
        <name>first</name>
        <briefdescription>
<para>Get the type at the beginning of the list. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/reflect/typelist.hpp" line="190" column="1" bodyfile="libraries/fc/include/fc/reflect/typelist.hpp" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefc_1_1typelist_1ae9ea8e8544899560d29484db593608f4" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename List</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacefc_1_1typelist_1aaa116e950fc09b22f6957ece3d18134c" kindref="member">at</ref>&lt; List, length&lt; List &gt;() -1 &gt;</type>
        <definition>using fc::typelist::last = typedef at&lt;List, length&lt;List&gt;()-1&gt;</definition>
        <argsstring></argsstring>
        <name>last</name>
        <briefdescription>
<para>Get the type at the end of the list. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/reflect/typelist.hpp" line="193" column="1" bodyfile="libraries/fc/include/fc/reflect/typelist.hpp" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefc_1_1typelist_1a3c532237b62e96c4efaad16daa2e0536" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename List</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>index</declname>
            <defname>index</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structfc_1_1typelist_1_1impl_1_1remove__at" kindref="compound">impl::remove_at</ref>&lt; <ref refid="structfc_1_1typelist_1_1list" kindref="compound">list</ref>&lt;&gt;, List, <ref refid="namespacefc_1_1typelist_1a72db6acd060613e962db7a950973097a" kindref="member">index</ref> &gt;::type</type>
        <definition>using fc::typelist::remove_at = typedef typename impl::remove_at&lt;list&lt;&gt;, List, index&gt;::type</definition>
        <argsstring></argsstring>
        <name>remove_at</name>
        <briefdescription>
<para>Get the list with the element at the given index removed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/reflect/typelist.hpp" line="197" column="1" bodyfile="libraries/fc/include/fc/reflect/typelist.hpp" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefc_1_1typelist_1adbb145d8e9bd2ecb4d4fc5d3a983fb19" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename List</type>
          </param>
          <param>
            <type>typename Remove</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacefc_1_1typelist_1a3c532237b62e96c4efaad16daa2e0536" kindref="member">remove_at</ref>&lt; List, index_of&lt; List, Remove &gt;()&gt;</type>
        <definition>using fc::typelist::remove_element = typedef remove_at&lt;List, index_of&lt;List, Remove&gt;()&gt;</definition>
        <argsstring></argsstring>
        <name>remove_element</name>
        <briefdescription>
<para>Get the list with the given type removed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/reflect/typelist.hpp" line="201" column="1" bodyfile="libraries/fc/include/fc/reflect/typelist.hpp" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefc_1_1typelist_1a2761dd7461ef9b790a7e2bbbf3e1f989" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename List</type>
          </param>
          <param>
            <type>template&lt; typename &gt; class</type>
            <declname>Filter</declname>
            <defname>Filter</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structfc_1_1typelist_1_1impl_1_1filter" kindref="compound">impl::filter</ref>&lt; Filter, <ref refid="structfc_1_1typelist_1_1list" kindref="compound">list</ref>&lt;&gt;, List &gt;::type</type>
        <definition>using fc::typelist::filter = typedef typename impl::filter&lt;Filter, list&lt;&gt;, List&gt;::type</definition>
        <argsstring></argsstring>
        <name>filter</name>
        <briefdescription>
<para>Get a list with all elements that do not pass a filter removed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/reflect/typelist.hpp" line="205" column="1" bodyfile="libraries/fc/include/fc/reflect/typelist.hpp" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefc_1_1typelist_1ad47d889257405c1c3ba4e3c7256b3ed7" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename List</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>start</declname>
            <defname>start</defname>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>end</declname>
            <defname>end</defname>
            <defval>length&lt;List&gt;()</defval>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structfc_1_1typelist_1_1impl_1_1slice" kindref="compound">impl::slice</ref>&lt; <ref refid="structfc_1_1typelist_1_1list" kindref="compound">list</ref>&lt;&gt;, List, start, end &gt;::type</type>
        <definition>using fc::typelist::slice = typedef typename impl::slice&lt;list&lt;&gt;, List, start, end&gt;::type</definition>
        <argsstring></argsstring>
        <name>slice</name>
        <briefdescription>
<para>Take the sublist at indexes [start, end) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/reflect/typelist.hpp" line="216" column="1" bodyfile="libraries/fc/include/fc/reflect/typelist.hpp" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefc_1_1typelist_1a2a80a05b65b05af17c7e684bf7054195" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename ListA</type>
          </param>
          <param>
            <type>typename ListB</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structfc_1_1typelist_1_1impl_1_1zip" kindref="compound">impl::zip</ref>&lt; ListA, ListB &gt;::type</type>
        <definition>using fc::typelist::zip = typedef typename impl::zip&lt;ListA, ListB&gt;::type</definition>
        <argsstring></argsstring>
        <name>zip</name>
        <briefdescription>
<para>Zip two equal-length typelists together, i.e. zip&lt;list&lt;X, Y&gt;, list&lt;A, B&gt;&gt; == list&lt;list&lt;X, A&gt;, list&lt;Y, B&gt;&gt; </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/reflect/typelist.hpp" line="220" column="1" bodyfile="libraries/fc/include/fc/reflect/typelist.hpp" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefc_1_1typelist_1a72db6acd060613e962db7a950973097a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename List</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structfc_1_1typelist_1_1impl_1_1zip" kindref="compound">impl::zip</ref>&lt; typename <ref refid="structfc_1_1typelist_1_1impl_1_1make__sequence" kindref="compound">impl::make_sequence</ref>&lt; length&lt; List &gt;()&gt;::type, List &gt;::type</type>
        <definition>using fc::typelist::index = typedef typename impl::zip&lt;typename impl::make_sequence&lt;length&lt;List&gt;()&gt;::type, List&gt;::type</definition>
        <argsstring></argsstring>
        <name>index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add indexes to types in the list, i.e. index&lt;list&lt;A, B, C&gt;&gt; == list&lt;list&lt;0, A&gt;, list&lt;1, B&gt;, list&lt;2, C&gt;&gt; where 0, 1, and 2 are std::integral_constants of type std::size_t </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/reflect/typelist.hpp" line="225" column="1" bodyfile="libraries/fc/include/fc/reflect/typelist.hpp" bodystart="225" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacefc_1_1typelist_1a7a47640ac65fa143e864d07d5585c0e0" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename List</type>
          </param>
        </templateparamlist>
        <type>constexpr static std::size_t</type>
        <definition>constexpr static std::size_t fc::typelist::length</definition>
        <argsstring>()</argsstring>
        <name>length</name>
        <briefdescription>
<para>Get the number of types in a list. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/reflect/typelist.hpp" line="146" column="30" bodyfile="libraries/fc/include/fc/reflect/typelist.hpp" bodystart="146" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1_1typelist_1ae31e7c467846996b5104cf1db88bc895" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename List</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr static int</type>
        <definition>constexpr static int fc::typelist::index_of</definition>
        <argsstring>()</argsstring>
        <name>index_of</name>
        <briefdescription>
<para>Get the index of the given type within a list, or -1 if type is not found. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/reflect/typelist.hpp" line="174" column="22" bodyfile="libraries/fc/include/fc/reflect/typelist.hpp" bodystart="174" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1_1typelist_1a2dcee2cee1ed683ca20800d28c61444e" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename List</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr static bool</type>
        <definition>constexpr static bool fc::typelist::contains</definition>
        <argsstring>()</argsstring>
        <name>contains</name>
        <briefdescription>
<para>Check if a given type is in a list. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/reflect/typelist.hpp" line="178" column="23" bodyfile="libraries/fc/include/fc/reflect/typelist.hpp" bodystart="178" bodyend="178"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This namespace contains the list type, and all of the operations and queries which can be performed upon it. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/fc/include/fc/reflect/typelist.hpp" line="14" column="18"/>
  </compounddef>
</doxygen>
